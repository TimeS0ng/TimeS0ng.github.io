<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TimeS0ng&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://TimeS0ng.github.io/"/>
  <updated>2017-08-31T01:58:39.000Z</updated>
  <id>http://TimeS0ng.github.io/</id>
  
  <author>
    <name>TimeS0ng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>信息收集— 僵尸扫描</title>
    <link href="http://TimeS0ng.github.io/2017/08/30/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E2%80%94%20%E5%83%B5%E5%B0%B8%E6%89%AB%E6%8F%8F/"/>
    <id>http://TimeS0ng.github.io/2017/08/30/信息收集— 僵尸扫描/</id>
    <published>2017-08-30T15:57:00.000Z</published>
    <updated>2017-08-31T01:58:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-信息收集简介"><a href="#0x00-信息收集简介" class="headerlink" title="0x00. 信息收集简介"></a><strong>0x00. 信息收集简介</strong></h2><h4 id="emsp-emsp-渗透测试中，信息收集是最重要的阶段，占据整个渗透测试的60-左右，根据收集到的信息可以有效提高我们渗透测试的成功率，可见高效的信息收集对我们是多么重要。僵尸扫描正是信息收集环节的端口扫描阶段，但是常见的端口扫描过程往往会在网络层被发现痕迹，导致没有达到预期的隐藏目的，僵尸扫描却能有效的隐藏自己的踪迹。"><a href="#emsp-emsp-渗透测试中，信息收集是最重要的阶段，占据整个渗透测试的60-左右，根据收集到的信息可以有效提高我们渗透测试的成功率，可见高效的信息收集对我们是多么重要。僵尸扫描正是信息收集环节的端口扫描阶段，但是常见的端口扫描过程往往会在网络层被发现痕迹，导致没有达到预期的隐藏目的，僵尸扫描却能有效的隐藏自己的踪迹。" class="headerlink" title="&emsp;&emsp;渗透测试中，信息收集是最重要的阶段，占据整个渗透测试的60%左右，根据收集到的信息可以有效提高我们渗透测试的成功率，可见高效的信息收集对我们是多么重要。僵尸扫描正是信息收集环节的端口扫描阶段，但是常见的端口扫描过程往往会在网络层被发现痕迹，导致没有达到预期的隐藏目的，僵尸扫描却能有效的隐藏自己的踪迹。"></a>&emsp;&emsp;渗透测试中，信息收集是最重要的阶段，占据整个渗透测试的60%左右，根据收集到的信息可以有效提高我们渗透测试的成功率，可见高效的信息收集对我们是多么重要。僵尸扫描正是信息收集环节的端口扫描阶段，但是常见的端口扫描过程往往会在网络层被发现痕迹，导致没有达到预期的隐藏目的，僵尸扫描却能有效的隐藏自己的踪迹。</h4><a id="more"></a>
<hr>
<h2 id="0x01-僵尸扫描介绍"><a href="#0x01-僵尸扫描介绍" class="headerlink" title="0x01. 僵尸扫描介绍"></a><strong>0x01. 僵尸扫描介绍</strong></h2><h3 id="emsp-emsp-往往鱼与熊掌不可得兼，僵尸扫描在隐藏踪迹的同时也有着其极其苛刻的使用条件。想要实施僵尸扫描必须具备下列两个必要条件"><a href="#emsp-emsp-往往鱼与熊掌不可得兼，僵尸扫描在隐藏踪迹的同时也有着其极其苛刻的使用条件。想要实施僵尸扫描必须具备下列两个必要条件" class="headerlink" title="&emsp;&emsp;往往鱼与熊掌不可得兼，僵尸扫描在隐藏踪迹的同时也有着其极其苛刻的使用条件。想要实施僵尸扫描必须具备下列两个必要条件"></a>&emsp;&emsp;往往鱼与熊掌不可得兼，僵尸扫描在隐藏踪迹的同时也有着其极其苛刻的使用条件。想要实施僵尸扫描必须具备下列两个必要条件</h3><h4 id="emsp-emsp-其一：有一台合格的僵尸机，所谓的僵尸机就是足够空闲，并且不和除了我们之外的任何其他机器进行网络通信的主机，这个主要取决于他的IPID的连续性（往往主流的操作系统的IPID都是随机产生的或全为0），后面会讲到。"><a href="#emsp-emsp-其一：有一台合格的僵尸机，所谓的僵尸机就是足够空闲，并且不和除了我们之外的任何其他机器进行网络通信的主机，这个主要取决于他的IPID的连续性（往往主流的操作系统的IPID都是随机产生的或全为0），后面会讲到。" class="headerlink" title="&emsp;&emsp;其一：有一台合格的僵尸机，所谓的僵尸机就是足够空闲，并且不和除了我们之外的任何其他机器进行网络通信的主机，这个主要取决于他的IPID的连续性（往往主流的操作系统的IPID都是随机产生的或全为0），后面会讲到。"></a>&emsp;&emsp;其一：有一台合格的僵尸机，所谓的僵尸机就是足够空闲，并且不和除了我们之外的任何其他机器进行网络通信的主机，这个主要取决于他的IPID的连续性（往往主流的操作系统的IPID都是随机产生的或全为0），后面会讲到。</h4><h4 id="emsp-emsp-其二：可伪造源IP地址，在某些网络设备中防火墙会限制伪造的源地址，导致扫描失败。"><a href="#emsp-emsp-其二：可伪造源IP地址，在某些网络设备中防火墙会限制伪造的源地址，导致扫描失败。" class="headerlink" title="&emsp;&emsp;其二：可伪造源IP地址，在某些网络设备中防火墙会限制伪造的源地址，导致扫描失败。"></a>&emsp;&emsp;其二：可伪造源IP地址，在某些网络设备中防火墙会限制伪造的源地址，导致扫描失败。</h4><hr>
<h2 id="0x02-僵尸扫描过程"><a href="#0x02-僵尸扫描过程" class="headerlink" title="0x02. 僵尸扫描过程"></a><strong>0x02. 僵尸扫描过程</strong></h2><p><img src="http://note.youdao.com/yws/public/resource/e55c97293d502f9ed0b9f032d920edbe/xmlnote/WEBRESOURCEb291547ca7a5e22852fd05ca2f2541ec/394" alt="image"></p>
<h3 id="如上图所示，该图清晰的像我们展示了僵尸扫描的全过程"><a href="#如上图所示，该图清晰的像我们展示了僵尸扫描的全过程" class="headerlink" title="如上图所示，该图清晰的像我们展示了僵尸扫描的全过程"></a>如上图所示，该图清晰的像我们展示了僵尸扫描的全过程</h3><h4 id="emsp-emsp-一-首先由本地主机-scanner-向僵尸机-zombie-发送一个SYN-ACK包，因为发送的数据包不是SYN包，所以zombie会觉得莫名奇妙居然会有人向我发送SYN-ACK包，于是zombie会原路返回一个RST包来中断连接，此时在RST包中便会带有zombie的IPID-假设此时的IPID-x。详细的tcp-ip通信过程点击这里"><a href="#emsp-emsp-一-首先由本地主机-scanner-向僵尸机-zombie-发送一个SYN-ACK包，因为发送的数据包不是SYN包，所以zombie会觉得莫名奇妙居然会有人向我发送SYN-ACK包，于是zombie会原路返回一个RST包来中断连接，此时在RST包中便会带有zombie的IPID-假设此时的IPID-x。详细的tcp-ip通信过程点击这里" class="headerlink" title="&emsp;&emsp;一.首先由本地主机(scanner)向僵尸机(zombie)发送一个SYN/ACK包，因为发送的数据包不是SYN包，所以zombie会觉得莫名奇妙居然会有人向我发送SYN/ACK包，于是zombie会原路返回一个RST包来中断连接，此时在RST包中便会带有zombie的IPID,假设此时的IPID=x。详细的tcp/ip通信过程点击这里"></a>&emsp;&emsp;一.首先由本地主机(scanner)向僵尸机(zombie)发送一个SYN/ACK包，因为发送的数据包不是SYN包，所以zombie会觉得莫名奇妙居然会有人向我发送SYN/ACK包，于是zombie会原路返回一个RST包来中断连接，此时在RST包中便会带有zombie的IPID,假设此时的IPID=x。详细的tcp/ip通信过程点击<a href="http://www.cnblogs.com/rootq/articles/1377355.html" target="_blank" rel="external">这里</a></h4><h4 id="emsp-emsp-二-紧接着又由本地主机-scanner-伪造源IP-SRC地址为zombie的IP，指定一个端口号并向目标主机-target-发送一个SYN包。收到SYN包后如果target端口开放-便会给源IP-SRC返回一个SYN-ACK包，此时由zombie收到该SYN-ACK包，此时便会同第一步一样，给target返回一个RST包，此时的IPID-x-1。如果端口未开放，target会直接给zombie返回一个RST包，zombie不做任何回应，IPID-x。"><a href="#emsp-emsp-二-紧接着又由本地主机-scanner-伪造源IP-SRC地址为zombie的IP，指定一个端口号并向目标主机-target-发送一个SYN包。收到SYN包后如果target端口开放-便会给源IP-SRC返回一个SYN-ACK包，此时由zombie收到该SYN-ACK包，此时便会同第一步一样，给target返回一个RST包，此时的IPID-x-1。如果端口未开放，target会直接给zombie返回一个RST包，zombie不做任何回应，IPID-x。" class="headerlink" title="&emsp;&emsp;二.紧接着又由本地主机(scanner)伪造源IP.SRC地址为zombie的IP，指定一个端口号并向目标主机(target)发送一个SYN包。收到SYN包后如果target端口开放,便会给源IP.SRC返回一个SYN/ACK包，此时由zombie收到该SYN/ACK包，此时便会同第一步一样，给target返回一个RST包，此时的IPID=x+1。如果端口未开放，target会直接给zombie返回一个RST包，zombie不做任何回应，IPID=x。"></a>&emsp;&emsp;二.紧接着又由本地主机(scanner)伪造源IP.SRC地址为zombie的IP，指定一个端口号并向目标主机(target)发送一个SYN包。收到SYN包后如果target端口开放,便会给源IP.SRC返回一个SYN/ACK包，此时由zombie收到该SYN/ACK包，此时便会同第一步一样，给target返回一个RST包，此时的IPID=x+1。如果端口未开放，target会直接给zombie返回一个RST包，zombie不做任何回应，IPID=x。</h4><h4 id="emsp-emsp-三-最后再由本地主机-scanner-给zombie发送一个SYN-ACK包，步骤和第一步一样，zombie返回一个RST包，但是此时的IPID和第一步有差别，我们便通过IPID所差的值判断target端口是否开放。如果此时的IPID-x-1则第二步时zombie没有发送任何数据包，于是可知target端口关闭；如果IPID-x-2则第二步时zombie发送了一个RST包，于是可知target端口开放。"><a href="#emsp-emsp-三-最后再由本地主机-scanner-给zombie发送一个SYN-ACK包，步骤和第一步一样，zombie返回一个RST包，但是此时的IPID和第一步有差别，我们便通过IPID所差的值判断target端口是否开放。如果此时的IPID-x-1则第二步时zombie没有发送任何数据包，于是可知target端口关闭；如果IPID-x-2则第二步时zombie发送了一个RST包，于是可知target端口开放。" class="headerlink" title="&emsp;&emsp;三. 最后再由本地主机(scanner)给zombie发送一个SYN/ACK包，步骤和第一步一样，zombie返回一个RST包，但是此时的IPID和第一步有差别，我们便通过IPID所差的值判断target端口是否开放。如果此时的IPID=x+1则第二步时zombie没有发送任何数据包，于是可知target端口关闭；如果IPID=x+2则第二步时zombie发送了一个RST包，于是可知target端口开放。"></a>&emsp;&emsp;三. 最后再由本地主机(scanner)给zombie发送一个SYN/ACK包，步骤和第一步一样，zombie返回一个RST包，但是此时的IPID和第一步有差别，我们便通过IPID所差的值判断target端口是否开放。如果此时的IPID=x+1则第二步时zombie没有发送任何数据包，于是可知target端口关闭；如果IPID=x+2则第二步时zombie发送了一个RST包，于是可知target端口开放。</h4><hr>
<h2 id="0x03-僵尸扫描实战篇"><a href="#0x03-僵尸扫描实战篇" class="headerlink" title="0x03. 僵尸扫描实战篇"></a><strong>0x03. 僵尸扫描实战篇</strong></h2><h4 id="emsp-emsp-看我写了这么多相信很多人都已经蒙圈了吧，理论有时后确实不容易理解，但是一旦理解了便会觉得just-soso-下面我直接给大家实战演习，看完实战篇再来看理论相信大家会获益匪浅"><a href="#emsp-emsp-看我写了这么多相信很多人都已经蒙圈了吧，理论有时后确实不容易理解，但是一旦理解了便会觉得just-soso-下面我直接给大家实战演习，看完实战篇再来看理论相信大家会获益匪浅" class="headerlink" title="&emsp;&emsp;看我写了这么多相信很多人都已经蒙圈了吧，理论有时后确实不容易理解，但是一旦理解了便会觉得just soso!下面我直接给大家实战演习，看完实战篇再来看理论相信大家会获益匪浅!"></a>&emsp;&emsp;看我写了这么多相信很多人都已经蒙圈了吧，理论有时后确实不容易理解，但是一旦理解了便会觉得just soso!下面我直接给大家实战演习，看完实战篇再来看理论相信大家会获益匪浅!</h4><h3 id="一：环境准备"><a href="#一：环境准备" class="headerlink" title="一：环境准备"></a>一：环境准备</h3><h4 id="emsp-emsp-扫描主机-Mac-ip-192-168-0-103"><a href="#emsp-emsp-扫描主机-Mac-ip-192-168-0-103" class="headerlink" title="&emsp;&emsp;扫描主机 Mac: { ip:192.168.0.103 }"></a>&emsp;&emsp;扫描主机 Mac: { ip:192.168.0.103 }</h4><h4 id="emsp-emsp-僵尸主机-xp-ip-192-168-0-107"><a href="#emsp-emsp-僵尸主机-xp-ip-192-168-0-107" class="headerlink" title="&emsp;&emsp;僵尸主机 xp: { ip:192.168.0.107 }"></a>&emsp;&emsp;僵尸主机 xp: { ip:192.168.0.107 }</h4><h4 id="emsp-emsp-目标主机-metasploitable2-ip-192-168-0-105"><a href="#emsp-emsp-目标主机-metasploitable2-ip-192-168-0-105" class="headerlink" title="&emsp;&emsp;目标主机 metasploitable2: { ip:192.168.0.105 }"></a>&emsp;&emsp;目标主机 metasploitable2: { ip:192.168.0.105 }</h4><h3 id="二-python2-7脚本"><a href="#二-python2-7脚本" class="headerlink" title="二: python2.7脚本"></a>二: python2.7脚本</h3><h4 id="emsp-emsp-其实nmap自带有僵尸扫描模块，但是我这里需要抓包给大家分析，所以自己写了个简单的python脚本-完整的脚本我放在云盘上-，用来发现僵尸机-zombie-和抓包分析，后面会直接演示如何用nmap进行僵尸机发现和利用。"><a href="#emsp-emsp-其实nmap自带有僵尸扫描模块，但是我这里需要抓包给大家分析，所以自己写了个简单的python脚本-完整的脚本我放在云盘上-，用来发现僵尸机-zombie-和抓包分析，后面会直接演示如何用nmap进行僵尸机发现和利用。" class="headerlink" title="&emsp;&emsp;其实nmap自带有僵尸扫描模块，但是我这里需要抓包给大家分析，所以自己写了个简单的python脚本(完整的脚本我放在云盘上)，用来发现僵尸机(zombie)和抓包分析，后面会直接演示如何用nmap进行僵尸机发现和利用。"></a>&emsp;&emsp;其实nmap自带有僵尸扫描模块，但是我这里需要抓包给大家分析，所以自己写了个简单的python脚本(完整的脚本我放在<a href="https://pan.baidu.com/s/1kUGwT6n" target="_blank" rel="external">云盘</a>上)，用来发现僵尸机(zombie)和抓包分析，后面会直接演示如何用nmap进行僵尸机发现和利用。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">zombies_scan</span><span class="params">(zombie_ip)</span>:</span></div><div class="line">	rep1 = sr1(IP(dst=zombie_ip)/TCP(flags=<span class="string">'SA'</span>),timeout=<span class="number">2</span>)</div><div class="line">	send(IP(dst=zombie_ip)/TCP(flags=<span class="string">'SA'</span>))</div><div class="line">	rep2 = sr1(IP(dst=zombie_ip)/TCP(flags=<span class="string">'SA'</span>),timeout=<span class="number">2</span>)</div><div class="line">	<span class="keyword">if</span> rep2[IP].id == (rep1[IP].id+<span class="number">2</span>):</div><div class="line">		<span class="keyword">print</span> <span class="string">"[*]"</span> + zombie_ip + <span class="string">" is Incremental!"</span></div><div class="line">		target_ip = raw_input(<span class="string">"input the target_ip :"</span>)</div><div class="line">		port_scan(target_ip, zombie_ip)</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		<span class="keyword">print</span> <span class="string">"[*]"</span> + zombie_ip + <span class="string">"is not Incremental!\n"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">port_scan</span><span class="params">(target_ip,zombie_ip)</span>:</span></div><div class="line">	<span class="keyword">print</span> <span class="string">"------begin to scan target_ip!-------"</span></div><div class="line">	<span class="keyword">for</span> port <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</div><div class="line">		<span class="keyword">try</span>:</div><div class="line">			start = sr1(IP(dst=zombie_ip)/TCP(flags=<span class="string">'SA'</span>,dport=port),timeout=<span class="number">2</span>)</div><div class="line">			send(IP(src=zombie_ip,dst=target_ip)/TCP(flags=<span class="string">'S'</span>,dport=port))</div><div class="line">			end = sr1(IP(dst=zombie_ip)/TCP(flags=<span class="string">'SA'</span>),timeout=<span class="number">2</span>)</div><div class="line">			<span class="keyword">if</span> end[IP].id == (start[IP].id + <span class="number">2</span>):</div><div class="line">				<span class="keyword">print</span> <span class="string">"[*]"</span> + target_ip + <span class="string">':'</span> + port + <span class="string">"is open"</span></div><div class="line">		<span class="keyword">except</span>:</div><div class="line">			<span class="keyword">pass</span></div></pre></td></tr></table></figure>
<h4 id="第一个函数用来发现僵尸机，利用了Scapy库构造数据包，原理就是上面所讲的向要探测的僵尸主机连续发送三个SYN-ACK包，通过判断IPID的值来确定是否是个好僵尸。"><a href="#第一个函数用来发现僵尸机，利用了Scapy库构造数据包，原理就是上面所讲的向要探测的僵尸主机连续发送三个SYN-ACK包，通过判断IPID的值来确定是否是个好僵尸。" class="headerlink" title="第一个函数用来发现僵尸机，利用了Scapy库构造数据包，原理就是上面所讲的向要探测的僵尸主机连续发送三个SYN/ACK包，通过判断IPID的值来确定是否是个好僵尸。"></a>第一个函数用来发现僵尸机，利用了<a href="http://www.secdev.org/projects/scapy/" target="_blank" rel="external">Scapy库</a>构造数据包，原理就是上面所讲的向要探测的僵尸主机连续发送三个SYN/ACK包，通过判断IPID的值来确定是否是个好僵尸。</h4><h4 id="第二个函数和第一个函数差不多，同样是利用Scapy库构造数据包，原理上面第二步有，就不再啰嗦了。下面我来演示一下操作。"><a href="#第二个函数和第一个函数差不多，同样是利用Scapy库构造数据包，原理上面第二步有，就不再啰嗦了。下面我来演示一下操作。" class="headerlink" title="第二个函数和第一个函数差不多，同样是利用Scapy库构造数据包，原理上面第二步有，就不再啰嗦了。下面我来演示一下操作。"></a>第二个函数和第一个函数差不多，同样是利用<a href="http://www.secdev.org/projects/scapy/" target="_blank" rel="external">Scapy库</a>构造数据包，原理上面第二步有，就不再啰嗦了。下面我来演示一下操作。</h4><h3 id="三-操作步骤"><a href="#三-操作步骤" class="headerlink" title="三: 操作步骤"></a>三: 操作步骤</h3><h4 id="emsp-emsp-1-首先调用第一个函数判断xp是否是僵尸机"><a href="#emsp-emsp-1-首先调用第一个函数判断xp是否是僵尸机" class="headerlink" title="&emsp;&emsp;1.首先调用第一个函数判断xp是否是僵尸机"></a>&emsp;&emsp;1.首先调用第一个函数判断xp是否是僵尸机</h4><p>&emsp;&emsp;<img src="http://note.youdao.com/yws/public/resource/598b9fdb09cf92d23340b57f089a6af0/xmlnote/3992697E69534B5FBED8277FC7B4DB75/543" alt="image"></p>
<h4 id="emsp-emsp-2-抓包看看第一个函数是不是像我们预想中的那样发包的"><a href="#emsp-emsp-2-抓包看看第一个函数是不是像我们预想中的那样发包的" class="headerlink" title="&emsp;&emsp;2. 抓包看看第一个函数是不是像我们预想中的那样发包的"></a>&emsp;&emsp;2. 抓包看看第一个函数是不是像我们预想中的那样发包的</h4><p><img src="http://note.youdao.com/yws/public/resource/b91afbaa2cf1fba312e9ad33db824b91/xmlnote/722D8CFBF8C5463D982D4D1C1D9CDA9F/553" alt="image"></p>
<h4 id="可以看到发送的数据包正像我们预期中的一样，先发一个SYN-ACK，再收到一个RST-重复三次，判断IPID，这时再来看看IPID如何呢！"><a href="#可以看到发送的数据包正像我们预期中的一样，先发一个SYN-ACK，再收到一个RST-重复三次，判断IPID，这时再来看看IPID如何呢！" class="headerlink" title="可以看到发送的数据包正像我们预期中的一样，先发一个SYN/ACK，再收到一个RST,重复三次，判断IPID，这时再来看看IPID如何呢！"></a>可以看到发送的数据包正像我们预期中的一样，先发一个SYN/ACK，再收到一个RST,重复三次，判断IPID，这时再来看看IPID如何呢！</h4><p><img src="http://note.youdao.com/yws/public/resource/bbdd4a1c56e95d7e7d7977fed3245de6/xmlnote/CC31FE826865413293736F858508266A/563" alt="image"></p>
<hr>
<p><img src="http://note.youdao.com/yws/public/resource/bbdd4a1c56e95d7e7d7977fed3245de6/xmlnote/BEDD4C00B4EE4D91BA8BE2E9440CBC87/565" alt="image"></p>
<hr>
<p><img src="http://note.youdao.com/yws/public/resource/bbdd4a1c56e95d7e7d7977fed3245de6/xmlnote/24FE722B2D4141C6ADB1CD8340A07ED2/567" alt="image"></p>
<hr>
<h4 id="emsp-emsp-3-已经可以确定xp就是一个好僵尸了，那么接下来便是利用第二个函数对它来进行端口扫描。因为利用zombie时中途会伪装IP，所以我在Wireshark中没有发现连续的包，所以这里就不截数据包的图了。第二个函数的思路很清晰，希望懂python的朋友好好看看。"><a href="#emsp-emsp-3-已经可以确定xp就是一个好僵尸了，那么接下来便是利用第二个函数对它来进行端口扫描。因为利用zombie时中途会伪装IP，所以我在Wireshark中没有发现连续的包，所以这里就不截数据包的图了。第二个函数的思路很清晰，希望懂python的朋友好好看看。" class="headerlink" title="&emsp;&emsp;3. 已经可以确定xp就是一个好僵尸了，那么接下来便是利用第二个函数对它来进行端口扫描。因为利用zombie时中途会伪装IP，所以我在Wireshark中没有发现连续的包，所以这里就不截数据包的图了。第二个函数的思路很清晰，希望懂python的朋友好好看看。"></a>&emsp;&emsp;3. 已经可以确定xp就是一个好僵尸了，那么接下来便是利用第二个函数对它来进行端口扫描。因为利用zombie时中途会伪装IP，所以我在Wireshark中没有发现连续的包，所以这里就不截数据包的图了。第二个函数的思路很清晰，希望懂python的朋友好好看看。</h4><hr>
<h2 id="0x04-nmap中的僵尸扫描"><a href="#0x04-nmap中的僵尸扫描" class="headerlink" title="0x04. nmap中的僵尸扫描"></a><strong>0x04. nmap中的僵尸扫描</strong></h2><h4 id="emsp-emsp-在介绍nmap之前笔者有一个问题想要探讨一下，就是既然有了nmap这个无敌强大的扫描工具的存在，那么为什么我们还要自己写脚本呢？这里仅仅是我个人的理解，不喜勿喷，笔者认为其实工具仅仅是为了让我们更方便的做一些想做的事情，或许直接调用一个工具再添加一两个参数选项就能超越我们几十上百行脚本，也更能出色的完成任务，但是理解工具工作的原理是否更重要呢！一味的使用别人的工具而不去发现工具工作的原理最后是否只是个工具小子，笔者不屑！"><a href="#emsp-emsp-在介绍nmap之前笔者有一个问题想要探讨一下，就是既然有了nmap这个无敌强大的扫描工具的存在，那么为什么我们还要自己写脚本呢？这里仅仅是我个人的理解，不喜勿喷，笔者认为其实工具仅仅是为了让我们更方便的做一些想做的事情，或许直接调用一个工具再添加一两个参数选项就能超越我们几十上百行脚本，也更能出色的完成任务，但是理解工具工作的原理是否更重要呢！一味的使用别人的工具而不去发现工具工作的原理最后是否只是个工具小子，笔者不屑！" class="headerlink" title="&emsp;&emsp;在介绍nmap之前笔者有一个问题想要探讨一下，就是既然有了nmap这个无敌强大的扫描工具的存在，那么为什么我们还要自己写脚本呢？这里仅仅是我个人的理解，不喜勿喷，笔者认为其实工具仅仅是为了让我们更方便的做一些想做的事情，或许直接调用一个工具再添加一两个参数选项就能超越我们几十上百行脚本，也更能出色的完成任务，但是理解工具工作的原理是否更重要呢！一味的使用别人的工具而不去发现工具工作的原理最后是否只是个工具小子，笔者不屑！"></a>&emsp;&emsp;在介绍nmap之前笔者有一个问题想要探讨一下，就是既然有了nmap这个无敌强大的扫描工具的存在，那么为什么我们还要自己写脚本呢？这里仅仅是我个人的理解，不喜勿喷，笔者认为其实工具仅仅是为了让我们更方便的做一些想做的事情，或许直接调用一个工具再添加一两个参数选项就能超越我们几十上百行脚本，也更能出色的完成任务，但是理解工具工作的原理是否更重要呢！一味的使用别人的工具而不去发现工具工作的原理最后是否只是个工具小子，笔者不屑！</h4><h3 id="emsp-emsp-一：nmap发现僵尸机"><a href="#emsp-emsp-一：nmap发现僵尸机" class="headerlink" title="&emsp;&emsp;一：nmap发现僵尸机"></a>&emsp;&emsp;一：nmap发现僵尸机</h3><p>&emsp;&emsp;&emsp;<img src="http://note.youdao.com/yws/public/resource/a1a885c4b6b69e213e8ad40885aa4fc2/xmlnote/DDF61F18AB7C4A4183EF9D2F64176A89/605" alt="image"></p>
<h3 id="emsp-emsp-二：nmap利用僵尸机进行端口扫描"><a href="#emsp-emsp-二：nmap利用僵尸机进行端口扫描" class="headerlink" title="&emsp;&emsp;二：nmap利用僵尸机进行端口扫描"></a>&emsp;&emsp;二：nmap利用僵尸机进行端口扫描</h3><p>&emsp;&emsp;&emsp;<img src="http://note.youdao.com/yws/public/resource/a1a885c4b6b69e213e8ad40885aa4fc2/xmlnote/C44E28D7AFBA4D729187D66E8492598E/613" alt="image"></p>
<hr>
<h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05. 总结"></a><strong>0x05. 总结</strong></h2><h4 id="emsp-emsp-虽然僵尸扫描的条件如此苛刻，但是原理just-soso！在某些情况下说不定它还能派上大的用场，免去很多不必要的麻烦，所谓技不压身，多学点知识技能对自己还是很有好处的-o-o"><a href="#emsp-emsp-虽然僵尸扫描的条件如此苛刻，但是原理just-soso！在某些情况下说不定它还能派上大的用场，免去很多不必要的麻烦，所谓技不压身，多学点知识技能对自己还是很有好处的-o-o" class="headerlink" title="&emsp;&emsp;虽然僵尸扫描的条件如此苛刻，但是原理just soso！在某些情况下说不定它还能派上大的用场，免去很多不必要的麻烦，所谓技不压身，多学点知识技能对自己还是很有好处的(o^^o)"></a>&emsp;&emsp;虽然僵尸扫描的条件如此苛刻，但是原理just soso！在某些情况下说不定它还能派上大的用场，免去很多不必要的麻烦，所谓技不压身，多学点知识技能对自己还是很有好处的(o^^o)</h4><hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-信息收集简介&quot;&gt;&lt;a href=&quot;#0x00-信息收集简介&quot; class=&quot;headerlink&quot; title=&quot;0x00. 信息收集简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;0x00. 信息收集简介&lt;/strong&gt;&lt;/h2&gt;&lt;h4 id=&quot;emsp-emsp-渗透测试中，信息收集是最重要的阶段，占据整个渗透测试的60-左右，根据收集到的信息可以有效提高我们渗透测试的成功率，可见高效的信息收集对我们是多么重要。僵尸扫描正是信息收集环节的端口扫描阶段，但是常见的端口扫描过程往往会在网络层被发现痕迹，导致没有达到预期的隐藏目的，僵尸扫描却能有效的隐藏自己的踪迹。&quot;&gt;&lt;a href=&quot;#emsp-emsp-渗透测试中，信息收集是最重要的阶段，占据整个渗透测试的60-左右，根据收集到的信息可以有效提高我们渗透测试的成功率，可见高效的信息收集对我们是多么重要。僵尸扫描正是信息收集环节的端口扫描阶段，但是常见的端口扫描过程往往会在网络层被发现痕迹，导致没有达到预期的隐藏目的，僵尸扫描却能有效的隐藏自己的踪迹。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;渗透测试中，信息收集是最重要的阶段，占据整个渗透测试的60%左右，根据收集到的信息可以有效提高我们渗透测试的成功率，可见高效的信息收集对我们是多么重要。僵尸扫描正是信息收集环节的端口扫描阶段，但是常见的端口扫描过程往往会在网络层被发现痕迹，导致没有达到预期的隐藏目的，僵尸扫描却能有效的隐藏自己的踪迹。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;渗透测试中，信息收集是最重要的阶段，占据整个渗透测试的60%左右，根据收集到的信息可以有效提高我们渗透测试的成功率，可见高效的信息收集对我们是多么重要。僵尸扫描正是信息收集环节的端口扫描阶段，但是常见的端口扫描过程往往会在网络层被发现痕迹，导致没有达到预期的隐藏目的，僵尸扫描却能有效的隐藏自己的踪迹。&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
